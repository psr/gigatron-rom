gcl0x
{-----------------------------------------------------------------------+
|                                                                       |
|       Apple-1 simulator for Gigatron TTL microcomputer                |
|                                                                       |
+-----------------------------------------------------------------------}

{
  Issues:

  XXX NMI/IRQ/RESET to wozmon (through vector) without going through main menu
  XXX Emulate ACI Apple Cassete Interface? C100R --> 4100 = RAM (still ok)
  XXX Normally we need RESET to get out of A1 BASIC. What can we do?
  XXX Another idea: interrupts to handle memory mapped DSP/KBD/..

  References:

  Apple-1 Operation Manual:
        http://apple1.chez.com/Apple1project/Docs/pdf/AppleI_Manual.pdf

  Apple BASIC Users Manual -- October 1976:
        https://archive.org/details/apple1_basic_manual

  Using The Woz Monitor:
        https://www.sbprojects.net/projects/apple1/wozmon.php

  Original MOS6502 source code for WozMon:
        https://github.com/jefftranter/6502/tree/master/asm/wozmon
        https://www.sbprojects.com/projects/apple1/wozmon.txt

  Eric Smit's disassembly of A1 BASIC:
        http://www.brouhaha.com/~eric/retrocomputing/apple/apple1/basic/

  Online Apple 1 Emulator (Hit [RESET] to enter WozMon):
        https://www.scullinsteel.com/apple1/

  Zero page usage:
        $30-$31         p
        $32-$33         _i
        $34-$3b         WozMon variables
        $3c-$3d         _j

  Memory map, with compressed video memory:
        +--------------------------+
        |3E-7F,81-FF FREE ZP+STACK!|
        |0100-01F9   VIDEO+SYSTEM  |
        |0200-0FFF   FREE RAM      |
        |1060-5DFF   SCREEN        | 78 scanlines = 11*7+1
        |5E00-5FFF   PIA EMULATION | Add entry points at D010-D013 = 5010-5013
        |E000-EFFF   A1 BASIC      | alias 6000-6FFF -> A1 BASIC
        |F060-FEFF   SCREEN        | alias 7000-7EFF -> 15 scanlines = 2*7+1
        |FF00-FFFF   APPLE1 ROM    |
        |                          |
        |C100R     LOADER MENU     |
        |E000R     BASIC COLD START|
        |E2B3R     BASIC WARM START|
        +--------------------------+
}

_i=$32          {2 bytes}
_j=$3c          {2 bytes}

{-----------------------------------------------------------------------+
|       Zero page data                                                  |
+-----------------------------------------------------------------------}

*=$44           ##_RESET        {Sensible default argument to disassembler}

{-----------------------------------------------------------------------+
|       ROM type check                                                  |
+-----------------------------------------------------------------------}

*=$200

\romType, \romTypeValue_ROMv4-  {Version check >= ROMv4, see Docs/GT1-files.txt}
[if<0 do _frameCount _vPCH:     {https://forum.gigatron.io/viewtopic.php?f=4&t=130}
      loop]

{-----------------------------------------------------------------------+
|       Initialize                                                      |
+-----------------------------------------------------------------------}

{ This code runs once and is then reused as the input buffer for wozmon }

$1ee p= {videoTable+119*2}      {First GCL variable at $30, later used as Pos}
[do
  $7e p.                        {Shared empty pixel line at $7e60}
  <p, 2- <p. if>=0loop]

$101 {videoTable+1} p= $60 p.   {Use offsets 96..255 for pixel data, not 0..159}

&_Apple1 _vLR=                  {Prepare transfer to main loop}
&_PRE_RESET                     {Start address for 6502 program}
[ret]                           {Jump to Main (the brackets avoid the automatic vLR patch)}

{-----------------------------------------------------------------------+
|       Disassembler                                                    |
+-----------------------------------------------------------------------}

{
        WRITTEN BY STEVE WOZNIAK & ALLEN BAUM
        AND PUBLISHED IN DOCTOR DOBBS JOURNAL
        SEPT 1976
}
                *=$400

_FORMAT=$40
_LENGTH=$41
_LMNEM=$42
_RMNEM=$43
_PCL=$44
_PCH=$45
_COUNT=$46

                #_JSR_          ##_DSMBL        { [Gigatron] Call disassembler as subroutine }
                #_JMP_          ##_GETLINE      { [Gigatron] Back to wozmon }

_DSMBL=*        #_LDAIM_        #11 {was $13}   { COUNT FOR 13 INSTR. DSMBLY }
                #_STAZ_         #_COUNT
_DSMBL2=*       #_JSR_          ##_INSTDS       { DISASSEMBLE AND DISPLAY INSTR. }
                #_JSR_          ##_PCADJ
                #_STAZ_         #_PCL           { UPDATE PCL,H TO NEXT INSTR. }
                #_STYZ_         #_PCH
                #_DECZ_         #_COUNT         { DONE FIRST 19 INSTR?. }
                #_BNE_          #@_DSMBL2       { * YES, LOOP. ELSE DSMBL 20TH. }
_INSTDS=*       #_JSR_          ##_PRPC         { PRINT PCL,H }
                #_LDAIX_        #_PCL           { GET OPCODE }
                #_TAY_
                #_LSRA_                         { EVEN/ODD TEST }
                #_BCC_          #@_IEVEN
                #_LSRA_                         { * TEST BIT 1 }
                #_BCS_          #@_ERR          { *  XXXXXX11 INSTR. INVALID. }
                #_CMPIM_        #$22
                #_BEQ_          #@_ERR          { *  10001001 INSTR. INVALID. }
                #_ANDIM_        #$7             { MASK 3 BITS FOR ADDRESS MODE & }
                #_ORAIM_        #$80            { *  ADD INDEXING OFFSET. }
_IEVEN=*        #_LSRA_                         { * LSB INTO CARRY FOR }
                #_TAX_                          { * LEFT/RIGHT TEST BELOW. }
                #_LDAAX_        ##_MODE1        { INDEX INTO ADDRESS MODE TABLE.}
                #_BCS_          #@_RTMODE       { IF CARRY SET USE LSD FOR }
                #_LSRA_                         { * PRINT FORMAT INDEX }
                #_LSRA_
                #_LSRA_                         { * IF CARRY CLEAR USE MSD. }
                #_LSRA_
_RTMODE=*       #_ANDIM_        #$F             { MASK FOR 4-BIT INDEX. }
                #_BNE_          #@_GETFMT       { $0 FOR INVALID OP CODES. }
_ERR=*          #_LDYIM_        #$80            { SUBSTITUTE $80 FOR INVALID OP, }
                #_LDAIM_        #$0             { SET PRINT FORMAT INDEX TO 0 }
_GETFMT=*       #_TAX_
                #_LDAAX_        ##_MODE2        { INDEX INTO PRINT FORMAT TABLE. }
                #_STAZ_         #_FORMAT        { SAVE FOR ADDRESS FIELD FORMAT. }
                #_ANDIM_        #$3             { MASK 2-BIT LENGTH. 0=1-BYTE }
                #_STAZ_         #_LENGTH        { *  1=2-BYTE, 2=3-BYTE. }
                #_TYA_                          { * OP CODE. }
                #_ANDIM_        #$8F            { MASK IT FOR 1XXX1010 TEST. }
                #_TAX_                          { SAVE IT. }
                #_TYA_                          { * OP CODE TO 'A' AGAIN. }
                #_LDYIM_        #$3
                #_CPXIM_        #$8A
                #_BEQ_          #@_MNNDX3
_MNNDX1=*       #_LSRA_
                #_BCC_          #@_MNNDX3       { FORM INDEX INTO MNEMONIC TABLE. }
                #_LSRA_
_MNNDX2=*       #_LSRA_                         { * 1XXX1010 -> 00101XXX }
                #_ORAIM_        #$20            { * XXXYYY01 -> 00111XXX }
                #_DEY_                          { * XXXYYY10 -> 00110XXX }
                #_BNE_          #@_MNNDX2       { * XXXYY100 -> 00100XXX }
                #_INY_                          { * XXXXX000 -> 000XXXXX }
_MNNDX3=*       #_DEY_
                #_BNE_          #@_MNNDX1
                #_PHA_                          { * SAVE MNEMONIC TABLE INDEX. }
_PROP=*         #_LDAIY_        #_PCL
                #_JSR_          ##_PRBYTE
                #_LDXIM_        #$1
_PROPBL=*       #_JSR_          ##_PRBL2
                #_CPYZ_         #_LENGTH        { PRINT INSTR (1 TO 3 BYTES) }
                #_INY_                          { IN A 12 CHARACTYER FIELD. }
                #_BCC_          #@_PROP
                #_LDXIM_        #$3             { CHAR COUNT FOR MNEMONIC PRINT. }
                #_CPYIM_        #$3
                #_BCC_          #@_PROPBL
                #_PLA_                          { RECOVER MNEMONIC INDEX. }
                #_TAY_
                #_LDAAY_        ##_MNEML
                #_STAZ_         #_LMNEM         { FETCH 3-CHAR MNEMONIC }
                #_LDAAY_        ##_MNEMR        { *  (PACKED IN TWO BYTES) }
                #_STAZ_         #_RMNEM
_PRMN1=*        #_LDAIM_        #$0
                #_LDYIM_        #$5
_PRMN2=*        #_ASLZ_         #_RMNEM
                #_ROLZ_         #_LMNEM         { SHIFT 5 BITS OF CHAR INTO 'A'. }
                #_ROLA_                         { * (CLEAR CARRY) }
                #_DEY_
                #_BNE_          #@_PRMN2
                #_ADCIM_        #$BF            { ADD '?' OFFSET. }
                #_JSR_          ##_CHAROUT      { OUTPUT A CHAR OR MNEMONIC }
                #_DEX_
                #_BNE_          #@_PRMN1
                #_JSR_          ##_PRBLNK       { OUTPUT 3 BLANKS. }
                #_LDXIM_        #$6             { COUNT FOR 6 PRINT FORMAT BITS. }
_PRADR1=*       #_CPXIM_        #$3
                #_BNE_          #@_PRADR3       { IF X=3 THEN PRINT ADDRESS VAL. }
                #_LDYZ_         #_LENGTH
                #_BEQ_          #@_PRADR3       { NO PRINT IF LENGTH=0. }
_PRADR2=*       #_LDAZ_         #_FORMAT
                #_CMPIM_        #$E8            { HANDLE REL ADDRESSING MODE }
                #_LDAIY_        #_PCL           { SPECIAL (PRINT TARGET ADDR) }
                #_BCS_          #@_RELADR       { * (NOT DISPLACEMENT) }
                #_JSR_          ##_PRBYTE       { OUTPUT 1- OR 2- BYTE ADDRESS. }
                #_DEY_                          { MORE SIGNIFICANT BYTE FIRST. }
                #_BNE_          #@_PRADR2
_PRADR3=*       #_ASLZ_         #_FORMAT        { TEST NEXT PRINT FORMAT BIT. }
                #_BCC_          #@_PRADR4       { IF 0, DONT PRINT }
                #_LDAAX_        ##_CHAR1_MINUS1 { CORRESPONDING CHAR. }
                #_JSR_          ##_CHAROUT      { OUTPUT 1 OR 2 CHARS. }
                #_LDAAX_        ##_CHAR2_MINUS1 { *   (IF CHAR FROM CHAR2 IS 0, }
                #_BEQ_          #@_PRADR4       { *     DON'T FRINT IT) }
                #_JSR_          ##_CHAROUT
_PRADR4=*       #_DEX_
                #_BNE_          #@_PRADR1
                #_RTS_                          { *RETURN IF DONE 6 FORMAT BITS. }
_RELADR=*       #_JSR_          ##_PCADJ3       { PCL,H + DISPL + 1 TO 'A','Y'. }
                #_TAX_
                #_INX_
                #_BNE_          #@_PRNTYX       { *    +1 TO 'X','Y'. }
                #_INY_
_PRNTYX=*       #_TYA_
_PRNTAX=*       #_JSR_          ##_PRBYTE       { PRINT TARGET ADDRESS OF BRANCH }
_PRNTX=*        #_TXA_                          { AND RETURN }
                #_JMP_          ##_PRBYTE
_PRPC=*         #_LDAIM_        #$8D
                #_JSR_          ##_CHAROUT      { OUTPUT CARRIAGE RETURN. }
                #_LDAZ_         #_PCH
                #_LDXZ_         #_PCL
                #_JSR_          ##_PRNTAX       { OUTPUT PCL,H }
                #_LDAIM_        #$AD
                #_JSR_          ##_CHAROUT      { OUTPUT '-' }
_PRBLNK=*       #_LDXIM_        #$1             { BLANK COUNT [Gigatron] Was: #$3 }
_PRBL2=*        #_LDAIM_        #$A0
_PRBL3=*        #_JSR_          ##_CHAROUT      { OUTPUT A BLANK }
                #_DEX_
                #_BNE_          #@_PRBL2        { LOOP UNTIL COUNT =0 }
                #_RTS_
_PCADJ=*        #_LDAZ_         #_LENGTH        { 0=1-BYTE, 1=2-BYTE, 2=3-BYTE. }
_PCADJ2=*       #_SEC_
_PCADJ3=*       #_LDYZ_         #_PCH
                #_TAX_                          { * TEST DISPL SIGN (FOR REL }
                #_BPL_          #@_PCADJ4       { *   BRANCH). EXTEND NEG }
                #_DEY_                          { *   BY DECREMENTING PCH. }
_PCADJ4=*       #_ADCZ_         #_PCL
                *=$500                          { [Gigatron] Open next GT1 file segment }
                #_BCC_          #@_RTS1         { PCL+LENGTH (OR DISPL) +1 TO A. }
                #_INY_                          { *  CARRY INTO Y (PCH) }
_RTS1=*         #_RTS_

_MODE1=*        #$40 #$2  #$45 #$3
                #$D0 #$8  #$40 #$9
                #$30                            { XXXXXXZ0 INSTRS.. }
                #$22
                #$45                            { *  Z=0, LEFT HALF-BYTE }
                #$33                            { *  Z=1, RIGHT HALF-BYTE }
                #$D0 #$8  #$40 #$9
                #$40 #$2  #$45 #$33
                #$D0 #$8  #$40 #$9
                #$40 #$2  #$45 #$B3
                #$D0 #$8  #$40 #$9
                #$0  #$22 #$44 #$33
                #$D0 #$8C #$44 #$0
                #$11 #$22 #$44 #$33
                #$D0 #$8C #$44 #$9A
                #$10 #$22 #$44 #$33
                #$D0 #$8  #$40 #$9
                #$10 #$22 #$44 #$33
                #$D0 #$8  #$40 #$9
                #$62
                #$13                            { YYXXXZ01 INSTRS. }
                #$78
                #$A9

_MODE2=*        #$0                             { ERR }
                #$21                            { IMM }
                #$81                            { Z-PAG }
                #$82                            { ABS }
                #$0                             { IMPL }
                #$0                             { ACC }
                #$59                            { (Z-PAG,X) }
                #$4D                            { (Z-PAG),Y }
                #$91                            { Z-PAG,X }
                #$92                            { ABS,X }
                #$86                            { ABS,Y }
                #$4A                            { (ABS) }
                #$85                            { Z-PAG,Y }
_CHAR1_MINUS1=* #$9D                            { REL }

_CHAR1=*        #$AC                            { ',' }
                #$A9                            { ')' }
                #$AC                            { ',' }
                #$A3                            { '#' }
                #$A8                            { '(' }
_CHAR2_MINUS1=* #$A4                            { '$' }

_CHAR2=*        #$D9                            { 'Y' }
                #$0
                #$D8                            { 'X' }
                #$A4                            { '$' }
                #$A4                            { '$' }
                #$0

_MNEML=*        #$1C #$8A #$1C #$23             { XXXXX000 INSTRS. }
                #$5D #$8B #$1B #$A1
                #$9D #$8A #$1D #$23
                #$9D #$8B #$1D #$A1
                #$0  #$29 #$19 #$AE
                #$69 #$A8 #$19 #$23
                #$24 #$53 #$1B #$23
                #$24 #$53 #$19 #$A1
                #$0  #$1A #$5B #$5B             { XXXYY100 INSTRS. }
                #$A5 #$69 #$24 #$24
                #$AE #$AE #$A8 #$AD             { 1XXX1010 INSTRS. }
                #$29 #$0  #$7C #$0
                #$15 #$9C #$6D #$9C             { XXXYYY10 INSTRS. }
                #$A5 #$69 #$29 #$53
                #$84 #$13 #$34 #$11             { XXXYYY01 INSTRS. }
                #$A5 #$69 #$23 #$A0

_MNEMR=*        #$D8 #$62 #$5A #$48             { XXXXX000 INSTRS }
                #$26 #$62 #$94 #$88
                #$54 #$44 #$C8 #$54
                #$68 #$44 #$E8 #$94
                #$0  #$B4 #$8  #$84
                #$74 #$B4 #$28 #$6E
                #$74 #$F4 #$CC #$4A
                #$72 #$F2 #$A4 #$8A
                #$0  #$AA #$A2 #$A2             { XXXYY100 INSTRS }
                #$74 #$74 #$74 #$72
                #$44 #$68 #$B2 #$32             { 1XXX1010 INSTRS. }
                #$B2 #$0  #$22 #$26
                #$1A #$1A #$26 #$26             { XXXYYY10 INSTRS. }
                #$72 #$72 #$88 #$C8
                #$C4 #$CA #$26 #$48             { XXXYYY01 INSTRS. }
                #$44 #$44 #$A2 #$C8


{-----------------------------------------------------------------------+
|       Startup message                                                 |
+-----------------------------------------------------------------------}

*=$5e00

_PRE_RESET=*
                {Set visible pixel lines in video table}
                #_CLC_
                #_LDXIM_ #0
                #_LDYIM_ #12
_L1=*           #_LDAAY_ ##_ROWS
                #_STYZ_  #\YSAV
                #_LDYIM_ #7
_L2=*           #_STAAX_ ##\videoTable
                #_ADCIM_ #1
                #_INX_
                #_INX_
                #_DEY_
                #_BNE_   #@_L2
                #_INX_
                #_INX_
                #_INX_
                #_INX_
                #_LDYZ_  #\YSAV
                #_DEY_
                #_BPL_   #@_L1

                {Initialize terminal through "ACI"}
                #_JMP_   ##_MENU

_ROWS=*         { Page of each row's first pixel line, backwards }
                #$70 #$56 #$4f #$48 #$41 #$3a #$33 #$2c #$25 #$1e #$17 #$10 #$77 #$70

*=$5f00

{-----------------------------------------------------------------------+
|       WAITKEY                                                         |
+-----------------------------------------------------------------------}

{
  Wait for next key press and return ASCII result
  Display a blinking cursor while waiting
}

_WAITKEY=*      #_LDAZ_  #_serialRaw
_WAITKEY1=*     #_TAX_                  {Reference state before change}
_WAITKEY2=*     #_LDAZ_  #_serialRaw
                #_CMPZ_  #_v6502_X      {Keyboard state changed? v6502's X is in memory...}
                #_BNE_   #@_WAITKEY4

                #_LDAZ_  #_frameCount   {No change: handle cursor and time}
                #_ANDIM_ #$0f
                #_BNE_   #@_WAITKEY2    {4 Hz cursor redraw rate}

                #_LDAZ_  #_frameCount   {Select space or cursor symbol}
                #_ANDIM_ #$30           {Flash at 1 Hz with 75% duty cycle}
                #_BNE_   #@_WAITKEY3
                #_LDAIM_ #$a0           {Space}
                #_BIT_
_WAITKEY3=*     #_LDAIM_ #$c0           {`@'}
                #_BRK_                  {Display cursor}
                #_JSR_   ##_GOBACK      {Move back}

                #_JMP_   ##_WAITKEY2

_WAITKEY4=*     #_CMPIM_ #255           {Ignore key release}
                #_BEQ_   #@_WAITKEY1

                #_PHA_
                #_LDAIM_ #$a0           {Overwrite cursor symbol with a space}
                #_BRK_
                #_JSR_   ##_GOBACK      {Move back}
                #_PLA_

                #_CMPIM_ #$60           {Lower case?}
                #_BCC_   #@_MAPKEYCODE1
                #_SBCIM_ #$20           {Map to upper case, DEL becomes rubout}
_MAPKEYCODE1=*  #_CMPIM_ #10
                #_BNE_   #@_MAPKEYCODE2
                #_LDAIM_ #13            {LF becomes CR}
_MAPKEYCODE2=*  #_ORAIM_ #$80           {B7 should be '1'}
                #_RTS_

_GOBACK=*       #_LDAZ_  #<p            {Go back}
                #_SEC_
                #_SBCIM_ #6
                #_STAZ_  #<p
                #_RTS_

{-----------------------------------------------------------------------+
|       Main vCPU loop                                                  |
+-----------------------------------------------------------------------}

_Apple1=*

{ Main loop from the perspective of the Gigatron I/O system }

_v6502_PC=                      {Reset v6502 PC}
[do
  \SYS_Run6502_v4_80 _sysFn=
  80!!                          {Run 6502 code until BRK}
  push                          {Save v6502 PC}

{-----------------------------------------------------------------------+
|       Character output with automatic scrolling                       |
+-----------------------------------------------------------------------}

  {Minimalistic terminal output, with bit 7 set by WozMon}

  %-2=                          {Park character in stack area}
  \SYS_VDrawBits_134 _sysFn=    {Prepare SYS calls}
  $3f00 _sysArgs0=              {White on black}

  %-2                           {Get character back}
  $8d^ [if<>0                   {Test for CR...}
    <p, 251- if>0 0]            {...or line wrap}
  [if=0

    {-------------------------------------------------------------------+
    |       Newline                                                     |
    +-------------------------------------------------------------------}

    \sysArgs2.                  {Zero bit pattern}

    { Find the top text row }
    $62 <p.                     {Go to start of line, nicely indent by 2 pixels}
    $9e+ _i=                    {i==$100: start of the video table}
    peek >p.                    {Go to what is now still the top text row}

    { Clear the text row }
    p 2- _sysArgs4=             {Set drawing position for clearing}
    [do
      134!!                     {SYS call to draw 8 pixels vertically}
      <_sysArgs4++              {Step 1 pixel right}
      \sysArgs4, if<>0loop]     {Loop until end of pixel line}

    { Scroll everything up by modifying the video indirection table }
    [do
      _i 18+ _j=                {j looks 9 entries ahead of i}
      peek \sysArgs0.           {Swap scanlines}
      _i, _j.
      \sysArgs0, _i.
      <_i++ <_i++               {Advance to next entry in video table}
      <_i, 216^ if<>0loop]      {Until all done}

    { The cleared text row has now bubbled down to the bottom }
  ]

  %-2 $a0-                      {WozMon sends ASCII with bit 7 set}
  [if>=0                        {If printable}

    {-------------------------------------------------------------------+
    |       DrawChar                                                    |
    +-------------------------------------------------------------------}

    { Draw ASCII character (32..127) on screen in 5x8 pixels }
    { and advance cursor position }

    50-                         {Map ASCII code to offset in font table}
    [if<0 50+ _i= \font32up     {ASCII 32..81}
     else     _i= \font82up]    {ASCII 82..127}
    _j= _i 2<< _i+              {Multiply char code by 5}
    _j+ _j=                     {Add to page address to reach bitmap data}

    p _sysArgs4=                {Screen position for character}
    %-2=                        {Remember this position}
    6+ p=                       {Advance by 6 pixels}

    5 [do _i=                   {Draw character as 5 vertical bit slices}
      _j 0??                    {Get bit slice as byte from ROM table}
      $fe& \sysArgs2.           {Clear bottom pixel}
      134!!                     {SYS call to draw 8 pixels vertically}
      <_j++ <\sysArgs4++        {Advance to next byte}
      _i 1- if>0loop]           {Looping}

    %-2                         {Return position for backspace}
  ]

  pop                           {Restore v6502 PC}

  loop]                         {Back to wozmon}

{-----------------------------------------------------------------------+
|       Apple-1 Cassette Interface                                      |
+-----------------------------------------------------------------------}

*=$c100

                #_LDAIM_ #$aa
                #_BRK_
_MENU=*
                {Print welcome message}
                #_LDXIM_ #62
_L4=*           #_LDAAX_ ##_MSG
                #_BRK_
                #_DEX_
                #_BPL_   #@_L4
                #_JMP_   ##_RESET

_MSG=*
                { 'E000R BASIC\r' }
                #$8d #$c3 #$c9 #$d3 #$c1 #$c2 #$a0 #$d2
                #$b0 #$b0 #$b0 #$c5

                { '400R  Disassemble 44.45\r' }
                #$8d #$b5 #$b4 #$ae #$b4 #$b4 #$a0 #$e5
                #$ec #$e2 #$ed #$e5 #$f3 #$f3 #$e1 #$f3
                #$e9 #$c4 #$a0 #$a0 #$d2 #$b0 #$b0 #$b4

                { '200   Free\r' }
                #$8d #$e5 #$e5 #$f2 #$c6 #$a0 #$a0 #$a0
                #$b0 #$b0 #$b2

                { 'Apple-1 on TTL\r' }
                #$8d #$cc #$d4 #$d4 #$a0 #$ee #$ef #$a0
                #$b1 #$ad #$e5 #$ec #$f0 #$f0 #$c1

                { '\r' }
                #$8d

                {
                  Create message with:
                  s = 'Message text'
                  ' '.join('#$%02x'%(ord(c)+128) for c in reversed(s))
                }

{-----------------------------------------------------------------------+
|       A1 BASIC                                                        |
+-----------------------------------------------------------------------}

{ v v v v v v v v v v v v   Insert BASIC image here   v v v v v v v v v v v v }
{ Generated by: cd asm && ./make.sh }


*=$e000
 #$4c #$b0 #$e2 #$84 #$3a #$20 #$00 #$5f #$a4 #$3a #$ea #$60 #$8a #$29 #$20 #$f0
 #$23 #$a9 #$a0 #$85 #$e4 #$4c #$c9 #$e3 #$a9 #$20 #$c5 #$3e #$b0 #$0c #$a9 #$8d
 #$a0 #$07 #$20 #$c9 #$e3 #$a9 #$a0 #$88 #$d0 #$f8 #$a0 #$00 #$b1 #$e2 #$e6 #$e2
 #$d0 #$02 #$e6 #$e3 #$60 #$20 #$15 #$e7 #$20 #$76 #$e5 #$a5 #$e2 #$c5 #$e6 #$a5
 #$e3 #$e5 #$e7 #$b0 #$ef #$20 #$6d #$e0 #$4c #$3b #$e0 #$a5 #$ca #$85 #$e2 #$a5
 #$cb #$85 #$e3 #$a5 #$4c #$85 #$e6 #$a5 #$4d #$85 #$e7 #$d0 #$de #$20 #$15 #$e7
 #$20 #$6d #$e5 #$a5 #$e4 #$85 #$e2 #$a5 #$e5 #$85 #$e3 #$b0 #$c7 #$86 #$d8 #$a9
 #$a0 #$85 #$42 #$20 #$2a #$e0 #$98 #$85 #$e4 #$20 #$2a #$e0 #$aa #$20 #$2a #$e0
 #$20 #$1b #$e5 #$20 #$18 #$e0 #$84 #$42 #$aa #$10 #$18 #$0a #$10 #$e9 #$a5 #$e4
 #$d0 #$03 #$20 #$11 #$e0 #$8a #$20 #$c9 #$e3 #$a9 #$25 #$20 #$1a #$e0 #$aa #$30
 #$f5 #$85 #$e4 #$c9 #$01 #$d0 #$05 #$a6 #$d8 #$4c #$cd #$e3 #$48 #$84 #$ce #$a2
 #$ed #$86 #$cf #$c9 #$51 #$90 #$04 #$c6 #$cf #$e9 #$50 #$48 #$b1 #$ce #$aa #$88
 #$b1 #$ce #$10 #$fa #$e0 #$c0 #$b0 #$04 #$e0 #$00 #$30 #$f2 #$aa #$68 #$e9 #$01
 #$d0 #$e9 #$24 #$e4 #$30 #$03 #$20 #$f8 #$ef #$b1 #$ce #$10 #$10 #$aa #$29 #$3f
 #$85 #$e4 #$18 #$69 #$a0 #$20 #$c9 #$e3 #$88 #$e0 #$c0 #$90 #$ec #$20 #$0c #$e0
 #$68 #$c9 #$5d #$f0 #$a4 #$c9 #$28 #$d0 #$8a #$f0 #$9e #$20 #$18 #$e1 #$95 #$50

*=$e100
 #$d5 #$78 #$90 #$11 #$a0 #$2b #$4c #$e0 #$e3 #$20 #$34 #$ee #$d5 #$50 #$90 #$f4
 #$20 #$e4 #$ef #$95 #$78 #$4c #$23 #$e8 #$20 #$34 #$ee #$f0 #$e7 #$38 #$e9 #$01
 #$60 #$20 #$18 #$e1 #$95 #$50 #$18 #$f5 #$78 #$4c #$02 #$e1 #$a0 #$14 #$d0 #$d6
 #$20 #$18 #$e1 #$e8 #$b5 #$50 #$85 #$da #$65 #$ce #$48 #$a8 #$b5 #$78 #$85 #$db
 #$65 #$cf #$48 #$c4 #$ca #$e5 #$cb #$b0 #$e3 #$a5 #$da #$69 #$fe #$85 #$da #$a9
 #$ff #$a8 #$65 #$db #$85 #$db #$c8 #$b1 #$da #$d9 #$cc #$00 #$d0 #$0f #$98 #$f0
 #$f5 #$68 #$91 #$da #$99 #$cc #$00 #$88 #$10 #$f7 #$e8 #$60 #$ea #$a0 #$80 #$d0
 #$95 #$a9 #$00 #$20 #$0a #$e7 #$a0 #$02 #$94 #$78 #$20 #$0a #$e7 #$a9 #$bf #$20
 #$c9 #$e3 #$a0 #$00 #$20 #$9e #$e2 #$94 #$78 #$ea #$ea #$ea #$b5 #$51 #$85 #$ce
 #$b5 #$79 #$85 #$cf #$e8 #$e8 #$20 #$bc #$e1 #$b5 #$4e #$d5 #$76 #$b0 #$15 #$f6
 #$4e #$a8 #$b1 #$ce #$b4 #$50 #$c4 #$e4 #$90 #$04 #$a0 #$83 #$d0 #$c1 #$91 #$da
 #$f6 #$50 #$90 #$e5 #$b4 #$50 #$8a #$91 #$da #$e8 #$e8 #$60 #$b5 #$51 #$85 #$da
 #$38 #$e9 #$02 #$85 #$e4 #$b5 #$79 #$85 #$db #$e9 #$00 #$85 #$e5 #$a0 #$00 #$b1
 #$e4 #$18 #$e5 #$da #$85 #$e4 #$60 #$b5 #$53 #$85 #$ce #$b5 #$7b #$85 #$cf #$b5
 #$51 #$85 #$da #$b5 #$79 #$85 #$db #$e8 #$e8 #$e8 #$a0 #$00 #$94 #$78 #$94 #$a0
 #$c8 #$94 #$50 #$b5 #$4d #$d5 #$75 #$08 #$48 #$b5 #$4f #$d5 #$77 #$90 #$07 #$68

*=$e200
 #$28 #$b0 #$02 #$56 #$50 #$60 #$a8 #$b1 #$ce #$85 #$e4 #$68 #$a8 #$28 #$b0 #$f3
 #$b1 #$da #$c5 #$e4 #$d0 #$ed #$f6 #$4f #$f6 #$4d #$b0 #$d7 #$20 #$d7 #$e1 #$4c
 #$36 #$e7 #$20 #$54 #$e2 #$06 #$ce #$26 #$cf #$90 #$0d #$18 #$a5 #$e6 #$65 #$da
 #$85 #$e6 #$a5 #$e7 #$65 #$db #$85 #$e7 #$88 #$f0 #$09 #$06 #$e6 #$26 #$e7 #$10
 #$e4 #$4c #$7e #$e7 #$a5 #$e6 #$20 #$08 #$e7 #$a5 #$e7 #$95 #$a0 #$06 #$e5 #$90
 #$28 #$4c #$6f #$e7 #$a9 #$55 #$85 #$e5 #$20 #$5b #$e2 #$a5 #$ce #$85 #$da #$a5
 #$cf #$85 #$db #$20 #$15 #$e7 #$84 #$e6 #$84 #$e7 #$a5 #$cf #$10 #$09 #$ca #$06
 #$e5 #$20 #$6f #$e7 #$20 #$15 #$e7 #$a0 #$10 #$60 #$20 #$6c #$ee #$f0 #$c5 #$ff
 #$c9 #$84 #$d0 #$02 #$46 #$40 #$c9 #$df #$f0 #$11 #$c9 #$9b #$f0 #$06 #$99 #$00
 #$02 #$c8 #$10 #$0a #$a0 #$8b #$20 #$c4 #$e3 #$a0 #$01 #$88 #$30 #$f6 #$20 #$03
 #$e0 #$ea #$ea #$20 #$c9 #$e3 #$c9 #$8d #$d0 #$d6 #$a9 #$df #$99 #$00 #$02 #$60
 #$20 #$d3 #$ef #$20 #$cd #$e3 #$46 #$d9 #$a9 #$be #$20 #$c9 #$e3 #$a0 #$00 #$84
 #$42 #$24 #$40 #$10 #$0c #$a6 #$ec #$a5 #$ed #$20 #$1b #$e5 #$a9 #$a0 #$20 #$c9
 #$e3 #$a2 #$ff #$9a #$20 #$9e #$e2 #$84 #$3f #$8a #$85 #$c8 #$a2 #$20 #$20 #$91
 #$e4 #$a5 #$c8 #$69 #$00 #$85 #$e0 #$a9 #$00 #$aa #$69 #$02 #$85 #$e1 #$a1 #$e0
 #$29 #$f0 #$c9 #$b0 #$f0 #$03 #$4c #$83 #$e8 #$a0 #$02 #$b1 #$e0 #$99 #$cd #$00

*=$e300
 #$88 #$d0 #$f8 #$20 #$8a #$e3 #$a5 #$3f #$e5 #$c8 #$c9 #$04 #$f0 #$a8 #$91 #$e0
 #$a5 #$ca #$f1 #$e0 #$85 #$e4 #$a5 #$cb #$e9 #$00 #$85 #$e5 #$a5 #$e4 #$c5 #$cc
 #$a5 #$e5 #$e5 #$cd #$90 #$45 #$a5 #$ca #$f1 #$e0 #$85 #$e6 #$a5 #$cb #$e9 #$00
 #$85 #$e7 #$b1 #$ca #$91 #$e6 #$e6 #$ca #$d0 #$02 #$e6 #$cb #$a5 #$e2 #$c5 #$ca
 #$a5 #$e3 #$e5 #$cb #$b0 #$e0 #$b5 #$e4 #$95 #$ca #$ca #$10 #$f9 #$b1 #$e0 #$a8
 #$88 #$b1 #$e0 #$91 #$e6 #$98 #$d0 #$f8 #$24 #$40 #$10 #$09 #$b5 #$ed #$75 #$eb
 #$95 #$ed #$e8 #$f0 #$f7 #$10 #$7e #$00 #$00 #$00 #$00 #$a0 #$14 #$d0 #$71 #$20
 #$15 #$e7 #$a5 #$e2 #$85 #$e6 #$a5 #$e3 #$85 #$e7 #$20 #$75 #$e5 #$a5 #$e2 #$85
 #$e4 #$a5 #$e3 #$85 #$e5 #$d0 #$0e #$20 #$15 #$e7 #$20 #$6d #$e5 #$a5 #$e6 #$85
 #$e2 #$a5 #$e7 #$85 #$e3 #$a0 #$00 #$a5 #$ca #$c5 #$e4 #$a5 #$cb #$e5 #$e5 #$b0
 #$16 #$a5 #$e4 #$d0 #$02 #$c6 #$e5 #$c6 #$e4 #$a5 #$e6 #$d0 #$02 #$c6 #$e7 #$c6
 #$e6 #$b1 #$e4 #$91 #$e6 #$90 #$e0 #$a5 #$e6 #$85 #$ca #$a5 #$e7 #$85 #$cb #$60
 #$20 #$c9 #$e3 #$c8 #$b9 #$00 #$eb #$30 #$f7 #$c9 #$8d #$d0 #$06 #$a9 #$00 #$85
 #$3e #$a9 #$8d #$e6 #$3e #$48 #$09 #$80 #$20 #$ef #$ff #$68 #$ea #$60 #$a0 #$06
 #$20 #$d3 #$ee #$24 #$d9 #$30 #$03 #$4c #$b6 #$e2 #$4c #$9a #$eb #$2a #$69 #$a0
 #$dd #$00 #$02 #$d0 #$53 #$b1 #$46 #$0a #$30 #$06 #$88 #$b1 #$46 #$30 #$29 #$c8

*=$e400
 #$86 #$c8 #$98 #$48 #$a2 #$00 #$a1 #$46 #$aa #$4a #$49 #$48 #$11 #$46 #$c9 #$c0
 #$90 #$01 #$e8 #$c8 #$d0 #$f3 #$68 #$a8 #$8a #$4c #$c0 #$e4 #$e6 #$3f #$a6 #$3f
 #$f0 #$bc #$9d #$00 #$02 #$60 #$a6 #$c8 #$a9 #$a0 #$e8 #$dd #$00 #$02 #$b0 #$fa
 #$b1 #$46 #$29 #$3f #$4a #$d0 #$b6 #$bd #$00 #$02 #$b0 #$06 #$69 #$3f #$c9 #$1a
 #$90 #$6f #$69 #$4f #$c9 #$0a #$90 #$69 #$a6 #$45 #$c8 #$b1 #$46 #$29 #$e0 #$c9
 #$20 #$f0 #$7a #$b5 #$a8 #$85 #$c8 #$b5 #$d1 #$85 #$3f #$88 #$b1 #$46 #$0a #$10
 #$fa #$88 #$b0 #$38 #$0a #$30 #$35 #$b4 #$58 #$84 #$47 #$b4 #$80 #$e8 #$10 #$da
 #$f0 #$b3 #$c9 #$7e #$b0 #$22 #$ca #$10 #$04 #$a0 #$06 #$10 #$29 #$94 #$80 #$a4
 #$47 #$94 #$58 #$a4 #$c8 #$94 #$a8 #$a4 #$3f #$94 #$d1 #$29 #$1f #$a8 #$b9 #$20
 #$ec #$0a #$a8 #$a9 #$76 #$2a #$85 #$47 #$d0 #$01 #$c8 #$c8 #$86 #$45 #$b1 #$46
 #$30 #$84 #$d0 #$05 #$a0 #$0e #$4c #$e0 #$e3 #$c9 #$03 #$b0 #$c3 #$4a #$a6 #$c8
 #$e8 #$bd #$00 #$02 #$90 #$04 #$c9 #$a2 #$f0 #$0a #$c9 #$df #$f0 #$06 #$86 #$c8
 #$20 #$1c #$e4 #$c8 #$88 #$a6 #$45 #$b1 #$46 #$88 #$0a #$10 #$cf #$b4 #$58 #$84
 #$47 #$b4 #$80 #$e8 #$b1 #$46 #$29 #$9f #$d0 #$ed #$85 #$e8 #$85 #$e9 #$98 #$48
 #$86 #$45 #$b4 #$d0 #$84 #$c9 #$18 #$a9 #$0a #$85 #$41 #$a2 #$00 #$c8 #$b9 #$00
 #$02 #$29 #$0f #$65 #$e8 #$48 #$8a #$65 #$e9 #$30 #$1c #$aa #$68 #$c6 #$41 #$d0

*=$e500
 #$f2 #$85 #$e8 #$86 #$e9 #$c4 #$3f #$d0 #$de #$a4 #$c9 #$c8 #$84 #$3f #$20 #$1c
 #$e4 #$68 #$a8 #$a5 #$e9 #$b0 #$a9 #$a0 #$00 #$10 #$8b #$85 #$e9 #$86 #$e8 #$a2
 #$04 #$86 #$c9 #$a9 #$b0 #$85 #$41 #$a5 #$e8 #$dd #$63 #$e5 #$a5 #$e9 #$fd #$68
 #$e5 #$90 #$0d #$85 #$e9 #$a5 #$e8 #$fd #$63 #$e5 #$85 #$e8 #$e6 #$41 #$d0 #$e7
 #$a5 #$41 #$e8 #$ca #$f0 #$0e #$c9 #$b0 #$f0 #$02 #$85 #$c9 #$24 #$c9 #$30 #$04
 #$a5 #$42 #$f0 #$0b #$20 #$c9 #$e3 #$24 #$40 #$10 #$04 #$99 #$00 #$02 #$c8 #$ca
 #$10 #$c1 #$60 #$01 #$0a #$64 #$e8 #$10 #$00 #$00 #$00 #$03 #$27 #$a5 #$ca #$85
 #$e6 #$a5 #$cb #$85 #$e7 #$e8 #$a5 #$e7 #$85 #$e5 #$a5 #$e6 #$85 #$e4 #$c5 #$4c
 #$a5 #$e5 #$e5 #$4d #$b0 #$26 #$a0 #$01 #$b1 #$e4 #$e5 #$ce #$c8 #$b1 #$e4 #$e5
 #$cf #$b0 #$19 #$a0 #$00 #$a5 #$e6 #$71 #$e4 #$85 #$e6 #$90 #$03 #$e6 #$e7 #$18
 #$c8 #$a5 #$ce #$f1 #$e4 #$c8 #$a5 #$cf #$f1 #$e4 #$b0 #$ca #$60 #$46 #$40 #$a5
 #$4c #$85 #$ca #$a5 #$4d #$85 #$cb #$a5 #$4a #$85 #$cc #$a5 #$4b #$85 #$cd #$a9
 #$00 #$85 #$43 #$85 #$44 #$85 #$46 #$a9 #$00 #$85 #$1d #$60 #$a5 #$d0 #$69 #$05
 #$85 #$d2 #$a5 #$d1 #$69 #$00 #$85 #$d3 #$a5 #$d2 #$c5 #$ca #$a5 #$d3 #$e5 #$cb
 #$90 #$03 #$4c #$6b #$e3 #$a5 #$ce #$91 #$d0 #$a5 #$cf #$c8 #$91 #$d0 #$a5 #$d2
 #$c8 #$91 #$d0 #$a5 #$d3 #$c8 #$91 #$d0 #$a9 #$00 #$c8 #$91 #$d0 #$c8 #$91 #$d0

*=$e600
 #$a5 #$d2 #$85 #$cc #$a5 #$d3 #$85 #$cd #$a5 #$d0 #$90 #$43 #$85 #$ce #$84 #$cf
 #$20 #$ff #$e6 #$30 #$0e #$c9 #$40 #$f0 #$0a #$4c #$28 #$e6 #$06 #$c9 #$49 #$d0
 #$07 #$a9 #$49 #$85 #$cf #$20 #$ff #$e6 #$a5 #$4b #$85 #$d1 #$a5 #$4a #$85 #$d0
 #$c5 #$cc #$a5 #$d1 #$e5 #$cd #$b0 #$94 #$b1 #$d0 #$c8 #$c5 #$ce #$d0 #$06 #$b1
 #$d0 #$c5 #$cf #$f0 #$0e #$c8 #$b1 #$d0 #$48 #$c8 #$b1 #$d0 #$85 #$d1 #$68 #$a0
 #$00 #$f0 #$db #$a5 #$d0 #$69 #$03 #$20 #$0a #$e7 #$a5 #$d1 #$69 #$00 #$95 #$78
 #$a5 #$cf #$c9 #$40 #$d0 #$1c #$88 #$98 #$20 #$0a #$e7 #$88 #$94 #$78 #$a0 #$03
 #$f6 #$78 #$c8 #$b1 #$d0 #$30 #$f9 #$10 #$09 #$a9 #$00 #$85 #$d4 #$85 #$d5 #$a2
 #$20 #$48 #$a0 #$00 #$b1 #$e0 #$10 #$18 #$0a #$30 #$81 #$20 #$ff #$e6 #$20 #$08
 #$e7 #$20 #$ff #$e6 #$95 #$a0 #$24 #$d4 #$10 #$01 #$ca #$20 #$ff #$e6 #$b0 #$e6
 #$c9 #$28 #$d0 #$1f #$a5 #$e0 #$20 #$0a #$e7 #$a5 #$e1 #$95 #$78 #$24 #$d4 #$30
 #$0b #$a9 #$01 #$20 #$0a #$e7 #$a9 #$00 #$95 #$78 #$f6 #$78 #$20 #$ff #$e6 #$30
 #$f9 #$b0 #$d3 #$24 #$d4 #$10 #$06 #$c9 #$04 #$b0 #$d0 #$46 #$d4 #$a8 #$85 #$d6
 #$b9 #$98 #$e9 #$29 #$55 #$0a #$85 #$d7 #$68 #$a8 #$b9 #$98 #$e9 #$29 #$aa #$c5
 #$d7 #$b0 #$09 #$98 #$48 #$20 #$ff #$e6 #$a5 #$d6 #$90 #$95 #$b9 #$10 #$ea #$85
 #$ce #$b9 #$88 #$ea #$85 #$cf #$20 #$fc #$e6 #$4c #$d8 #$e6 #$6c #$ce #$00 #$e6

*=$e700
 #$e0 #$d0 #$02 #$e6 #$e1 #$b1 #$e0 #$60 #$94 #$77 #$ca #$30 #$03 #$95 #$50 #$60
 #$a0 #$66 #$4c #$e0 #$e3 #$a0 #$00 #$b5 #$50 #$85 #$ce #$b5 #$a0 #$85 #$cf #$b5
 #$78 #$f0 #$0e #$85 #$cf #$b1 #$ce #$48 #$c8 #$b1 #$ce #$85 #$cf #$68 #$85 #$ce
 #$88 #$e8 #$60 #$20 #$4a #$e7 #$20 #$15 #$e7 #$98 #$20 #$08 #$e7 #$95 #$a0 #$c5
 #$ce #$d0 #$06 #$c5 #$cf #$d0 #$02 #$f6 #$50 #$60 #$20 #$82 #$e7 #$20 #$59 #$e7
 #$20 #$15 #$e7 #$24 #$cf #$30 #$1b #$ca #$60 #$20 #$15 #$e7 #$a5 #$cf #$d0 #$04
 #$a5 #$ce #$f0 #$f3 #$a9 #$ff #$20 #$08 #$e7 #$95 #$a0 #$24 #$cf #$30 #$e9 #$20
 #$15 #$e7 #$98 #$38 #$e5 #$ce #$20 #$08 #$e7 #$98 #$e5 #$cf #$50 #$23 #$a0 #$00
 #$10 #$90 #$20 #$6f #$e7 #$20 #$15 #$e7 #$a5 #$ce #$85 #$da #$a5 #$cf #$85 #$db
 #$20 #$15 #$e7 #$18 #$a5 #$ce #$65 #$da #$20 #$08 #$e7 #$a5 #$cf #$65 #$db #$70
 #$dd #$95 #$a0 #$60 #$20 #$15 #$e7 #$a4 #$ce #$f0 #$05 #$88 #$a5 #$cf #$f0 #$0c
 #$60 #$a5 #$3e #$09 #$07 #$a8 #$c8 #$a9 #$a0 #$20 #$c9 #$e3 #$c4 #$3e #$b0 #$f7
 #$60 #$20 #$b1 #$e7 #$20 #$15 #$e7 #$a5 #$cf #$10 #$0a #$a9 #$ad #$20 #$c9 #$e3
 #$20 #$72 #$e7 #$50 #$ef #$88 #$84 #$d5 #$86 #$cf #$a6 #$ce #$20 #$1b #$e5 #$a6
 #$cf #$60 #$20 #$15 #$e7 #$a5 #$ce #$85 #$ec #$a5 #$cf #$85 #$ed #$88 #$84 #$40
 #$c8 #$a9 #$0a #$85 #$ea #$84 #$eb #$60 #$20 #$15 #$e7 #$a5 #$ce #$a4 #$cf #$10

*=$e800
 #$f2 #$20 #$15 #$e7 #$b5 #$50 #$85 #$da #$b5 #$78 #$85 #$db #$a5 #$ce #$91 #$da
 #$c8 #$a5 #$cf #$91 #$da #$e8 #$60 #$68 #$68 #$24 #$d5 #$10 #$05 #$20 #$cd #$e3
 #$46 #$d5 #$60 #$a0 #$ff #$84 #$d7 #$60 #$20 #$cd #$ef #$f0 #$07 #$a9 #$25 #$85
 #$d6 #$88 #$84 #$d4 #$e8 #$60 #$a5 #$ca #$a4 #$cb #$d0 #$5a #$a0 #$41 #$a5 #$44
 #$c9 #$08 #$b0 #$5e #$a8 #$e6 #$44 #$a5 #$e0 #$99 #$00 #$11 #$a5 #$e1 #$99 #$08
 #$11 #$a5 #$dc #$99 #$10 #$11 #$a5 #$dd #$99 #$18 #$11 #$20 #$15 #$e7 #$20 #$6d
 #$e5 #$90 #$04 #$a0 #$37 #$d0 #$3b #$a5 #$e4 #$a4 #$e5 #$85 #$dc #$84 #$dd #$2c
 #$0f #$00 #$10 #$4f #$18 #$69 #$03 #$90 #$01 #$c8 #$a2 #$ff #$86 #$d9 #$9a #$85
 #$e0 #$84 #$e1 #$20 #$79 #$e6 #$24 #$d9 #$10 #$49 #$18 #$a0 #$00 #$a5 #$dc #$71
 #$dc #$a4 #$dd #$90 #$01 #$c8 #$c5 #$4c #$d0 #$d1 #$c4 #$4d #$d0 #$cd #$a0 #$34
 #$46 #$d9 #$4c #$e0 #$e3 #$a0 #$4a #$a5 #$44 #$f0 #$f7 #$c6 #$44 #$a8 #$b9 #$0f
 #$11 #$85 #$dc #$b9 #$17 #$11 #$85 #$dd #$be #$47 #$00 #$b9 #$07 #$11 #$a8 #$8a
 #$4c #$7a #$e8 #$a0 #$63 #$20 #$c4 #$e3 #$a0 #$01 #$b1 #$dc #$aa #$c8 #$b1 #$dc
 #$20 #$1b #$e5 #$4c #$b3 #$e2 #$c6 #$43 #$a0 #$5b #$a5 #$43 #$f0 #$c4 #$a8 #$b5
 #$50 #$d9 #$ff #$11 #$d0 #$f0 #$b5 #$78 #$d9 #$07 #$12 #$d0 #$e9 #$b9 #$0f #$12
 #$85 #$da #$b9 #$17 #$12 #$85 #$db #$20 #$15 #$e7 #$ca #$20 #$93 #$e7 #$20 #$01

*=$e900
 #$e8 #$ca #$a4 #$43 #$b9 #$47 #$12 #$95 #$9f #$b9 #$3f #$12 #$a0 #$00 #$20 #$08
 #$e7 #$20 #$82 #$e7 #$20 #$59 #$e7 #$20 #$15 #$e7 #$a4 #$43 #$a5 #$ce #$f0 #$05
 #$59 #$17 #$12 #$10 #$12 #$b9 #$1f #$12 #$85 #$dc #$b9 #$27 #$12 #$85 #$dd #$be
 #$2f #$12 #$b9 #$37 #$12 #$d0 #$87 #$c6 #$43 #$60 #$a0 #$54 #$a5 #$43 #$c9 #$08
 #$f0 #$9a #$e6 #$43 #$a8 #$b5 #$50 #$99 #$00 #$12 #$b5 #$78 #$99 #$08 #$12 #$60
 #$20 #$15 #$e7 #$a4 #$43 #$a5 #$ce #$99 #$3f #$12 #$a5 #$cf #$99 #$47 #$12 #$a9
 #$01 #$99 #$0f #$12 #$a9 #$00 #$99 #$17 #$12 #$a5 #$dc #$99 #$1f #$12 #$a5 #$dd
 #$99 #$27 #$12 #$a5 #$e0 #$99 #$2f #$12 #$a5 #$e1 #$99 #$37 #$12 #$60 #$20 #$15
 #$e7 #$a4 #$43 #$a5 #$ce #$99 #$0f #$12 #$a5 #$cf #$4c #$66 #$e9 #$00 #$00 #$00
 #$00 #$00 #$00 #$00 #$00 #$00 #$00 #$00 #$00 #$00 #$00 #$ab #$03 #$03 #$03 #$03
 #$03 #$03 #$03 #$03 #$03 #$03 #$03 #$03 #$03 #$03 #$3f #$3f #$c0 #$c0 #$3c #$3c
 #$3c #$3c #$3c #$3c #$3c #$30 #$0f #$c0 #$cc #$ff #$55 #$00 #$ab #$ab #$03 #$03
 #$ff #$ff #$55 #$ff #$ff #$55 #$cf #$cf #$cf #$cf #$cf #$ff #$55 #$c3 #$c3 #$c3
 #$55 #$f0 #$f0 #$cf #$56 #$56 #$56 #$55 #$ff #$ff #$55 #$03 #$03 #$03 #$03 #$03
 #$03 #$03 #$ff #$ff #$ff #$03 #$03 #$03 #$03 #$03 #$03 #$03 #$03 #$03 #$03 #$03
 #$03 #$03 #$03 #$03 #$03 #$00 #$ab #$03 #$57 #$03 #$03 #$03 #$03 #$07 #$03 #$03

*=$ea00
 #$03 #$03 #$03 #$03 #$03 #$03 #$03 #$03 #$03 #$03 #$aa #$ff #$ff #$ff #$ff #$ff
 #$17 #$ff #$ff #$19 #$5d #$35 #$4b #$f2 #$ec #$87 #$6f #$ad #$b7 #$e2 #$f8 #$54
 #$80 #$96 #$85 #$82 #$22 #$10 #$33 #$4a #$13 #$06 #$0b #$4a #$01 #$40 #$47 #$7a
 #$00 #$ff #$23 #$09 #$5b #$16 #$b6 #$cb #$ff #$ff #$fb #$ff #$ff #$24 #$f6 #$4e
 #$59 #$50 #$00 #$ff #$23 #$a3 #$6f #$36 #$23 #$d7 #$1c #$22 #$c2 #$ae #$ba #$23
 #$ff #$ff #$21 #$30 #$1e #$03 #$c4 #$20 #$00 #$c1 #$ff #$ff #$ff #$a0 #$30 #$1e
 #$a4 #$d3 #$b6 #$bc #$aa #$3a #$01 #$50 #$7e #$d8 #$d8 #$a5 #$3c #$ff #$16 #$5b
 #$28 #$03 #$c4 #$1d #$00 #$0c #$4e #$00 #$3e #$00 #$a6 #$b0 #$00 #$bc #$c6 #$57
 #$8c #$01 #$27 #$ff #$ff #$ff #$ff #$ff #$e8 #$ff #$ff #$e8 #$e0 #$e0 #$e0 #$ef
 #$ef #$e3 #$e3 #$e5 #$e5 #$e7 #$e7 #$ee #$ef #$ef #$e7 #$e7 #$e2 #$ef #$e7 #$e7
 #$ec #$ec #$ec #$e7 #$ec #$ec #$ec #$e2 #$00 #$ff #$e8 #$e1 #$e8 #$e8 #$ef #$eb
 #$ff #$ff #$e0 #$ff #$ff #$ef #$ee #$ef #$e7 #$e7 #$00 #$ff #$e8 #$e7 #$e7 #$e7
 #$e8 #$e1 #$e2 #$ee #$ee #$ee #$ee #$e8 #$ff #$ff #$e1 #$e1 #$ef #$ee #$e7 #$e8
 #$ee #$e7 #$ff #$ff #$ff #$ee #$e1 #$ef #$e7 #$e8 #$ef #$ef #$eb #$e9 #$e8 #$e9
 #$e9 #$e8 #$e8 #$e8 #$e8 #$ff #$e8 #$e8 #$e8 #$ee #$e7 #$e8 #$ef #$ef #$ee #$ef
 #$ee #$ef #$ee #$ee #$ef #$ee #$ee #$ee #$e1 #$e8 #$e8 #$ff #$ff #$ff #$ff #$ff

*=$eb00
 #$be #$b3 #$b2 #$b7 #$b6 #$37 #$d4 #$cf #$cf #$a0 #$cc #$cf #$ce #$47 #$d3 #$d9
 #$ce #$d4 #$c1 #$58 #$cd #$c5 #$cd #$a0 #$c6 #$d5 #$cc #$4c #$d4 #$cf #$cf #$a0
 #$cd #$c1 #$ce #$d9 #$a0 #$d0 #$c1 #$d2 #$c5 #$ce #$53 #$d3 #$d4 #$d2 #$c9 #$ce
 #$47 #$ce #$cf #$a0 #$c5 #$ce #$44 #$c2 #$c1 #$c4 #$a0 #$c2 #$d2 #$c1 #$ce #$c3
 #$48 #$be #$b8 #$a0 #$c7 #$cf #$d3 #$d5 #$c2 #$53 #$c2 #$c1 #$c4 #$a0 #$d2 #$c5
 #$d4 #$d5 #$d2 #$4e #$be #$b8 #$a0 #$c6 #$cf #$d2 #$53 #$c2 #$c1 #$c4 #$a0 #$ce
 #$c5 #$d8 #$54 #$d3 #$d4 #$cf #$d0 #$d0 #$c5 #$c4 #$a0 #$c1 #$d4 #$20 #$aa #$aa
 #$aa #$20 #$a0 #$c5 #$d2 #$d2 #$0d #$be #$b2 #$b5 #$35 #$d2 #$c1 #$ce #$c7 #$45
 #$c4 #$c9 #$4d #$d3 #$d4 #$d2 #$a0 #$cf #$d6 #$c6 #$4c #$dc #$0d #$d2 #$c5 #$d4
 #$d9 #$d0 #$c5 #$a0 #$cc #$c9 #$ce #$c5 #$8d #$3f #$46 #$d9 #$90 #$03 #$4c #$c3
 #$e8 #$a6 #$cf #$9a #$a6 #$ce #$a0 #$8d #$d0 #$02 #$a0 #$99 #$20 #$c4 #$e3 #$86
 #$ce #$ba #$86 #$cf #$a0 #$fe #$84 #$d9 #$c8 #$84 #$c8 #$20 #$99 #$e2 #$84 #$3f
 #$a2 #$20 #$a9 #$30 #$20 #$91 #$e4 #$e6 #$d9 #$a6 #$ce #$a4 #$c8 #$0a #$85 #$ce
 #$c8 #$b9 #$00 #$02 #$c9 #$74 #$f0 #$d2 #$49 #$b0 #$c9 #$0a #$b0 #$f0 #$c8 #$c8
 #$84 #$c8 #$b9 #$00 #$02 #$48 #$b9 #$ff #$01 #$a0 #$00 #$20 #$08 #$e7 #$68 #$95
 #$a0 #$a5 #$ce #$c9 #$c7 #$d0 #$03 #$20 #$6f #$e7 #$4c #$01 #$e8 #$ff #$ff #$ff

*=$ec00
 #$50 #$20 #$13 #$ec #$d0 #$15 #$20 #$0b #$ec #$d0 #$10 #$20 #$82 #$e7 #$20 #$6f
 #$e7 #$50 #$03 #$20 #$82 #$e7 #$20 #$59 #$e7 #$56 #$50 #$4c #$36 #$e7 #$ff #$ff
 #$c1 #$ff #$7f #$d1 #$cc #$c7 #$cf #$ce #$c5 #$9a #$98 #$8b #$96 #$95 #$93 #$bf
 #$b2 #$32 #$2d #$2b #$bc #$b0 #$ac #$be #$35 #$8e #$61 #$ff #$ff #$ff #$dd #$fb
 #$20 #$c9 #$ef #$15 #$4f #$10 #$05 #$20 #$c9 #$ef #$35 #$4f #$95 #$50 #$10 #$cb
 #$4c #$c9 #$ef #$40 #$60 #$8d #$60 #$8b #$00 #$7e #$8c #$33 #$00 #$00 #$60 #$03
 #$bf #$12 #$00 #$40 #$89 #$c9 #$47 #$9d #$17 #$68 #$9d #$0a #$00 #$40 #$60 #$8d
 #$60 #$8b #$00 #$7e #$8c #$3c #$00 #$00 #$60 #$03 #$bf #$1b #$4b #$67 #$b4 #$a1
 #$07 #$8c #$07 #$ae #$a9 #$ac #$a8 #$67 #$8c #$07 #$b4 #$af #$ac #$b0 #$67 #$9d
 #$b2 #$af #$ac #$af #$a3 #$67 #$8c #$07 #$a5 #$ab #$af #$b0 #$f4 #$ae #$a9 #$b2
 #$b0 #$7f #$0e #$27 #$b4 #$ae #$a9 #$b2 #$b0 #$7f #$0e #$28 #$b4 #$ae #$a9 #$b2
 #$b0 #$64 #$07 #$a6 #$a9 #$67 #$af #$b4 #$af #$a7 #$78 #$b4 #$a5 #$ac #$78 #$7f
 #$02 #$ad #$a5 #$b2 #$67 #$a2 #$b5 #$b3 #$af #$a7 #$ee #$b2 #$b5 #$b4 #$a5 #$b2
 #$7e #$8c #$39 #$b4 #$b8 #$a5 #$ae #$67 #$b0 #$a5 #$b4 #$b3 #$27 #$af #$b4 #$07
 #$9d #$19 #$b2 #$af #$a6 #$7f #$05 #$37 #$b4 #$b5 #$b0 #$ae #$a9 #$7f #$05 #$28
 #$b4 #$b5 #$b0 #$ae #$a9 #$7f #$05 #$2a #$b4 #$b5 #$b0 #$ae #$a9 #$e4 #$ae #$a5

*=$ed00
 #$00 #$ff #$ff #$47 #$a2 #$a1 #$b4 #$7f #$0d #$30 #$ad #$a9 #$a4 #$7f #$0d #$23
 #$ad #$a9 #$a4 #$67 #$ac #$ac #$a1 #$a3 #$00 #$40 #$80 #$c0 #$c1 #$80 #$00 #$47
 #$8c #$68 #$8c #$db #$67 #$9b #$68 #$9b #$50 #$8c #$63 #$8c #$7f #$01 #$51 #$07
 #$88 #$29 #$84 #$80 #$c4 #$80 #$57 #$71 #$07 #$88 #$14 #$ed #$a5 #$ad #$af #$ac
 #$ed #$a5 #$ad #$a9 #$a8 #$f2 #$af #$ac #$af #$a3 #$71 #$08 #$88 #$ae #$a5 #$ac
 #$68 #$83 #$08 #$68 #$9d #$08 #$71 #$07 #$88 #$60 #$76 #$b4 #$af #$ae #$76 #$8d
 #$76 #$8b #$51 #$07 #$88 #$19 #$b8 #$a4 #$ae #$b2 #$f2 #$b3 #$b5 #$f3 #$a2 #$a1
 #$ee #$a7 #$b3 #$e4 #$ae #$b2 #$eb #$a5 #$a5 #$b0 #$51 #$07 #$88 #$39 #$81 #$c1
 #$4f #$7f #$0f #$2f #$00 #$51 #$06 #$88 #$29 #$c2 #$0c #$82 #$57 #$8c #$6a #$8c
 #$42 #$ae #$a5 #$a8 #$b4 #$60 #$ae #$a5 #$a8 #$b4 #$4f #$7e #$1e #$35 #$8c #$27
 #$51 #$07 #$88 #$09 #$8b #$fe #$e4 #$af #$ad #$f2 #$af #$e4 #$ae #$a1 #$dc #$de
 #$9c #$dd #$9c #$de #$dd #$9e #$c3 #$dd #$cf #$ca #$cd #$cb #$00 #$47 #$9d #$ad
 #$a5 #$ad #$af #$ac #$76 #$9d #$ad #$a5 #$ad #$a9 #$a8 #$e6 #$a6 #$af #$60 #$8c
 #$20 #$af #$b4 #$b5 #$a1 #$f2 #$ac #$a3 #$f2 #$a3 #$b3 #$60 #$8c #$20 #$ac #$a5
 #$a4 #$ee #$b5 #$b2 #$60 #$ae #$b5 #$b2 #$f4 #$b3 #$a9 #$ac #$60 #$8c #$20 #$b4
 #$b3 #$a9 #$ac #$7a #$7e #$9a #$22 #$20 #$00 #$60 #$03 #$bf #$60 #$03 #$bf #$1f

*=$ee00
 #$20 #$b1 #$e7 #$e8 #$e8 #$b5 #$4f #$85 #$da #$b5 #$77 #$85 #$db #$b4 #$4e #$98
 #$d5 #$76 #$b0 #$09 #$b1 #$da #$20 #$c9 #$e3 #$c8 #$4c #$0f #$ee #$a9 #$ff #$85
 #$d5 #$60 #$e8 #$a9 #$00 #$95 #$78 #$95 #$a0 #$b5 #$77 #$38 #$f5 #$4f #$95 #$50
 #$4c #$23 #$e8 #$ff #$20 #$15 #$e7 #$a5 #$cf #$d0 #$28 #$a5 #$ce #$60 #$20 #$34
 #$ee #$a4 #$c8 #$c9 #$30 #$b0 #$21 #$c0 #$28 #$b0 #$1d #$60 #$ea #$ea #$20 #$34
 #$ee #$60 #$ea #$8a #$a2 #$01 #$b4 #$ce #$94 #$4c #$b4 #$48 #$94 #$ca #$ca #$f0
 #$f5 #$aa #$60 #$a0 #$77 #$4c #$e0 #$e3 #$a0 #$7b #$d0 #$f9 #$20 #$54 #$e2 #$a5
 #$da #$d0 #$07 #$a5 #$db #$d0 #$03 #$4c #$7e #$e7 #$06 #$ce #$26 #$cf #$26 #$e6
 #$26 #$e7 #$a5 #$e6 #$c5 #$da #$a5 #$e7 #$e5 #$db #$90 #$0a #$85 #$e7 #$a5 #$e6
 #$e5 #$da #$85 #$e6 #$e6 #$ce #$88 #$d0 #$e1 #$60 #$ff #$ff #$ff #$ff #$ff #$ff
 #$20 #$15 #$e7 #$6c #$ce #$00 #$a5 #$4c #$d0 #$02 #$c6 #$4d #$c6 #$4c #$a5 #$48
 #$d0 #$02 #$c6 #$49 #$c6 #$48 #$a0 #$00 #$b1 #$4c #$91 #$48 #$a5 #$ca #$c5 #$4c
 #$a5 #$cb #$e5 #$4d #$90 #$e0 #$4c #$53 #$ee #$c9 #$28 #$b0 #$9b #$a8 #$a5 #$c8
 #$60 #$ea #$ea #$98 #$aa #$a0 #$6e #$20 #$c4 #$e3 #$8a #$a8 #$20 #$c4 #$e3 #$a0
 #$72 #$4c #$c4 #$e3 #$20 #$15 #$e7 #$06 #$ce #$26 #$cf #$30 #$fa #$b0 #$dc #$d0
 #$04 #$c5 #$ce #$b0 #$d6 #$60 #$20 #$15 #$e7 #$b1 #$ce #$94 #$9f #$4c #$08 #$e7

*=$ef00
 #$20 #$34 #$ee #$a5 #$ce #$48 #$20 #$15 #$e7 #$68 #$91 #$ce #$60 #$ff #$ff #$ff
 #$20 #$6c #$ee #$a5 #$ce #$85 #$e6 #$a5 #$cf #$85 #$e7 #$4c #$44 #$e2 #$20 #$e4
 #$ee #$4c #$34 #$e1 #$20 #$e4 #$ee #$b4 #$78 #$b5 #$50 #$69 #$fe #$b0 #$01 #$88
 #$85 #$da #$84 #$db #$18 #$65 #$ce #$95 #$50 #$98 #$65 #$cf #$95 #$78 #$a0 #$00
 #$b5 #$50 #$d1 #$da #$c8 #$b5 #$78 #$f1 #$da #$b0 #$80 #$4c #$23 #$e8 #$20 #$15
 #$e7 #$a5 #$4e #$20 #$08 #$e7 #$a5 #$4f #$d0 #$04 #$c5 #$4e #$69 #$00 #$29 #$7f
 #$85 #$4f #$95 #$a0 #$a0 #$11 #$a5 #$4f #$0a #$18 #$69 #$40 #$0a #$26 #$4e #$26
 #$4f #$88 #$d0 #$f2 #$a5 #$ce #$20 #$08 #$e7 #$a5 #$cf #$95 #$a0 #$4c #$7a #$e2
 #$20 #$15 #$e7 #$a4 #$ce #$c4 #$4c #$a5 #$cf #$e5 #$4d #$90 #$1f #$84 #$48 #$a5
 #$cf #$85 #$49 #$4c #$b6 #$ee #$20 #$15 #$e7 #$a4 #$ce #$c4 #$ca #$a5 #$cf #$e5
 #$cb #$b0 #$09 #$84 #$4a #$a5 #$cf #$85 #$4b #$4c #$b7 #$e5 #$4c #$cb #$ee #$ea
 #$ea #$ea #$ea #$20 #$c9 #$ef #$20 #$71 #$e1 #$4c #$bf #$ef #$20 #$03 #$ee #$a9
 #$ff #$85 #$c8 #$a9 #$74 #$8d #$00 #$02 #$60 #$20 #$36 #$e7 #$e8 #$20 #$36 #$e7
 #$b5 #$50 #$60 #$a9 #$00 #$85 #$4a #$85 #$4c #$a9 #$08 #$85 #$4b #$a9 #$10 #$85
 #$4d #$4c #$ad #$e5 #$d5 #$78 #$d0 #$01 #$18 #$4c #$02 #$e1 #$20 #$b7 #$e5 #$4c
 #$36 #$e8 #$20 #$b7 #$e5 #$4c #$5b #$e8 #$e0 #$80 #$d0 #$01 #$88 #$4c #$0c #$e0
{ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   Insert BASIC image here   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ }

{-----------------------------------------------------------------------+
|       WozMon                                                          |
+-----------------------------------------------------------------------}

*=$ff00

        { Original ZP usage is 24.2B, but that's taken by Gigatron }

   _XAML=$34        _XAML_MINUS1=$33
   _XAMH=$35
    _STL=$36         _STL_MINUS1=$35
    _STH=$37
      _L=$38           _L_MINUS1=$37
      _H=$39
   _YSAV=$3A
   _MODE=$3B

       { Patches with respect to original are marked [Gigatron] }

     _IN=$200

    _KBD=$D010
  _KBDCR=$D011
    _DSP=$D012
  _DSPCR=$D013

_RESET=*        #_CLD_                  { Clear decimal arithmetic mode.          }
                #_CLI_
                #_LDYIM_ #$7F           { Mask for DSP data direction register.   }
                #_STY_   ##_DSP
                #_LDAIM_ #$A7           { KBD and DSP control register mask.      }
                #_STA_   ##_KBDCR
                #_STA_   ##_DSPCR
_NOTCR=*        #_CMPIM_ #$DF           { "<-"?                                   }
                #_BEQ_   #@_BACKSPACE   { Yes.                                    }
                #_CMPIM_ #$9B           { ESC?                                    }
                #_BEQ_   #@_ESCAPE      { Yes.                                    }
                #_INY_                  { Advance text index.                     }
                #_BPL_   #@_NEXTCHAR    { Auto ESC if > 127.                      }
_ESCAPE=*       #_LDAIM_ #$DC           { "\".                                    }
                #_JSR_   ##_ECHO        { Output it.                              }
_GETLINE=*      #_LDAIM_ #$8D           { CR.                                     }
                #_JSR_   ##_ECHO        { Output it.                              }
                #_LDYIM_ #$01           { Initiallize text index.                 }
_BACKSPACE=*    #_DEY_                  { Back up text index.                     }
                #_BMI_   #@_GETLINE     { Beyond start of line, reinitialize.     }
_NEXTCHAR=*     #_JSR_   ##_WAITKEY     { [Gigatron] No KBDCR and KBD (yet!)      }
                #_BPL_   #@_NEXTCHAR    { Loop until ready. [Gigatron] Never taken}
                #_BIT_   ##_KBD         { [Gigatron] Was: LDA                     }
                #_STAAY_ ##_IN          { Add to text buffer.                     }
                #_JSR_   ##_ECHO        { Display character.                      }
                #_CMPIM_ #$8D           { CR?                                     }
                #_BNE_   #@_NOTCR       { No.                                     }
                #_LDYIM_ #$FF           { Reset text index.                       }
                #_LDAIM_ #$00           { For XAM mode.                           }
                #_TAX_                  { 0->X.                                   }
_SETSTOR=*      #_ASLA_                 { Leaves $7B if setting STOR mode.        }
_SETMODE=*      #_STAZ_  #_MODE         { $00 = XAM, $7B= STOR,$AE= BLOK XAM      }
_BLSKIP=*       #_INY_                  { Advance text index.                     }
_NEXTITEM=*     #_LDAAY_ ##_IN          { Get character.                          }
                #_CMPIM_ #$8D           { CR?                                     }
                #_BEQ_   #@_GETLINE     { Yes, done this line.                    }
                #_CMPIM_ #$AE           { "."?                                    }
                #_BCC_   #@_BLSKIP      { Skip delimiter.                         }
                #_BEQ_   #@_SETMODE     { Yes, BLOCK XAM mode.                    }
                #_CMPIM_ #$BA           { ":"?                                    }
                #_BEQ_   #@_SETSTOR     { Yes, set STOR mode.                     }
                #_CMPIM_ #$D2           { "R"?                                    }
                #_BEQ_   #@_RUN         { Yes, run user program.                  }
                #_STXZ_  #_L            { $00->L.                                 }
                #_STXZ_  #_H            {  and H.                                 }
                #_STYZ_  #_YSAV         { Save Y for comparison.                  }
_NEXTHEX=*      #_LDAAY_ ##_IN          { Get character for hex test.             }
                #_EORIM_ #$B0           { Map digits to $0-9.                     }
                #_CMPIM_ #$0A           { Digit?                                  }
                #_BCC_   #@_DIG         { Yes.                                    }
                #_ADCIM_ #$88           { Map letter "A"-"F" to $FA-FF.           }
                #_CMPIM_ #$FA           { Hex letter?                             }
                #_BCC_   #@_NOTHEX      { No, character not hex.                  }
_DIG=*          #_ASLA_                 {                                         }
                #_ASLA_                 { Hex digit to MSD of A.                  }
                #_ASLA_                 {                                         }
                #_ASLA_                 {                                         }
                #_LDXIM_ #$04           { Shift count.                            }
_HEXSHIFT=*     #_ASLA_                 { Hex digit left, MSB to carry.           }
                #_ROLZ_  #_L            { Rotate into LSD.                        }
                #_ROLZ_  #_H            { Rotate into MSD's.                      }
                #_DEX_                  { Done 4 shifts?                          }
                #_BNE_   #@_HEXSHIFT    { No, loop.                               }
                #_INY_                  { Advance text index.                     }
                #_BNE_   #@_NEXTHEX     { Always taken. Check next character for hex.}
_NOTHEX=*       #_CPYZ_  #_YSAV         { Check if L, H empty (no hex digits).    }
                #_BEQ_   #@_ESCAPE      { Yes, generate  ESC sequence.            }
                #_BITZ_  #_MODE         { Test MODE byte.                         }
                #_BVC_   #@_NOTSTOR     { B6 = 0 for STOR, 1 for XAM and BLOCK XAM}
                #_LDAZ_  #_L            { LSD's of hex data.                      }
                #_STAIX_ #_STL          { Store at current 'store index'.         }
                #_INCZ_  #_STL          { Increment store index.                  }
                #_BNE_   #@_NEXTITEM    { Get next item. (no carry).              }
                #_INCZ_  #_STH          { Add carry to 'store index' high order.  }
_TONEXTITEM=*   #_JMP_   ##_NEXTITEM    { Get next command item.                  }
_RUN=*          #_JMI_   ##_XAML        { Run at current XAM index.               }
_NOTSTOR=*      #_BMI_   #@_XAMNEXT     { B7 = 0 for XAM, 1 for BLOCK XAM.        }
                #_LDXIM_ #$02           { Byte count.                             }
_SETADR=*       #_LDAZX_ #_L_MINUS1     { Copy hex data to                        }
                #_STAZX_ #_STL_MINUS1   {   'store index'.                        }
                #_STAZX_ #_XAML_MINUS1  { And to 'XAM index'.                     }
                #_DEX_                  { Next of 2 bytes.                        }
                #_BNE_   #@_SETADR      { Loop unless X = 0.                      }
_NXTPRNT=*      #_BNE_   #@_PRDATA      { NE means no address to print.           }
                #_LDAIM_ #$8D           { CR.                                     }
                #_JSR_   ##_ECHO        { Output it.                              }
                #_LDAZ_  #_XAMH         { 'Examine index' high-order byte.        }
                #_JSR_   ##_PRBYTE      { Output it in hex format.                }
                #_LDAZ_  #_XAML         { Low-order 'examine index' byte.         }
                #_JSR_   ##_PRBYTE      { Output it in hex format.                }
                #_LDAIM_ #$BA           { ":".                                    }
                #_JSR_   ##_ECHO        { Output it.                              }
_PRDATA=*       #_LDAIM_ #$04           { [Gigatron] 4 pixels wide blank.         }
                #_JSR_   ##_BLANK       { [Gigatron] Output it.                   }
                #_LDAIX_ #_XAML         { Get data byte at 'examine index'.       }
                #_JSR_   ##_PRBYTE      { Output it in hex format.                }
_XAMNEXT=*      #_STXZ_  #_MODE         { 0->MODE (XAM mode).                     }
                #_LDAZ_  #_XAML         {                                         }
                #_CMPZ_  #_L            { Compare 'examine index' to hex data.    }
                #_LDAZ_  #_XAMH         {                                         }
                #_SBCZ_  #_H            {                                         }
                #_BCS_   #@_TONEXTITEM  { Not less, so no more data to output.    }
                #_INCZ_  #_XAML         {                                         }
                #_BNE_   #@_MOD8CHK     { Increment 'examine index'.              }
                #_INCZ_  #_XAMH         {                                         }
_MOD8CHK=*      #_LDAZ_  #_XAML         { Check low-order 'examine index' byte    }
                #_ANDIM_ #$07           {   For MOD 8= 0                          }
                #_BPL_   #@_NXTPRNT     { Always taken.                           }
_PRBYTE=*       #_PHA_                  { Save A for LSD.                         }
                #_LSRA_                 {                                         }
                #_LSRA_                 {                                         }
                #_LSRA_                 { MSD to LSD position.                    }
                #_LSRA_                 {                                         }
                #_JSR_   ##_PRHEX       { Output hex digit.                       }
                #_PLA_                  { Restore A.                              }
_PRHEX=*        #_ANDIM_ #$0F           { Mask LSD for hex print.                 }
                #_ORAIM_ #$B0           { Add "0".                                }
                #_CMPIM_ #$BA           { Digit?                                  }
                #_BCC_   #@_ECHO        { Yes, output it.                         }
                #_ADCIM_ #$06           { Add offset for letter.                  }
_CHAROUT=*
_ECHO=*         #_PHA_                  { [Gigatron]                              }
                #_BRK_                  { [Gigatron] Transfer to vCPU for display.}
                #_PLA_                  { [Gigatron]                              }
                #_RTS_                  { [Gigatron] Return.                      }
_BLANK=*        #_CLC_                  { [Gigatron] Advance few pixels so BLOCK  }
                #_ADCZ_  #<p            { [Gigatron]   XAM doesn't wrap around    }
                #_STAZ_  #<p            { [Gigatron]   the 160 pixel wide screen. }
                #_RTS_                  { [Gigatron]                              }
                #$00                    { (unused)                                }
{FFFA}          ##$0000                 { (NMI)                                   }
{FFFC}          ##_RESET                { (RESET)                                 }
{FFFE}          ##$0000                 { (IRQ)                                   }

{-----------------------------------------------------------------------+
|                                                                       |
+-----------------------------------------------------------------------}

