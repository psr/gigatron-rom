
{-----------------------------------------------------------------------+
|                                                                       |
|       GTOS                                                            |
|                                                                       |
|       !!! Work in progress !!!                                        |
|                                                                       |
|       Goal is to provide basic operating system services              |
|       - Terminal                                                      |
|       - Card access                                                   |
|       - Load command prompt                                           |
|                                                                       |
+-----------------------------------------------------------------------}

{
  XXX Positive card detection:
        Read MISO's
        Invert
        Write to ZP
        Read MIOS
  XXX  https://cdn.hackaday.io/images/1744261554112919559.png
  XXX  LoadtGt1: better closing of sector
  XXX  Compliancy: Byte addressing for V2 cards when CCS bit in CMD58 OCR is 0
  XXX  Compliancy: MMC v3 card detection with CMD1
  XXX  Compliancy: Don't set block size with CMD16 if CCS bit in OCS is 1
  XXX  Compliancy: Reconsider pull-down resistors on MISO lines
                   Some cards [30%?] [MMC?] have MISO in open collector during
                   init" But if this is only during CMD0, we can live with it...
  XXX  Compliancy: Follow cluster chain for directories as well
  XXX  Speed: Transfer 256 bytes at once
  XXX  Think about card detect and monitoring it (inserted = low)
       Put we can always use the MOSI line for this, or check the
       init status when opening a file
  XXX  Figure out why Apple formats card with type 0x0b
}

gcl0x

{-----------------------------------------------------------------------+
|                                                                       |
|       Variables                                                       |
|                                                                       |
+-----------------------------------------------------------------------}

{
        Variable        Bytes   Description
        --------        -----   -----------
        CardType        X       Detected card version
        Address         XX      RAM for transfer buffer
        ValueL,H        XXXX    32-bit accumulator
        OffsetL,H       XXXX    Offset to be added to ValueL,H
        SectorL,H       XXXX    Block number of last sector
        CurrentDirL,H   ----    First cluster of current directory
        ClusterSize     X       Sectors per cluster: 1, 2, ... 128
        ClusterMask     X       XXX ClusterSize - 1
        ClusterBaseL,H  ----    Cluster origin (hypothetical cluster 0)
        FatBaseL,H      ----    XXX
        FileSizeL,H     ????    File size from directory entry
        FilePosL,H      --XX    Current R/W position in file: 0..FileSize

        Memory usage
        ------------
        $500  $6ff              Buffer for reading FAT sectors
        $58a0 $xxff             Code not needed for GT1 reading
                                Eg. detecting the card settings
        $xxa0 $78ff             GT1 reading core
        $7fa0 ...               Cluster list
}

{-----------------------------------------------------------------------+
|                       RAM page 5                                      |
+-----------------------------------------------------------------------}

{ Start from single-use memory in page 5 }

*=$500

\Newline call

\romType, \romTypeValue_DEVROM- {Version check >= DEVROM}
[if<0                           {Version mismatch}
  \Newline call                 {Give error using just ROM v1 features}
  \PrintChar p=
  [def
    q= [do q,                   {Fetch next char}
      [do if=0loop]             {Loop forever at end of message}
      p! <q++ loop]             {Print char and continue}
  ] q=
  [def `Need`DEVROM #0] q!
]

[def `GTOS`DEV`32K #0] q=
[do q, if<>0 \PrintChar! <q++ loop]

[do loop] { XXX Work in progress }

{-----------------------------------------------------------------------+
|                                                                       |
|       Main program                                                    |
|                                                                       |
+-----------------------------------------------------------------------}

0 \frameCount.                  {Reset timer}
InitCard!

CardType PrintByte! Newline!    {Show detected card version}

ReadMBR! PrintResult!           {Master Boot Record}
[if=0 ReadVolumeId!]            {Read first block of FAT partition}
InitFat32!
ReadDirectory!                  {Read root directory XXX Move into PrintDir}
[if=0 PrintDirectory!]          {List directory, find BOOT.GT1 and execute it}

##\HALT                         {Halt if not found}

{-----------------------------------------------------------------------+
|                       RAM page 2                                      |
+-----------------------------------------------------------------------}
*=$200

{-----------------------------------------------------------------------+
|                                                                       |
|       Video terminal section                                          |
|                                                                       |
+-----------------------------------------------------------------------}

{ PrintChar -- reads Pos, writes i j Pos _sysFn _sysArgs[01245] }

_PrintChar=*
  {
    Print ASCII character (>=32) on screen using the 5x8 pixel built-in font.
    This is a bare bones version:
    1. No handling of newline characters
    2. No implicit linewrapping
    3. No blanking of the 1 pixel horizontal space between characters
  }
  82-                           {Map ASCII code to offset in font table}
  [if<0 50+ i= &_font32up       {First page for ASCII 32..81}
   else     i= &_font82up] j=   {Second page is ASCII 82..127}
  i 2<< i+                      {Multiply by 5}
  j+ j=                         {Add page address to reach bitmap data}
  $3f20 _sysArgs0=              {White on blue}
  Pos _sysArgs4=                {Position of character}
  6+ Pos=                       {Advance position by 6 pixels for next call}
  \SYS_VDrawBits_134 _sysFn=    {Prepare SYS calls}
  5 [do i=                      {Loop to draw 5 vertical slices of 8 pixels}
    j 0? \sysArgs2.             {Get byte from ROM using `LUP 0' instruction}
    134!!                       {Invoke SYS function to draw 8 vertical pixels}
    <j++ <_sysArgs4++           {Advance to next slice in ROM and on screen}
    i 1- if>0loop]              {Looping}
  ret

_WriteByte=*
  {
    Print any byte value as character, map non-ASCII to block symbol
    XXX Clear 6th slice
    XXX Insert Newline when wrapping the line
  }
  push
  32- [if<0 127 else 96-        {Map any non-ASCII to block symbol 127}
       if>=0 127] 127&
  \PrintChar!                   {And print it}
  pop ret

{ Newline -- writes i Pos _sysFn _sysArgs[01245] }
{ !!! This version scrolls only pixel row 16 through 119 !!! }

_Newline=*
                                {Clear new line first}
  $3f20 _sysArgs0=              {White on blue}
  0 <Pos. $120 peek >Pos.       {Go to start of next line}
  Pos _sysArgs4=                {Set screen position}
  \sysArgs2.                    {Set all-zero output pattern}
  [do
    \SYS_VDrawBits_134          {SYS call to draw 8 pixels vertically}
    _sysFn= 134!!
    <_sysArgs4++                {Step 1 pixel right}
    \sysArgs4, 160^             {Test for end of line}
    if<>0loop]
                                {Then scroll up by modifying videoTable}
  $01 >i. 208                   {Last entry at $100+238, minus 30}
  [do
    30+ <i.
    i, 120- [if<0 128+
             else 24+] i.       {Rotate by 8 in 24..127 range}
    <i, 32- if>0loop]           {Move to previous entry in video table}

  ret

$500 Address=                   {512 bytes memory for one sector}

{-----------------------------------------------------------------------+
|                                                                       |
|       Memory card section                                             |
|                                                                       |
+-----------------------------------------------------------------------}

{-----------------------------------------------------------------------+
|                       RAM page $5c                                    |
+-----------------------------------------------------------------------}
*=$5ca0

{ CMD17: READ_SINGLE_BLOCK }
[def
  {
    Reads a block of the size selected by the SET_BLOCKLEN command
  }
  push

  [def #$51 #0 #0 #0 #0 #0]     {CMD17}
  p= q=
  >SectorH, <q++ q.             {Put SectorL,H in argument, big-endian order}
  <SectorH, <q++ q.
  >SectorL, <q++ q.
  <SectorL, <q++ q.
  p SendCommandToCard!

  WaitForCardReply!
  254& {PrintResult!}           {Only 0 and 1 mean success}

  [if=0
    {Wait for first data byte}
    [do
      SendOnesToCard!           {XXX Can we use WaitForCardReply here?}
      $ff^ if=0loop]            {XXX Loop needs a timeout}
      {\sysArgs6, PrintByte!}
      {\sysArgs6, $fe^ PrintResult! {Only $fe is OK}}
  ]

  pop ret
] CMD17=

{-----------------------------------------------------------------------+
|                       RAM page $5d                                    |
+-----------------------------------------------------------------------}
*=$5da0

{
        Bus     ROM v4+
        ---     --------
        A0      SCLK
        A1      (unused)
        A2      /SS0
        A3      /SS1
        A4      /SS2
        A5      /SS3
        A6      B0
        A7      B1
        A8-A14  (unused)
        A15     MOSI
}

{ EnableCard }
[def
  \SYS_ExpanderControl_v4_40    {SYS function}
  _sysFn= $8078 40!!            {Enable SPI0, keep MOSI high, bank=1}
  ret
] EnableCard=

{ DisableCard }
[def
  \SYS_ExpanderControl_v4_40    {SYS function}
  _sysFn= $807c 40!!            {Disable SPI0, keep MOSI high, bank=1}
  ret
] DisableCard=

{ SendOnesToCard }
[def
  255 \sysArgs6.                {Place byte in exchange buffer}
  \sysArgs6 _sysArgs0=          {Begin}
  1+        _sysArgs2=          {End}
  \SYS_SpiExchangeBytes_v4_134  {SYS function}
  _sysFn= 134!!                 {Exchanges a single byte}
  \sysArgs6,                    {Reply byte}
  ret
] SendOnesToCard=

{-----------------------------------------------------------------------+
|                       RAM page $5e                                    |
+-----------------------------------------------------------------------}
*=$5ea0

{-----------------------------------------------------------------------+
|                       RAM page $5f                                    |
+-----------------------------------------------------------------------}
*=$5fa0

{ SendCommandToCard }
[def
  push

  { Setup command bytes }
  p= Buffer q=
  255 q. <q++ q. <q++           {Start with two dummy bytes}
  6 [do i=                      {Copy 6 command bytes to exchange buffer}
    p, <p++                     {Fetch byte and advance read pointer}
    q. <q++                     {Store byte and advance write pointer}
    i 1- if>0loop]              {Looping}

  { Send to SPI device }
  Buffer  _sysArgs0=            {Begin}
  8+      _sysArgs2=            {End and overwrite exchange buffer}
  \SYS_SpiExchangeBytes_v4_134  {SYS function}
  _sysFn= 134!!

  pop ret
] SendCommandToCard=

{ WaitForCardReply }
[def
  push
  {
  |  """To receive this message, your program should continuously toggle
  |     the SD CLK signal and observe the MISO line for data, while keeping
  |     the MOSI line high and the CS line low. Your program can detect the
  |     message, because every message begins with a 0 bit, and when the
  |     SD card sends no data it keeps the MISO line high."""
  |
  |  """Note that the response to each command is sent by the card a few
  |     SD CLK cycles later. If the expected response is not received within
  |     16 clock cycles after sending the reset command, the reset command
  |     has to be sent again."""
  }
  8 [do i=                      {Poll for upto 8 reply bytes}
    SendOnesToCard!             {Keep MOSI line high by only sending ones}
    128&                        {Note: communication is byte-aligned}
    if<>0                       {Break out when valid message detected}
      i 1- if>0loop]            {Or when loop counter exhausted}

  {32 PrintChar!                 {Space}}
  \sysArgs6, CardReply=         {Store reply from card}
  PrintByte!                    {Print hex value}
  CardReply                     {As return value}
  pop ret
] WaitForCardReply=

{-----------------------------------------------------------------------+
|                       RAM page $60                                    |
+-----------------------------------------------------------------------}
*=$60a0

{-----------------------------------------------------------------------+
|                                                                       |
|       FAT32 section                                                   |
|                                                                       |
+-----------------------------------------------------------------------}

{ ReadVolumeId }
[def
  {
    Reads the first block of the partition. Mind that, despite it's name,
    this block doesn't hold the volume label: that is stored in the root
    directory instead.
  }
  push

  ReadSector!                   {SectorL,H as set by ReadMBR}

  $00b Address+ deek k=         {Confirm expected sector length}
  PrintWord!                    {Print as little-endian word}
  512 k^ PrintResult!

  pop ret
] ReadVolumeId=

{-----------------------------------------------------------------------+
|                       RAM page $61                                    |
+-----------------------------------------------------------------------}
*=$61a0

{ ReadMBR }
[def
  {
     Reads MBR and finds the primary partition's start block
     Check if it is FAT32
  }
  push

  0 SectorL= SectorH=           {First sector on device}
  ReadSector!                   {Read MBR}

  $1fe Address+ deek k=         {Fetch signature}
  $aa55 k^                      {Check signature}

  [if=0
    $1c6 Address+ deek SectorL= {Primary partition's first sector on disk}
    $1c8 Address+ deek SectorH=

    $1c2 Address+ peek k=       {Filesystem type code}
    PrintByte!
    $0b k^ [if<>0 $07^]         {Accepts $0b and $0c}
                                {XXX In case of $0b: check for CHS vs LBA ???}
  ]

  pop ret
] ReadMBR=

{-----------------------------------------------------------------------+
|                       RAM page $62                                    |
+-----------------------------------------------------------------------}
*=$62a0

{ InitFat32 }
[def
  push
  {
    Calculate cluster base and set current directory to root

        ClusterBaseL,H =
                PartitionL,H                    from MBR
              + Reserved Sectors                from VolumeId
              + (Number of FATs * FAT size)     from VolumeId
              - 2 * ClusterSize                 from VolumeId
  }

  $00d Address+ peek            {Sectors per cluster}
  ClusterSize=

  SectorL ValueL=               {Partition's first sector, from MBR}
  SectorH ValueH=

  $00e Address+ deek OffsetL=   {Number of reserved sectors}
  0 OffsetH=
  AddOffset!

  FatBaseL=
  ValueH FatBaseH=              {Begin of primary FAT area}

  $024 Address+ deek OffsetL=   {FAT size in sectors}
  $026 Address+ deek OffsetH=
  AddOffset! AddOffset!         {Number of FATs is always 2}

  0 ClusterSize- ClusterSize-   {Subtract twice to arrive at ClusterBase}
  OffsetL=
  $ffff OffsetH=
  AddOffset!

         ClusterBaseL=
  ValueH ClusterBaseH=

  { First cluster of root directory }
  $02c Address+ deek CurrentDirL=
  $02e Address+ deek CurrentDirH=

  pop ret
] {InitFat32=}

{-----------------------------------------------------------------------+
|                       RAM page $63                                    |
+-----------------------------------------------------------------------}
*=$63a0
InitFat32=

{ OpenSector }
[def
  {
    Tell card to read sector, but don't process the data yet
  }
  push

  EnableCard!

  CardType 2-
  [if<0 SectorToByte!]          {Version 1.X cards do byte addressing}
  CMD17!                        {Request block of data}

  pop ret
] OpenSector=

{ ReadSector }
[def
  {
    Read sector from card into memory (clobbers ValueL,H and OffsetL,H)
  }
  push

  OpenSector!                   {Start data stream}

  Address q=                    {Setup write pointer}
  512 [do k=                    {Number of bytes to read}
    SendOnesToCard!             {XXX Read directly into buffer}
    q.                          {Store byte in buffer}
    q 1+ q=                     {Advance write pointer, cross page boundaries}
    k 1- if>0loop]              {Looping}

  SendOnesToCard!               {Read 16-bit checksum}
  SendOnesToCard!
  DisableCard!

  pop ret
] ReadSector=

{-----------------------------------------------------------------------+
|                       RAM page $64                                    |
+-----------------------------------------------------------------------}
*=$64a0

{ LoadByte }
[def
  {
    Read next byte directly from file and advance position
    !!! XXX This is slow, but doesn't use buffer space !!!
  }
  push

  FilePosL FileSizeL^           {Check for EOF}
  [if=0 FilePosH FileSizeH^]

  [if<>0                        {More to read}

    $1ff FilePosL&              {Read new sector}
    [if=0
      SendOnesToCard!           {Ignore checksum}
      SendOnesToCard!
      OpenSector!               {Open next sector}
      NextSector!]

    FilePosL 1+ FilePosL=       {Increment position in file}
    [if=0 FilePosH 1+ FilePosH=]

    SendOnesToCard!             {Returns the next data byte}
  else
    1-                          {Negative value for EOF}
  ]

  pop ret
] LoadByte=

{ ReadDirectory }
[def
  {
    Read first sector of current directory
  }
  push

  { Sector = ClusterBase + CurrentDir * ClusterSize }
  CurrentDirL ValueL=
  CurrentDirH ValueH=
  ClusterToSector!
  ReadSector!
  <SectorL++                    {XXX Replace with ClusterList}

  pop ret
] ReadDirectory=

{-----------------------------------------------------------------------+
|                       RAM page $65                                    |
+-----------------------------------------------------------------------}
*=$65a0

{ OpenFile }
[def
  {
    Prepare for reading file whose directory entry is pointed at by p
  }
  push
  0 FilePosL= FilePosH=         {Reset position in file}
  p $1c+ deek FileSizeL=        {Length of file in bytes}
  p $1e+ deek FileSizeH=
  p $1a+ deek ValueL=           {First cluster for file}
  p $14+ deek ValueH=
  ReadClusterChain!
  ClusterToSector!
  pop ret
] OpenFile=

{-----------------------------------------------------------------------+
|                                                                       |
|       32-bit arithmetic section                                       |
|                                                                       |
+-----------------------------------------------------------------------}

{ ClusterToSector }
[def
  {
    Multiply ValueL,H by ClusterSize and add ClusterBase (clobbers OffsetL,H)
  }
  push
  >ValueH, 15& >ValueH.         {Clear the top 4 reserved bits}
  1 [do k=
    ClusterSize- if<0
    ShiftLeft!
    k k+ loop]

  ClusterBaseL OffsetL=
  ClusterBaseH OffsetH=
  AddOffset!

  ValueL SectorL=               {Set as next sector to read}
  ValueH SectorH=

  pop ret
] ClusterToSector=

{-----------------------------------------------------------------------+
|                       RAM page $66                                    |
+-----------------------------------------------------------------------}
*=$66a0

{ SectorToByte }
[def
  {
    Multiply 32-bit ValueL,H by 512 (clobbers OffsetL,H)
    XXX Figure out what to do with this! This CAN'T be correct any longer
  }
  push
  0        <OffsetL.            {First shift left by one byte}
  <ValueL, >OffsetL.
  >ValueL, <OffsetH.
  <ValueH, >OffsetH.

  OffsetL ValueL=               {Then double once}
  OffsetH ValueH= AddOffset!

  pop ret
] SectorToByte=

{ ShiftLeft }
[def
  {
    Shift left ValueL,H by 1 bit (clobbers OffsetL,H)
  }
  push
  ValueL OffsetL=               {Double value}
  ValueH OffsetH=
  AddOffset!
  OffsetH                       {Return old high word}
  pop ret
] ShiftLeft=

{ AddOffset }
[def
  {
    Add 32-bit OffsetL,H to 32-bit ValueL,H and store result there
  }
  ValueL OffsetL^ [if<0         {Compare lower halves' most significant bits}
    ValueL                      {MSB unequal: carry taken from their sum}
  else
    $8000                       {MSB equal: carry taken from either term}
  ] OffsetL+                    {Carry now in MSB of vAC (inverted)}
  [if>=0 ValueH 1+ ValueH=]     {Apply carry to upper half}
  ValueH OffsetH+ ValueH=       {Sum upper half}
  ValueL OffsetL+ ValueL=       {Sum lower half and return this as well}
  ret
] AddOffset=

{-----------------------------------------------------------------------+
|                       RAM page $72                                    |
+-----------------------------------------------------------------------}
*=$72a0

[def `---------- #0] Buffer=    {String space for 32-bit unsigned decimal}

{-----------------------------------------------------------------------+
|                                                                       |
|       File reading section                                            |
|                                                                       |
+-----------------------------------------------------------------------}

{-----------------------------------------------------------------------+
|                       RAM page $73                                    |
+-----------------------------------------------------------------------}
*=$73a0

{ LoadGt1 }
[def
  {
    Load GT1 file into RAM and store start address in Address.
    See Docs/GT1-files.txt for details on GT1
    XXX Support loading into audio channels
  }
  push

  PrintName!

  OpenFile!                     {Prepare for reading}

  { Read file contents byte by byte }
  LoadByte!                     {Fetch first byte}

  [do                           {Chunk copy loop}
    >Address.                   {High-address comes first}
    LoadByte! <Address.         {Then the low address}
    LoadByte!                   {Byte count (0 means 256)}
    [do                         {Byte copy loop}
      \sysArgs5.                {Implicitly chops counter to 8 bits}
      LoadByte! Address.        {Poke next byte into memory}
      <Address++                {Advance write pointer in page}
      \sysArgs5, 1-             {Decrement counter}
      if<>0loop]
    LoadByte!                   {Go to next block}
    if<>0loop]
  LoadByte! >Address.           {Load execution address}
  LoadByte! <Address.

  LoadByte! [if>=0 0 Address=]  {Expect EOF, clear Address when missing}

  512 [do i=                    {Read tail of sector}
    SendOnesToCard!
    i 1- if>0loop]

  DisableCard!

  pop ret
] LoadGt1=

{-----------------------------------------------------------------------+
|                       RAM page $75                                    |
+-----------------------------------------------------------------------}
*=$75a0

{*** some FAT functions ***}

{ NextSector }
[def
  push

  <SectorL++                    {To next sector}

  $1fff FileSizeL&              {XXX Hardcoded. Should derive from ClusterSize}
  [if=0
    List 4+ List= deek ValueL=  {Get next cluster from ClusterList}
    List 2+       deek ValueH=
    ClusterToSector!
  ]

  pop ret
] NextSector=

{-----------------------------------------------------------------------+
|                       RAM page $76                                    |
+-----------------------------------------------------------------------}
*=$76a0

{ ReadClusterChain }
[def
  {
    Traverse the FAT and collect the clusters used by this file
    XXX TODO Don't do this if the file is smaller than the cluster size
  }
  push

  \ClusterList List=            {Reset}
  Newline!
  PrintValue!
  [do
    { Store in list }
    ValueL List: <List++ <List++
    ValueH List: <List++ <List++

    { Break at End Of Cluster marker }
    $f000 ValueH| 1+ [if=0      {Test high word first, ignore bit 28:31}
    $0007 ValueL| 1+] if<>0     {Optionally test low word, ignore bit 0:2}

    NextCluster!
    PrintValue!
    loop]

  \ClusterList                  {Reset}
  List=   deek ValueL=
  List 2+ deek ValueH=

  pop ret
] ReadClusterChain=

{-----------------------------------------------------------------------+
|                       RAM page $77                                    |
+-----------------------------------------------------------------------}
*=$77a0

{ NextCluster }
[def
  {
    Find next cluster in FAT
  }
  push

  >ValueL, <OffsetL.            {Offset = Cluster >> 8}
  <ValueH, >OffsetL.
  >ValueH,  OffsetH=

  <ValueL, m=                   {Park the lowest 8 bits in m}
  128& peek ValueL=             {Value = 1 if bit7 else 0}
  0         ValueH=
  AddOffset! AddOffset!         {Value += 2 * Offset: now we have Cluster >> 7}

  FatBaseL OffsetL=             {Value += First sector for FAT}
  FatBaseH OffsetH=
  AddOffset!

  SectorL^                      {Compare sector number to what we already have}
  [if=0 ValueH SectorH^]

  [if<>0
    ValueL SectorL=             {Read new sector from FAT area}
    ValueH SectorH=
    ReadSector!
  ]

  m 127& 2<< Address+           {Pointer in FAT sector at 32-bit word i & $7f}
  m=   deek ValueL=             {Fetch next cluster number in the chain}
  m 2+ deek ValueH=

  pop ret
] NextCluster=

{-----------------------------------------------------------------------+
|                       RAM page $7f                                    |
+-----------------------------------------------------------------------}

_ClusterList=$7fa0              {Room for 96/4 = 24 clusters}

{-----------------------------------------------------------------------+
|                                                                       |
+-----------------------------------------------------------------------}

