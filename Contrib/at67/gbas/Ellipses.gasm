_startAddress_      EQU                     0x0200

; Internal variables
serialRawPrev       EQU                     0x0081
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
frameCountPrev      EQU                     register0 + 0x28
miscFlags           EQU                     register0 + 0x2A
highByteMask        EQU                     register0 + 0x2C

; Internal buffers
textWorkArea        EQU                     0xffa0

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_loop               EQU                     0x024e
_ellipse            EQU                     0x02b6
_else_0x0294        EQU                     0x027e
_endif_0x0298       EQU                     0x0282
_end_0x02de         EQU                     0x02b4
_page_0x0300        EQU                     0x0300
_while_0x034f       EQU                     0x0323
_else_0x037f        EQU                     0x0343
_endif_0x039d       EQU                     0x035b
_wend_0x03cf        EQU                     0x038d
_end_0x03d1         EQU                     0x038f

; Variables
_color              EQU                     0x0030
_a                  EQU                     0x0032
_b                  EQU                     0x0034
_t                  EQU                     0x0036
_mx                 EQU                     0x0038
_my                 EQU                     0x003a
_addr               EQU                     0x003c
_mx1                EQU                     0x003e
_my1                EQU                     0x0040
_mx2                EQU                     0x0042
_my2                EQU                     0x0044
_aa                 EQU                     0x0046
_dx                 EQU                     0x0048
_bb                 EQU                     0x004a
_dy                 EQU                     0x004c
_r                  EQU                     0x004e
_rx                 EQU                     0x0050
_ry                 EQU                     0x0052
_x                  EQU                     0x0054

; Strings

; Define Bytes

; Define Words

; Lookup Tables

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC
                    LDI                     2
                    STW                     graphicsMode
                    ScanlineMode                                            ; cls : mode 2

_loop               Rand                    
                    ANDI                    63
                    STW                     _color                          ; color = rnd(0) AND &h3F

                    LDI                     0x27
                    RandMod                 
                    ADDI                    1
                    STW                     _a
                    LDI                     0x27
                    RandMod                 
                    ADDI                    1
                    STW                     _b                              ; a = rnd(39) + 1 : b = rnd(39) + 1

                    LDW                     _a
                    SUBW                    _b
                    BLE                     _else_0x0294                    ; if a &&> b

                    LDW                     _a
                    STW                     _t
                    BRA                     _endif_0x0298                   ; t = a

_else_0x0294        LDW                     _b
                    STW                     _t                              ; t = b

_endif_0x0298       LDW                     _t
                    LSLW                    
                    STW                     0xc2
                    LDI                     160
                    SUBW                    0xc2
                    RandMod                 
                    ADDW                    _t
                    STW                     _mx                             ; mx = rnd(160 - (t LSL 1)) + t

                    LDW                     _t
                    LSLW                    
                    STW                     0xc2
                    LDI                     120
                    SUBW                    0xc2
                    RandMod                 
                    ADDW                    _t
                    STW                     _my                             ; my = rnd(120 - (t LSL 1)) + t

                    LDWI                    _ellipse
                    CALL                    giga_vAC                        ; gosub ellipse

                    LDWI                    _loop
                    CALL                    giga_vAC                        ; goto loop

_end_0x02de         BRA                     _end_0x02de                     ; end

_ellipse            PUSH                    
                    LDW                     _mx
                    ST                      _addr
                    LDW                     _my
                    ADDI                    8
                    ST                      _addr + 1                       ; addr.lo = mx : addr.hi = my + 8

                    LDW                     _addr
                    ADDW                    _a
                    STW                     0xc0
                    LDW                     _color
                    POKE                    0xc0                            ; poke addr + a, color

                    LDW                     _addr
                    SUBW                    _a
                    STW                     0xc0
                    LDW                     _color
                    POKE                    0xc0                            ; poke addr - a, color

                    LDW                     _mx
                    SUBW                    _a
                    STW                     _mx1
                    LDW                     _my
                    STW                     _my1                            ; mx1 = mx - a : my1 = my

                    LDW                     _mx
                    ADDW                    _a
                    STW                     _mx2
                    LDW                     _my
                    STW                     _my2                            ; mx2 = mx + a : my2 = my

                    LDW                     _a
                    STW                     _aa
                    LSLW                    
                    STW                     _dx                             ; aa = a      : dx = aa LSL 1

                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    LDW                     _b
                    STW                     _bb
                    LSLW                    
                    STW                     _dy                             ; bb = b      : dy = bb LSL 1

                    LDW                     _a
                    STW                     mathX
                    LDW                     _bb
                    STW                     mathY
                    LDWI                    multiply16bit
                    CALL                    giga_vAC
                    STW                     _r
                    LSLW                    
                    STW                     _rx                             ; r  = a * bb : rx = r  LSL 1

                    LDI                     0
                    STW                     _ry                             ; ry = 0

                    LDW                     _a
                    STW                     _x                              ; x  = a

_while_0x034f       LDW                     _x
                    BLE                     _wend_0x03cf                    ; while x &&> 0

                    LDW                     _r
                    BLE                     _else_0x037f                    ; if r &&> 0

                    INC                     _my1
                    LDW                     _my2
                    SUBI                    1
                    STW                     _my2                            ; inc my1 : dec my2

                    LDW                     _ry
                    ADDW                    _dx
                    STW                     _ry
                    LDW                     _r
                    SUBW                    _ry
                    STW                     _r
                    BRA                     _endif_0x039d                   ; ry = ry + dx : r = r - ry

_else_0x037f        LDW                     _x
                    SUBI                    1
                    STW                     _x
                    INC                     _mx1
                    LDW                     _mx2
                    SUBI                    1
                    STW                     _mx2                            ; dec x : inc mx1 : dec mx2

                    LDW                     _rx
                    SUBW                    _dy
                    STW                     _rx
                    ADDW                    _r
                    STW                     _r                              ; rx = rx - dy : r = rx + r

_endif_0x039d       LDW                     _my1
                    ADDI                    8
                    ST                      _addr + 1                       ; addr.hi = my1 + 8

                    LDW                     _mx1
                    ST                      _addr
                    LDW                     _color
                    POKE                    _addr                           ; addr.lo = mx1 : poke addr, color

                    LDW                     _mx2
                    ST                      _addr
                    LDW                     _color
                    POKE                    _addr                           ; addr.lo = mx2 : poke addr, color

                    LDW                     _my2
                    ADDI                    8
                    ST                      _addr + 1                       ; addr.hi = my2 + 8

                    LDW                     _mx1
                    ST                      _addr
                    LDW                     _color
                    POKE                    _addr                           ; addr.lo = mx1 : poke addr, color

                    LDW                     _mx2
                    ST                      _addr
                    LDW                     _color
                    POKE                    _addr                           ; addr.lo = mx2 : poke addr, color

                    BRA                     _while_0x034f                   ; wend

_wend_0x03cf        POP                     
                    RET                                                     ; return

_end_0x03d1         BRA                     _end_0x03d1                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0xff97
convertEqOp         EQU     0xff8e
convertNeOp         EQU     0xff85
convertLeOp         EQU     0xff7c
convertGeOp         EQU     0xff73
convertLtOp         EQU     0xff6a
convertGtOp         EQU     0xff61
multiply16bit       EQU     0xfe9e
divide16bit         EQU     0xfe44
rand16bit           EQU     0xfee3
randMod16bit        EQU     0xfed0
scanlineMode        EQU     0xfeeb
resetVideoTable     EQU     0xfe25
initClearFuncs      EQU     0xff3e
clearVertBlinds     EQU     0xff04
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathMask            EQU     register13
mathRem             EQU     register12
mathSign            EQU     register13
mathScratch         EQU     register14
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

multiply16_exit     PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathSum
                    RET


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET



                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_skip0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_skip0      LDW     mathY                     
                    BGE     divide16_skip1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_skip1      LDI     0
                    STW     mathRem
    
divide16_loop       STW     mathScratch
                    LDW     mathRem
                    ADDW    mathRem
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_skip3
                    INC     mathRem
                    
divide16_skip3      LDW     mathX
                    ADDW    mathX
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_skip4
                    STW     mathRem
                    INC     mathX
                    
divide16_skip4      PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathScratch
                    ADDI    1
                    ANDI    0x0F
                    BNE     divide16_loop
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


randMod16bit        PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    STW     mathX
                    LDWI    divide16bit
                    CALL    giga_vAC
                    LDW     mathRem
                    POP                    
                    RET


; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4           ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_addr       EQU     register13
drawLine_tmp        EQU     register14
  
drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_addr       EQU     register15

    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET

