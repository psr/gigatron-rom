_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
frameCountPrev      EQU                     register0 + 0x28
miscFlags           EQU                     register0 + 0x2A
highByteMask        EQU                     register0 + 0x2C

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_break              EQU                     0x02d3
_next_0x0257        EQU                     0x0257
_next_0x0260        EQU                     0x0260
_next_0x0274        EQU                     0x026e
_else_0x02bf        EQU                     0x02a5
_page_0x0300        EQU                     0x0300
_end_0x036f         EQU                     0x033c

; Variables
_cy                 EQU                     0x0030
_py                 EQU                     0x0032
_cx                 EQU                     0x0034
_px                 EQU                     0x0036
_x                  EQU                     0x0038
_y                  EQU                     0x003a
_x2                 EQU                     0x003c
_y2                 EQU                     0x003e
_c                  EQU                     0x0040

; Strings

; Define Bytes
def_bytes_0x0600    EQU                     0x0600
def_bytes_0x0600    DB                      1 2 3 7 11 15 14 13 12 60 56 52 48 32 16 0 

; Lookup Tables

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    LDI                     2
                    STW                     graphicsMode
                    ScanlineMode                                            ; mode 2

                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC                        ; cls

                    LDWI                    -60
                    STW                     _cy                             ; cy = ymin

                    LDI                     8
                    STW                     _py                             ; for py=8 to 67

_next_0x0257        LDWI                    -90
                    STW                     _cx                             ; cx = xmin

                    LDI                     0
                    STW                     _px                             ; for px=0 to 159

_next_0x0260        LDI                     0
                    STW                     _x
                    STW                     _y
                    STW                     _x2
                    STW                     _y2                             ; x=0 : y=x : x2=y : y2=x2

                    LDI                     0
                    STW                     _c                              ; for c=0 to 14

_next_0x0274        LDW                     _x
                    STW                     mathX
                    LDW                     _x
                    STW                     mathY
                    LDWI                    multiply16bit
                    CALL                    giga_vAC
                    STW                     mathShift
                    ShiftRight5bit          
                    STW                     _x2                             ; x2 = (x*x) LSR fracbits

                    LDW                     _y
                    STW                     mathX
                    LDW                     _y
                    STW                     mathY
                    LDWI                    multiply16bit
                    CALL                    giga_vAC
                    STW                     mathShift
                    ShiftRight5bit          
                    STW                     _y2                             ; y2 = (y*y) LSR fracbits

                    LDW                     _x2
                    ADDW                    _y2
                    SUBI                    128
                    BLE                     _else_0x02bf
                    BRA                     _break                          ; if x2+y2 &&> (2**fracbits * 4) then goto &break

_else_0x02bf        LDW                     _x
                    STW                     mathX
                    LDW                     _y
                    STW                     mathY
                    LDWI                    multiply16bit
                    CALL                    giga_vAC
                    STW                     mathShift
                    ShiftRightSgn4bit       
                    ADDW                    _cy
                    STW                     _y                              ; y = ((x*y) ASR (fracbits-1)) + cy

                    LDW                     _x2
                    SUBW                    _y2
                    ADDW                    _cx
                    STW                     _x                              ; x = x2 - y2 + cx

                    ForNextLoopUp           _c _next_0x0274 14              ; next c

_break              LD                      _py
                    ST                      0xc0 + 1
                    LDW                     0xc0
                    ANDW                    highByteMask
                    ADDW                    _px
                    STW                     0xc0
                    LDWI                    1536
                    ADDW                    _c
                    PEEK                    
                    POKE                    0xc0                            ; poke (py LSL 8) + px, peek(colours + c)

                    LDI                     135
                    SUBW                    _py
                    STW                     0xc0
                    LD                      0xc0
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    ST                      0xc2 + 1
                    LDW                     0xc2
                    ANDW                    highByteMask
                    ADDW                    _px
                    STW                     0xc2
                    LDWI                    1536
                    ADDW                    _c
                    PEEK                    
                    POKE                    0xc2                            ; poke ((135 - py) LSL 8) + px, peek(colours + c)

                    LDW                     _cx
                    ADDI                    1
                    STW                     _cx                             ; cx = cx + dx

                    ForNextLoopUp           _px _next_0x0260 159            ; next px

                    LDW                     _cy
                    ADDI                    1
                    STW                     _cy                             ; cy = cy + dy

                    ForNextLoopUp           _py _next_0x0257 67             ; next py

_end_0x036f         BRA                     _end_0x036f                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0xff60
convertEqOp         EQU     0xff69
convertNeOp         EQU     0xff72
convertLeOp         EQU     0xff7b
convertGeOp         EQU     0xff84
convertLtOp         EQU     0xff8d
convertGtOp         EQU     0xff96
multiply16bit       EQU     0xffd6
shiftRight5bit      EQU     0xfe3a
shiftRightSgn4bit   EQU     0xfe44
scanlineMode        EQU     0xffc2
resetVideoTable     EQU     0xfe61
initClearFuncs      EQU     0xff9f
clearVertBlinds     EQU     0xfe00
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
lutLabel            EQU     register9


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register0
mathY               EQU     register1
mathSum             EQU     register2
mathMask            EQU     register3
mathRem             EQU     register8
mathSign            EQU     register9
mathScratch         EQU     register10
mathShift           EQU     register11
mathBase            EQU     register8
mathPow             EQU     register9
mathResult          EQU     register10


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDI     1
    
multiply16_loop     STW     mathMask
                    ANDW    mathY
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum
                    
multiply16_skip     LDW     mathX
                    ADDW    mathX
                    STW     mathX
                    LDW     mathMask
                    ADDW    mathMask
                    BNE     multiply16_loop
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathSum
                    RET


shiftRight5bit      LDWI    SYS_LSRW5_50
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     0xF5                ; 0xF5 = 270-max(14,50/2)
                    RET


shiftRightSgn4bit   LDWI    SYS_LSRW4_50
                    STW     giga_sysFn
                    LD      mathShift + 1
                    ANDI    0x80
                    BEQ     shiftRS4_pos        ; check sign
                    LDWI    0xF000
                    STW     mathSign
                    LDW     mathShift
                    SYS     0xF5                ; shift right 4
                    ORW     mathSign            ; fix sign
                    RET

shiftRS4_pos        LDW     mathShift           ; positive number
                    SYS     0xF5                ; 0xF5 = 270-max(14,50/2)
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_addr       EQU     register13
drawLine_tmp        EQU     register14
    
    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     0xE6                ; 270 - max(14,80/2)
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET

