_startAddress_      EQU                     0x0200

; Internal variables
serialRawPrev       EQU                     0x0081
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
frameCountPrev      EQU                     register0 + 0x28
miscFlags           EQU                     register0 + 0x2A
highByteMask        EQU                     register0 + 0x2C

; Internal buffers
textWorkArea        EQU                     0x7fa0

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_loop               EQU                     0x0298
_113                EQU                     0x02c9
_50                 EQU                     0x02df
_119                EQU                     0x0304
_51                 EQU                     0x031a
_101                EQU                     0x0330
_114                EQU                     0x0346
_53                 EQU                     0x035c
_116                EQU                     0x0372
_54                 EQU                     0x0388
_121                EQU                     0x039e
_55                 EQU                     0x03b4
_117                EQU                     0x03ca
_105                EQU                     0x03e0
_57                 EQU                     0x0406
_111                EQU                     0x041c
_48                 EQU                     0x0432
_112                EQU                     0x0448
_122                EQU                     0x045e
_channels           EQU                     0x0477
_audio              EQU                     0x04cc
_waveform           EQU                     0x04d7
_playNote           EQU                     0x052a
_playExit           EQU                     0x0580
_inverseChar        EQU                     0x0587
_normalChar         EQU                     0x0597
_printChar          EQU                     0x05a7
_206                EQU                     0x05c5
_207                EQU                     0x05d7
_208                EQU                     0x05e9
_209                EQU                     0x0609
_drawKeys           EQU                     0x061b
_cont               EQU                     0x06b4
_else_0x02c8        EQU                     0x02b6
_page_0x0300        EQU                     0x0300
_page_0x0400        EQU                     0x0400
_else_0x0472        EQU                     0x0475
_next_0x0479        EQU                     0x047c
_else_0x04b9        EQU                     0x04a0
_else_0x04f0        EQU                     0x04c1
_page_0x0500        EQU                     0x0500
_next_0x0535        EQU                     0x0511
_next_0x0553        EQU                     0x052f
_else_0x0583        EQU                     0x054b
_else_0x05cd        EQU                     0x0577
_page_0x0600        EQU                     0x0600
_next_0x0668        EQU                     0x0620
_next_0x06d4        EQU                     0x0676
_else_0x06e1        EQU                     0x067f
_else_0x06ee        EQU                     0x0688
_page_0x08a0        EQU                     0x08a0
_end_0x0770         EQU                     0x08a9

; Variables
_n                  EQU                     0x0030
_c                  EQU                     0x0032
_kk                 EQU                     0x0034
_char               EQU                     0x0036
_posxy              EQU                     0x0038
_fg                 EQU                     0x003a
_bg                 EQU                     0x003c
_ch                 EQU                     0x003e
_z                  EQU                     0x0040
_chan_array         EQU                     0x7ef6
_chan_array         DW                      0x0000 0x0000 0x0000 0x0000 0x0000 
_note_array         EQU                     0x7eec
_note_array         DW                      0x0000 0x0000 0x0000 0x0000 0x0000 
_k                  EQU                     0x0042
_i                  EQU                     0x0044
_ofs                EQU                     0x0046

; Strings
_str_0x7ee7         EQU                     0x7ee7
_str_0x7ee7         DB                      3 'Z: ' 0
_str_0x7edd         EQU                     0x7edd
_str_0x7edd         DB                      8 'Metallic' 0
_str_0x7ed3         EQU                     0x7ed3
_str_0x7ed3         DB                      8 'Triangle' 0
_str_0x7ec9         EQU                     0x7ec9
_str_0x7ec9         DB                      8 'Pulse   ' 0
_str_0x7ebf         EQU                     0x7ebf
_str_0x7ebf         DB                      8 'Sawtooth' 0
_str_0x7eab         EQU                     0x7eab
_str_0x7eab         DB                      18 ' 2 3   5 6 7   9 0' 0
_str_0x7deb         EQU                     0x7deb
_str_0x7deb         DB                      19 'Q W E R T Y U I O P' 0

; Define Bytes

; Define Words

; Lookup Tables
_lut_numericLabs    EQU                     0x77a9
_lut_numericLabs    DW                      113 50 119 51 101 114 53 116 54 121 55 117 105 57 111 48 112 122 206 207 208 209 0
_lut_numericAddrs   EQU                     0x76d4
_lut_numericAddrs   DW                      0x02c9 0x02df 0x0304 0x031a 0x0330 0x0346 0x035c 0x0372 0x0388 0x039e 0x03b4 0x03ca 0x03e0 0x0406 0x041c 0x0432 0x0448 0x045e 0x05c5 0x05d7 0x05e9 0x0609 

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    LDWI                    505
                    STW                     register0
                    LDI                     238
                    POKE                    register0                       ; poke &h01F9, 238  'disable video

                    LDI                     2
                    STW                     graphicsMode
                    ScanlineMode            
                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC                        ; mode 2 : cls

                    LDWI                    505
                    STW                     register0
                    LDI                     0
                    POKE                    register0                       ; poke &h01F9, 0  'enable video

                    LDI                     0
                    STW                     _n
                    STW                     _c
                    STW                     _kk
                    STW                     _char
                    STW                     _posxy                          ; n=0 : c=n : kk=c : char=kk : posxy=char

                    LD                      0xa2
                    STW                     _fg
                    LD                      0xa3
                    STW                     _bg                             ; fg=peek(162) : bg=peek(163)

                    LDI                     252
                    STW                     _ch
                    LDI                     2
                    STW                     _z                              ; ch=252 : z=2

                    LDWI                    505
                    STW                     register0
                    LDI                     238
                    POKE                    register0                       ; poke &h01F9, 238  'disable video

                    LDWI                    _drawKeys
                    CALL                    giga_vAC                        ; gosub drawKeys

                    LDWI                    _waveform
                    CALL                    giga_vAC                        ; gosub waveform

                    LDWI                    505
                    STW                     register0
                    LDI                     0
                    POKE                    register0                       ; poke &h01F9, 0  'enable video

_loop               WaitVBlank                                              ; wait

                    LDI                     2
                    ST                      44                              ; poke 44,2

                    LD                      0x0f
                    STW                     _k                              ; k=peek(15)

                    LDWI                    _channels
                    CALL                    giga_vAC                        ; gosub channels

                    LDW                     _k
                    SUBW                    _kk
                    BEQ                     _else_0x02c8
                    LDWI                    _normalChar
                    CALL                    giga_vAC                        ; if k &&<> kk then gosub normalChar

_else_0x02c8        LDW                     _k
                    STW                     numericLabel
                    LDI                     0
                    STW                     defaultLabel
                    LDWI                    gosubNumericLabel
                    CALL                    giga_vAC                        ; gosub k

                    LDW                     _k
                    STW                     _kk                             ; kk = k

                    BRA                     _loop                           ; goto &loop

_113                PUSH                    
                    LDWI                    2121
                    STW                     _n
                    LDI                     81
                    STW                     _char
                    LDWI                    23320
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  73 +  8*256 : char = 81 : posxy =  24 + 91*256 : gosub playNote : return : 'C

_50                 PUSH                    
                    LDWI                    2315
                    STW                     _n
                    LDI                     50
                    STW                     _char
                    LDWI                    5662
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    POP                     
                    RET                                                     ; n =  11 +  9*256 : char = 50 : posxy =  30 + 22*256 : gosub playNote : return : 'C#

_119                PUSH                    
                    LDWI                    2384
                    STW                     _n
                    LDI                     87
                    STW                     _char
                    LDWI                    23332
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  80 +  9*256 : char = 87 : posxy =  36 + 91*256 : gosub playNote : return : 'D

_51                 PUSH                    
                    LDWI                    2585
                    STW                     _n
                    LDI                     51
                    STW                     _char
                    LDWI                    5674
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  25 + 10*256 : char = 51 : posxy =  42 + 22*256 : gosub playNote : return : 'D#

_101                PUSH                    
                    LDWI                    2663
                    STW                     _n
                    LDI                     69
                    STW                     _char
                    LDWI                    23344
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n = 103 + 10*256 : char = 69 : posxy =  48 + 91*256 : gosub playNote : return : 'E

_114                PUSH                    
                    LDWI                    2873
                    STW                     _n
                    LDI                     82
                    STW                     _char
                    LDWI                    23356
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  57 + 11*256 : char = 82 : posxy =  60 + 91*256 : gosub playNote : return : 'F

_53                 PUSH                    
                    LDWI                    3088
                    STW                     _n
                    LDI                     53
                    STW                     _char
                    LDWI                    5698
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  16 + 12*256 : char = 53 : posxy =  66 + 22*256 : gosub playNote : return : 'F#

_116                PUSH                    
                    LDWI                    3180
                    STW                     _n
                    LDI                     84
                    STW                     _char
                    LDWI                    23368
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n = 108 + 12*256 : char = 84 : posxy =  72 + 91*256 : gosub playNote : return : 'G

_54                 PUSH                    
                    LDWI                    3406
                    STW                     _n
                    LDI                     54
                    STW                     _char
                    LDWI                    5710
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  78 + 13*256 : char = 54 : posxy =  78 + 22*256 : gosub playNote : return : 'G#

_121                PUSH                    
                    LDWI                    3637
                    STW                     _n
                    LDI                     89
                    STW                     _char
                    LDWI                    23380
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  53 + 14*256 : char = 89 : posxy =  84 + 91*256 : gosub playNote : return : 'A

_55                 PUSH                    
                    LDWI                    3875
                    STW                     _n
                    LDI                     55
                    STW                     _char
                    LDWI                    5722
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  35 + 15*256 : char = 55 : posxy =  90 + 22*256 : gosub playNote : return : 'A#

_117                PUSH                    
                    LDWI                    4119
                    STW                     _n
                    LDI                     85
                    STW                     _char
                    LDWI                    23392
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  23 + 16*256 : char = 85 : posxy =  96 + 91*256 : gosub playNote : return : 'B

_105                PUSH                    
                    LDWI                    4371
                    STW                     _n
                    LDI                     73
                    STW                     _char
                    LDWI                    23404
                    STW                     _posxy
                    LDWI                    _playNote
                    STW                     0xde
                    LDWI                    _page_0x0400
                    CALL                    giga_vAC
_page_0x0400        LDW                     0xde
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  19 + 17*256 : char = 73 : posxy = 108 + 91*256 : gosub playNote : return : 'C

_57                 PUSH                    
                    LDWI                    4629
                    STW                     _n
                    LDI                     57
                    STW                     _char
                    LDWI                    5746
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  21 + 18*256 : char = 57 : posxy = 114 + 22*256 : gosub playNote : return : 'C#

_111                PUSH                    
                    LDWI                    4895
                    STW                     _n
                    LDI                     79
                    STW                     _char
                    LDWI                    23416
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  31 + 19*256 : char = 79 : posxy = 120 + 91*256 : gosub playNote : return : 'D

_48                 PUSH                    
                    LDWI                    5170
                    STW                     _n
                    LDI                     48
                    STW                     _char
                    LDWI                    5758
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  50 + 20*256 : char = 48 : posxy = 126 + 22*256 : gosub playNote : return : 'D#

_112                PUSH                    
                    LDWI                    5453
                    STW                     _n
                    LDI                     80
                    STW                     _char
                    LDWI                    23428
                    STW                     _posxy
                    LDWI                    _playNote
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; n =  77 + 21*256 : char = 80 : posxy = 132 + 91*256 : gosub playNote : return : 'E

_122                PUSH                    
                    LDW                     _kk
                    SUBW                    _k
                    BEQ                     _else_0x0472
                    LDW                     _z
                    ADDI                    1
                    ANDI                    3
                    STW                     _z
                    LDWI                    _waveform
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; if kk &&<> k then z = (z+1) AND 3 : gosub waveform : return

_else_0x0472        POP                     
                    RET                                                     ; return

_channels           PUSH                    
                    LDI                     1
                    STW                     _c                              ; for c=1 &to 4

_next_0x0479        LDWI                    0x7ef6
                    ADDW                    _c
                    ADDW                    _c
                    DEEK                    
                    BLE                     _else_0x04b9
                    LDWI                    0x7ef6
                    ADDW                    _c
                    ADDW                    _c
                    DEEK                    
                    SUBI                    1
                    STW                     register0
                    LDWI                    0x7ef6
                    ADDW                    _c
                    ADDW                    _c
                    STW                     register1
                    LDW                     register0
                    DOKE                    register1                       ; if chan(c) &&> 0 then chan(c) = chan(c) - 1

_else_0x04b9        LDWI                    0x7ef6
                    ADDW                    _c
                    ADDW                    _c
                    DEEK                    
                    BNE                     _else_0x04f0
                    LDWI                    0x7eec
                    ADDW                    _c
                    ADDW                    _c
                    STW                     register1
                    LDI                     0
                    DOKE                    register1
                    LDI                     0
                    STW                     _n
                    LDWI                    _audio
                    CALL                    giga_vAC                        ; if chan(c) &&= 0 then note(c) = 0 : n=0 : gosub audio

_else_0x04f0        ForNextInc              _c _next_0x0479 4               ; next c

                    POP                     
                    RET                                                     ; return

_audio              PUSH                    
                    LDW                     _c
                    ST                      _ch + 1
                    LDW                     _n
                    DOKE                    _ch                             ; ch.hi = c : doke ch,n

                    POP                     
                    RET                                                     ; return

_waveform           PUSH                    
                    LDI                     48
                    ST                      cursorXY
                    LDI                     103
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC
                    PrintString             _str_0x7ee7                     ; at 48,103 : print "Z: ";

                    LDI                     206
                    ADDW                    _z
                    STW                     0xde
                    LDWI                    _page_0x0500
                    CALL                    giga_vAC
_page_0x0500        LDW                     0xde
                    STW                     numericLabel
                    LDI                     0
                    STW                     defaultLabel
                    LDWI                    gosubNumericLabel
                    CALL                    giga_vAC                        ; gosub 206+z

                    LDI                     1
                    STW                     _c                              ; for c=1 &to 4

_next_0x0535        LDW                     _c
                    ST                      _ch + 1
                    LDW                     _ch
                    SUBI                    1
                    STW                     0xc0
                    LDW                     _z
                    POKE                    0xc0                            ; ch.hi = c : poke ch-1,z

                    ForNextInc              _c _next_0x0535 4               ; next c

                    POP                     
                    RET                                                     ; return

_playNote           PUSH                    
                    LDI                     1
                    STW                     _c                              ; for c=1 &to 4

_next_0x0553        LDWI                    0x7eec
                    ADDW                    _c
                    ADDW                    _c
                    DEEK                    
                    SUBW                    _k
                    BNE                     _else_0x0583
                    LDWI                    0x7ef6
                    ADDW                    _c
                    ADDW                    _c
                    STW                     register1
                    LDI                     15
                    DOKE                    register1
                    BRA                     _playExit                       ; if note(c) &&= k then chan(c) = NOTELEN : goto &playExit

_else_0x0583        LDWI                    0x7ef6
                    ADDW                    _c
                    ADDW                    _c
                    DEEK                    
                    BNE                     _else_0x05cd
                    LDWI                    0x7ef6
                    ADDW                    _c
                    ADDW                    _c
                    STW                     register1
                    LDI                     15
                    DOKE                    register1
                    LDWI                    0x7eec
                    ADDW                    _c
                    ADDW                    _c
                    STW                     register1
                    LDW                     _k
                    DOKE                    register1
                    LDWI                    _audio
                    CALL                    giga_vAC
                    BRA                     _playExit                       ; if chan(c) &&= 0 then chan(c) = NOTELEN : note(c) = k : gosub audio : goto &playExit

_else_0x05cd        ForNextInc              _c _next_0x0553 4               ; next c

_playExit           LDWI                    _inverseChar
                    CALL                    giga_vAC                        ; gosub inverseChar

                    POP                     
                    RET                                                     ; return

_inverseChar        PUSH                    
                    LDW                     _bg
                    ST                      162
                    LDW                     _fg
                    ST                      163                             ; poke 162,bg : poke 163,fg

                    LDWI                    _printChar
                    CALL                    giga_vAC                        ; gosub printChar

                    POP                     
                    RET                                                     ; return

_normalChar         PUSH                    
                    LDW                     _fg
                    ST                      162
                    LDW                     _bg
                    ST                      163                             ; poke 162,fg : poke 163,bg

                    LDWI                    _printChar
                    CALL                    giga_vAC                        ; gosub printChar

                    POP                     
                    RET                                                     ; return

_printChar          PUSH                    
                    LD                      _posxy
                    ST                      cursorXY
                    LD                      _posxy + 1
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC                        ; at posxy.lo,posxy.hi

                    LDW                     _char
                    PrintAcChar             
                    NewLine                                                 ; print chr$(char)

                    POP                     
                    RET                                                     ; return

_206                PUSH                    
                    PrintString             _str_0x7edd
                    NewLine                 
                    POP                     
                    RET                                                     ; print "Metallic" : return

_207                PUSH                    
                    PrintString             _str_0x7ed3
                    NewLine                 
                    POP                     
                    RET                                                     ; print "Triangle" : return

_208                PUSH                    
                    PrintString             _str_0x7ec9
                    STW                     0xde
                    LDWI                    _page_0x0600
                    CALL                    giga_vAC
_page_0x0600        LDW                     0xde
                    NewLine                 
                    POP                     
                    RET                                                     ; print "Pulse   " : return

_209                PUSH                    
                    PrintString             _str_0x7ebf
                    NewLine                 
                    POP                     
                    RET                                                     ; print "Sawtooth" : return

_drawKeys           PUSH                    
                    LDI                     0
                    STW                     _i                              ; for i=0 &to 9

_next_0x0668        LDW                     _i
                    LSLW                    
                    LSLW                    
                    LSLW                    
                    STW                     0xc2
                    LDW                     _i
                    LSLW                    
                    LSLW                    
                    ADDW                    0xc2
                    ADDI                    20
                    STW                     _ofs                            ; ofs = (i LSL 3) + (i LSL 2) + 20  ' i*12 + 20

                    LDI                     0
                    ST                      163
                    LDW                     _ofs
                    STW                     drawRect_x1
                    LDI                     30
                    STW                     drawRect_y1
                    LDW                     _ofs
                    ADDI                    12
                    STW                     drawRect_x2
                    LDI                     89
                    STW                     drawRect_y2
                    DrawRect                                                ; poke 163,&h00 : rect  ofs,30, ofs+12,89

                    LDI                     255
                    ST                      163
                    LDW                     _ofs
                    ADDI                    1
                    STW                     drawRectF_x1
                    LDI                     31
                    STW                     drawRectF_y1
                    LDW                     _ofs
                    ADDI                    11
                    STW                     drawRectF_x2
                    LDI                     88
                    STW                     drawRectF_y2
                    DrawRectF                                               ; poke 163,&hFF : rectf ofs+1,31, ofs+11,88

                    ForNextInc              _i _next_0x0668 9               ; next i

                    LDI                     0
                    STW                     _i                              ; for i=0 &to 8

_next_0x06d4        LDW                     _i
                    SUBI                    2
                    BNE                     _else_0x06e1
                    BRA                     _cont                           ; if i &&= 2 then goto &cont

_else_0x06e1        LDW                     _i
                    SUBI                    6
                    BNE                     _else_0x06ee
                    BRA                     _cont                           ; if i &&= 6 then goto &cont

_else_0x06ee        LDW                     _i
                    LSLW                    
                    LSLW                    
                    LSLW                    
                    STW                     0xc2
                    LDW                     _i
                    LSLW                    
                    LSLW                    
                    ADDW                    0xc2
                    ADDI                    28
                    STW                     _ofs                            ; ofs = (i LSL 3) + (i LSL 2) + 28  ' i*12 + 28

                    LDI                     0
                    ST                      163
                    LDW                     _ofs
                    STW                     drawRectF_x1
                    LDI                     30
                    STW                     drawRectF_y1
                    LDW                     _ofs
                    ADDI                    8
                    STW                     drawRectF_x2
                    LDI                     70
                    STW                     drawRectF_y2
                    DrawRectF                                               ; poke 163,&h00 : rectf ofs,30, ofs+8,70

_cont               ForNextInc              _i _next_0x06d4 8               ; next i

                    LDWI                    3872
                    STW                     162                             ; doke 162,&h0F20

                    LDI                     24
                    ST                      cursorXY
                    LDI                     22
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC
                    PrintString             _str_0x7eab
                    NewLine                                                 ; at 24,22 : print " 2 3   5 6 7   9 0"

                    LDI                     24
                    ST                      cursorXY
                    LDI                     91
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC
                    PrintString             _str_0x7deb
                    STW                     0xde
                    LDWI                    _page_0x08a0
                    CALL                    giga_vAC
_page_0x08a0        LDW                     0xde
                    NewLine                                                 ; at 24,91 : print "Q W E R T Y U I O P"

                    POP                     
                    RET                                                     ; return

_end_0x0770         BRA                     _end_0x0770                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0x7ea2
convertEqOp         EQU     0x7de2
convertNeOp         EQU     0x7dd9
convertLeOp         EQU     0x7dd0
convertGeOp         EQU     0x7dc7
convertLtOp         EQU     0x7dbe
convertGtOp         EQU     0x7db5
gosubNumericLabel   EQU     0x7bbd
scanlineMode        EQU     0x7da1
waitVBlank          EQU     0x7bef
resetVideoTable     EQU     0x7aa6
initClearFuncs      EQU     0x7cdc
clearVertBlinds     EQU     0x7ca2
clearCursorRow      EQU     0x75b6
drawHLine           EQU     0x74a5
drawVLine           EQU     0x73a1
drawRect            EQU     0x78c0
drawRectF           EQU     0x77d7
printInit           EQU     0x78a5
printText           EQU     0x7ba4
printChr            EQU     0x7ac5
printChar           EQU     0x72a7
atTextCursor        EQU     0x7ad2
newLineScroll       EQU     0x79a1
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4           ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_addr       EQU     register13
drawLine_tmp        EQU     register14
  
drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_addr       EQU     register15

    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


waitVBlank          LD      giga_frameCount
                    SUBW    frameCountPrev
                    BEQ     waitVBlank
                    LD      giga_frameCount
                    STW     frameCountPrev
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



drawHLine           PUSH
                    LDW     drawHLine_x2
                    SUBW    drawHLine_x1
                    BGE     drawHL_cont
                    LDW     drawHLine_x2
                    STW     drawLine_tmp
                    LDW     drawHLine_x1
                    STW     drawHLine_x2
                    LDW     drawLine_tmp
                    STW     drawHLine_x1        ; if x2 < x1 then swap x2 with x1
                    
drawHL_cont         LD      drawHLine_x1
                    ST      giga_sysArg4
                    LD      drawHLine_y1
                    ADDI    8
                    ST      giga_sysArg4 + 1
                    LDW     drawHLine_x2
                    SUBW    drawHLine_x1
                    SUBI    4
                    BLT     drawHL_loop1
                    
                    LD      fgbgColour + 1
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1    ; 4 pixels of fg colour
                    LDWI    SYS_Draw4_30        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    
                    LDW     drawHLine_x2        
                    SUBI    3
                    STW     drawHLine_x4        ; 4 pixel chunks limit

drawHL_loop0        SYS     30
                    CALL    realTimeProcAddr
                    LD      giga_sysArg4
                    ADDI    4
                    ST      giga_sysArg4
                    SUBW    drawHLine_x4
                    BLT     drawHL_loop0        ; all 4 pixel chunks
                    
drawHL_loop1        LD      fgbgColour + 1
                    POKE    giga_sysArg4
                    INC     giga_sysArg4
                    LD      giga_sysArg4
                    SUBW    drawHLine_x2
                    BLE     drawHL_loop1        ; remaining pixels
                    POP
                    RET



drawVLine           PUSH
                    LDW     drawVLine_y2
                    SUBW    drawVLine_y1
                    BGE     drawVL_cont
                    LDW     drawVLine_y2
                    STW     drawLine_tmp
                    LDW     drawVLine_y1
                    STW     drawVLine_y2
                    LDW     drawLine_tmp
                    STW     drawVLine_y1        ; if y2 < y1 then swap y2 with y1
                    
drawVL_cont         LD      drawVLine_x1
                    ST      giga_sysArg4
                    LD      drawVLine_y1
                    ADDI    8
                    ST      drawVLine_y1
                    ST      giga_sysArg4 + 1
                    LDW     drawVLine_y2
                    ADDI    8
                    ST      drawVLine_y2
                    SUBW    drawVLine_y1
                    SUBI    8
                    BLT     drawVL_loop1
                    
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn          ; setup 8 pixel SYS routine
                    
                    LDW     drawVLine_y2
                    SUBI    7
                    STW     drawVLine_y8        ; 8 pixel chunks limit

drawVL_loop0        LDI     0xFF
                    ST      giga_sysArg2        ; 8 pixels of fg and bg colour
                    SYS     134                 ; SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    CALL    realTimeProcAddr
                    LD      giga_sysArg4 + 1
                    ADDI    8
                    ST      giga_sysArg4 + 1
                    SUBW    drawVLine_y8
                    BLT     drawVL_loop0        ; all 8 pixel chunks
                    
drawVL_loop1        LD      fgbgColour + 1
                    POKE    giga_sysArg4
                    INC     giga_sysArg4 + 1
                    LD      giga_sysArg4 + 1
                    SUBW    drawVLine_y2
                    BLE     drawVL_loop1        ; remaining pixels
                    POP
                    RET


drawRect            PUSH
                    LDW     drawRect_x1
                    STW     drawHLine_x1
                    LDW     drawRect_y1
                    STW     drawHLine_y1
                    LDW     drawRect_x2
                    STW     drawHLine_x2
                    LDWI    drawHLine
                    CALL    giga_vAC
                    LDW     drawRect_y2
                    STW     drawHLine_y1
                    LDWI    drawHLine
                    CALL    giga_vAC

                    LDW     drawRect_x1
                    STW     drawVLine_x1
                    LDW     drawRect_y1
                    STW     drawVLine_y1
                    LDW     drawRect_y2
                    STW     drawVLine_y2
                    LDWI    drawVLine
                    CALL    giga_vAC
                    LDW     drawRect_x2
                    STW     drawVLine_x1
                    LDW     drawRect_y1
                    STW     drawVLine_y1
                    LDW     drawRect_y2
                    STW     drawVLine_y2
                    LDWI    drawVLine
                    CALL    giga_vAC

                    POP
                    RET


drawRectF           PUSH
                    LDW     drawRectF_y2
                    SUBW    drawRectF_y1
                    BGE     drawRF_loop
                    LDW     drawRectF_y2
                    STW     drawLine_tmp
                    LDW     drawRectF_y1
                    STW     drawRectF_y2
                    LDW     drawLine_tmp
                    STW     drawRectF_y1        ; if y2 < y1 then swap y2 with y1
                    
drawRF_loop         LDW     drawRectF_y1
                    STW     drawHLine_y1
                    LDWI    drawHLine
                    CALL    giga_vAC
                    INC     drawRectF_y1
                    LDW     drawRectF_y1
                    SUBW    drawRectF_y2
                    BLE     drawRF_loop

                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    
                    LDWI    giga_videoTable
                    STW     giga_sysArg4
                    LD      cursorXY + 1
                    LSLW
                    ADDW    giga_sysArg4
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres
                    BLT     atTC_skip0
                    LDI     0
                    ST      cursorXY
                    
atTC_skip0          LD      cursorXY + 1
                    SUBI    giga_yres
                    BLT     atTC_skip1
                    LDI     giga_yres - 1
                    ST      cursorXY + 1
                    
atTC_skip1          LD      cursorXY + 1
                    SUBI    giga_yres - 8
                    BGE     atTC_skip2
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET
                    
atTC_skip2          LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     8

clearCR_loopy       ST      clearLoop
                    CALL    realTimeProcAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

