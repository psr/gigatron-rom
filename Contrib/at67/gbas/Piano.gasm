_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
frameCountPrev      EQU                     register0 + 0x28
miscFlags           EQU                     register0 + 0x2A
highByteMask        EQU                     register0 + 0x2C

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_loop               EQU                     0x0280
_113                EQU                     0x02ba
_50                 EQU                     0x02d6
_119                EQU                     0x0304
_51                 EQU                     0x0320
_101                EQU                     0x033c
_114                EQU                     0x0358
_53                 EQU                     0x0374
_116                EQU                     0x0390
_54                 EQU                     0x03ac
_121                EQU                     0x03c8
_55                 EQU                     0x03e4
_117                EQU                     0x0413
_105                EQU                     0x042f
_57                 EQU                     0x044b
_111                EQU                     0x0467
_48                 EQU                     0x0483
_112                EQU                     0x049f
_122                EQU                     0x04bb
_default            EQU                     0x04e6
_text               EQU                     0x0502
_audio              EQU                     0x0523
_wave               EQU                     0x055c
_206                EQU                     0x0585
_207                EQU                     0x0597
_208                EQU                     0x05a9
_209                EQU                     0x05bb
_inverse            EQU                     0x05cd
_normal             EQU                     0x05eb
_print              EQU                     0x0616
_else_0x02ae        EQU                     0x029c
_else_0x02bb        EQU                     0x02a5
_page_0x0300        EQU                     0x0300
_page_0x0400        EQU                     0x0400
_else_0x04df        EQU                     0x04de
_page_0x0500        EQU                     0x0500
_next_0x051a        EQU                     0x0528
_page_0x0600        EQU                     0x0600
_end_0x062c         EQU                     0x063d

; Variables
_inv                EQU                     0x0030
_char               EQU                     0x0032
_posx               EQU                     0x0034
_posy               EQU                     0x0036
_fg                 EQU                     0x0038
_bg                 EQU                     0x003a
_a                  EQU                     0x003c
_b                  EQU                     0x003e
_p                  EQU                     0x0040
_z                  EQU                     0x0042
_k                  EQU                     0x0044
_c                  EQU                     0x0046

; Strings
_str_0x7ea0          EQU                     0x7ea0
_str_0x7ea0          DB                      18 ' 2 3   5 6 7   9 0' 0
_str_0x7eb4          EQU                     0x7eb4
_str_0x7eb4          DB                      19 'Q W E R T Y U I O P' 0
_str_0x7ec9          EQU                     0x7ec9
_str_0x7ec9          DB                      3 'Z: ' 0
_str_0x7ece          EQU                     0x7ece
_str_0x7ece          DB                      8 'Metallic' 0
_str_0x7ed8          EQU                     0x7ed8
_str_0x7ed8          DB                      8 'Triangle' 0
_str_0x7ee2          EQU                     0x7ee2
_str_0x7ee2          DB                      8 'Pulse   ' 0
_str_0x7eec          EQU                     0x7eec
_str_0x7eec          DB                      8 'Sawtooth' 0

; Define Bytes

; Lookup Tables
_lut_numericLabs    EQU                     0x78a0
_lut_numericLabs    DW                      113 50 119 51 101 114 53 116 54 121 55 117 105 57 111 48 112 122 206 207 208 209 -1
_lut_numericAddrs   EQU                     0x78ce
_lut_numericAddrs   DW                      0x02ba 0x02d6 0x0304 0x0320 0x033c 0x0358 0x0374 0x0390 0x03ac 0x03c8 0x03e4 0x0413 0x042f 0x044b 0x0467 0x0483 0x049f 0x04bb 0x0585 0x0597 0x05a9 0x05bb 

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    LDI                     0
                    STW                     _inv
                    STW                     _char
                    STW                     _posx
                    STW                     _posy                           ; inv=0 : char=inv : posx=char : posy=posx

                    LDI                     0xa2
                    PEEK                    
                    STW                     _fg
                    LDI                     0xa3
                    PEEK                    
                    STW                     _bg                             ; fg=peek(162) : bg=peek(163)

                    LDI                     0
                    STW                     _a
                    STW                     _b
                    LDWI                    508
                    STW                     _p
                    LDI                     2
                    STW                     graphicsMode
                    ScanlineMode            
                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC
                    LDI                     2
                    STW                     _z                              ; a=0 : b=a : p=256+252 : mode 2 : cls : z=2

                    LDWI                    _text
                    CALL                    giga_vAC
                    LDWI                    _wave
                    CALL                    giga_vAC
                    LDWI                    _audio
                    CALL                    giga_vAC                        ; gosub text : gosub wave : gosub audio

_loop               LDI                     0x10
                    PEEK                    
                    STW                     _k                              ; k=peek(16)

                    LDI                     3
                    STW                     waitVBlankNum
                    WaitVBlank                                              ; wait 3

                    LDW                     _inv
                    SUBI                    1
                    BNE                     _else_0x02ae
                    LDWI                    _normal
                    CALL                    giga_vAC
                    BRA                     _loop                           ; if inv &&= 1 then gosub normal:goto &loop

_else_0x02ae        LDW                     _k
                    SUBI                    126
                    BLE                     _else_0x02bb
                    BRA                     _loop                           ; if k &&> 126 then goto &loop

_else_0x02bb        LDW                     _k
                    STW                     numericLabel
                    LDWI                    _default
                    STW                     defaultLabel
                    LDWI                    gosubNumericLabel
                    CALL                    giga_vAC                        ; gosub k,default

                    LDWI                    _audio
                    CALL                    giga_vAC                        ; gosub audio

                    BRA                     _loop                           ; goto &loop

_113                PUSH                    
                    LDI                     73
                    STW                     _a
                    LDI                     8
                    STW                     _b
                    LDI                     81
                    STW                     _char
                    LDI                     2
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=73 :b=8 :char=81:posx=2  :posy=8:gosub inverse:return:'C

_50                 PUSH                    
                    LDI                     11
                    STW                     _a
                    LDI                     9
                    STW                     _b
                    LDI                     50
                    STW                     _char
                    LDI                     8
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    POP                     
                    RET                                                     ; a=11 :b=9 :char=50:posx=8  :posy=0:gosub inverse:return:'C#

_119                PUSH                    
                    LDI                     80
                    STW                     _a
                    LDI                     9
                    STW                     _b
                    LDI                     87
                    STW                     _char
                    LDI                     14
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=80 :b=9 :char=87:posx=14 :posy=8:gosub inverse:return:'D

_51                 PUSH                    
                    LDI                     25
                    STW                     _a
                    LDI                     10
                    STW                     _b
                    LDI                     51
                    STW                     _char
                    LDI                     20
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=25 :b=10:char=51:posx=20 :posy=0:gosub inverse:return:'D#

_101                PUSH                    
                    LDI                     103
                    STW                     _a
                    LDI                     10
                    STW                     _b
                    LDI                     69
                    STW                     _char
                    LDI                     26
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=103:b=10:char=69:posx=26 :posy=8:gosub inverse:return:'E

_114                PUSH                    
                    LDI                     57
                    STW                     _a
                    LDI                     11
                    STW                     _b
                    LDI                     82
                    STW                     _char
                    LDI                     38
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=57 :b=11:char=82:posx=38 :posy=8:gosub inverse:return:'F

_53                 PUSH                    
                    LDI                     16
                    STW                     _a
                    LDI                     12
                    STW                     _b
                    LDI                     53
                    STW                     _char
                    LDI                     44
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=16 :b=12:char=53:posx=44 :posy=0:gosub inverse:return:'F#

_116                PUSH                    
                    LDI                     108
                    STW                     _a
                    LDI                     12
                    STW                     _b
                    LDI                     84
                    STW                     _char
                    LDI                     50
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=108:b=12:char=84:posx=50 :posy=8:gosub inverse:return:'G

_54                 PUSH                    
                    LDI                     78
                    STW                     _a
                    LDI                     13
                    STW                     _b
                    LDI                     54
                    STW                     _char
                    LDI                     56
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=78 :b=13:char=54:posx=56 :posy=0:gosub inverse:return:'G#

_121                PUSH                    
                    LDI                     53
                    STW                     _a
                    LDI                     14
                    STW                     _b
                    LDI                     89
                    STW                     _char
                    LDI                     62
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=53 :b=14:char=89:posx=62 :posy=8:gosub inverse:return:'A

_55                 PUSH                    
                    LDI                     35
                    STW                     _a
                    LDI                     15
                    STW                     _b
                    LDI                     55
                    STW                     0xde
                    LDWI                    _page_0x0400
                    CALL                    giga_vAC
_page_0x0400        LDW                     0xde
                    STW                     _char
                    LDI                     68
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=35 :b=15:char=55:posx=68 :posy=0:gosub inverse:return:'A#

_117                PUSH                    
                    LDI                     23
                    STW                     _a
                    LDI                     16
                    STW                     _b
                    LDI                     85
                    STW                     _char
                    LDI                     74
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=23 :b=16:char=85:posx=74 :posy=8:gosub inverse:return:'B

_105                PUSH                    
                    LDI                     19
                    STW                     _a
                    LDI                     17
                    STW                     _b
                    LDI                     73
                    STW                     _char
                    LDI                     86
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=19 :b=17:char=73:posx=86 :posy=8:gosub inverse:return:'C

_57                 PUSH                    
                    LDI                     21
                    STW                     _a
                    LDI                     18
                    STW                     _b
                    LDI                     57
                    STW                     _char
                    LDI                     92
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=21 :b=18:char=57:posx=92 :posy=0:gosub inverse:return:'C#

_111                PUSH                    
                    LDI                     31
                    STW                     _a
                    LDI                     19
                    STW                     _b
                    LDI                     79
                    STW                     _char
                    LDI                     98
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=31 :b=19:char=79:posx=98 :posy=8:gosub inverse:return:'D

_48                 PUSH                    
                    LDI                     50
                    STW                     _a
                    LDI                     20
                    STW                     _b
                    LDI                     48
                    STW                     _char
                    LDI                     104
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=50 :b=20:char=48:posx=104:posy=0:gosub inverse:return:'D#

_112                PUSH                    
                    LDI                     77
                    STW                     _a
                    LDI                     21
                    STW                     _b
                    LDI                     80
                    STW                     _char
                    LDI                     110
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    LDWI                    _inverse
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; a=77 :b=21:char=80:posx=110:posy=8:gosub inverse:return:'E

_122                PUSH                    
                    LDI                     0x0f
                    PEEK                    
                    SUBI                    255
                    BNE                     _else_0x04df
                    LDW                     _z
                    ADDI                    1
                    ANDI                    3
                    STW                     _z
                    LDI                     0
                    STW                     _a
                    STW                     _b
                    LDWI                    _audio
                    CALL                    giga_vAC
                    LDWI                    _wave
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; if peek(15) &&= 255 then z = (z+1) AND 3 : a=0:b=a : gosub audio : gosub wave : return

_else_0x04df        LDI                     0
                    STW                     _a
                    STW                     _b
                    POP                     
                    RET                                                     ; a=0:b=a:return

_default            PUSH                    
                    LDI                     0
                    STW                     _a
                    STW                     _b
                    POP                     
                    RET                                                     ; a=0:b=a:return

                    STW                     0xde
                    LDWI                    _page_0x0500
                    CALL                    giga_vAC
_page_0x0500        LDW                     0xde
_text               PUSH                    
                    PrintString             _str_0x7ea0
                    LDWI                    newLineScroll
                    CALL                    giga_vAC                        ; print " 2 3   5 6 7   9 0"

                    PrintString             _str_0x7eb4
                    LDWI                    newLineScroll
                    CALL                    giga_vAC                        ; print "Q W E R T Y U I O P"

                    POP                     
                    RET                                                     ; return

_audio              PUSH                    
                    LDI                     1
                    STW                     _c                              ; for c=1 to 4

_next_0x051a        LD                      _c
                    ST                      0xc0 + 1
                    LDW                     0xc0
                    ANDW                    highByteMask
                    ADDI                    252
                    STW                     _p
                    LDW                     _a
                    POKE                    _p
                    LDW                     _p
                    ADDI                    1
                    STW                     0xc2
                    LDW                     _b
                    POKE                    0xc2
                    LDW                     _p
                    SUBI                    1
                    STW                     0xc4
                    LDW                     _z
                    POKE                    0xc4                            ; p=(c LSL 8)+252 : poke p,a : poke p+1,b : poke p-1,z

                    ForNextLoopUp           _c _next_0x051a 4               ; next c

                    POP                     
                    RET                                                     ; return

_wave               PUSH                    
                    LDI                     2
                    ST                      cursorXY
                    LDI                     24
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC
                    PrintString             _str_0x7ec9                     ; at 2,24 : print "Z: ";

                    LDI                     206
                    ADDW                    _z
                    STW                     numericLabel
                    LDI                     0
                    STW                     defaultLabel
                    LDWI                    gosubNumericLabel
                    CALL                    giga_vAC                        ; gosub 206+z

                    POP                     
                    RET                                                     ; return

_206                PUSH                    
                    PrintString             _str_0x7ece
                    LDWI                    newLineScroll
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; print "Metallic":return

_207                PUSH                    
                    PrintString             _str_0x7ed8
                    LDWI                    newLineScroll
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; print "Triangle":return

_208                PUSH                    
                    PrintString             _str_0x7ee2
                    LDWI                    newLineScroll
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; print "Pulse   ":return

_209                PUSH                    
                    PrintString             _str_0x7eec
                    LDWI                    newLineScroll
                    CALL                    giga_vAC
                    POP                     
                    RET                                                     ; print "Sawtooth":return

_inverse            PUSH                    
                    LDI                     1
                    STW                     _inv
                    LDWI                    162
                    STW                     register0
                    LDW                     _bg
                    POKE                    register0
                    LDWI                    163
                    STW                     register0
                    LDW                     _fg
                    POKE                    register0                       ; inv=1 : poke 162,bg : poke 163,fg

                    LDWI                    _print
                    CALL                    giga_vAC                        ; gosub print

                    POP                     
                    RET                                                     ; return

_normal             PUSH                    
                    LDI                     0
                    STW                     _inv
                    LDWI                    162
                    STW                     register0
                    STW                     0xde
                    LDWI                    _page_0x0600
                    CALL                    giga_vAC
_page_0x0600        LDW                     0xde
                    LDW                     _fg
                    POKE                    register0
                    LDWI                    163
                    STW                     register0
                    LDW                     _bg
                    POKE                    register0                       ; inv=0 : poke 162,fg : poke 163,bg

                    LDWI                    _print
                    CALL                    giga_vAC                        ; gosub print

                    POP                     
                    RET                                                     ; return

_print              PUSH                    
                    LDW                     _posx
                    ST                      cursorXY
                    LDW                     _posy
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC                        ; at posx,posy

                    LDW                     _char
                    PrintAcChar             
                    LDWI                    newLineScroll
                    CALL                    giga_vAC                        ; print chr$(char)

                    LDWI                    44
                    STW                     register0
                    LDI                     15
                    POKE                    register0                       ; poke 44,15

                    POP                     
                    RET                                                     ; return

_end_0x062c         BRA                     _end_0x062c                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0x7ef6
convertEqOp         EQU     0x7da0
convertNeOp         EQU     0x7da9
convertLeOp         EQU     0x7db2
convertGeOp         EQU     0x7dbb
convertLtOp         EQU     0x7dc4
convertGtOp         EQU     0x7dcd
gosubNumericLabel   EQU     0x7bbb
scanlineMode        EQU     0x7ca0
waitVBlank          EQU     0x7ba0
resetVideoTable     EQU     0x77a0
initClearFuncs      EQU     0x7dd6
clearVertBlinds     EQU     0x7cb4
clearCursorRow      EQU     0x76a0
printInit           EQU     0x77bf
printText           EQU     0x7aa0
printChr            EQU     0x7cee
printChar           EQU     0x75a0
atTextCursor        EQU     0x7ac3
newLineScroll       EQU     0x79a0
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
lutLabel            EQU     register9


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    STW     lutLabel
                    LD      lutLabel + 1
                    ANDI    0x80                            ; check for -1
                    BEQ     gosubNL_cont
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        LDW     lutLabel
                    SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex                        ; loop through lut until found or -1
                    BRA     gosubNL_loop
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_addr       EQU     register13
drawLine_tmp        EQU     register14
    
    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     0xE6                ; 270 - max(14,80/2)
                    RET


waitVBlank          LDW     waitVBlankNum
                    SUBI    0x01
                    STW     waitVBlankNum
                    BGE     waitVB_start
                    RET
    
waitVB_start        LD      giga_frameCount
                    SUBW    frameCountPrev
                    BEQ     waitVB_start
                    LD      giga_frameCount
                    STW     frameCountPrev
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    BRA     waitVBlank



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    
                    LDWI    giga_videoTable
                    STW     giga_sysArg4
                    LD      cursorXY + 1
                    LSLW
                    ADDW    giga_sysArg4
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by the accumulator
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDW     textStr             
                    PEEK                                    ; first byte is length
                    BEQ     printT_exit
    
printT_char         ST      textLen
                    INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC

                    LD      textLen
                    SUBI    1
                    BNE     printT_char
printT_exit         POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     0xCB                            ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     0xCB                            ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres
                    BLT     atTC_skip0
                    LDI     0
                    ST      cursorXY
                    
atTC_skip0          LD      cursorXY + 1
                    SUBI    giga_yres
                    BLT     atTC_skip1
                    LDI     giga_yres - 1
                    ST      cursorXY + 1
                    
atTC_skip1          LD      cursorXY + 1
                    SUBI    giga_yres - 8
                    BGE     atTC_skip2
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET
                    
atTC_skip2          LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     8

clearCR_loopy       ST      clearLoop
                    CALL    realTimeProcAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

