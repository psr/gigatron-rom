_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
frameCountPrev      EQU                     register0 + 0x28
miscFlags           EQU                     register0 + 0x2A
highByteMask        EQU                     register0 + 0x2C

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_10                 EQU                     0x025f
_20                 EQU                     0x026d
_30                 EQU                     0x027f
_40                 EQU                     0x029a
_50                 EQU                     0x02a3
_end_0x02b1         EQU                     0x02a5

; Variables

; Strings

; Define Bytes
def_bytes_0x10a0    EQU                     0x10a0
def_bytes_0x10a0    DB                      144 64 145 37 10 144 68 10 144 73 9 144 64 10 144 68 10 144 73 10 144 64 9 144 68 10 144 73 145 37 10 144 64 10 144 68 145 32 10 144 73 9 144 63 145 39 10 144 66 10 144 71 10 144 66 145 35 9 144 64 145 37 10 144 68 10 144 73 10 144 64 10 144 68 9 144 73 10 144 64 10 144 68 10 144 73 145 37 10 144 64 208 160 17 
def_bytes_0x11a0    EQU                     0x11a0
def_bytes_0x11a0    DB                      9 144 68 145 40 10 144 73 10 144 63 145 39 10 144 66 9 144 71 10 144 66 145 35 10 144 63 145 32 10 144 68 10 144 71 9 144 63 10 144 68 10 144 71 10 144 63 9 144 68 10 144 71 145 32 10 144 63 10 144 68 145 40 10 144 71 9 144 63 145 39 10 144 68 10 144 70 10 144 68 145 35 10 144 63 145 32 9 208 160 18 
def_bytes_0x12a0    EQU                     0x12a0
def_bytes_0x12a0    DB                      144 68 10 144 71 10 144 63 10 144 68 9 144 71 10 144 63 10 144 68 10 144 71 145 32 10 144 63 9 144 68 145 32 10 144 71 10 144 63 145 39 10 144 68 9 144 70 10 144 68 145 35 10 144 68 144 64 145 37 10 144 68 10 144 73 9 146 70 144 64 10 144 68 10 144 73 10 146 71 144 64 10 144 68 9 144 73 145 37 208 160 19 
def_bytes_0x13a0    EQU                     0x13a0
def_bytes_0x13a0    DB                      10 146 70 144 64 10 144 68 145 32 10 144 73 9 146 71 144 63 145 39 10 144 66 10 146 73 144 71 10 144 66 145 35 10 146 71 144 64 145 37 9 144 68 10 144 73 10 146 70 144 64 10 144 68 9 144 73 10 146 68 144 64 10 146 68 128 10 146 73 145 37 10 144 66 146 64 9 146 68 145 40 10 146 73 10 144 68 208 160 20 
def_bytes_0x14a0    EQU                     0x14a0
def_bytes_0x14a0    DB                      146 63 145 39 10 146 66 10 146 66 146 71 128 9 146 66 145 35 10 146 68 144 63 145 32 10 146 68 128 10 146 71 9 144 70 146 63 10 146 68 10 146 71 10 146 71 146 63 128 10 146 68 9 146 71 145 32 10 146 70 144 63 10 144 68 145 40 10 144 71 9 144 71 144 63 145 39 130 10 144 68 10 146 73 144 70 10 144 68 208 160 21 
def_bytes_0x15a0    EQU                     0x15a0
def_bytes_0x15a0    DB                      145 35 10 146 71 144 63 145 32 9 144 68 10 146 71 128 10 146 70 144 63 10 144 68 10 144 71 9 146 68 144 63 10 146 68 128 10 146 71 145 32 10 144 66 146 63 9 146 68 145 32 10 146 71 10 144 68 146 63 145 39 10 144 68 130 10 144 66 146 70 9 146 68 145 35 10 147 64 147 64 145 37 128 130 10 147 68 208 160 22 
def_bytes_0x16a0    EQU                     0x16a0
def_bytes_0x16a0    DB                      10 147 68 147 73 9 147 64 10 144 68 144 68 131 10 144 73 10 144 64 10 144 64 144 68 9 144 73 145 37 10 146 64 146 64 128 10 146 64 146 68 145 32 10 146 73 10 144 68 146 63 145 39 9 146 66 10 146 66 146 71 128 10 146 66 145 35 10 146 64 146 64 145 37 9 146 68 10 146 68 146 73 10 146 64 10 144 68 208 160 23 
def_bytes_0x17a0    EQU                     0x17a0
def_bytes_0x17a0    DB                      144 68 130 10 144 73 9 144 64 10 144 64 144 68 10 144 73 145 37 10 146 64 146 64 128 9 146 64 146 68 145 40 10 146 73 10 144 68 146 63 145 39 10 146 66 10 146 66 146 71 128 9 146 66 145 35 10 146 63 146 63 145 32 10 146 68 10 144 71 144 71 130 10 144 63 9 146 71 144 68 10 146 71 128 10 146 63 10 208 160 24 
def_bytes_0x18a0    EQU                     0x18a0
def_bytes_0x18a0    DB                      146 63 146 68 9 146 71 145 32 10 144 63 144 63 130 10 144 63 144 68 145 40 10 144 71 10 144 71 144 63 145 39 9 144 68 10 146 70 146 70 128 10 146 68 145 35 10 144 63 144 63 145 32 130 9 144 68 10 146 71 146 71 128 10 146 63 10 144 71 146 68 10 144 71 130 9 144 63 10 144 63 144 68 10 144 71 145 32 208 160 25 
def_bytes_0x19a0    EQU                     0x19a0
def_bytes_0x19a0    DB                      10 146 63 146 63 128 9 146 63 146 68 145 32 10 146 71 10 146 71 146 63 145 39 10 146 68 10 144 70 144 70 130 9 144 68 145 35 10 144 68 144 64 145 37 10 144 68 10 144 73 10 146 70 144 64 9 144 68 10 144 73 10 146 71 144 64 10 144 68 9 144 73 145 37 10 146 70 144 64 10 144 68 145 32 10 144 73 10 208 160 26 
def_bytes_0x1aa0    EQU                     0x1aa0
def_bytes_0x1aa0    DB                      146 71 144 63 145 39 9 144 66 10 146 73 144 71 10 144 66 145 35 10 146 71 144 64 145 37 9 144 68 10 144 73 10 146 70 144 64 10 144 68 10 144 73 9 146 68 144 64 10 146 68 128 10 146 73 145 37 10 144 66 146 64 10 146 68 145 40 9 146 73 10 144 68 146 63 145 39 10 146 66 10 146 66 146 71 128 9 146 66 208 160 27 
def_bytes_0x1ba0    EQU                     0x1ba0
def_bytes_0x1ba0    DB                      145 35 10 146 68 144 63 145 32 10 146 68 128 10 146 71 10 144 70 146 63 9 146 68 10 146 71 10 146 71 146 63 128 10 146 68 9 146 71 145 32 10 146 70 144 63 10 144 68 145 40 10 144 71 10 144 71 144 63 145 39 130 9 144 68 10 146 73 144 70 10 144 68 145 35 10 146 71 144 63 145 32 10 144 68 9 146 71 208 160 28 
def_bytes_0x1ca0    EQU                     0x1ca0
def_bytes_0x1ca0    DB                      128 10 146 70 144 63 10 144 68 10 144 71 9 146 68 144 63 10 146 68 128 10 146 71 145 32 10 144 66 146 63 10 146 68 145 32 9 146 71 10 144 68 146 63 145 39 10 144 68 130 10 144 66 146 70 9 146 68 145 35 10 146 64 145 37 128 10 146 68 10 146 68 144 61 147 64 146 73 10 147 64 130 9 147 68 3 128 208 160 29 
def_bytes_0x1da0    EQU                     0x1da0
def_bytes_0x1da0    DB                      131 7 147 64 144 61 146 68 146 73 10 147 64 130 5 128 131 5 146 61 144 68 147 64 144 68 131 7 128 130 3 147 63 144 59 146 66 145 37 14 128 130 131 5 146 66 144 59 147 63 145 32 15 128 130 131 5 147 64 144 61 146 68 145 39 7 128 130 131 2 146 59 144 66 147 63 144 66 131 8 128 130 2 147 64 144 61 146 68 208 160 30 
def_bytes_0x1ea0    EQU                     0x1ea0
def_bytes_0x1ea0    DB                      10 145 35 10 147 64 145 37 10 147 68 128 130 9 147 68 144 61 146 64 147 73 10 146 64 131 10 146 68 2 128 130 8 146 64 144 61 147 68 147 73 9 146 64 131 5 128 130 5 147 61 144 68 146 64 144 68 130 8 128 131 2 146 63 144 59 147 66 145 37 15 128 130 131 5 147 66 144 59 146 63 145 40 14 128 130 131 208 160 31 
def_bytes_0x1fa0    EQU                     0x1fa0
def_bytes_0x1fa0    DB                      5 146 64 144 61 147 68 145 39 8 128 130 131 2 147 59 144 66 146 63 144 66 130 7 128 131 3 146 64 144 61 147 68 10 145 35 9 145 32 10 144 68 130 131 10 147 63 146 56 144 71 10 147 63 128 9 147 68 3 130 7 146 59 144 56 147 71 10 147 63 5 128 130 131 5 144 56 146 63 147 59 146 68 7 128 131 3 147 58 208 160 32 
def_bytes_0x20a0    EQU                     0x20a0
def_bytes_0x20a0    DB                      144 54 146 71 145 32 9 146 63 5 128 131 5 144 61 147 54 146 68 145 40 10 146 71 5 128 131 5 147 59 144 56 146 63 145 39 7 128 130 131 2 144 54 146 61 147 58 8 128 130 131 2 147 59 144 56 146 63 8 128 130 131 2 146 63 144 56 147 59 145 35 10 146 63 145 32 10 146 68 2 128 131 7 147 71 146 68 208 160 33 
def_bytes_0x21a0    EQU                     0x21a0
def_bytes_0x21a0    DB                      144 75 147 71 130 10 147 63 10 147 68 2 128 131 8 144 68 146 75 147 71 147 71 128 10 147 63 4 130 5 144 71 146 68 146 68 131 8 128 130 2 146 73 144 66 147 70 145 32 15 128 130 131 5 147 70 144 66 146 73 145 32 14 128 130 131 5 146 68 144 75 147 71 147 63 145 39 8 128 130 2 144 70 146 66 147 68 7 208 160 34 
def_bytes_0x22a0    EQU                     0x22a0
def_bytes_0x22a0    DB                      128 130 3 146 75 147 68 144 71 147 70 7 128 130 3 144 71 146 68 146 68 145 35 131 7 128 130 2 146 61 144 64 147 68 146 61 145 33 131 8 128 130 2 147 61 144 64 146 68 22 128 130 131 7 146 61 144 64 147 68 23 128 130 131 7 147 61 144 64 146 68 10 145 33 5 128 130 131 4 146 61 144 64 147 68 8 128 130 208 160 35 
def_bytes_0x23a0    EQU                     0x23a0
def_bytes_0x23a0    DB                      131 2 147 61 144 64 146 68 145 33 15 128 130 131 5 146 61 144 64 147 68 145 40 14 128 130 131 5 147 61 144 64 146 68 10 145 33 5 128 130 131 5 146 56 144 61 147 63 144 59 145 35 7 130 131 3 147 56 146 61 22 130 131 7 146 56 147 61 22 130 131 7 147 56 146 61 10 145 35 5 130 131 5 146 56 147 61 7 208 160 36 
def_bytes_0x24a0    EQU                     0x24a0
def_bytes_0x24a0    DB                      130 131 3 147 56 146 61 145 35 14 130 131 5 146 56 147 61 145 42 15 130 131 5 147 56 146 61 10 145 35 5 130 131 4 146 56 147 61 146 56 145 32 128 8 130 131 2 147 56 144 61 146 63 22 128 130 131 8 146 56 144 61 147 63 22 128 130 131 7 147 56 144 61 146 63 10 145 32 5 128 130 131 4 146 56 144 61 147 63 208 160 37 
def_bytes_0x25a0    EQU                     0x25a0
def_bytes_0x25a0    DB                      8 128 130 131 2 147 56 144 61 146 63 145 32 15 128 130 131 5 146 56 144 61 147 63 145 39 15 128 130 131 4 147 56 144 61 146 63 10 145 35 5 128 130 131 5 146 56 144 61 147 64 146 54 145 37 7 128 131 3 147 56 144 61 22 128 131 7 144 56 147 61 22 128 131 7 147 56 144 61 10 146 52 145 37 5 128 131 208 160 38 
def_bytes_0x26a0    EQU                     0x26a0
def_bytes_0x26a0    DB                      5 144 56 147 61 7 128 131 3 147 56 144 61 145 37 14 128 131 5 144 56 147 61 145 39 15 128 131 5 147 56 144 61 10 145 40 5 128 131 4 144 61 147 64 144 61 145 33 130 8 128 131 2 147 61 144 64 146 68 22 128 130 131 8 146 61 144 64 147 68 22 128 130 131 7 147 61 144 64 146 68 10 145 33 5 128 130 131 208 160 39 
def_bytes_0x27a0    EQU                     0x27a0
def_bytes_0x27a0    DB                      4 146 61 144 64 147 68 8 128 130 131 2 147 61 144 64 146 68 145 33 15 128 130 131 5 146 61 144 64 147 68 145 40 15 128 130 131 4 147 61 144 64 146 68 10 145 33 5 128 130 131 5 146 56 144 61 147 63 147 63 145 35 128 7 130 131 3 147 56 144 61 146 63 22 128 130 131 7 146 56 144 61 147 63 22 128 130 131 208 160 40 
def_bytes_0x28a0    EQU                     0x28a0
def_bytes_0x28a0    DB                      7 147 56 144 61 146 63 10 145 35 5 128 130 131 5 146 56 144 61 147 63 7 128 130 131 3 147 56 144 61 146 63 145 35 15 128 130 131 4 146 56 144 61 147 63 145 42 15 128 130 131 5 147 56 144 61 146 63 10 145 35 5 128 130 131 4 146 56 144 61 147 63 147 66 145 32 8 128 130 2 144 56 146 61 22 128 130 8 208 160 41 
def_bytes_0x29a0    EQU                     0x29a0
def_bytes_0x29a0    DB                      146 56 144 61 22 128 130 7 144 56 146 61 10 145 32 5 128 130 5 146 56 144 61 7 128 130 2 144 56 146 61 145 32 15 128 130 5 146 56 144 61 145 39 15 128 130 4 144 56 146 61 10 145 35 5 128 130 5 146 56 144 61 147 64 145 37 7 128 130 131 3 144 56 146 61 147 64 22 128 130 131 7 147 56 144 61 146 64 208 160 42 
def_bytes_0x2aa0    EQU                     0x2aa0
def_bytes_0x2aa0    DB                      22 128 130 131 7 146 56 144 61 147 64 10 145 37 5 128 130 131 5 147 56 144 61 146 64 7 128 130 131 3 146 56 144 61 147 64 145 37 15 128 130 131 4 147 56 144 61 146 64 146 66 145 39 15 128 131 5 144 56 147 61 146 68 10 145 40 5 128 131 5 147 61 144 64 146 69 145 33 7 128 130 131 2 144 61 146 64 147 69 208 160 43 
def_bytes_0x2ba0    EQU                     0x2ba0
def_bytes_0x2ba0    DB                      22 128 130 131 8 147 61 144 64 146 69 19 144 64 130 3 128 131 7 146 61 144 64 147 69 10 145 33 5 128 130 131 5 147 61 144 64 146 69 7 128 130 131 2 146 61 144 64 147 69 145 33 15 128 130 131 5 147 61 144 64 146 69 147 61 145 40 128 15 130 131 4 146 61 144 64 147 69 10 145 33 5 128 130 131 5 147 56 208 160 44 
def_bytes_0x2ca0    EQU                     0x2ca0
def_bytes_0x2ca0    DB                      144 61 146 63 146 63 145 35 128 7 130 131 3 146 56 144 61 147 63 10 147 64 12 128 130 7 144 56 146 61 20 147 66 2 128 130 8 146 56 144 61 9 145 35 5 128 130 5 144 56 146 61 7 128 130 3 146 56 144 61 145 35 15 128 130 4 144 56 146 61 147 64 145 42 15 128 130 5 146 56 144 61 147 66 10 145 35 208 160 45 
def_bytes_0x2da0    EQU                     0x2da0
def_bytes_0x2da0    DB                      5 128 130 5 144 56 146 61 147 68 145 32 7 128 130 2 146 56 144 61 22 128 130 8 144 56 146 61 19 147 63 3 128 130 131 7 146 56 144 61 147 63 10 145 32 5 128 130 131 5 147 56 144 61 146 63 7 128 130 131 2 146 56 144 61 147 63 145 32 15 128 130 131 5 147 56 144 61 146 63 146 59 145 39 15 128 131 5 208 160 46 
def_bytes_0x2ea0    EQU                     0x2ea0
def_bytes_0x2ea0    DB                      144 56 147 61 9 145 35 5 128 131 5 147 56 144 61 144 61 145 37 130 7 128 131 3 144 56 146 61 147 64 10 146 63 12 128 131 7 147 56 144 61 20 146 64 2 128 130 131 8 144 56 146 61 147 64 9 145 37 5 128 130 131 5 147 56 144 61 146 64 7 128 130 131 3 146 56 144 61 147 64 145 37 15 128 130 131 4 147 56 208 160 47 
def_bytes_0x2fa0    EQU                     0x2fa0
def_bytes_0x2fa0    DB                      144 61 146 64 146 66 145 39 15 128 131 5 144 56 147 61 146 68 10 145 40 5 128 131 5 144 63 144 63 147 66 145 35 130 7 128 131 2 147 63 144 66 146 70 145 35 10 145 35 10 145 35 2 128 130 131 8 146 63 144 66 147 70 10 145 35 12 128 130 131 7 147 63 144 66 146 70 145 35 10 145 35 5 128 130 131 5 208 160 48 
def_bytes_0x30a0    EQU                     0x30a0
def_bytes_0x30a0    DB                      146 63 144 66 147 70 7 128 130 131 2 147 63 144 66 146 70 145 35 15 128 130 131 5 146 63 144 66 147 70 145 35 15 128 130 131 5 147 63 144 66 146 70 145 35 14 128 130 131 5 144 65 146 58 147 61 144 65 145 37 7 128 130 131 3 144 58 146 61 147 65 145 37 10 145 37 9 145 37 3 128 130 131 7 147 58 144 61 208 160 49 
def_bytes_0x31a0    EQU                     0x31a0
def_bytes_0x31a0    DB                      146 65 10 145 37 12 128 130 131 8 146 58 144 61 147 65 145 37 9 145 37 5 128 130 131 5 147 58 144 61 146 65 8 128 130 131 2 146 58 144 61 147 65 145 37 15 128 130 131 5 147 58 144 61 146 65 145 37 14 128 130 131 5 146 58 144 61 147 65 145 37 10 145 37 5 128 130 131 5 144 61 147 58 146 63 145 34 7 208 160 50 
def_bytes_0x32a0    EQU                     0x32a0
def_bytes_0x32a0    DB                      130 131 2 146 58 147 63 145 34 10 145 34 10 145 34 2 130 131 8 147 58 146 63 10 145 34 12 130 131 7 146 58 147 63 145 34 10 145 34 5 130 131 5 147 58 146 63 7 130 131 2 146 58 147 63 145 34 15 130 131 5 147 58 146 63 145 34 15 130 131 5 146 58 147 63 145 34 9 145 34 5 130 131 5 144 66 147 58 208 160 51 
def_bytes_0x33a0    EQU                     0x33a0
def_bytes_0x33a0    DB                      146 63 144 66 145 39 8 128 130 131 2 144 58 146 63 147 66 145 39 10 145 39 10 145 39 2 128 130 131 7 147 58 144 63 146 66 10 145 39 12 128 130 131 8 146 58 144 63 147 66 145 39 9 145 39 5 128 130 131 5 147 58 144 63 146 66 8 128 130 131 2 146 58 144 63 147 66 145 39 15 128 130 131 5 147 58 144 63 208 160 52 
def_bytes_0x34a0    EQU                     0x34a0
def_bytes_0x34a0    DB                      146 66 145 39 14 128 130 131 5 146 58 144 63 147 66 145 39 15 128 130 131 5 144 63 144 63 146 66 147 70 145 35 7 128 130 131 2 147 63 144 66 146 70 145 35 10 145 35 10 145 35 3 128 130 131 7 146 63 144 66 147 70 10 145 35 12 128 130 131 7 147 63 144 66 146 70 145 35 10 145 35 5 128 130 131 5 146 63 208 160 53 
def_bytes_0x35a0    EQU                     0x35a0
def_bytes_0x35a0    DB                      144 66 147 70 7 128 130 131 3 147 63 144 66 146 70 145 35 14 128 130 131 5 146 63 144 66 147 70 145 35 15 128 130 131 5 147 63 144 66 146 70 145 35 14 128 130 131 5 144 65 146 58 147 61 144 65 145 37 8 128 130 131 2 144 58 146 61 147 65 145 37 10 145 37 10 145 37 2 128 130 131 7 147 58 144 61 146 65 208 160 54 
def_bytes_0x36a0    EQU                     0x36a0
def_bytes_0x36a0    DB                      10 145 37 12 128 130 131 8 146 58 144 61 147 65 145 37 9 145 37 5 128 130 131 5 147 58 144 61 146 65 8 128 130 131 2 146 58 144 61 147 65 145 37 15 128 130 131 5 147 58 144 61 146 65 145 37 14 128 130 131 5 146 58 144 61 147 65 145 37 10 145 37 5 128 130 131 5 144 61 147 58 146 63 145 34 7 130 131 208 160 55 
def_bytes_0x37a0    EQU                     0x37a0
def_bytes_0x37a0    DB                      3 146 58 147 63 145 34 9 145 34 10 145 34 3 130 131 7 147 58 146 63 10 145 34 12 130 131 7 146 58 147 63 145 34 10 145 34 5 130 131 5 147 58 146 63 7 130 131 3 146 58 147 63 145 34 14 130 131 5 147 58 146 63 145 34 15 130 131 5 146 58 147 63 145 34 9 145 34 5 130 131 5 144 66 147 58 146 63 208 160 56 
def_bytes_0x38a0    EQU                     0x38a0
def_bytes_0x38a0    DB                      144 66 145 39 8 128 130 131 2 144 58 146 63 147 66 145 39 10 145 39 10 145 39 2 128 130 131 7 147 58 144 63 146 66 10 145 39 12 128 130 131 8 146 58 144 63 147 66 145 39 10 145 39 4 128 130 131 5 147 58 144 63 146 66 8 128 130 131 2 146 58 144 63 147 66 145 39 15 128 130 131 5 147 58 144 63 146 66 208 160 57 
def_bytes_0x39a0    EQU                     0x39a0
def_bytes_0x39a0    DB                      145 39 14 128 130 131 5 146 58 144 63 147 66 145 39 15 128 130 131 5 147 63 144 66 146 70 145 35 7 128 130 131 3 146 63 144 66 147 70 145 35 9 145 35 10 145 35 3 128 130 131 7 147 63 144 66 146 70 10 145 35 12 128 130 131 7 146 63 144 66 147 70 145 35 10 145 35 5 128 130 131 5 147 63 144 66 146 70 208 160 58 
def_bytes_0x3aa0    EQU                     0x3aa0
def_bytes_0x3aa0    DB                      7 128 130 131 3 146 63 144 66 147 70 145 35 14 128 130 131 5 147 63 144 66 146 70 145 35 15 128 130 131 5 146 63 144 66 147 70 145 35 14 128 130 131 5 147 58 144 61 146 65 145 37 8 128 130 131 2 146 58 144 61 147 65 145 37 10 145 37 10 145 37 2 128 130 131 7 147 58 144 61 146 65 10 145 37 12 128 130 208 160 59 
def_bytes_0x3ba0    EQU                     0x3ba0
def_bytes_0x3ba0    DB                      131 8 146 58 144 61 147 65 145 37 10 145 37 4 128 130 131 5 147 58 144 61 146 65 8 128 130 131 2 146 58 144 61 147 65 145 37 15 128 130 131 5 147 58 144 61 146 65 145 37 14 128 130 131 5 146 58 144 61 147 65 145 37 10 145 37 5 128 130 131 5 147 58 144 63 146 65 145 34 7 128 130 131 3 146 58 144 63 208 160 60 
def_bytes_0x3ca0    EQU                     0x3ca0
def_bytes_0x3ca0    DB                      147 65 145 34 9 145 34 10 145 34 3 128 130 131 7 147 58 144 63 146 65 10 145 34 12 128 130 131 7 146 58 144 63 147 65 145 34 10 145 34 5 128 130 131 5 147 58 144 63 146 65 7 128 130 131 3 146 58 144 63 147 65 145 34 14 128 130 131 5 147 58 144 63 146 65 145 34 15 128 130 131 5 146 58 144 63 147 65 208 160 61 
def_bytes_0x3da0    EQU                     0x3da0
def_bytes_0x3da0    DB                      145 34 10 145 34 4 128 130 131 5 147 58 144 63 146 66 145 39 8 128 130 131 2 146 58 144 63 147 66 145 39 10 145 39 10 145 39 2 128 130 131 7 147 58 144 63 146 66 10 145 39 13 128 130 131 7 146 58 144 63 147 66 145 39 10 145 39 5 128 130 131 4 147 58 144 63 146 66 8 128 130 131 2 146 58 144 63 147 66 208 160 62 
def_bytes_0x3ea0    EQU                     0x3ea0
def_bytes_0x3ea0    DB                      145 39 15 128 130 131 5 147 58 144 63 146 66 145 39 14 128 130 131 5 146 58 144 63 147 66 145 39 15 128 130 131 5 147 63 144 66 146 70 145 35 7 128 130 131 3 146 63 144 66 147 70 145 35 9 145 35 10 145 35 3 128 130 131 7 147 63 144 66 146 70 10 145 35 12 128 130 131 7 146 63 144 66 147 70 145 35 208 160 63 
def_bytes_0x3fa0    EQU                     0x3fa0
def_bytes_0x3fa0    DB                      10 145 35 5 128 130 131 5 147 63 144 66 146 70 7 128 130 131 3 146 63 144 66 147 70 145 35 14 128 130 131 5 147 63 144 66 146 70 145 35 15 128 130 131 5 146 63 144 66 147 70 145 35 15 128 130 131 4 147 58 144 61 146 65 145 37 8 128 130 131 2 146 58 144 61 147 65 145 37 10 145 37 10 145 37 2 128 130 208 160 64 
def_bytes_0x40a0    EQU                     0x40a0
def_bytes_0x40a0    DB                      131 8 147 58 144 61 146 65 9 145 37 13 128 130 131 7 146 58 144 61 147 65 145 37 10 145 37 5 128 130 131 4 147 58 144 61 146 65 8 128 130 131 2 146 58 144 61 147 65 145 37 15 128 130 131 5 147 58 144 61 146 65 145 37 14 128 130 131 5 146 58 144 61 147 65 145 37 10 145 37 5 128 130 131 5 147 58 144 63 208 160 65 
def_bytes_0x41a0    EQU                     0x41a0
def_bytes_0x41a0    DB                      146 65 145 34 7 128 130 131 3 146 58 144 63 147 65 145 34 9 145 34 10 145 34 3 128 130 131 7 147 58 144 63 146 65 10 145 34 12 128 130 131 7 146 58 144 63 147 65 145 34 10 145 34 5 128 130 131 5 147 58 144 63 146 65 7 128 130 131 3 146 58 144 63 147 65 145 34 14 128 130 131 5 147 58 144 63 146 65 208 160 66 
def_bytes_0x42a0    EQU                     0x42a0
def_bytes_0x42a0    DB                      145 34 15 128 130 131 5 146 58 144 63 147 65 145 34 10 145 34 5 128 130 131 4 147 58 144 63 146 66 145 39 8 128 130 131 2 146 58 144 63 147 66 145 39 10 145 39 10 145 39 2 128 130 131 8 147 58 144 63 146 66 9 145 39 13 128 130 131 7 146 58 144 63 147 66 145 39 10 145 39 5 128 130 131 4 147 58 208 160 67 
def_bytes_0x43a0    EQU                     0x43a0
def_bytes_0x43a0    DB                      144 63 146 66 8 128 130 131 2 146 58 144 63 147 66 145 39 15 128 130 131 5 147 58 144 63 146 66 145 39 15 128 130 131 4 146 58 144 63 147 66 145 39 15 128 130 131 5 144 35 129 20 147 62 145 59 146 66 144 47 9 128 13 129 130 131 7 146 59 144 66 145 62 147 47 15 128 129 130 4 145 62 144 59 146 66 147 47 208 160 68 
def_bytes_0x44a0    EQU                     0x44a0
def_bytes_0x44a0    DB                      8 128 129 130 2 146 64 144 57 145 61 147 37 10 147 49 5 128 129 130 5 145 61 144 57 146 64 131 10 147 49 4 128 129 130 5 146 59 144 66 145 62 147 33 8 128 129 130 2 145 61 144 57 146 64 147 45 7 128 129 130 3 146 66 144 59 145 62 131 10 147 45 9 147 35 10 128 129 130 10 145 62 144 59 146 66 147 47 208 160 69 
def_bytes_0x45a0    EQU                     0x45a0
def_bytes_0x45a0    DB                      20 131 2 128 129 130 7 146 59 144 66 145 62 147 47 15 128 129 130 5 145 62 144 59 146 66 147 47 7 128 129 130 3 146 64 144 57 145 61 147 38 10 147 50 4 128 129 130 5 145 61 144 57 146 64 131 10 147 50 5 128 129 130 5 146 59 144 66 145 62 147 37 7 128 129 130 3 145 61 144 57 146 64 147 49 7 128 129 208 160 70 
def_bytes_0x46a0    EQU                     0x46a0
def_bytes_0x46a0    DB                      130 2 146 66 144 59 145 62 131 10 147 49 10 147 30 10 128 129 130 10 145 57 144 54 146 61 147 42 9 131 13 128 129 130 7 146 54 144 61 145 57 147 42 15 128 129 130 4 145 57 144 54 146 61 147 42 8 128 129 130 2 146 59 144 52 145 56 147 32 10 147 44 5 128 129 130 5 145 56 144 52 146 59 131 10 147 44 5 208 160 71 
def_bytes_0x47a0    EQU                     0x47a0
def_bytes_0x47a0    DB                      128 129 130 4 146 54 144 61 145 57 147 28 8 128 129 130 2 145 56 144 52 146 59 147 40 8 128 129 130 2 146 61 144 54 145 57 131 7 128 129 130 3 145 57 144 54 146 61 147 40 10 147 30 12 128 129 130 7 146 54 144 61 145 57 147 42 20 131 2 128 129 130 7 145 57 144 54 146 61 147 42 15 128 129 130 5 146 61 208 160 72 
def_bytes_0x48a0    EQU                     0x48a0
def_bytes_0x48a0    DB                      144 54 145 57 147 42 7 128 129 130 3 145 56 144 52 146 59 147 33 10 147 45 4 128 129 130 5 146 52 144 59 145 56 131 10 147 45 5 128 129 130 5 145 57 144 54 146 61 147 32 7 128 129 130 3 146 59 144 52 145 56 147 44 7 128 129 130 2 145 57 144 54 146 61 131 8 128 129 130 2 146 54 144 61 145 57 147 44 208 160 73 
def_bytes_0x49a0    EQU                     0x49a0
def_bytes_0x49a0    DB                      10 147 35 12 128 129 130 8 145 62 144 59 146 66 147 47 9 131 13 128 129 130 7 146 66 144 59 145 62 147 47 15 128 129 130 5 145 62 144 59 146 66 147 47 7 128 129 130 2 146 57 144 64 145 61 147 37 10 147 49 5 128 129 130 5 145 61 144 57 146 64 131 10 147 49 5 128 129 130 4 146 66 144 59 145 62 147 33 208 160 74 
def_bytes_0x4aa0    EQU                     0x4aa0
def_bytes_0x4aa0    DB                      8 128 129 130 2 145 61 144 57 146 64 147 45 8 128 129 130 2 146 59 144 66 145 62 131 10 147 45 10 147 35 9 128 129 130 10 145 62 144 59 146 66 147 47 20 131 2 128 129 130 7 146 66 144 59 145 62 147 47 15 128 129 130 5 145 62 144 59 146 66 147 47 7 128 129 130 3 146 57 144 64 145 61 147 38 10 147 50 208 160 75 
def_bytes_0x4ba0    EQU                     0x4ba0
def_bytes_0x4ba0    DB                      5 128 129 130 4 145 61 144 57 146 64 131 10 147 50 5 128 129 130 5 146 66 144 59 145 62 147 37 7 128 129 130 3 145 61 144 57 146 64 147 49 7 128 129 130 3 146 59 144 66 145 62 131 9 147 49 10 147 30 10 128 129 130 10 145 57 144 54 146 61 147 42 9 131 13 128 129 130 7 146 61 144 54 145 57 147 42 15 208 160 76 
def_bytes_0x4ca0    EQU                     0x4ca0
def_bytes_0x4ca0    DB                      128 129 130 5 145 57 144 54 146 61 147 42 7 128 129 130 2 146 52 144 59 145 56 147 32 10 147 44 5 128 129 130 5 145 56 144 52 146 59 131 10 147 44 5 128 129 130 4 146 61 144 54 145 57 147 28 8 128 129 130 2 145 56 144 52 146 59 147 40 8 128 129 130 2 146 54 144 61 145 57 131 7 128 129 130 3 145 57 208 160 77 
def_bytes_0x4da0    EQU                     0x4da0
def_bytes_0x4da0    DB                      144 54 146 61 147 40 10 147 30 12 128 129 130 7 146 61 144 54 145 57 147 42 20 131 2 128 129 130 8 145 57 144 54 146 61 147 42 14 128 129 130 5 146 54 144 61 145 57 147 42 7 128 129 130 3 145 56 144 52 146 59 147 33 10 147 45 5 128 129 130 4 146 59 144 52 145 56 131 10 147 45 5 128 129 130 5 145 57 208 160 78 
def_bytes_0x4ea0    EQU                     0x4ea0
def_bytes_0x4ea0    DB                      144 54 146 61 147 32 7 128 129 130 3 146 52 144 59 145 56 147 44 7 128 129 130 3 145 57 144 54 146 61 131 7 128 129 130 2 146 61 144 54 145 57 147 44 10 147 37 10 146 61 2 128 129 130 8 146 64 146 64 144 61 145 68 147 49 9 131 10 146 66 3 128 129 7 145 61 144 68 147 64 10 144 68 130 5 128 129 131 208 160 79 
def_bytes_0x4fa0    EQU                     0x4fa0
def_bytes_0x4fa0    DB                      5 144 66 147 64 145 61 146 68 7 129 130 131 2 144 66 145 59 146 63 147 39 10 144 64 147 51 5 129 130 5 146 63 145 59 131 10 147 51 5 129 130 5 144 66 145 61 146 68 147 35 7 129 130 2 146 63 145 59 144 66 147 47 8 128 129 130 2 144 68 144 68 145 61 146 64 131 10 147 47 10 144 59 147 37 9 145 61 208 160 80 
def_bytes_0x50a0    EQU                     0x50a0
def_bytes_0x50a0    DB                      128 129 130 10 145 64 145 64 144 61 146 68 147 49 20 145 66 131 2 128 130 8 146 61 144 68 147 64 9 144 68 129 5 128 130 131 5 144 66 147 64 145 61 146 68 7 129 130 131 3 144 66 145 59 146 63 147 40 10 144 64 147 52 5 129 130 4 146 63 145 59 131 10 147 52 5 129 130 5 144 66 145 61 146 68 147 39 7 208 160 81 
def_bytes_0x51a0    EQU                     0x51a0
def_bytes_0x51a0    DB                      129 130 3 144 68 146 63 145 59 147 51 7 129 130 3 144 64 145 68 146 61 144 64 131 9 147 51 10 144 54 147 32 10 144 56 129 130 10 144 59 144 59 145 56 146 63 147 44 10 145 56 128 131 9 145 61 3 130 7 146 56 144 63 147 59 10 144 63 129 5 128 130 131 5 144 61 147 59 145 56 146 63 7 129 130 131 2 144 61 208 160 82 
def_bytes_0x52a0    EQU                     0x52a0
def_bytes_0x52a0    DB                      145 54 146 58 147 34 10 144 59 147 46 5 129 130 5 146 58 145 54 131 10 147 46 5 129 130 5 144 61 145 56 146 63 147 30 7 129 130 2 146 58 145 54 144 61 147 42 8 128 129 130 2 144 63 144 63 145 56 146 59 131 7 128 129 130 3 146 59 144 56 145 63 147 42 10 145 54 147 32 9 144 56 129 3 128 130 7 208 160 83 
def_bytes_0x53a0    EQU                     0x53a0
def_bytes_0x53a0    DB                      144 59 145 56 146 63 144 59 147 44 20 144 61 131 2 129 130 8 145 59 146 56 147 63 9 147 63 128 5 129 130 131 5 147 61 144 63 145 56 146 59 7 128 129 130 3 146 58 144 54 147 61 145 35 10 147 59 145 47 5 128 130 5 144 54 146 61 129 9 145 47 5 128 130 5 147 66 146 59 144 56 145 34 7 128 130 3 144 61 208 160 84 
def_bytes_0x54a0    EQU                     0x54a0
def_bytes_0x54a0    DB                      146 54 145 46 7 128 130 3 147 63 146 59 144 56 147 63 129 7 128 130 131 2 147 61 144 56 145 63 146 59 10 146 59 147 37 10 146 61 2 128 129 8 146 64 146 64 144 61 145 68 147 49 10 131 9 146 66 3 128 129 7 145 68 144 61 147 64 10 145 68 130 5 128 129 131 5 145 66 147 64 144 61 146 68 7 128 130 208 160 85 
def_bytes_0x55a0    EQU                     0x55a0
def_bytes_0x55a0    DB                      131 2 146 59 145 66 144 63 147 39 10 145 64 147 51 5 128 130 5 144 63 146 59 131 10 147 51 5 128 130 5 145 66 146 68 144 61 147 35 7 128 130 2 144 63 146 59 145 66 147 47 8 128 129 130 2 145 68 144 61 145 68 146 64 131 10 147 47 10 145 59 147 37 10 144 61 128 129 130 9 144 64 144 64 145 61 146 68 208 160 86 
def_bytes_0x56a0    EQU                     0x56a0
def_bytes_0x56a0    DB                      147 49 20 144 66 131 2 129 130 8 146 68 145 61 147 64 9 146 68 128 5 129 130 131 5 146 66 147 64 144 61 145 68 8 128 129 131 2 145 59 146 66 144 63 147 40 10 146 64 147 52 5 128 129 5 144 63 145 59 131 9 147 52 5 128 129 5 146 66 145 68 144 61 147 39 7 128 129 3 146 68 144 63 145 59 147 51 7 208 160 87 
def_bytes_0x57a0    EQU                     0x57a0
def_bytes_0x57a0    DB                      128 129 3 146 64 145 61 144 68 146 64 131 9 147 51 10 146 54 147 32 10 146 56 128 129 10 146 59 146 59 144 56 145 63 147 44 10 144 56 130 131 9 144 61 3 129 7 145 63 146 56 147 59 10 145 63 128 5 129 130 131 5 145 61 147 59 144 56 146 63 7 128 130 131 3 146 54 145 61 144 58 147 34 9 145 59 147 46 208 160 88 
def_bytes_0x58a0    EQU                     0x58a0
def_bytes_0x58a0    DB                      5 128 130 5 144 58 146 54 131 10 147 46 5 128 130 5 145 61 146 63 144 56 147 30 7 128 130 2 144 58 146 54 145 61 147 42 8 128 129 130 2 145 63 144 56 145 63 146 59 131 8 128 129 130 2 146 59 144 56 145 63 147 42 10 145 54 147 32 10 144 56 129 2 128 130 7 144 59 145 63 146 56 144 59 147 44 20 144 61 208 160 89 
def_bytes_0x59a0    EQU                     0x59a0
def_bytes_0x59a0    DB                      131 2 129 130 8 145 59 146 56 147 63 9 147 63 128 5 129 130 131 5 147 61 144 56 145 63 146 59 8 128 129 130 2 146 58 144 54 147 61 145 35 10 147 59 145 47 5 128 130 5 144 61 146 54 129 9 145 47 5 128 130 5 147 66 146 59 144 56 145 34 7 128 130 3 144 54 146 61 145 46 7 128 130 3 147 63 146 59 208 160 90 
def_bytes_0x5aa0    EQU                     0x5aa0
def_bytes_0x5aa0    DB                      144 56 147 63 129 7 128 130 131 3 147 61 144 63 145 56 146 59 7 128 129 130 2 147 69 144 52 145 30 10 144 54 10 144 73 146 57 145 42 131 10 129 9 146 73 144 59 10 145 42 10 144 61 10 144 69 146 59 145 42 10 145 32 9 146 69 144 57 145 44 10 146 69 129 10 145 44 10 146 73 144 59 145 28 9 145 40 208 160 91 
def_bytes_0x5ba0    EQU                     0x5ba0
def_bytes_0x5ba0    DB                      10 144 71 146 61 129 10 145 40 10 146 69 144 52 145 30 10 144 54 9 144 73 146 57 145 42 20 146 73 144 59 129 10 145 42 10 144 61 9 144 69 146 59 145 42 10 145 33 10 146 69 144 57 145 45 10 146 69 129 9 145 45 10 146 73 144 59 145 32 10 144 61 145 44 10 144 71 146 57 129 10 145 44 9 146 68 144 47 208 160 92 
def_bytes_0x5ca0    EQU                     0x5ca0
def_bytes_0x5ca0    DB                      145 25 10 144 49 10 144 76 146 52 145 37 10 146 49 129 9 146 76 144 54 10 145 37 10 144 56 10 144 68 146 54 145 37 10 145 27 9 146 68 144 52 145 39 10 146 68 129 10 145 39 10 146 76 144 54 145 23 10 145 35 9 144 75 146 56 129 10 145 35 10 146 68 144 47 145 25 10 144 49 9 144 76 146 52 145 37 20 208 160 93 
def_bytes_0x5da0    EQU                     0x5da0
def_bytes_0x5da0    DB                      146 76 144 54 129 10 145 37 10 144 56 9 144 68 146 54 145 37 10 145 28 10 146 68 144 52 145 40 10 146 68 129 9 145 40 10 146 76 144 59 145 27 10 145 39 10 144 75 146 56 129 10 146 54 145 39 9 146 52 144 69 147 73 145 25 10 146 54 10 146 57 20 146 59 19 146 61 10 146 59 19 146 57 30 146 59 19 146 61 208 160 94 
def_bytes_0x5ea0    EQU                     0x5ea0
def_bytes_0x5ea0    DB                      20 146 52 129 10 146 54 9 146 57 10 145 63 10 146 59 20 146 61 146 61 129 9 146 59 20 146 57 145 59 29 145 59 145 61 130 10 145 61 10 145 57 146 59 19 145 47 147 68 144 73 146 61 10 145 49 10 145 52 10 145 49 146 63 10 145 54 19 145 56 146 64 10 145 54 19 145 52 146 63 30 145 54 146 64 19 145 56 208 160 95 
def_bytes_0x5fa0    EQU                     0x5fa0
def_bytes_0x5fa0    DB                      146 66 20 145 47 146 64 10 145 49 10 145 52 9 146 63 10 145 54 20 145 56 146 61 9 145 54 20 145 52 146 59 29 146 59 146 61 129 20 145 56 146 59 10 145 54 9 145 52 144 69 147 73 146 61 144 69 10 145 54 147 73 128 10 145 57 147 78 10 146 63 147 69 10 145 59 147 73 9 147 78 10 145 61 146 64 147 69 208 160 96 
def_bytes_0x60a0    EQU                     0x60a0
def_bytes_0x60a0    DB                      10 145 59 147 73 10 147 78 10 145 57 146 63 147 69 9 147 73 10 147 78 10 145 59 146 64 147 69 10 147 73 9 145 61 146 66 147 78 10 147 71 10 145 52 146 64 147 69 10 145 54 147 73 10 145 57 147 78 9 146 63 147 69 10 145 59 147 73 10 147 78 10 145 61 145 61 147 69 130 9 145 59 147 73 10 147 78 208 160 97 
def_bytes_0x61a0    EQU                     0x61a0
def_bytes_0x61a0    DB                      10 145 57 144 59 147 69 10 147 73 10 147 78 9 144 59 144 61 147 69 129 10 144 61 147 73 10 144 57 145 59 147 78 10 147 71 10 144 47 146 68 145 61 146 68 131 9 144 49 146 73 10 144 52 146 76 10 144 49 145 63 146 68 10 144 54 146 73 9 146 76 10 144 56 145 64 146 68 10 144 54 146 73 10 146 76 10 144 52 208 160 98 
def_bytes_0x62a0    EQU                     0x62a0
def_bytes_0x62a0    DB                      145 63 146 68 9 146 73 10 146 76 10 144 54 145 64 146 68 10 146 73 9 144 56 145 66 146 75 10 146 73 10 144 47 145 64 146 68 10 144 49 146 73 10 144 52 146 76 9 145 63 146 68 10 144 54 146 73 10 146 76 10 144 56 145 61 146 68 10 144 54 146 73 9 146 76 10 144 52 145 59 146 68 10 146 73 10 146 76 208 160 99 
def_bytes_0x63a0    EQU                     0x63a0
def_bytes_0x63a0    DB                      9 145 59 145 61 146 68 128 10 146 73 10 144 56 145 59 146 75 10 144 54 146 73 10 144 52 146 69 147 73 145 61 146 69 131 9 144 54 146 73 10 144 57 146 78 10 145 63 146 69 10 144 59 146 73 9 146 78 10 144 61 145 64 146 69 10 144 59 146 73 10 146 78 10 144 57 145 63 146 69 9 146 73 10 146 78 10 208 160 100 
def_bytes_0x64a0    EQU                     0x64a0
def_bytes_0x64a0    DB                      144 59 145 64 146 69 10 146 73 10 144 61 145 66 146 78 9 146 71 10 144 52 145 64 146 69 10 144 54 146 73 10 144 57 146 78 9 145 63 146 69 10 144 59 146 73 10 146 78 10 144 61 144 61 146 69 129 10 144 59 146 73 9 146 78 10 144 57 145 59 146 69 10 146 73 10 146 78 9 145 59 145 61 146 69 128 10 145 61 208 160 101 
def_bytes_0x65a0    EQU                     0x65a0
def_bytes_0x65a0    DB                      146 73 10 145 57 144 59 146 78 10 146 71 10 145 47 147 68 144 61 147 68 130 9 145 49 147 73 10 145 52 147 76 10 145 49 144 63 147 68 10 145 54 147 73 10 147 76 9 145 56 144 64 147 68 10 145 54 147 73 10 147 76 10 145 52 144 63 147 68 9 147 73 10 147 76 10 145 54 144 64 147 68 10 147 73 10 145 56 208 160 102 
def_bytes_0x66a0    EQU                     0x66a0
def_bytes_0x66a0    DB                      144 66 147 75 9 147 73 10 145 47 144 64 147 68 10 145 49 147 73 10 145 52 147 76 9 144 63 147 68 10 145 54 147 73 10 147 76 10 145 56 144 61 147 68 10 145 54 147 73 9 147 76 10 145 52 144 59 147 68 10 147 73 10 147 76 10 144 59 144 61 147 68 129 9 147 73 10 145 56 144 59 147 75 10 145 54 147 73 208 160 103 
def_bytes_0x67a0    EQU                     0x67a0
def_bytes_0x67a0    DB                      10 128 129 131 208 160 16 

; Lookup Tables

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    LDWI                    0xFFFE
                    ANDW                    miscFlags
                    STW                     miscFlags                       ; scroll off

                    LDI                     3
                    ST                      waveType
                    LDWI                    4256
                    PlayMidi                                                ; play midi &h10a0,3

_10                 LDWI                    162
                    STW                     register0
                    LDI                     42
                    POKE                    register0
                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC                        ; poke 162,&h2A:cls:'Paper

_20                 Rand                    
                    ANDI                    63
                    STW                     0xc0
                    LDWI                    163
                    STW                     register0
                    LDW                     0xc0
                    POKE                    register0                       ; poke 163,rnd(0) AND 63:'Pen

_30                 LDI                     0x9b
                    RandMod                 
                    ST                      cursorXY
                    LDI                     0x71
                    RandMod                 
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC                        ; at rnd(155),rnd(113)

_40                 LDI                     127
                    PrintAcChar                                             ; put 127:'Block

_50                 BRA                     _20                             ; goto &20

_end_0x02b1         BRA                     _end_0x02b1                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0xff60
convertEqOp         EQU     0xff69
convertNeOp         EQU     0xff72
convertLeOp         EQU     0xff7b
convertGeOp         EQU     0xff84
convertLtOp         EQU     0xff8d
convertGtOp         EQU     0xff96
divide16bit         EQU     0xfd00
rand16bit           EQU     0xfe8a
randMod16bit        EQU     0xfe92
resetVideoTable     EQU     0xfedf
initClearFuncs      EQU     0xff9f
clearVertBlinds     EQU     0xfe50
clearCursorRow      EQU     0xfd5a
resetAudio          EQU     0xffc2
playMidi            EQU     0xfe00
midiStartNote       EQU     0xfda3
printInit           EQU     0xfde5
printChr            EQU     0xfed2
printChar           EQU     0xfc00
atTextCursor        EQU     0xfea5
newLineScroll       EQU     0xfc58
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
lutLabel            EQU     register9


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register0
mathY               EQU     register1
mathSum             EQU     register2
mathMask            EQU     register3
mathRem             EQU     register8
mathSign            EQU     register9
mathScratch         EQU     register10
mathShift           EQU     register11
mathBase            EQU     register8
mathPow             EQU     register9
mathResult          EQU     register10


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     0xFD
                    RET



                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_skip0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_skip0      LDW     mathY                     
                    BGE     divide16_skip1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_skip1      LDI     0
                    STW     mathRem
    
divide16_loop       STW     mathScratch
                    LDW     mathRem
                    ADDW    mathRem
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_skip3
                    INC     mathRem
                    
divide16_skip3      LDW     mathX
                    ADDW    mathX
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_skip4
                    STW     mathRem
                    INC     mathX
                    
divide16_skip4      PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathScratch
                    ADDI    1
                    ANDI    0x0F
                    BNE     divide16_loop
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


randMod16bit        PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     0xFD
                    STW     mathX
                    LDWI    divide16bit
                    CALL    giga_vAC
                    LDW     mathRem
                    POP                    
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET


numChannels         EQU     register0
audioPtr            EQU     register1
waveType            EQU     register2
midiNote            EQU     register4           ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6


resetAudio          LDWI    0x0000
                    STW     midiDelay
                    LDWI    giga_soundChan1
                    STW     audioPtr
                    LD      waveType
                    ANDI    0x03
                    ST      waveType + 1
                    LDI     0x00
                    ST      waveType            ; waveform type
                    LDI     0x04

resetA_loop         ST      numChannels
                    LDI     giga_soundChan1     ; reset low byte
                    ST      audioPtr
                    LDW     waveType
                    DOKE    audioPtr            ; wavA and wavX
                    INC     audioPtr
                    INC     audioPtr    
                    LDWI    0x0000
                    DOKE    audioPtr            ; keyL and keyH
                    INC     audioPtr
                    INC     audioPtr
                    DOKE    audioPtr            ; oscL and oscH
                    INC     audioPtr + 1        ; increment high byte
                    
                    LD      numChannels
                    SUBI    1
                    BNE     resetA_loop
                    RET



playMidi            LDW     midiStream
                    BEQ     playM_exit0         ; 0x0000 = stop
                    LDI     0x08                ; keep pumping soundTimer, so that global sound stays alive
                    ST      giga_soundTimer
                    LD      giga_frameCount
                    SUBW    midiDelay
                    BEQ     playM_start
playM_exit0         RET

playM_start         PUSH
playM_process       LDW     midiStream
                    PEEK                        ; get midi stream byte
                    STW     midiCommand
                    LDW     midiStream
                    ADDI    0x01
                    STW     midiStream
                    LDI     0xF0
                    ANDW    midiCommand
                    XORI    0x90                ; check for start note
                    BNE     playM_endnote
    
                    LDWI    midiStartNote
                    CALL    giga_vAC            ; start note
                    BRA     playM_process
                    
playM_endnote       XORI    0x10                ; check for end note
                    BNE     playM_segment
    
                    LDWI    midiEndNote         ; end note
                    CALL    giga_vAC
                    BRA     playM_process

playM_segment       XORI    0x50                ; check for new segment
                    BNE     playM_delay
    
                    LDW     midiStream          ; midi score
                    DEEK
                    STW     midiStream          ; 0xD0 new midi segment address
                    BEQ     playM_exit1         ; 0x0000 = stop
                    BRA     playM_process
    
playM_delay         LD      giga_frameCount     ; midiDelay = (midiCommand + peek(frameCount)) & 0x00FF 
                    ADDW    midiCommand
                    ST      midiDelay
playM_exit1         POP
                    RET


midiStartNote       LDWI    giga_notesTable     ; note table in ROM
                    STW     midiPtr
                    LDW     midiStream          ; midi score
                    PEEK
                    SUBI    11
                    LSLW
                    ADDW    midiPtr
                    STW     midiPtr
                    LUP     0x00                ; get ROM midi note low byte
                    ST      midiNote
                    LDW     midiPtr
                    LUP     0x01                ; get ROM midi note high byte
                    ST      midiNote + 1
                    LDW     midiCommand
                    ANDI    0x03                ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr             ; channels address 0x01FC <-> 0x04FC
                    LDW     midiNote
                    DOKE    midiPtr             ; set note
                    LDW     midiStream
                    ADDI    0x01                ; midiStream++
                    STW     midiStream
                    RET
                    
midiEndNote         LDW     midiCommand
                    ANDI    0x03                ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr             ; channels address 0x01FC <-> 0x04FC
                    LDWI    0x0000
                    DOKE    midiPtr             ; end note
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    
                    LDWI    giga_videoTable
                    STW     giga_sysArg4
                    LD      cursorXY + 1
                    LSLW
                    ADDW    giga_sysArg4
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET



                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     0xCB                            ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     0xCB                            ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres
                    BLT     atTC_skip0
                    LDI     0
                    ST      cursorXY
                    
atTC_skip0          LD      cursorXY + 1
                    SUBI    giga_yres
                    BLT     atTC_skip1
                    LDI     giga_yres - 1
                    ST      cursorXY + 1
                    
atTC_skip1          LD      cursorXY + 1
                    SUBI    giga_yres - 8
                    BGE     atTC_skip2
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET
                    
atTC_skip2          LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     8

clearCR_loopy       ST      clearLoop
                    CALL    realTimeProcAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

