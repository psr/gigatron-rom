_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
frameCountPrev      EQU                     register0 + 0x28
miscFlags           EQU                     register0 + 0x2A
highByteMask        EQU                     register0 + 0x2C

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_1                  EQU                     0x0240
_2                  EQU                     0x024e
_3                  EQU                     0x0278
_4                  EQU                     0x02a2
_5                  EQU                     0x02b7
_6                  EQU                     0x02cc
_7                  EQU                     0x02e2
_8                  EQU                     0x0309
_9                  EQU                     0x0321
_10                 EQU                     0x0333
_11                 EQU                     0x0343
_12                 EQU                     0x0358
_page_0x0300        EQU                     0x0300
_next_0x039b        EQU                     0x033f
_end_0x03df         EQU                     0x0373

; Variables
_a                  EQU                     0x0030
_b                  EQU                     0x0032
_c                  EQU                     0x0034
_d                  EQU                     0x0036
_x                  EQU                     0x0038
_y                  EQU                     0x003a
_q                  EQU                     0x003c
_u                  EQU                     0x003e
_v                  EQU                     0x0040
_p                  EQU                     0x0042
_t                  EQU                     0x0044

; Strings

; Define Bytes

; Lookup Tables

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

_1                  LDWI                    164
                    STW                     register0
                    LDI                     63
                    POKE                    register0
                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC                        ; poke 164,63 : cls : rem Lines demo

_2                  Rand                    
                    ANDI                    127
                    STW                     0xc0
                    Rand                    
                    ANDI                    31
                    ADDW                    0xc0
                    STW                     _a
                    Rand                    
                    ANDI                    63
                    STW                     0xc4
                    Rand                    
                    ANDI                    63
                    ADDW                    0xc4
                    ORI                     8
                    STW                     _b                              ; a=(rnd(0) AND &h7F) + (rnd(0) AND &h1F) : b=(rnd(0) AND &h3F) + (rnd(0) AND &h3F) OR 8

_3                  Rand                    
                    ANDI                    127
                    STW                     0xc0
                    Rand                    
                    ANDI                    31
                    ADDW                    0xc0
                    STW                     _c
                    Rand                    
                    ANDI                    63
                    STW                     0xc4
                    Rand                    
                    ANDI                    63
                    ADDW                    0xc4
                    ORI                     8
                    STW                     _d                              ; c=(rnd(0) AND &h7F) + (rnd(0) AND &h1F) : d=(rnd(0) AND &h3F) + (rnd(0) AND &h3F) OR 8

_4                  LDW                     _c
                    SUBW                    _a
                    STW                     _x
                    LDW                     _d
                    SUBW                    _b
                    STW                     _y
                    Rand                    
                    ANDI                    63
                    STW                     _q                              ; x=c-a : y=d-b : q=rnd(0) AND 63

_5                  LDI                     1
                    STW                     _u
                    LDW                     _x
                    BGE                     _6
                    LDI                     0
                    SUBW                    _x
                    STW                     _x
                    LDI                     0
                    SUBW                    _u
                    STW                     _u                              ; u=1 : if x &&< 0 then x=-x : u=-u

_6                  LDWI                    256
                    STW                     _v
                    LDW                     _y
                    BGE                     _7
                    LDI                     0
                    SUBW                    _y
                    STW                     _y
                    LDI                     0
                    SUBW                    _v
                    STW                     _v                              ; v=256 : if y &&< 0 then y=-y : v=-v

_7                  LD                      _b
                    ST                      0xc0 + 1
                    LDW                     0xc0
                    ANDW                    highByteMask
                    ADDW                    _a
                    STW                     _p
                    LDW                     _y
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    SUBW                    _x
                    BGE                     _8
                    BRA                     _9                              ; p=a + (b LSL 8) : if y &&< x then goto &9

_8                  LDW                     _x
                    STW                     _t
                    LDW                     _y
                    STW                     _x
                    LDW                     _t
                    STW                     _y
                    LDW                     _u
                    STW                     _t
                    LDW                     _v
                    STW                     _u
                    LDW                     _t
                    STW                     _v                              ; t=x : x=y : y=t : t=u : u=v : v=t

_9                  LDI                     0
                    SUBW                    _x
                    STW                     _d
                    LDW                     _x
                    ADDW                    _x
                    STW                     _x
                    LDW                     _y
                    ADDW                    _y
                    STW                     _y                              ; d=-x : x=x+x : y=y+y

_10                 LDW                     _d
                    STW                     _t
                    LDI                     0
                    STW                     0xb0
                    LDI                     1
                    STW                     0xb2
_next_0x039b        LDW                     _q
                    POKE                    _p                              ; for t=d to 0 : poke p,q

_11                 LDW                     _d
                    ADDW                    _y
                    STW                     _d
                    BLE                     _12
                    LDW                     _d
                    SUBW                    _x
                    STW                     _d
                    LDW                     _p
                    ADDW                    _v
                    STW                     _p                              ; d=d+y : if d &&> 0 then d=d-x : p=p+v

_12                 LDW                     _p
                    ADDW                    _u
                    STW                     _p
                    ForNextLoopStepUp       _t _next_0x039b 0xb0 0xb2
                    LDWI                    _2
                    CALL                    giga_vAC                        ; p=p+u : next t : goto 2

_end_0x03df         BRA                     _end_0x03df                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0x7ea0
convertEqOp         EQU     0x7ea9
convertNeOp         EQU     0x7eb2
convertLeOp         EQU     0x7ebb
convertGeOp         EQU     0x7ec4
convertLtOp         EQU     0x7ecd
convertGtOp         EQU     0x7ed6
rand16bit           EQU     0x7edf
resetVideoTable     EQU     0x7ca0
initClearFuncs      EQU     0x7da0
clearVertBlinds     EQU     0x7dc3
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
lutLabel            EQU     register9


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register0
mathY               EQU     register1
mathSum             EQU     register2
mathMask            EQU     register3
mathRem             EQU     register8
mathSign            EQU     register9
mathScratch         EQU     register10
mathShift           EQU     register11
mathBase            EQU     register8
mathPow             EQU     register9
mathResult          EQU     register10


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     0xFD
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET

