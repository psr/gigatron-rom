_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
frameCountPrev      EQU                     register0 + 0x28
miscFlags           EQU                     register0 + 0x2A
highByteMask        EQU                     register0 + 0x2C

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_10                 EQU                     0x0240
_20                 EQU                     0x0240
_30                 EQU                     0x0248
_40                 EQU                     0x025f
_50                 EQU                     0x0275
_60                 EQU                     0x027f
_70                 EQU                     0x0290
_80                 EQU                     0x02a8
_90                 EQU                     0x02ac
_100                EQU                     0x02c8
_110                EQU                     0x0313
_120                EQU                     0x0335
_130                EQU                     0x0346
_140                EQU                     0x035e
_150                EQU                     0x0374
_160                EQU                     0x038e
_170                EQU                     0x0398
_180                EQU                     0x03b2
_190                EQU                     0x03c5
_200                EQU                     0x03cf
_210                EQU                     0x03e5
_220                EQU                     0x0412
_page_0x0300        EQU                     0x0300
_page_0x0400        EQU                     0x0400
_end_0x04a3         EQU                     0x0424

; Variables
_X_array            EQU                     0xfe00
_X_array            DW                      0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_Y_array            EQU                     0xfd00
_Y_array            DW                      0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_I                  EQU                     0x0030
_J                  EQU                     0x0032
_S                  EQU                     0x0034
_y                  EQU                     0x0036
_x                  EQU                     0x0038

; Strings
_str_0xff60         EQU                     0xff60
_str_0xff60         DB                      16 'Merry Christmas!' 0

; Define Bytes
def_bytes_0x08a0    EQU                     0x08a0
def_bytes_0x08a0    DB                      144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 17 144 67 146 50 18 144 62 145 59 146 43 17 146 50 17 146 55 17 144 62 146 50 9 144 62 8 144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 18 144 67 146 50 17 144 64 145 60 146 48 17 146 52 17 146 55 17 146 52 17 144 64 145 60 146 45 17 144 72 208 160 9 
def_bytes_0x09a0    EQU                     0x09a0
def_bytes_0x09a0    DB                      146 52 18 144 71 146 57 17 144 69 146 52 17 144 66 145 62 146 50 17 146 54 17 146 57 17 146 54 17 144 74 145 66 146 50 18 144 74 146 54 17 144 72 145 66 146 57 17 144 69 146 50 17 144 71 145 67 146 43 17 146 50 17 146 55 17 146 50 18 144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 17 144 67 208 160 10 
def_bytes_0x0aa0    EQU                     0x0aa0
def_bytes_0x0aa0    DB                      146 50 17 144 62 145 59 146 43 17 146 50 17 146 55 18 144 62 146 50 8 144 62 9 144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 17 144 67 146 50 17 144 64 145 60 146 48 17 146 52 18 146 55 17 146 52 17 144 64 145 60 146 45 17 144 72 146 52 17 144 71 146 57 17 144 69 146 52 17 144 74 208 160 11 
def_bytes_0x0ba0    EQU                     0x0ba0
def_bytes_0x0ba0    DB                      145 67 146 47 18 144 74 146 50 17 144 74 145 67 146 55 17 144 74 146 50 17 144 76 145 66 146 45 17 144 74 146 50 17 144 72 145 66 146 54 17 144 69 146 50 18 144 67 145 62 146 43 17 146 50 17 144 74 145 67 146 55 34 144 67 145 71 146 43 17 144 67 145 71 17 145 67 144 71 18 146 50 17 144 67 145 71 208 160 12 
def_bytes_0x0ca0    EQU                     0x0ca0
def_bytes_0x0ca0    DB                      146 55 17 144 67 145 71 17 145 67 144 71 17 146 50 17 144 71 145 67 146 43 17 144 74 146 50 18 144 67 145 64 146 48 147 52 25 144 69 9 144 71 145 62 146 43 131 17 146 50 17 146 55 34 144 72 145 64 146 48 18 144 72 145 64 146 52 17 144 72 145 64 146 55 17 146 52 8 144 72 9 144 72 145 62 146 47 208 160 13 
def_bytes_0x0da0    EQU                     0x0da0
def_bytes_0x0da0    DB                      17 144 71 146 50 17 144 71 145 62 146 55 17 144 71 146 50 9 144 71 9 144 71 145 61 146 45 17 144 69 146 52 17 144 69 145 61 146 57 17 144 71 146 52 17 144 69 145 62 146 50 17 146 54 17 144 74 145 66 146 57 18 146 54 17 144 67 145 71 146 43 17 144 67 145 71 17 145 67 144 71 17 146 50 17 144 67 208 160 14 
def_bytes_0x0ea0    EQU                     0x0ea0
def_bytes_0x0ea0    DB                      145 71 146 55 17 144 67 145 71 18 145 67 144 71 17 146 50 17 144 71 145 67 146 43 17 144 74 146 50 17 144 67 145 64 146 48 147 52 26 144 69 8 144 71 145 62 146 43 131 18 146 50 17 146 55 34 144 72 145 64 146 48 17 144 72 145 64 146 52 17 144 72 145 64 146 55 17 146 52 9 144 72 9 144 72 145 62 208 160 15 
def_bytes_0x0fa0    EQU                     0x0fa0
def_bytes_0x0fa0    DB                      146 47 17 144 71 146 50 17 144 71 145 62 146 55 17 144 71 146 50 9 144 71 8 144 74 145 66 146 45 17 144 74 146 50 17 144 72 145 62 146 54 18 144 69 146 50 17 144 67 145 59 146 43 17 146 50 17 146 55 34 144 62 145 59 146 43 17 144 71 146 50 18 144 69 146 55 17 144 67 146 50 17 144 62 145 59 146 43 208 160 16 
def_bytes_0x10a0    EQU                     0x10a0
def_bytes_0x10a0    DB                      17 146 50 17 146 55 17 144 62 146 50 9 144 62 8 144 62 145 59 146 43 18 144 71 146 50 17 144 69 146 55 17 144 67 146 50 17 144 64 145 60 146 48 17 146 52 17 146 55 17 146 52 18 144 64 145 60 146 45 17 144 72 146 52 17 144 71 146 57 17 144 69 146 52 17 144 66 145 62 146 50 17 146 54 17 146 57 208 160 17 
def_bytes_0x11a0    EQU                     0x11a0
def_bytes_0x11a0    DB                      18 146 54 17 144 74 145 66 146 50 17 144 74 146 54 17 144 72 145 66 146 57 17 144 69 146 50 17 144 71 145 67 146 43 17 146 50 18 146 55 17 146 50 17 144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 17 144 67 146 50 17 144 62 145 59 146 43 18 146 50 17 146 55 17 144 62 146 50 8 144 62 208 160 18 
def_bytes_0x12a0    EQU                     0x12a0
def_bytes_0x12a0    DB                      9 144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 17 144 67 146 50 18 144 64 145 60 146 48 17 146 52 17 146 55 17 146 52 17 144 64 145 60 146 45 17 144 72 146 52 17 144 71 146 57 18 144 69 146 52 17 144 74 145 67 146 47 17 144 74 146 50 17 144 74 145 67 146 55 17 144 74 146 50 17 144 76 208 160 19 
def_bytes_0x13a0    EQU                     0x13a0
def_bytes_0x13a0    DB                      145 66 146 45 17 144 74 146 50 18 144 72 145 66 146 54 17 144 69 146 50 17 144 67 145 62 146 43 17 146 50 17 144 74 145 67 146 55 34 144 67 145 71 146 43 18 144 67 145 71 17 145 67 144 71 17 146 50 17 144 67 145 71 146 55 17 144 67 145 71 17 145 67 144 71 17 146 50 18 144 71 145 67 146 43 17 144 74 208 160 20 
def_bytes_0x14a0    EQU                     0x14a0
def_bytes_0x14a0    DB                      146 50 17 144 67 145 64 146 48 147 52 26 144 69 8 144 71 145 62 146 43 131 17 146 50 17 146 55 35 144 72 145 64 146 48 17 144 72 145 64 146 52 17 144 72 145 64 146 55 17 146 52 9 144 72 8 144 72 145 62 146 47 17 144 71 146 50 18 144 71 145 62 146 55 17 144 71 146 50 8 144 71 9 144 71 145 61 208 160 21 
def_bytes_0x15a0    EQU                     0x15a0
def_bytes_0x15a0    DB                      146 45 17 144 69 146 52 17 144 69 145 61 146 57 17 144 71 146 52 17 144 69 145 62 146 50 18 146 54 17 144 74 145 66 146 57 17 146 54 17 144 67 145 71 146 43 17 144 67 145 71 17 145 67 144 71 17 146 50 18 144 67 145 71 146 55 17 144 67 145 71 17 145 67 144 71 17 146 50 17 144 71 145 67 146 43 208 160 22 
def_bytes_0x16a0    EQU                     0x16a0
def_bytes_0x16a0    DB                      17 144 74 146 50 17 144 67 145 64 146 48 147 52 26 144 69 9 144 71 145 62 146 43 131 17 146 50 17 146 55 34 144 72 145 64 146 48 17 144 72 145 64 146 52 18 144 72 145 64 146 55 17 146 52 8 144 72 9 144 72 145 62 146 47 17 144 71 146 50 17 144 71 145 62 146 55 17 144 71 146 50 9 144 71 8 144 74 208 160 23 
def_bytes_0x17a0    EQU                     0x17a0
def_bytes_0x17a0    DB                      145 66 146 45 18 144 74 146 50 17 144 72 145 62 146 54 17 144 69 146 50 17 144 67 145 59 146 43 17 146 50 17 146 55 35 128 129 130 208 160 8 

; Lookup Tables

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

_20                 LDI                     1
                    STW                     _I
                    LDI                     0
                    STW                     _J                              ; I=1 : J=0

_30                 LDWI                    162
                    STW                     register0
                    LDI                     16
                    POKE                    register0
                    LDI                     1
                    STW                     graphicsMode
                    ScanlineMode            
                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC                        ; poke 162,D : mode 1 : cls

_40                 LDWI                    163
                    STW                     register0
                    LDI                     72
                    POKE                    register0
                    LDI                     32
                    ST                      cursorXY
                    LDI                     96
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC                        ; poke 163,72 : at 32,96

_50                 PrintString             _str_0xff60                     ; print "Merry Christmas!";

_60                 LDI                     0
                    STW                     drawHLine_x1
                    LDI                     119
                    STW                     drawHLine_y1
                    LDI                     159
                    STW                     drawHLine_x2
                    DrawHLine                                               ; hline 0, 119, W 'at 0,119 : line W,0

_70                 LDI                     3
                    ST                      waveType
                    LDWI                    2208
                    PlayMidi                                                ; play midi &h08a0,3

_80                 LDI                     0
                    STW                     _S                              ; for S=0 to N

_90                 TickMidi                
                    LDWI                    0xfd00
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    CALL                    convertGtOpAddr
                    JumpFalse               _100 0
                    LDWI                    _120
                    CALL                    giga_vAC                        ; play midi : if Y(S)>0 then goto 120

_100                Rand                    
                    ANDI                    63
                    ADDI                    2
                    STW                     0xc0
                    Rand                    
                    ANDI                    63
                    ADDW                    0xc0
                    STW                     0xc2
                    Rand                    
                    ANDI                    15
                    ADDW                    0xc2
                    STW                     0xc4
                    Rand                    
                    ANDI                    15
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    ADDW                    0xc4
                    STW                     register0
                    LDWI                    0xfe00
                    ADDW                    _S
                    ADDW                    _S
                    STW                     register1
                    LDW                     register0
                    DOKE                    register1                       ; X(S) = 2 + (rnd(0) AND &h3F) + (rnd(0) AND &h3F) + (rnd(0) AND &h0F) + (rnd(0) AND &h0F) '2+rnd(W-3)

_110                Rand                    
                    ANDI                    63
                    ADDI                    8
                    STW                     0xc0
                    LD                      0xc0
                    ST                      0xc2 + 1
                    LDW                     0xc2
                    ANDW                    highByteMask
                    STW                     register0
                    LDWI                    0xfd00
                    ADDW                    _S
                    ADDW                    _S
                    STW                     register1
                    LDW                     register0
                    DOKE                    register1                       ; Y(S) = (8 + (rnd(0) AND &h3F)) LSL 8 '(8+rnd(60))*256

_120                LDWI                    0xfd00
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    STW                     0xc0
                    LDWI                    256
                    ADDW                    0xc0
                    STW                     _y                              ; y=Y(S)+256

_130                LDWI                    0xfe00
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    ADDW                    _I
                    STW                     _x
                    LDW                     _I
                    ADDW                    _J
                    STW                     _I
                    LDW                     _J
                    SUBW                    _I
                    STW                     _J                              ; x=X(S)+I : I=I+J : J=J-I

_140                LDW                     _y
                    ADDW                    _x
                    PEEK                    
                    SUBI                    63
                    CALL                    convertGtOpAddr
                    JumpFalse               _150 1
                    LDWI                    _190
                    CALL                    giga_vAC                        ; if peek(y+x)>C then goto 190

_150                LDWI                    0xfd00
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    STW                     0xc0
                    LDWI                    0xfe00
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    ADDW                    0xc0
                    STW                     0xc2
                    LDI                     16
                    POKE                    0xc2                            ; poke Y(S)+X(S),D

_160                LDW                     _x
                    ADDW                    _y
                    STW                     0xc0
                    LDI                     63
                    POKE                    0xc0                            ; poke x+y,C

_170                LDWI                    0xfe00
                    ADDW                    _S
                    ADDW                    _S
                    STW                     register1
                    LDW                     _x
                    DOKE                    register1
                    LDWI                    0xfd00
                    ADDW                    _S
                    ADDW                    _S
                    STW                     register1
                    LDW                     _y
                    DOKE                    register1                       ; X(S)=x : Y(S)=y

_180                ForNextLoopUp           _S _90 127
                    LDWI                    _80
                    CALL                    giga_vAC                        ; next S : goto 80

_190                LDWI                    0xfe00
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    STW                     _x                              ; x=X(S)

_200                LDW                     _x
                    ADDW                    _y
                    PEEK                    
                    SUBI                    16
                    CALL                    convertEqOpAddr
                    JumpFalse               _210 2
                    LDWI                    _150
                    CALL                    giga_vAC                        ; if peek(x+y)=D then goto 150

_210                LDWI                    0xfd00
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    STW                     0xc0
                    STW                     0xde
                    LDWI                    _page_0x0400
                    CALL                    giga_vAC
_page_0x0400        LDW                     0xde
                    LDWI                    0xfe00
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    ADDW                    0xc0
                    STW                     0xc2
                    LDI                     127
                    POKE                    0xc2                            ; poke Y(S)+X(S),C+64

_220                LDWI                    0xfd00
                    ADDW                    _S
                    ADDW                    _S
                    STW                     register1
                    LDI                     0
                    DOKE                    register1
                    LDWI                    _180
                    CALL                    giga_vAC                        ; Y(S)=0 : goto 180

_end_0x04a3         BRA                     _end_0x04a3                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0xff72
convertEqOp         EQU     0xff7b
convertNeOp         EQU     0xff84
convertLeOp         EQU     0xff8d
convertGeOp         EQU     0xff96
convertLtOp         EQU     0xff9f
convertGtOp         EQU     0xffa8
rand16bit           EQU     0xffe8
scanlineMode        EQU     0xffd4
resetVideoTable     EQU     0xfb50
initClearFuncs      EQU     0xffb1
clearVertBlinds     EQU     0xfc00
clearCursorRow      EQU     0xfb6f
drawHLine           EQU     0xfc80
resetAudio          EQU     0xfcc7
playMidi            EQU     0xfb00
midiStartNote       EQU     0xfbb8
printInit           EQU     0xfa00
printText           EQU     0xfc67
printChar           EQU     0xfa1b
atTextCursor        EQU     0xfc3a
newLineScroll       EQU     0xfa73
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
lutLabel            EQU     register9


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register0
mathY               EQU     register1
mathSum             EQU     register2
mathMask            EQU     register3
mathRem             EQU     register8
mathSign            EQU     register9
mathScratch         EQU     register10
mathShift           EQU     register11
mathBase            EQU     register8
mathPow             EQU     register9
mathResult          EQU     register10


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     0xFD
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_addr       EQU     register13
drawLine_tmp        EQU     register14
    
    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     0xE6                ; 270 - max(14,80/2)
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET


drawHLine           PUSH
                    LD      drawHLine_x1
                    ST      giga_sysArg4
                    LD      drawHLine_y1
                    ADDI    8
                    ST      giga_sysArg4 + 1
                    LDW     drawHLine_x2
                    SUBW    drawHLine_x1
                    SUBI    4
                    BLT     drawHL_loop1
                    
                    LD      fgbgColour + 1
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1    ; 4 pixels of fg colour
                    LDWI    SYS_Draw4_30        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    
                    LDW     drawHLine_x2        
                    SUBI    3
                    STW     drawHLine_x4        ; 4 pixel chunks limit

drawHL_loop0        SYS     0xFF                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    CALL    realTimeProcAddr
                    LD      giga_sysArg4
                    ADDI    4
                    ST      giga_sysArg4
                    SUBW    drawHLine_x4
                    BLT     drawHL_loop0        ; all 4 pixel chunks
                    
drawHL_loop1        LD      fgbgColour + 1
                    POKE    giga_sysArg4
                    INC     giga_sysArg4
                    LD      giga_sysArg4
                    SUBW    drawHLine_x2
                    BLE     drawHL_loop1        ; remaining pixels
                    POP
                    RET


numChannels         EQU     register0
audioPtr            EQU     register1
waveType            EQU     register2
midiNote            EQU     register4           ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6


resetAudio          LDWI    0x0000
                    STW     midiDelay
                    LDWI    giga_soundChan1
                    STW     audioPtr
                    LD      waveType
                    ANDI    0x03
                    ST      waveType + 1
                    LDI     0x00
                    ST      waveType            ; waveform type
                    LDI     0x04

resetA_loop         ST      numChannels
                    LDI     giga_soundChan1     ; reset low byte
                    ST      audioPtr
                    LDW     waveType
                    DOKE    audioPtr            ; wavA and wavX
                    INC     audioPtr
                    INC     audioPtr    
                    LDWI    0x0000
                    DOKE    audioPtr            ; keyL and keyH
                    INC     audioPtr
                    INC     audioPtr
                    DOKE    audioPtr            ; oscL and oscH
                    INC     audioPtr + 1        ; increment high byte
                    
                    LD      numChannels
                    SUBI    1
                    BNE     resetA_loop
                    RET



playMidi            LDW     midiStream
                    BEQ     playM_exit0         ; 0x0000 = stop
                    LDI     0x08                ; keep pumping soundTimer, so that global sound stays alive
                    ST      giga_soundTimer
                    LD      giga_frameCount
                    SUBW    midiDelay
                    BEQ     playM_start
playM_exit0         RET

playM_start         PUSH
playM_process       LDW     midiStream
                    PEEK                        ; get midi stream byte
                    STW     midiCommand
                    LDW     midiStream
                    ADDI    0x01
                    STW     midiStream
                    LDI     0xF0
                    ANDW    midiCommand
                    XORI    0x90                ; check for start note
                    BNE     playM_endnote
    
                    LDWI    midiStartNote
                    CALL    giga_vAC            ; start note
                    BRA     playM_process
                    
playM_endnote       XORI    0x10                ; check for end note
                    BNE     playM_segment
    
                    LDWI    midiEndNote         ; end note
                    CALL    giga_vAC
                    BRA     playM_process

playM_segment       XORI    0x50                ; check for new segment
                    BNE     playM_delay
    
                    LDW     midiStream          ; midi score
                    DEEK
                    STW     midiStream          ; 0xD0 new midi segment address
                    BEQ     playM_exit1         ; 0x0000 = stop
                    BRA     playM_process
    
playM_delay         LD      giga_frameCount     ; midiDelay = (midiCommand + peek(frameCount)) & 0x00FF 
                    ADDW    midiCommand
                    ST      midiDelay
playM_exit1         POP
                    RET


midiStartNote       LDWI    giga_notesTable     ; note table in ROM
                    STW     midiPtr
                    LDW     midiStream          ; midi score
                    PEEK
                    SUBI    11
                    LSLW
                    ADDW    midiPtr
                    STW     midiPtr
                    LUP     0x00                ; get ROM midi note low byte
                    ST      midiNote
                    LDW     midiPtr
                    LUP     0x01                ; get ROM midi note high byte
                    ST      midiNote + 1
                    LDW     midiCommand
                    ANDI    0x03                ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr             ; channels address 0x01FC <-> 0x04FC
                    LDW     midiNote
                    DOKE    midiPtr             ; set note
                    LDW     midiStream
                    ADDI    0x01                ; midiStream++
                    STW     midiStream
                    RET
                    
midiEndNote         LDW     midiCommand
                    ANDI    0x03                ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr             ; channels address 0x01FC <-> 0x04FC
                    LDWI    0x0000
                    DOKE    midiPtr             ; end note
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    
                    LDWI    giga_videoTable
                    STW     giga_sysArg4
                    LD      cursorXY + 1
                    LSLW
                    ADDW    giga_sysArg4
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     0xCB                            ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     0xCB                            ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres
                    BLT     atTC_skip0
                    LDI     0
                    ST      cursorXY
                    
atTC_skip0          LD      cursorXY + 1
                    SUBI    giga_yres
                    BLT     atTC_skip1
                    LDI     giga_yres - 1
                    ST      cursorXY + 1
                    
atTC_skip1          LD      cursorXY + 1
                    SUBI    giga_yres - 8
                    BGE     atTC_skip2
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET
                    
atTC_skip2          LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     8

clearCR_loopy       ST      clearLoop
                    CALL    realTimeProcAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

