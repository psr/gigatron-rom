* source: .\dev.py
                                          165   enableListing()
                                          166   #-----------------------------------------------------------------------
                                          167   #
                                          168   #  Start of core
                                          169   #
                                          170   #-----------------------------------------------------------------------
                                          171
                                          172   # Pre-loading the formal interface as a way to get warnings when
                                          173   # accidentally redefined with a different value
                                          174   loadBindings('interface.json')
                                          175   loadBindings('Core/interface-dev.json') # Provisional values for DEVROM
                                          176
                                          177   # Gigatron clock
                                          178   cpuClock = 6.250e+06
                                          179
                                          180   # Output pin assignment for VGA
                                          181   R, G, B, hSync, vSync = 1, 4, 16, 64, 128
                                          182   syncBits = hSync+vSync # Both pulses negative
                                          183
                                          184   # When the XOUT register is in the circuit, the rising edge triggers its update.
                                          185   # The loop can therefore not be agnostic to the horizontal pulse polarity.
                                          186   assert syncBits & hSync != 0
                                          187
                                          188   # VGA 640x480 defaults (to be adjusted below!)
                                          189   vFront = 10     # Vertical front porch
                                          190   vPulse = 2      # Vertical sync pulse
                                          191   vBack  = 33     # Vertical back porch
                                          192   vgaLines = vFront + vPulse + vBack + 480
                                          193   vgaClock = 25.175e+06
                                          194
                                          195   # Video adjustments for Gigatron
                                          196   # 1. Our clock is (slightly) slower than 1/4th VGA clock. Not all monitors will
                                          197   #    accept the decreased frame rate, so we restore the frame rate to above
                                          198   #    minimum 59.94 Hz by cutting some lines from the vertical front porch.
                                          199   vFrontAdjust = vgaLines - int(4 * cpuClock / vgaClock * vgaLines)
                                          200   vFront -= vFrontAdjust
                                          201   # 2. Extend vertical sync pulse so we can feed the game controller the same
                                          202   #    signal. This is needed for controllers based on the 4021 instead of 74165
                                          203   vPulseExtension = max(0, 8-vPulse)
                                          204   vPulse += vPulseExtension
                                          205   # 3. Borrow these lines from the back porch so the refresh rate remains
                                          206   #    unaffected
                                          207   vBack -= vPulseExtension
                                          208
                                          209   # Start value of vertical blank counter
                                          210   videoYline0 = 1-2*(vFront+vPulse+vBack-2)
                                          211
                                          212   # Mismatch between video lines and sound channels
                                          213   soundDiscontinuity = (vFront+vPulse+vBack) % 4
                                          214
                                          215   # Game controller bits (actual controllers in kit have negative output)
                                          216   # +----------------------------------------+
                                          217   # |       Up                        B*     |
                                          218   # |  Left    Right               B     A*  |
                                          219   # |      Down      Select Start     A      |
                                          220   # +----------------------------------------+ *=Auto fire
                                          221   buttonRight     = 1
                                          222   buttonLeft      = 2
                                          223   buttonDown      = 4
                                          224   buttonUp        = 8
                                          225   buttonStart     = 16
                                          226   buttonSelect    = 32
                                          227   buttonB         = 64
                                          228   buttonA         = 128
                                          229
                                          230   #-----------------------------------------------------------------------
                                          231   #
                                          232   #  RAM page 0: zero-page variables
                                          233   #
                                          234   #-----------------------------------------------------------------------
                                          235
                                          236   # Memory size in pages from auto-detect
                                          237   memSize         = zpByte()
                                          238
                                          239   # The current channel number for sound generation. Advanced every scan line
                                          240   # and independent of the vertical refresh to maintain constant oscillation.
                                          241   channel         = zpByte()
                                          242
                                          243   # Next sound sample being synthesized
                                          244   sample          = zpByte()
                                          245   # To save one instruction in the critical inner loop, `sample' is always
                                          246   # reset with its own address instead of, for example, the value 0. Compare:
                                          247   # 1 instruction reset
                                          248   #       st sample,[sample]
                                          249   # 2 instruction reset:
                                          250   #       ld 0
                                          251   #       st [sample]
                                          252   # The difference is not audible. This is fine when the reset/address
                                          253   # value is low and doesn't overflow with 4 channels added to it.
                                          254   # There is an alternative, but it requires pull-down diodes on the data bus:
                                          255   #       st [sample],[sample]
                                          256   assert 4*63 + sample < 256
                                          257   # We pin this reset/address value to 3, so `sample' swings from 3 to 255
                                          258   assert sample == 3
                                          259
                                          260   # Former bootCount and bootCheck (<= ROMv3)
                                          261   zpByte()                   # Recycled and still unused. Candidate future uses:
                                          262                              # - SPI control state (to remember banking state)
                                          263                              # - Video driver high address (for alternative video modes)
                                          264                              # - v6502: ADH offset ("MMU")
                                          265                              # - v8080: ???
                                          266                              # - mapping for for matrix keyboards (C16, C64, VIC20...)
                                          267   vCPUselect      = zpByte() # Active interpreter page
                                          268
                                          269   # Entropy harvested from SRAM startup and controller input
                                          270   entropy         = zpByte(3)
                                          271
                                          272   # Visible video
                                          273   videoY          = zpByte() # Counts up from 0 to 238 in steps of 2
                                          274                              # Counts up (and is odd) during vertical blank
                                          275   videoModeB      = zpByte() # Handler for every 2nd line (pixel burst or vCPU)
                                          276   videoModeC      = zpByte() # Handler for every 3rd line (pixel burst or vCPU)
                                          277   videoModeD      = zpByte() # Handler for every 4th line (pixel burst or vCPU)
                                          278
                                          279   nextVideo       = zpByte() # Jump offset to scan line handler (videoA, B, C...)
                                          280   videoPulse      = nextVideo # Used for pulse width modulation
                                          281
                                          282   # Frame counter is good enough as system clock
                                          283   frameCount      = zpByte(1)
                                          284
                                          285   # Serial input (game controller)
                                          286   serialRaw       = zpByte() # New raw serial read
                                          287   serialLast      = zpByte() # Previous serial read
                                          288   buttonState     = zpByte() # Clearable button state
                                          289   resetTimer      = zpByte() # After 2 seconds of holding 'Start', do a soft reset
                                          290                              # XXX move to page 1 to free up space
                                          291
                                          292   # Extended output (blinkenlights in bit 0:3 and audio in bit 4:7). This
                                          293   # value must be present in AC during a rising hSync edge. It then gets
                                          294   # copied to the XOUT register by the hardware. The XOUT register is only
                                          295   # accessible in this indirect manner because it isn't part of the core
                                          296   # CPU architecture.
                                          297   xout            = zpByte()
                                          298   xoutMask        = zpByte() # The blinkenlights and sound on/off state
                                          299
                                          300   # vCPU interpreter
                                          301   vTicks          = zpByte()  # Interpreter ticks are units of 2 clocks
                                          302   vPC             = zpByte(2) # Interpreter program counter, points into RAM
                                          303   vAC             = zpByte(2) # Interpreter accumulator, 16-bits
                                          304   vLR             = zpByte(2) # Return address, for returning after CALL
                                          305   vSP             = zpByte(1) # Stack pointer
                                          306   vTmp            = zpByte()
                                          307   vReturn         = zpByte()  # Return into video loop (in page of vBlankStart)
                                          308
                                          309   # Scratch
                                          310   frameX          = zpByte() # Starting byte within page
                                          311   frameY          = zpByte() # Page of current pixel line (updated by videoA)
                                          312
                                          313   # Vertical blank (reuse some variables used in the visible part)
                                          314   videoSync0      = frameX   # Vertical sync type on current line (0xc0 or 0x40)
                                          315   videoSync1      = frameY   # Same during horizontal pulse (0x80 or 0x00)
                                          316
                                          317   # Versioning for GT1 compatibility
                                          318   # Please refer to Docs/GT1-files.txt for interpreting this variable
                                          319   romType         = zpByte(1)
                                          320
                                          321   # The low 3 bits are repurposed to select the actively updated sound channels.
                                          322   # Valid bit combinations are:
                                          323   #  xxxxx011     Default after reset: 4 channels (page 1,2,3,4)
                                          324   #  xxxxx001     2 channels at double update rate (page 1,2)
                                          325   #  xxxxx000     1 channel at quadruple update rate (page 1)
                                          326   # The main application for this is to free up the high bytes of page 2,3,4.
                                          327   channelMask = symbol('channelMask_v4')
                                          328   assert romType == channelMask
                                          329
                                          330   # SYS function arguments and results/scratch
                                          331   sysFn           = zpByte(2)
                                          332   sysArgs         = zpByte(8)
                                          333
                                          334   # Play sound if non-zero, count down and stop sound when zero
                                          335   soundTimer      = zpByte()
                                          336
                                          337   # Fow now the LED state machine itself is hard-coded in the program ROM
                                          338   ledTimer        = zpByte() # Number of ticks until next LED change
                                          339   ledState_v2     = zpByte() # Current LED state
                                          340   ledTempo        = zpByte() # Next value for ledTimer after LED state change
                                          341
                                          342   # All bytes above, except 0x80, are free for temporary/scratch/stacks etc
                                          343   userVars        = zpByte(0)
                                          344
                                          345   #-----------------------------------------------------------------------
                                          346   #
                                          347   #  RAM page 1: video line table
                                          348   #
                                          349   #-----------------------------------------------------------------------
                                          350
                                          351   # Byte 0-239 define the video lines
                                          352   videoTable      = 0x0100 # Indirection table: Y[0] dX[0]  ..., Y[119] dX[119]
                                          353
                                          354   ctrlBits        = 0x01f8
                                          355   videoTop_DEVROM = 0x01f9 # Number of skip lines
                                          356
                                          357   vReset          = 0x01f0
                                          358
                                          359   #resetTimer     = 0x01f8 XXX Future. Also change Easter Egg detection in main
                                          360
                                          361   # Highest bytes are for sound channel variables
                                          362   wavA = 250      # Waveform modulation with `adda'
                                          363   wavX = 251      # Waveform modulation with `xora'
                                          364   keyL = 252      # Frequency low 7 bits (bit7 == 0)
                                          365   keyH = 253      # Frequency high 8 bits
                                          366   oscL = 254      # Phase low 7 bits
                                          367   oscH = 255      # Phase high 8 bits
                                          368
                                          369   #-----------------------------------------------------------------------
                                          370   #  Memory layout
                                          371   #-----------------------------------------------------------------------
                                          372
                                          373   userCode = 0x0200       # Application vCPU code
                                          374   soundTable = 0x0700     # Wave form tables (doubles as right-shift-2 table)
                                          375   screenMemory = 0x0800   # Default start of screen memory: 0x0800 to 0x7fff
                                          376
                                          377   #-----------------------------------------------------------------------
                                          378   #  Application definitions
                                          379   #-----------------------------------------------------------------------
                                          380
                                          381   maxTicks = 28//2                 # Duration of vCPU's slowest virtual opcode (ticks)
                                          382   minTicks = 14//2                 # vcPU's fastest instruction
                                          383   v6502_maxTicks = 38//2           # Max duration of v6502 processing phase (ticks)
                                          384
                                          385   runVcpu_overhead = 5            # Caller overhead (cycles)
                                          386   vCPU_overhead = 9               # Callee overhead of jumping in and out (cycles)
                                          387   v6502_overhead = 11             # Callee overhead for v6502 (cycles)
                                          388
                                          389   v6502_adjust = (v6502_maxTicks - maxTicks) + (v6502_overhead - vCPU_overhead)//2
                                          390   assert v6502_adjust >= 0        # v6502's overhead is a bit more than vCPU
                                          391
                                          392   def runVcpu(n, ref=None, returnTo=None):
                                          393     """Macro to run interpreter for exactly n cycles. Returns 0 in AC.
                                          394
                                          395     - `n' is the number of available Gigatron cycles including overhead.
                                          396       This is converted into interpreter ticks and takes into account
                                          397       the vCPU calling overheads. A `nop' is inserted when necessary
                                          398       for alignment between cycles and ticks.
                                          399     - `returnTo' is where program flow continues after return. If not set
                                          400        explicitely, it will be the first instruction behind the expansion.
                                          401     - If another interpreter than vCPU is active (v6502...), that one
                                          402       must adjust for the timing differences, because runVcpu wouldn't know."""
                                          403
                                          404     overhead = runVcpu_overhead + vCPU_overhead
                                          405     if returnTo == 0x100:         # Special case for videoZ
                                          406       overhead -= 2
                                          407
                                          408     if n is None:
                                          409       # (Clumsily) create a maximum time slice, corresponding to a vTicks
                                          410       # value of 127 (giving 282 cycles). A higher value doesn't work because
                                          411       # then SYS functions that just need 28 cycles (0 excess) won't start.
                                          412       n = (127 + maxTicks) * 2 + overhead
                                          413
                                          414     n -= overhead
                                          415     assert n > 0
                                          416
                                          417     if n % 2 == 1:
                                          418       nop()                       # Tick alignment
                                          419       n -= 1
                                          420     assert n % 2 == 0
                                          421
                                          422     print('runVcpu at $%04x net cycles %3s info %s' % (pc(), n, ref))
                                          423
                                          424     if returnTo != 0x100:
                                          425       if returnTo is None:
                                          426         returnTo = pc() + 5       # Next instruction
                                          427       ld(returnTo&255)            #0
                                          428       st([vReturn])               #1
                                          429
                                          430     n //= 2
                                          431     n -= maxTicks                 # First instruction always runs
                                          432     assert n < 128
                                          433     assert n >= v6502_adjust
                                          434
                                          435     ld([vCPUselect],Y)            #2
                                          436     jmp(Y,'ENTER')                #3
                                          437     ld(n)                         #4
                                          438   assert runVcpu_overhead ==       5
                                          439
                                          440   #-----------------------------------------------------------------------
                                          441   #       v6502 definitions
                                          442   #-----------------------------------------------------------------------
                                          443
                                          444   # Registers are zero page variables
                                          445   v6502_PC        = vLR           # Program Counter
                                          446   v6502_PCL       = vLR+0         # Program Counter Low
                                          447   v6502_PCH       = vLR+1         # Program Counter High
                                          448   v6502_S         = vSP           # Stack Pointer (kept as "S+1")
                                          449   v6502_A         = vAC+0         # Accumulator
                                          450   v6502_BI        = vAC+1         # B Input Register (used by SBC)
                                          451   v6502_ADL       = sysArgs+0     # Low Address Register
                                          452   v6502_ADH       = sysArgs+1     # High Address Register
                                          453   v6502_IR        = sysArgs+2     # Instruction Register
                                          454   v6502_P         = sysArgs+3     # Processor Status Register (V flag in bit 7)
                                          455   v6502_Qz        = sysArgs+4     # Quick Status Register for Z flag
                                          456   v6502_Qn        = sysArgs+5     # Quick Status Register for N flag
                                          457   v6502_X         = sysArgs+6     # Index Register X
                                          458   v6502_Y         = sysArgs+7     # Index Register Y
                                          459   v6502_Tmp       = vTmp          # Scratch (may be clobbered outside v6502)
                                          460
                                          461   # MOS 6502 definitions for P register
                                          462   v6502_Cflag = 1                 # Carry Flag (unsigned overflow)
                                          463   v6502_Zflag = 2                 # Zero Flag (all bits zero)
                                          464   v6502_Iflag = 4                 # Interrupt Enable Flag (1=Disable)
                                          465   v6502_Dflag = 8                 # Decimal Enable Flag (aka BCD mode, 1=Enable)
                                          466   v6502_Bflag = 16                # Break (or PHP) Instruction Flag
                                          467   v6502_Uflag = 32                # Unused (always 1)
                                          468   v6502_Vflag = 64                # Overflow Flag (signed overflow)
                                          469   v6502_Nflag = 128               # Negative Flag (bit 7 of result)
                                          470
                                          471   # In emulation it is much faster to keep the V flag in bit 7
                                          472   # This can be corrected when importing/exporting with PHP, PLP, etc
                                          473   v6502_Vemu = 128
                                          474
                                          475   # On overflow:
                                          476   #       """Overflow is set if two inputs with the same sign produce
                                          477   #          a result with a different sign. Otherwise it is clear."""
                                          478   # Formula (without carry/borrow in!):
                                          479   #       (A ^ (A+B)) & (B ^ (A+B)) & 0x80
                                          480   # References:
                                          481   #       http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
                                          482   #       http://6502.org/tutorials/vflag.html
                                          483
                                          484   # Memory layout
                                          485   v6502_Stack     = 0x0000        # 0x0100 is already used in the Gigatron
                                          486   #v6502_NMI      = 0xfffa
                                          487   #v6502_RESET    = 0xfffc
                                          488   #v6502_IRQ      = 0xfffe
                                          489
                                          490   #-----------------------------------------------------------------------
                                          491   #
                                          492   #  $0000 ROM page 0: Boot
                                          493   #
                                          494   #-----------------------------------------------------------------------
                                          495
                                          496   align(0x100, size=0x80)
                                          497
                                          498   # Give a first sign of life that can be checked with a voltmeter
              address
              |    encoding
              |    |     instruction
              |    |     |    operands
              |    |     |    |
              V    V     V    V
              0000 0000  ld   $00         499   ld(0b0000)                      # LEDs |OOOO|
              0001 1880  ld   $80,out     500   ld(syncBits^hSync,OUT)          # Prepare XOUT update, hSync goes down, RGB to black
              0002 18c0  ld   $c0,out     501   ld(syncBits,OUT)                # hSync goes up, updating XOUT
                                          502
                                          503   # Setup I/O and RAM expander
              0003 c17c  ctrl $7c         504   ctrl(0b01111100)                # SCLK=0; Disable SPI slaves; Bank=01; Enable RAM
                                          505   #      ^^^^^^^^
                                          506   #      |||||||`-- SCLK
                                          507   #      ||||||`--- Not connected
                                          508   #      |||||`---- /SS0
                                          509   #      ||||`----- /SS1
                                          510   #      |||`------ /SS2
                                          511   #      ||`------- /SS3
                                          512   #      |`-------- B0
                                          513   #      `--------- B1
                                          514   # bit15 --------- MOSI = 0
                                          515
                                          516   # Simple RAM test and size check by writing to [1<<n] and see if [0] changes or not.
              0004 0001  ld   $01         517   ld(1)                           # Quick RAM test and count
                                          518   label('.countMem0')
.countMem0:   0005 d601  st   [$01],y     519   st([memSize],Y)                 # Store in RAM and load AC in Y
              0006 00ff  ld   $ff         520   ld(255)
              0007 6900  xora [y,$00]     521   xora([Y,0])                     # Invert value from memory
              0008 ca00  st   [y,$00]     522   st([Y,0])                       # Test RAM by writing the new value
              0009 c200  st   [$00]       523   st([0])                         # Copy result in [0]
              000a 6900  xora [y,$00]     524   xora([Y,0])                     # Read back and compare if written ok
              000b ec0b  bne  $000b       525   bne(pc())                       # Loop forever on RAM failure here
              000c 00ff  ld   $ff         526   ld(255)
              000d 6900  xora [y,$00]     527   xora([Y,0])                     # Invert memory value again
              000e ca00  st   [y,$00]     528   st([Y,0])                       # To restore original value
              000f 6100  xora [$00]       529   xora([0])                       # Compare with inverted copy
              0010 f014  beq  .countMem1  530   beq('.countMem1')               # If equal, we wrapped around
              0011 0101  ld   [$01]       531   ld([memSize])
              0012 fc05  bra  .countMem0  532   bra('.countMem0')               # Loop to test next address line
              0013 8200  adda ac          533   adda(AC)                        # Executes in the branch delay slot!
                                          534   label('.countMem1')
                                          535
                                          536   # Momentarily wait to allow for debouncing of the reset switch by spinning
                                          537   # roughly 2^15 times at 2 clocks per loop: 6.5ms@10MHz to 10ms@6.3MHz
                                          538   # Real-world switches normally bounce shorter than that.
                                          539   # "[...] 16 switches exhibited an average 1557 usec of bouncing, with,
                                          540   #  as I said, a max of 6200 usec" (From: http://www.ganssle.com/debouncing.htm)
                                          541   # Relevant for the breadboard version, as the kit doesn't have a reset switch.
                                          542
.countMem1:   0014 00ff  ld   $ff         543   ld(255)                         # Debounce reset button
                                          544   label('.debounce')
.debounce:    0015 c200  st   [$00]       545   st([0])
              0016 ec16  bne  $0016       546   bne(pc())
              0017 a001  suba $01         547   suba(1)                         # Branch delay slot
              0018 0100  ld   [$00]       548   ld([0])
              0019 ec15  bne  .debounce   549   bne('.debounce')
              001a a001  suba $01         550   suba(1)                         # Branch delay slot
                                          551
                                          552   # Update LEDs (memory is present and counted, reset is stable)
              001b 0001  ld   $01         553   ld(0b0001)                      # LEDs |*OOO|
              001c 1880  ld   $80,out     554   ld(syncBits^hSync,OUT)
              001d 18c0  ld   $c0,out     555   ld(syncBits,OUT)
                                          556
                                          557   # Scan the entire RAM space to collect entropy for a random number generator.
                                          558   # The 16-bit address space is scanned, even if less RAM was detected.
              001e 0000  ld   $00         559   ld(0)                           # Collect entropy from RAM
              001f d218  st   [$18],x     560   st([vAC+0],X)
              0020 d619  st   [$19],y     561   st([vAC+1],Y)
                                          562   label('.initEnt0')
.initEnt0:    0021 0106  ld   [$06]       563   ld([entropy+0])
              0022 f425  bge  .initEnt1   564   bpl('.initEnt1')
              0023 8d00  adda [y,x]       565   adda([Y,X])
              0024 60bf  xora $bf         566   xora(191)
                                          567   label('.initEnt1')
.initEnt1:    0025 c206  st   [$06]       568   st([entropy+0])
              0026 0107  ld   [$07]       569   ld([entropy+1])
              0027 f42a  bge  .initEnt2   570   bpl('.initEnt2')
              0028 8106  adda [$06]       571   adda([entropy+0])
              0029 60c1  xora $c1         572   xora(193)
                                          573   label('.initEnt2')
.initEnt2:    002a c207  st   [$07]       574   st([entropy+1])
              002b 8108  adda [$08]       575   adda([entropy+2])
              002c c208  st   [$08]       576   st([entropy+2])
              002d 0118  ld   [$18]       577   ld([vAC+0])
              002e 8001  adda $01         578   adda(1)
              002f ec21  bne  .initEnt0   579   bne('.initEnt0')
              0030 d218  st   [$18],x     580   st([vAC+0],X)
              0031 0119  ld   [$19]       581   ld([vAC+1])
              0032 8001  adda $01         582   adda(1)
              0033 ec21  bne  .initEnt0   583   bne('.initEnt0')
              0034 d619  st   [$19],y     584   st([vAC+1],Y)
                                          585
                                          586   # Update LEDs
              0035 0003  ld   $03         587   ld(0b0011)                      # LEDs |**OO|
              0036 1880  ld   $80,out     588   ld(syncBits^hSync,OUT)
              0037 18c0  ld   $c0,out     589   ld(syncBits,OUT)
                                          590
                                          591   # vCPU reset handler
              0038 00ee  ld   $ee         592   ld((vReset&255)-2)              # Setup vCPU reset handler
              0039 c216  st   [$16]       593   st([vPC])
              003a 9002  adda $02,x       594   adda(2, X)
              003b 0001  ld   $01         595   ld(vReset>>8)
              003c d617  st   [$17],y     596   st([vPC+1],Y)
              003d dc59  st   $59,[y,x++] 597   st('LDI',             [Y,Xpp])
              003e dc5e  st   $5e,[y,x++] 598   st('SYS_Reset_88',    [Y,Xpp])
              003f dc2b  st   $2b,[y,x++] 599   st('STW',             [Y,Xpp])
              0040 dc22  st   $22,[y,x++] 600   st(sysFn,             [Y,Xpp])
              0041 dcb4  st   $b4,[y,x++] 601   st('SYS',             [Y,Xpp])  # SYS -> SYS_Reset_88 -> SYS_Exec_88
              0042 dce2  st   $e2,[y,x++] 602   st(256-88//2+maxTicks,[Y,Xpp])
              0043 dc00  st   $00,[y,x++] 603   st(0,                 [Y,Xpp])  # Free XXX reserve for interrupt vector?
              0044 dc00  st   $00,[y,x++] 604   st(0,                 [Y,Xpp])  # Free XXX reserve for interrupt vector?
              0045 dcfc  st   $fc,[y,x++] 605   st(0b11111100,        [Y,Xpp])  # Control register
              0046 dc00  st   $00,[y,x++] 606   st(0,                 [Y,Xpp])  # videoTop
                                          607
              0047 0002  ld   $02         608   ld(hi('ENTER'))                 # Active interpreter (vCPU,v6502) = vCPU
              0048 c205  st   [$05]       609   st([vCPUselect])
                                          610
              0049 00ff  ld   $ff         611   ld(255)                         # Setup serial input
              004a c20e  st   [$0e]       612   st([frameCount])
              004b c20f  st   [$0f]       613   st([serialRaw])
              004c c210  st   [$10]       614   st([serialLast])
              004d c211  st   [$11]       615   st([buttonState])
              004e c212  st   [$12]       616   st([resetTimer])                # resetTimer<0 when entering Main.gcl
                                          617
              004f 0007  ld   $07         618   ld(0b0111)                      # LEDs |***O|
              0050 1880  ld   $80,out     619   ld(syncBits^hSync,OUT)
              0051 18c0  ld   $c0,out     620   ld(syncBits,OUT)
                                          621
              0052 0000  ld   $00         622   ld(0)
              0053 c200  st   [$00]       623   st([0])                         # Carry lookup ([0x80] in 1st line of vBlank)
              0054 c202  st   [$02]       624   st([channel])
              0055 c22c  st   [$2c]       625   st([soundTimer])
                                          626
              0056 000f  ld   $0f         627   ld(0b1111)                      # LEDs |****|
              0057 1880  ld   $80,out     628   ld(syncBits^hSync,OUT)
              0058 18c0  ld   $c0,out     629   ld(syncBits,OUT)
              0059 c213  st   [$13]       630   st([xout])                      # Setup for control by video loop
              005a c214  st   [$14]       631   st([xoutMask])
                                          632
              005b 1401  ld   $01,y       633   ld(hi('startVideo'),Y)          # Enter video loop at vertical blank
              005c e003  jmp  y,$03       634   jmp(Y,'startVideo')
              005d c22e  st   [$2e]       635   st([ledState_v2])               # Setting to 1..126 means "stopped"
                                          636
                                          637   #-----------------------------------------------------------------------
                                          638   # Extension SYS_Reset_88: Soft reset
                                          639   #-----------------------------------------------------------------------
                                          640
                                          641   # SYS_Reset_88 initiates an immediate Gigatron reset from within the vCPU.
                                          642   # The reset sequence itself is mostly implemented in GCL by Reset.gcl,
                                          643   # which must first be loaded into RAM. But as that takes more than 1 scanline,
                                          644   # some vCPU bootstrapping code gets loaded with SYS_Exec_88.
                                          645   # !!! This function was REMOVED from interface.json
                                          646   # !!! Better use vReset as generic entry point for soft reset
                                          647
                                          648   # ROM type (see also Docs/GT1-files.txt)
                                          649   romTypeValue = symbol('romTypeValue_DEVROM')
                                          650
                                          651   label('SYS_Reset_88')
                                          652   assert pc()>>8 == 0
                                          653   assert (romTypeValue & 7) == 0
SYS_Reset_88: 005e 00f8  ld   $f8         654   ld(romTypeValue)                #15 Set ROM type/version and clear channel mask
              005f c221  st   [$21]       655   st([romType])                   #16
              0060 0000  ld   $00         656   ld(0)                           #17
              0061 c21c  st   [$1c]       657   st([vSP])                       #18 vSP
              0062 1401  ld   $01,y       658   ld(hi('videoTop_DEVROM'),Y)     #19
              0063 caf9  st   [y,$f9]     659   st([Y,lo('videoTop_DEVROM')])   #20 Show all 120 pixel lines
              0064 c22c  st   [$2c]       660   st([soundTimer])                #21 soundTimer
                                          661   assert userCode&255 == 0
              0065 c21a  st   [$1a]       662   st([vLR])                       #22 vLR
              0066 0002  ld   $02         663   ld(userCode>>8)                 #23
              0067 c21b  st   [$1b]       664   st([vLR+1])                     #24
              0068 00f6  ld   $f6         665   ld('nopixels')                  #25 Video mode 3 (fast)
              0069 c20a  st   [$0a]       666   st([videoModeB])                #26
              006a c20b  st   [$0b]       667   st([videoModeC])                #27
              006b c20c  st   [$0c]       668   st([videoModeD])                #28
              006c 00ad  ld   $ad         669   ld('SYS_Exec_88')               #29 SYS_Exec_88
              006d c222  st   [$22]       670   st([sysFn])                     #30 High byte (remains) 0
              006e 0058  ld   $58         671   ld('Reset')                     #31 Reset.gt1 from EPROM
              006f c224  st   [$24]       672   st([sysArgs+0])                 #32
              0070 0019  ld   $19         673   ld(hi('Reset'))                 #33
              0071 c225  st   [$25]       674   st([sysArgs+1])                 #34
              0072 0116  ld   [$16]       675   ld([vPC])                       #35 Force second SYS call
              0073 a002  suba $02         676   suba(2)                         #36
              0074 c216  st   [$16]       677   st([vPC])                       #37
              0075 0200  nop              678   nop()                           #38
                                          679   # Return to interpreter
              0076 1403  ld   $03,y       680   ld(hi('REENTER'),Y)             #39
              0077 e0cb  jmp  y,$cb       681   jmp(Y,'REENTER')                #40
              0078 00ea  ld   $ea         682   ld(-44//2)                      #41
                                          683
                                          684   import forth
forth.next3.rom-mode-tail:
              0079 0133  ld   [$33]       685   forth.next3_rom_tail()
              007a 8003  adda $03
              007b c233  st   [$33]
              007c 1413  ld   $13,y       ;REENTER
              007d e005  jmp  y,$05
              007e 00f9  ld   $f9
                                          686
                                          687   #-----------------------------------------------------------------------
                                          688   # Placeholders for future SYS functions. This works as a kind of jump
                                          689   # table. The indirection allows SYS implementations to be moved around
                                          690   # between ROM versions, at the expense of 2 clock cycles (or 1). When
                                          691   # the function is not present it just acts as a NOP. Of course, when a
                                          692   # SYS function must be patched or extended it needs to have budget for
                                          693   # that in its declared maximum cycle count.
                                          694   #
                                          695   # Technically the same goal can be achieved by starting each function
                                          696   # with 2 nop's, or by overdeclaring their duration in the first place
                                          697   # (a bit is still wise to do). But this can result in fragmentation
                                          698   # of future ROM images. The indirection avoids that.
                                          699   #
                                          700   # An added advantage of having these in ROM page 0 is that it saves one
                                          701   # byte when setting sysFn: LDI+STW (4 bytes) instead of LDWI+STW (5 bytes)
                                          702   #-----------------------------------------------------------------------
                                          703
              007f 0200  nop              704   align(0x80, size=0x80)
                                          705
                                          706   assert pc() >> 8 == 0, "forth.next3_rom_return must not push the SYS placeholders off page zero"
                                          707
                                          708
              0080 1403  ld   $03,y       709   ld(hi('REENTER'),Y)             #15 slot 0x80
              0081 e0cb  jmp  y,$cb       710   jmp(Y,'REENTER')                #16
              0082 00f6  ld   $f6         711   ld(-20//2)                      #17
                                          712
              0083 1403  ld   $03,y       713   ld(hi('REENTER'),Y)             #15 slot 0x83
              0084 e0cb  jmp  y,$cb       714   jmp(Y,'REENTER')                #16
              0085 00f6  ld   $f6         715   ld(-20//2)                      #17
                                          716
              0086 1403  ld   $03,y       717   ld(hi('REENTER'),Y)             #15 slot 0x86
              0087 e0cb  jmp  y,$cb       718   jmp(Y,'REENTER')                #16
              0088 00f6  ld   $f6         719   ld(-20//2)                      #17
                                          720
              0089 1403  ld   $03,y       721   ld(hi('REENTER'),Y)             #15 slot 0x89
              008a e0cb  jmp  y,$cb       722   jmp(Y,'REENTER')                #16
              008b 00f6  ld   $f6         723   ld(-20//2)                      #17
                                          724
              008c 1403  ld   $03,y       725   ld(hi('REENTER'),Y)             #15 slot 0x8c
              008d e0cb  jmp  y,$cb       726   jmp(Y,'REENTER')                #16
              008e 00f6  ld   $f6         727   ld(-20//2)                      #17
                                          728
              008f 1403  ld   $03,y       729   ld(hi('REENTER'),Y)             #15 slot 0x8f
              0090 e0cb  jmp  y,$cb       730   jmp(Y,'REENTER')                #16
              0091 00f6  ld   $f6         731   ld(-20//2)                      #17
                                          732
              0092 1403  ld   $03,y       733   ld(hi('REENTER'),Y)             #15 slot 0x92
              0093 e0cb  jmp  y,$cb       734   jmp(Y,'REENTER')                #16
              0094 00f6  ld   $f6         735   ld(-20//2)                      #17
                                          736
              0095 1403  ld   $03,y       737   ld(hi('REENTER'),Y)             #15 slot 0x95
              0096 e0cb  jmp  y,$cb       738   jmp(Y,'REENTER')                #16
              0097 00f6  ld   $f6         739   ld(-20//2)                      #17
                                          740
              0098 1403  ld   $03,y       741   ld(hi('REENTER'),Y)             #15 slot 0x98
              0099 e0cb  jmp  y,$cb       742   jmp(Y,'REENTER')                #16
              009a 00f6  ld   $f6         743   ld(-20//2)                      #17
                                          744
              009b 1403  ld   $03,y       745   ld(hi('REENTER'),Y)             #15 slot 0x9b
              009c e0cb  jmp  y,$cb       746   jmp(Y,'REENTER')                #16
              009d 00f6  ld   $f6         747   ld(-20//2)                      #17
                                          748
              009e 1403  ld   $03,y       749   ld(hi('REENTER'),Y)             #15 slot 0x9e
              009f e0cb  jmp  y,$cb       750   jmp(Y,'REENTER')                #16
              00a0 00f6  ld   $f6         751   ld(-20//2)                      #17
                                          752
              00a1 1403  ld   $03,y       753   ld(hi('REENTER'),Y)             #15 slot 0xa1
              00a2 e0cb  jmp  y,$cb       754   jmp(Y,'REENTER')                #16
              00a3 00f6  ld   $f6         755   ld(-20//2)                      #17
                                          756
              00a4 1403  ld   $03,y       757   ld(hi('REENTER'),Y)             #15 slot 0xa4
              00a5 e0cb  jmp  y,$cb       758   jmp(Y,'REENTER')                #16
              00a6 00f6  ld   $f6         759   ld(-20//2)                      #17
                                          760
              00a7 1403  ld   $03,y       761   ld(hi('REENTER'),Y)             #15 slot 0xa7
              00a8 e0cb  jmp  y,$cb       762   jmp(Y,'REENTER')                #16
              00a9 00f6  ld   $f6         763   ld(-20//2)                      #17
                                          764
              00aa 1403  ld   $03,y       765   ld(hi('REENTER'),Y)             #15 slot 0xaa
              00ab e0cb  jmp  y,$cb       766   jmp(Y,'REENTER')                #16
              00ac 00f6  ld   $f6         767   ld(-20//2)                      #17
                                          768
                                          769   #-----------------------------------------------------------------------
                                          770   # Extension SYS_Exec_88: Load code from ROM into memory and execute it
                                          771   #-----------------------------------------------------------------------
                                          772   #
                                          773   # This loads the vCPU code with consideration of the current vSP
                                          774   # Used during reset, but also for switching between applications or for
                                          775   # loading data from ROM from within an application (overlays).
                                          776   #
                                          777   # ROM stream format is [<addrH> <addrL> <n&255> n*<byte>]* 0
                                          778   # on top of lookup tables.
                                          779   #
                                          780   # Variables:
                                          781   #       sysArgs[0:1]    ROM pointer (input set by caller)
                                          782   #       sysArgs[2:3]    RAM pointer (variable)
                                          783   #       sysArgs[4]      State counter (variable)
                                          784   #       vLR             vCPU continues here (input set by caller)
                                          785
                                          786   label('SYS_Exec_88')
SYS_Exec_88:  00ad 1411  ld   $11,y       787   ld(hi('sys_Exec'),Y)            #15
              00ae e0fc  jmp  y,$fc       788   jmp(Y,'sys_Exec')               #16
              00af 0000  ld   $00         789   ld(0)                           #17 Address of loader on zero page
                                          790
                                          791   #-----------------------------------------------------------------------
                                          792   # More placeholders for future SYS functions
                                          793   #-----------------------------------------------------------------------
                                          794
              00b0 1403  ld   $03,y       795   ld(hi('REENTER'),Y)             #15 slot 0xb0
              00b1 e0cb  jmp  y,$cb       796   jmp(Y,'REENTER')                #16
              00b2 00f6  ld   $f6         797   ld(-20//2)                      #17
                                          798
              00b3 1403  ld   $03,y       799   ld(hi('REENTER'),Y)             #15 slot 0xb3
              00b4 e0cb  jmp  y,$cb       800   jmp(Y,'REENTER')                #16
              00b5 00f6  ld   $f6         801   ld(-20//2)                      #17
                                          802
              00b6 1403  ld   $03,y       803   ld(hi('REENTER'),Y)             #15 slot 0xb6
              00b7 e0cb  jmp  y,$cb       804   jmp(Y,'REENTER')                #16
              00b8 00f6  ld   $f6         805   ld(-20//2)                      #17
                                          806
              00b9 1403  ld   $03,y       807   ld(hi('REENTER'),Y)             #15 slot 0xb9
              00ba e0cb  jmp  y,$cb       808   jmp(Y,'REENTER')                #16
              00bb 00f6  ld   $f6         809   ld(-20//2)                      #17
                                          810
              00bc 1403  ld   $03,y       811   ld(hi('REENTER'),Y)             #15 slot 0xbc
              00bd e0cb  jmp  y,$cb       812   jmp(Y,'REENTER')                #16
              00be 00f6  ld   $f6         813   ld(-20//2)                      #17
                                          814
              00bf 1403  ld   $03,y       815   ld(hi('REENTER'),Y)             #15 slot 0xbf
              00c0 e0cb  jmp  y,$cb       816   jmp(Y,'REENTER')                #16
              00c1 00f6  ld   $f6         817   ld(-20//2)                      #17
                                          818
              00c2 1403  ld   $03,y       819   ld(hi('REENTER'),Y)             #15 slot 0xc2
              00c3 e0cb  jmp  y,$cb       820   jmp(Y,'REENTER')                #16
              00c4 00f6  ld   $f6         821   ld(-20//2)                      #17
                                          822
              00c5 1403  ld   $03,y       823   ld(hi('REENTER'),Y)             #15 slot 0xc5
              00c6 e0cb  jmp  y,$cb       824   jmp(Y,'REENTER')                #16
              00c7 00f6  ld   $f6         825   ld(-20//2)                      #17
                                          826
              00c8 1403  ld   $03,y       827   ld(hi('REENTER'),Y)             #15 slot 0xc8
              00c9 e0cb  jmp  y,$cb       828   jmp(Y,'REENTER')                #16
              00ca 00f6  ld   $f6         829   ld(-20//2)                      #17
                                          830
              00cb 1403  ld   $03,y       831   ld(hi('REENTER'),Y)             #15 slot 0xcb
              00cc e0cb  jmp  y,$cb       832   jmp(Y,'REENTER')                #16
              00cd 00f6  ld   $f6         833   ld(-20//2)                      #17
                                          834
              00ce 1403  ld   $03,y       835   ld(hi('REENTER'),Y)             #15 slot 0xce
              00cf e0cb  jmp  y,$cb       836   jmp(Y,'REENTER')                #16
              00d0 00f6  ld   $f6         837   ld(-20//2)                      #17
                                          838
              00d1 1403  ld   $03,y       839   ld(hi('REENTER'),Y)             #15 slot 0xd1
              00d2 e0cb  jmp  y,$cb       840   jmp(Y,'REENTER')                #16
              00d3 00f6  ld   $f6         841   ld(-20//2)                      #17
                                          842
              00d4 1403  ld   $03,y       843   ld(hi('REENTER'),Y)             #15 slot 0xd4
              00d5 e0cb  jmp  y,$cb       844   jmp(Y,'REENTER')                #16
              00d6 00f6  ld   $f6         845   ld(-20//2)                      #17
                                          846
              00d7 1403  ld   $03,y       847   ld(hi('REENTER'),Y)             #15 slot 0xd7
              00d8 e0cb  jmp  y,$cb       848   jmp(Y,'REENTER')                #16
              00d9 00f6  ld   $f6         849   ld(-20//2)                      #17
                                          850
              00da 1403  ld   $03,y       851   ld(hi('REENTER'),Y)             #15 slot 0xda
              00db e0cb  jmp  y,$cb       852   jmp(Y,'REENTER')                #16
              00dc 00f6  ld   $f6         853   ld(-20//2)                      #17
                                          854
              00dd 1403  ld   $03,y       855   ld(hi('REENTER'),Y)             #15 slot 0xdd
              00de e0cb  jmp  y,$cb       856   jmp(Y,'REENTER')                #16
              00df 00f6  ld   $f6         857   ld(-20//2)                      #17
                                          858
              00e0 1403  ld   $03,y       859   ld(hi('REENTER'),Y)             #15 slot 0xe0
              00e1 e0cb  jmp  y,$cb       860   jmp(Y,'REENTER')                #16
              00e2 00f6  ld   $f6         861   ld(-20//2)                      #17
                                          862
              00e3 1403  ld   $03,y       863   ld(hi('REENTER'),Y)             #15 slot 0xe3
              00e4 e0cb  jmp  y,$cb       864   jmp(Y,'REENTER')                #16
              00e5 00f6  ld   $f6         865   ld(-20//2)                      #17
                                          866
              00e6 1403  ld   $03,y       867   ld(hi('REENTER'),Y)             #15 slot 0xe6
              00e7 e0cb  jmp  y,$cb       868   jmp(Y,'REENTER')                #16
              00e8 00f6  ld   $f6         869   ld(-20//2)                      #17
                                          870
              00e9 1403  ld   $03,y       871   ld(hi('REENTER'),Y)             #15 slot 0xe9
              00ea e0cb  jmp  y,$cb       872   jmp(Y,'REENTER')                #16
              00eb 00f6  ld   $f6         873   ld(-20//2)                      #17
                                          874
              00ec 1403  ld   $03,y       875   ld(hi('REENTER'),Y)             #15 slot 0xec
              00ed e0cb  jmp  y,$cb       876   jmp(Y,'REENTER')                #16
              00ee 00f6  ld   $f6         877   ld(-20//2)                      #17
                                          878
              00ef 1403  ld   $03,y       879   ld(hi('REENTER'),Y)             #15 slot 0xef
              00f0 e0cb  jmp  y,$cb       880   jmp(Y,'REENTER')                #16
              00f1 00f6  ld   $f6         881   ld(-20//2)                      #17
                                          882
              00f2 0200  nop              883   fillers(until=symbol('SYS_Out_22') & 255)
              00f3 0200  nop
                                          884
                                          885   #-----------------------------------------------------------------------
                                          886   # Extension SYS_Out_22
                                          887   #-----------------------------------------------------------------------
                                          888
                                          889   # Send byte to output port
                                          890   #
                                          891   # Variables:
                                          892   #       vAC
                                          893
                                          894   label('SYS_Out_22')
SYS_Out_22:   00f4 1924  ld   [$24],out   895   ld([sysArgs+0],OUT)             #15
              00f5 0200  nop              896   nop()                           #16
              00f6 1403  ld   $03,y       897   ld(hi('REENTER'),Y)             #17
              00f7 e0cb  jmp  y,$cb       898   jmp(Y,'REENTER')                #18
              00f8 00f5  ld   $f5         899   ld(-22//2)                      #19
                                          900
                                          901   #-----------------------------------------------------------------------
                                          902   # Extension SYS_In_24
                                          903   #-----------------------------------------------------------------------
                                          904
                                          905   # Read a byte from the input port
                                          906   #
                                          907   # Variables:
                                          908   #       vAC
                                          909
                                          910   label('SYS_In_24')
SYS_In_24:    00f9 c318  st   in,[$18]    911   st(IN, [vAC])                   #15
              00fa 0000  ld   $00         912   ld(0)                           #16
              00fb c219  st   [$19]       913   st([vAC+1])                     #17
              00fc 0200  nop              914   nop()                           #18
              00fd 1403  ld   $03,y       915   ld(hi('REENTER'),Y)             #19
              00fe e0cb  jmp  y,$cb       916   jmp(Y,'REENTER')                #20
              00ff 00f4  ld   $f4         917   ld(-24//2)                      #21
                                          918
                                          919   assert pc()&255 == 0
                                          920
                                          921   #-----------------------------------------------------------------------
                                          922   #
                                          923   #  $0100 ROM page 1: Video loop vertical blank
                                          924   #
                                          925   #-----------------------------------------------------------------------
                                          926   align(0x100, size=0x100)
                                          927
                                          928   # Video off mode (also no sound, serial, timer, blinkenlights, ...).
                                          929   # For benchmarking purposes. This still has the overhead for the vTicks
                                          930   # administration, time slice granularity etc.
                                          931   label('videoZ')
                                          932   videoZ = pc()
videoZ:       0100 1505  ld   [$05],y     933   runVcpu(None, '---- novideo', returnTo=videoZ)
              0101 e0ff  jmp  y,$ff
              0102 007f  ld   $7f
                                          934
                                          935   label('startVideo')             # (Re)start of video signal from idle state
startVideo:   0103 00c0  ld   $c0         936   ld(syncBits)
                                          937
                                          938   # Start of vertical blank interval
                                          939   label('vBlankStart')
vBlankStart:  0104 c21f  st   [$1f]       940   st([videoSync0])                #32 Start of vertical blank interval
              0105 0080  ld   $80         941   ld(syncBits^hSync)              #33
              0106 c220  st   [$20]       942   st([videoSync1])                #34
                                          943
                                          944   # Reset line counter before vCPU can see it
              0107 00b3  ld   $b3         945   ld(videoYline0)                 #35
              0108 c209  st   [$09]       946   st([videoY])                    #36
                                          947
                                          948   # Update frame count and [0x80] (4 cycles)
              0109 0001  ld   $01         949   ld(1)                           #37 Reinitialize carry lookup, for robustness
              010a c280  st   [$80]       950   st([0x80])                      #38
              010b 810e  adda [$0e]       951   adda([frameCount])              #39 Frame counter
              010c c20e  st   [$0e]       952   st([frameCount])                #40
                                          953
                                          954   # Mix entropy (11 cycles)
              010d 6107  xora [$07]       955   xora([entropy+1])               #41 Mix entropy
              010e 610f  xora [$0f]       956   xora([serialRaw])               #42 Mix in serial input
              010f 8106  adda [$06]       957   adda([entropy+0])               #43
              0110 c206  st   [$06]       958   st([entropy+0])                 #44
              0111 8108  adda [$08]       959   adda([entropy+2])               #45 Some hidden state
              0112 c208  st   [$08]       960   st([entropy+2])                 #46
              0113 e816  blt  $0116       961   bmi(pc()+3)                     #47
              0114 fc17  bra  $0117       962   bra(pc()+3)                     #48
              0115 6053  xora $53         963   xora(64+16+2+1)                 #49
              0116 606c  xora $6c         964   xora(64+32+8+4)                 #49(!)
              0117 8107  adda [$07]       965   adda([entropy+1])               #50
              0118 c207  st   [$07]       966   st([entropy+1])                 #51
                                          967
                                          968   # LED sequencer (18 cycles)
              0119 012d  ld   [$2d]       969   ld([ledTimer])                  #52 Blinkenlight sequencer
              011a f01d  beq  $011d       970   beq(pc()+3)                     #53
              011b fc1e  bra  $011e       971   bra(pc()+3)                     #54
              011c a001  suba $01         972   suba(1)                         #55
              011d 012f  ld   [$2f]       973   ld([ledTempo])                  #55(!)
              011e c22d  st   [$2d]       974   st([ledTimer])                  #56
              011f f022  beq  $0122       975   beq(pc()+3)                     #57
              0120 fc23  bra  $0123       976   bra(pc()+3)                     #58
              0121 0000  ld   $00         977   ld(0)                           #59 Don't advance state
              0122 0001  ld   $01         978   ld(1)                           #59(!) Advance state when timer passes through 0
              0123 812e  adda [$2e]       979   adda([ledState_v2])             #60
              0124 ec27  bne  $0127       980   bne(pc()+3)                     #61
              0125 fc28  bra  $0128       981   bra(pc()+3)                     #62
              0126 00e8  ld   $e8         982   ld(-24)                         #63 State 0 becomes -24, start of sequence
              0127 e42c  bgt  .leds#65    983   bgt('.leds#65')                 #63(!) Catch the stopped state (>0)
              0128 c22e  st   [$2e]       984   st([ledState_v2])               #64
              0129 8048  adda $48         985   adda('.leds#69')                #65
              012a fe00  bra  ac          986   bra(AC)                         #66 Jump to lookup table
              012b fc48  bra  .leds#69    987   bra('.leds#69')                 #67 Single-instruction subroutine
                                          988
                                          989   label('.leds#65')
.leds#65:     012c 000f  ld   $0f         990   ld(0x0f)                        #65 Maintain stopped state
              012d c22e  st   [$2e]       991   st([ledState_v2])               #66
              012e fc48  bra  .leds#69    992   bra('.leds#69')                 #67
              012f 2114  anda [$14]       993   anda([xoutMask])                #68 Always clear sound bits (this is why AC=0x0f)
                                          994
              0130 000f  ld   $0f         995   ld(0b1111)                      #68 LEDs |****| offset -24 Low 4 bits are the LED output
              0131 0007  ld   $07         996   ld(0b0111)                      #68 LEDs |***O|
              0132 0003  ld   $03         997   ld(0b0011)                      #68 LEDs |**OO|
              0133 0001  ld   $01         998   ld(0b0001)                      #68 LEDs |*OOO|
              0134 0002  ld   $02         999   ld(0b0010)                      #68 LEDs |O*OO|
              0135 0004  ld   $04         1000  ld(0b0100)                      #68 LEDs |OO*O|
              0136 0008  ld   $08         1001  ld(0b1000)                      #68 LEDs |OOO*|
              0137 0004  ld   $04         1002  ld(0b0100)                      #68 LEDs |OO*O|
              0138 0002  ld   $02         1003  ld(0b0010)                      #68 LEDs |O*OO|
              0139 0001  ld   $01         1004  ld(0b0001)                      #68 LEDs |*OOO|
              013a 0003  ld   $03         1005  ld(0b0011)                      #68 LEDs |**OO|
              013b 0007  ld   $07         1006  ld(0b0111)                      #68 LEDs |***O|
              013c 000f  ld   $0f         1007  ld(0b1111)                      #68 LEDs |****|
              013d 000e  ld   $0e         1008  ld(0b1110)                      #68 LEDs |O***|
              013e 000c  ld   $0c         1009  ld(0b1100)                      #68 LEDs |OO**|
              013f 0008  ld   $08         1010  ld(0b1000)                      #68 LEDs |OOO*|
              0140 0004  ld   $04         1011  ld(0b0100)                      #68 LEDs |OO*O|
              0141 0002  ld   $02         1012  ld(0b0010)                      #68 LEDs |O*OO|
              0142 0001  ld   $01         1013  ld(0b0001)                      #68 LEDs |*OOO|
              0143 0002  ld   $02         1014  ld(0b0010)                      #68 LEDs |O*OO|
              0144 0004  ld   $04         1015  ld(0b0100)                      #68 LEDs |OO*O|
              0145 0008  ld   $08         1016  ld(0b1000)                      #68 LEDs |OOO*|
              0146 000c  ld   $0c         1017  ld(0b1100)                      #68 LEDs |OO**|
              0147 000e  ld   $0e         1018  ld(0b1110)                      #68 LEDs |O***| offset -1
                                          1019  label('.leds#69')
.leds#69:     0148 c214  st   [$14]       1020  st([xoutMask])                  #69 Sound bits will be re-enabled below
              0149 0010  ld   $10         1021  ld(vPulse*2)                    #70 vPulse default length when not modulated
              014a c20d  st   [$0d]       1022  st([videoPulse])                #71
                                          1023
                                          1024  # When the total number of scan lines per frame is not an exact multiple of the
                                          1025  # (4) channels, there will be an audible discontinuity if no measure is taken.
                                          1026  # This static noise can be suppressed by swallowing the first `lines mod 4'
                                          1027  # partial samples after transitioning into vertical blank. This is easiest if
                                          1028  # the modulo is 0 (do nothing), 1 (reset sample when entering the last visible
                                          1029  # scan line), or 2 (reset sample while in the first blank scan line). For the
                                          1030  # last case there is no solution yet: give a warning.
                                          1031  extra = 0
                                          1032  if soundDiscontinuity == 2:
                                          1033    st(sample, [sample])          # Sound continuity
                                          1034    extra += 1
                                          1035  if soundDiscontinuity > 2:
                                          1036    print('Warning: sound discontinuity not suppressed')
                                          1037
              014b 0050  ld   $50         1038  runVcpu(186-72-extra, '---D line 0')#72 Application cycles (scan line 0)
              014c c21e  st   [$1e]
              014d 1505  ld   [$05],y
              014e e0ff  jmp  y,$ff
              014f 0024  ld   $24
                                          1039
                                          1040  # Mitigation for rogue channelMask (3 cycles)
              0150 0121  ld   [$21]       1041  ld([channelMask])               #186 Normalize channelMask, for robustness
              0151 20fb  anda $fb         1042  anda(0b11111011)                #187
              0152 c221  st   [$21]       1043  st([channelMask])               #188
                                          1044
                                          1045  # Sound on/off (6 cycles)
              0153 012c  ld   [$2c]       1046  ld([soundTimer])                #189 Sound on/off
              0154 ec57  bne  $0157       1047  bne(pc()+3)                     #190
              0155 fc58  bra  $0158       1048  bra(pc()+3)                     #191
              0156 0000  ld   $00         1049  ld(0)                           #192 Keeps sound unchanged (should be off here)
              0157 00f0  ld   $f0         1050  ld(0xf0)                        #192(!) Turns sound back on
              0158 4114  ora  [$14]       1051  ora([xoutMask])                 #193
              0159 c214  st   [$14]       1052  st([xoutMask])                  #194
                                          1053
                                          1054  # Sound timer count down (5 cycles)
              015a 012c  ld   [$2c]       1055  ld([soundTimer])                #195 Sound timer
              015b f05e  beq  $015e       1056  beq(pc()+3)                     #196
              015c fc5f  bra  $015f       1057  bra(pc()+3)                     #197
              015d a001  suba $01         1058  suba(1)                         #198
              015e 0000  ld   $00         1059  ld(0)                           #198
              015f c22c  st   [$2c]       1060  st([soundTimer])                #199
                                          1061
              0160 191f  ld   [$1f],out   1062  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1063
                                          1064  label('sound1')
sound1:       0161 0102  ld   [$02]       1065  ld([channel])                   #1 Advance to next sound channel
              0162 2121  anda [$21]       1066  anda([channelMask])             #2
              0163 8001  adda $01         1067  adda(1)                         #3
              0164 1920  ld   [$20],out   1068  ld([videoSync1],OUT)            #4 Start horizontal pulse
              0165 d602  st   [$02],y     1069  st([channel],Y)                 #5
              0166 007f  ld   $7f         1070  ld(0x7f)                        #6 Update sound channel
              0167 29fe  anda [y,$fe]     1071  anda([Y,oscL])                  #7
              0168 89fc  adda [y,$fc]     1072  adda([Y,keyL])                  #8
              0169 cafe  st   [y,$fe]     1073  st([Y,oscL])                    #9
              016a 3080  anda $80,x       1074  anda(0x80,X)                    #10
              016b 0500  ld   [x]         1075  ld([X])                         #11
              016c 89ff  adda [y,$ff]     1076  adda([Y,oscH])                  #12
              016d 89fd  adda [y,$fd]     1077  adda([Y,keyH])                  #13
              016e caff  st   [y,$ff]     1078  st([Y,oscH])                    #14
              016f 20fc  anda $fc         1079  anda(0xfc)                      #15
              0170 69fb  xora [y,$fb]     1080  xora([Y,wavX])                  #16
              0171 1200  ld   ac,x        1081  ld(AC,X)                        #17
              0172 09fa  ld   [y,$fa]     1082  ld([Y,wavA])                    #18
              0173 1407  ld   $07,y       1083  ld(soundTable>>8,Y)             #19
              0174 8d00  adda [y,x]       1084  adda([Y,X])                     #20
              0175 e878  blt  $0178       1085  bmi(pc()+3)                     #21
              0176 fc79  bra  $0179       1086  bra(pc()+3)                     #22
              0177 203f  anda $3f         1087  anda(63)                        #23
              0178 003f  ld   $3f         1088  ld(63)                          #23(!)
              0179 8103  adda [$03]       1089  adda([sample])                  #24
              017a c203  st   [$03]       1090  st([sample])                    #25
                                          1091
              017b 0113  ld   [$13]       1092  ld([xout])                      #26 Gets copied to XOUT
              017c 1409  ld   $09,y       1093  ld(hi('vBlankLast#34'),Y)       #27 Prepare jumping out of page in last line
              017d 191f  ld   [$1f],out   1094  ld([videoSync0],OUT)            #28 End horizontal pulse
                                          1095
                                          1096  # Count through the vertical blank interval until its last scan line
              017e 0109  ld   [$09]       1097  ld([videoY])                    #29
                                          1098  bpl('.vBlankLast#32')           #30
              017f f4ac  bge  .vBlankLast#32
              0180 8002  adda $02         1099  adda(2)                         #31
              0181 c209  st   [$09]       1100  st([videoY])                    #32
                                          1101
                                          1102  # Determine if we're in the vertical sync pulse
              0182 a0bd  suba $bd         1103  suba(1-2*(vBack+vPulse-1))      #33 Prepare sync values
              0183 ec88  bne  .prepSync36 1104  bne('.prepSync36')              #34 Tests for start of vPulse
              0184 a10d  suba [$0d]       1105  suba([videoPulse])              #35
              0185 0040  ld   $40         1106  ld(syncBits^vSync)              #36 Entering vertical sync pulse
              0186 fc8d  bra  .prepSync39 1107  bra('.prepSync39')              #37
              0187 c21f  st   [$1f]       1108  st([videoSync0])                #38
                                          1109  label('.prepSync36')
.prepSync36:  0188 ec8c  bne  .prepSync38 1110  bne('.prepSync38')              #36 Tests for end of vPulse
              0189 00c0  ld   $c0         1111  ld(syncBits)                    #37
              018a fc8e  bra  .prepSync40 1112  bra('.prepSync40')              #38 Entering vertical back porch
              018b c21f  st   [$1f]       1113  st([videoSync0])                #39
                                          1114  label('.prepSync38')
.prepSync38:  018c 011f  ld   [$1f]       1115  ld([videoSync0])                #38 Load current value
                                          1116  label('.prepSync39')
.prepSync39:  018d 0200  nop              1117  nop()                           #39
                                          1118  label('.prepSync40')
.prepSync40:  018e 6040  xora $40         1119  xora(hSync)                     #40 Precompute, as during the pulse there is no time
              018f c220  st   [$20]       1120  st([videoSync1])                #41
                                          1121
                                          1122  # Capture the serial input before the '595 shifts it out
              0190 0109  ld   [$09]       1123  ld([videoY])                    #42 Capture serial input
              0191 60cf  xora $cf         1124  xora(1-2*(vBack-1-1))           #43 Exactly when the 74HC595 has captured all 8 controller bits
              0192 ec95  bne  $0195       1125  bne(pc()+3)                     #44
              0193 fc96  bra  $0196       1126  bra(pc()+3)                     #45
              0194 c30f  st   in,[$0f]    1127  st(IN, [serialRaw])             #46
              0195 c000  st   $00,[$00]   1128  st(0,[0])                       #46(!) Reinitialize carry lookup, for robustness
                                          1129
                                          1130  # Update [xout] with the next sound sample every 4 scan lines.
                                          1131  # Keep doing this on 'videoC equivalent' scan lines in vertical blank.
              0196 0109  ld   [$09]       1132  ld([videoY])                    #47
              0197 2006  anda $06         1133  anda(6)                         #48
                                          1134  beq('vBlankSample')             #49
              0198 f0a1  beq  vBlankSample
              0199 0103  ld   [$03]       1135  ld([sample])                    #50
                                          1136
                                          1137  label('vBlankNormal')
vBlankNormal: 019a 009f  ld   $9f         1138  runVcpu(199-51, 'AB-D line 1-36')#51 Application cycles (vBlank scan lines without sound sample update)
              019b c21e  st   [$1e]
              019c 1505  ld   [$05],y
              019d e0ff  jmp  y,$ff
              019e 0035  ld   $35
              019f fc61  bra  sound1      1139  bra('sound1')                   #199
              01a0 191f  ld   [$1f],out   1140  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1141
                                          1142  label('vBlankSample')
vBlankSample: 01a1 400f  ora  $0f         1143  ora(0x0f)                       #51 New sound sample is ready
              01a2 2114  anda [$14]       1144  anda([xoutMask])                #52
              01a3 c213  st   [$13]       1145  st([xout])                      #53
              01a4 c003  st   $03,[$03]   1146  st(sample, [sample])            #54 Reset for next sample
                                          1147
              01a5 00aa  ld   $aa         1148  runVcpu(199-55, '--C- line 3-39')#55 Application cycles (vBlank scan lines with sound sample update)
              01a6 c21e  st   [$1e]
              01a7 1505  ld   [$05],y
              01a8 e0ff  jmp  y,$ff
              01a9 0033  ld   $33
              01aa fc61  bra  sound1      1149  bra('sound1')                   #199
              01ab 191f  ld   [$1f],out   1150  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1151
                                          1152  #-----------------------------------------------------------------------
                                          1153
                                          1154  label('.vBlankLast#32')
.vBlankLast#32:
              01ac e0de  jmp  y,$de       1155  jmp(Y,'vBlankLast#34')          #32 Jump out of page for space reasons
                                          1156  #assert hi(controllerType) == hi(pc()) # Assume these share the high address
              01ad 1401  ld   $01,y       1157  ld(hi(pc()),Y)                  #33
                                          1158
                                          1159  label('vBlankLast#52')
                                          1160
                                          1161  # Respond to reset button (14 cycles)
                                          1162  # - ResetTimer decrements as long as just [Start] is pressed down
                                          1163  # - Reaching 0 (normal) or 128 (extended) triggers the soft reset sequence
                                          1164  # - Initial value is 128 (or 255 at boot), first decrement, then check
                                          1165  # - This starts vReset -> SYS_Reset_88 -> SYS_Exec_88 -> Reset.gcl -> Main.gcl
                                          1166  # - Main.gcl then recognizes extended presses if resetTimer is 0..127 ("paasei")
                                          1167  # - This requires a full cycle (4s) in the warm boot scenario
                                          1168  # - Or a half cycle (2s) when pressing [Select] down during hard reset
                                          1169  # - This furthermore requires >=1 frame (and <=128) to have passed between
                                          1170  #   reaching 128 and getting through Reset and the start of Main, while [Start]
                                          1171  #   was still pressed so the count reaches <128. Two reasonable expectations.
                                          1172  # - The unintended power-up scenarios of ROMv1 (pulling SER_DATA low, or
                                          1173  #   pressing [Select] together with another button) now don't trigger anymore.
                                          1174
vBlankLast#52:
              01ae 0111  ld   [$11]       1175  ld([buttonState])               #52 Check [Start] for soft reset
              01af 60ef  xora $ef         1176  xora(~buttonStart)              #53
              01b0 ecb9  bne  .restart#56 1177  bne('.restart#56')              #54
              01b1 0112  ld   [$12]       1178  ld([resetTimer])                #55 As long as button pressed
              01b2 a001  suba $01         1179  suba(1)                         #56 ... count down the timer
              01b3 c212  st   [$12]       1180  st([resetTimer])                #57
              01b4 207f  anda $7f         1181  anda(127)                       #58
              01b5 f0c1  beq  .restart#61 1182  beq('.restart#61')              #59 Reset at 0 (normal 2s) or 128 (extended 4s)
              01b6 00ee  ld   $ee         1183  ld((vReset&255)-2)              #60 Start force reset when hitting 0
              01b7 fcc0  bra  .restart#63 1184  bra('.restart#63')              #61 ... otherwise do nothing yet
              01b8 fcbf  bra  .restart#64 1185  bra('.restart#64')              #62
                                          1186  label('.restart#56')
.restart#56:  01b9 0001  ld   $01         1187  wait(62-56)                     #56
              01ba ecba  bne  $01ba
              01bb a001  suba $01
              01bc 0200  nop
              01bd 0080  ld   $80         1188  ld(128)                         #62 Not pressed, reset the timer
              01be c212  st   [$12]       1189  st([resetTimer])                #63
                                          1190  label('.restart#64')
.restart#64:  01bf fcc6  bra  .restart#66 1191  bra('.restart#66')              #64
                                          1192  label('.restart#63')
.restart#63:  01c0 0200  nop              1193  nop()                           #63,65
                                          1194  label('.restart#61')
.restart#61:  01c1 c216  st   [$16]       1195  st([vPC])                       #61 Point vPC at vReset
              01c2 0001  ld   $01         1196  ld(vReset>>8)                   #62
              01c3 c217  st   [$17]       1197  st([vPC+1])                     #63
              01c4 0002  ld   $02         1198  ld(hi('ENTER'))                 #64 Set active interpreter to vCPU
              01c5 c205  st   [$05]       1199  st([vCPUselect])                #65
                                          1200  label('.restart#66')
                                          1201
                                          1202  # Switch video mode when (only) select is pressed (16 cycles)
                                          1203  # XXX We could make this a vCPU interrupt
.restart#66:  01c6 0111  ld   [$11]       1204  ld([buttonState])               #66 Check [Select] to switch modes
              01c7 60df  xora $df         1205  xora(~buttonSelect)             #67 Only trigger when just [Select] is pressed
              01c8 ecdd  bne  .select#70  1206  bne('.select#70')               #68
              01c9 010b  ld   [$0b]       1207  ld([videoModeC])                #69
              01ca e8d0  blt  .select#72  1208  bmi('.select#72')               #70 Branch when line C is off
              01cb 010a  ld   [$0a]       1209  ld([videoModeB])                #71 Rotate: Off->D->B->C
              01cc c20b  st   [$0b]       1210  st([videoModeC])                #72
              01cd 010c  ld   [$0c]       1211  ld([videoModeD])                #73
              01ce c20a  st   [$0a]       1212  st([videoModeB])                #74
              01cf fcd5  bra  .select#77  1213  bra('.select#77')               #75
                                          1214  label('.select#72')
.select#72:   01d0 00f6  ld   $f6         1215  ld('nopixels')                  #72,76
              01d1 000a  ld   $0a         1216  ld('pixels')                    #73 Reset: On->D->B->C
              01d2 c20b  st   [$0b]       1217  st([videoModeC])                #74
              01d3 c20a  st   [$0a]       1218  st([videoModeB])                #75
              01d4 0200  nop              1219  nop()                           #76
                                          1220  label('.select#77')
.select#77:   01d5 c20c  st   [$0c]       1221  st([videoModeD])                #77
              01d6 0035  ld   $35         1222  wait(188-78)                    #78 Don't waste code space expanding runVcpu here
              01d7 ecd7  bne  $01d7
              01d8 a001  suba $01
              01d9 0200  nop
                                          1223  # AC==255 now
              01da c211  st   [$11]       1224  st([buttonState])               #188
                                          1225  bra('vBlankEnd#191')            #189
              01db fce5  bra  vBlankEnd#191
              01dc 0000  ld   $00         1226  ld(0)                           #190
                                          1227  label('.select#70')
                                          1228
                                          1229  # Mitigation of runaway channel variable
.select#70:   01dd 0102  ld   [$02]       1230  ld([channel])                   #70 Normalize channel, for robustness
              01de 2003  anda $03         1231  anda(0b00000011)                #71
              01df c202  st   [$02]       1232  st([channel])                   #72 Stop wild channel updates
                                          1233
              01e0 00e5  ld   $e5         1234  runVcpu(191-73, '---D line 40') #73 Application cycles (scan line 40)
              01e1 c21e  st   [$1e]
              01e2 1505  ld   [$05],y
              01e3 e0ff  jmp  y,$ff
              01e4 0026  ld   $26
                                          1235
                                          1236  # AC==0 now
                                          1237  label('vBlankEnd#191')
vBlankEnd#191:
              01e5 1401  ld   $01,y       1238  ld(videoTop_DEVROM>>8,Y)        #191
              01e6 09f9  ld   [y,$f9]     1239  ld([Y,videoTop_DEVROM])         #192
              01e7 c209  st   [$09]       1240  st([videoY])                    #193
              01e8 c21f  st   [$1f]       1241  st([frameX])                    #194
              01e9 ecec  bne  $01ec       1242  bne(pc()+3)                     #195
              01ea fced  bra  $01ed       1243  bra(pc()+3)                     #196
              01eb 0001  ld   $01         1244  ld('videoA')                    #197
              01ec 00ec  ld   $ec         1245  ld('videoF')                    #197(!)
              01ed c20d  st   [$0d]       1246  st([nextVideo])                 #198
              01ee 0102  ld   [$02]       1247  ld([channel])                   #199 Advance to next sound channel
              01ef 2121  anda [$21]       1248  anda([channelMask])             #0 <New scan line start>
              01f0 8001  adda $01         1249  adda(1)                         #1
              01f1 1402  ld   $02,y       1250  ld(hi('sound2'),Y)              #2
              01f2 e0b1  jmp  y,$b1       1251  jmp(Y,'sound2')                 #3
              01f3 1880  ld   $80,out     1252  ld(syncBits^hSync,OUT)          #4 Start horizontal pulse
                                          1253
              01f4 0200  nop              1254  fillers(until=0xff)
              01f5 0200  nop
              01f6 0200  nop
              * 11 times
                                          1255
                                          1256  #-----------------------------------------------------------------------
                                          1257  # Return point for vCPU slices during visible screen area
                                          1258  #-----------------------------------------------------------------------
                                          1259
                                          1260  assert pc() == 0x1ff            # Enables runVcpu() to re-enter into the next page
              01ff fcae  bra  sound3      1261  bra('sound3')                   #200,0 <New scan line start>
                                          1262
                                          1263  #-----------------------------------------------------------------------
                                          1264  #
                                          1265  #  $0200 ROM page 2: Video loop visible scanlines
                                          1266  #
                                          1267  #-----------------------------------------------------------------------
                                          1268  align(0x100, size=0x100)
              0200 0102  ld   [$02]       1269  ld([channel])                   #1 Advance to next sound channel
                                          1270
                                          1271  # Back porch A: first of 4 repeated scan lines
                                          1272  # - Fetch next Yi and store it for retrieval in the next scan lines
                                          1273  # - Calculate Xi from dXi, but there is no cycle time left to store it as well
                                          1274  label('videoA')
videoA:       0201 00ca  ld   $ca         1275  ld('videoB')                    #29 1st scanline of 4 (always visible)
              0202 c20d  st   [$0d]       1276  st([nextVideo])                 #30
              0203 1401  ld   $01,y       1277  ld(videoTable>>8,Y)             #31
              0204 1109  ld   [$09],x     1278  ld([videoY],X)                  #32
              0205 0d00  ld   [y,x]       1279  ld([Y,X])                       #33
              0206 de00  st   [y,x++]     1280  st([Y,Xpp])                     #34 Just X++
              0207 c220  st   [$20]       1281  st([frameY])                    #35
              0208 0d00  ld   [y,x]       1282  ld([Y,X])                       #36
              0209 911f  adda [$1f],x     1283  adda([frameX],X)                #37
                                          1284  label('pixels')
pixels:       020a 1520  ld   [$20],y     1285  ld([frameY],Y)                  #38
              020b 00c0  ld   $c0         1286  ld(syncBits)                    #39
                                          1287
                                          1288  # Stream 160 pixels from memory location <Yi,Xi> onwards
                                          1289  # Superimpose the sync signal bits to be robust against misprogramming
                                          1290  for i in range(160):
              020c 5d00  ora  [y,x++],out 1291    ora([Y,Xpp],OUT)              #40-199 Pixel burst
              020d 5d00  ora  [y,x++],out
              020e 5d00  ora  [y,x++],out
              * 160 times
              02ac 18c0  ld   $c0,out     1292  ld(syncBits,OUT)                #0 <New scan line start> Back to black
                                          1293
                                          1294  # Front porch
              02ad 0102  ld   [$02]       1295  ld([channel])                   #1 Advance to next sound channel
                                          1296  label('sound3')                 # Return from vCPU interpreter
sound3:       02ae 2121  anda [$21]       1297  anda([channelMask])             #2
              02af 8001  adda $01         1298  adda(1)                         #3
              02b0 1880  ld   $80,out     1299  ld(syncBits^hSync,OUT)          #4 Start horizontal pulse
                                          1300
                                          1301  # Horizontal sync and sound channel update for scanlines outside vBlank
                                          1302  label('sound2')
sound2:       02b1 d602  st   [$02],y     1303  st([channel],Y)                 #5
              02b2 007f  ld   $7f         1304  ld(0x7f)                        #6
              02b3 29fe  anda [y,$fe]     1305  anda([Y,oscL])                  #7
              02b4 89fc  adda [y,$fc]     1306  adda([Y,keyL])                  #8
              02b5 cafe  st   [y,$fe]     1307  st([Y,oscL])                    #9
              02b6 3080  anda $80,x       1308  anda(0x80,X)                    #10
              02b7 0500  ld   [x]         1309  ld([X])                         #11
              02b8 89ff  adda [y,$ff]     1310  adda([Y,oscH])                  #12
              02b9 89fd  adda [y,$fd]     1311  adda([Y,keyH])                  #13
              02ba caff  st   [y,$ff]     1312  st([Y,oscH] )                   #14
              02bb 20fc  anda $fc         1313  anda(0xfc)                      #15
              02bc 69fb  xora [y,$fb]     1314  xora([Y,wavX])                  #16
              02bd 1200  ld   ac,x        1315  ld(AC,X)                        #17
              02be 09fa  ld   [y,$fa]     1316  ld([Y,wavA])                    #18
              02bf 1407  ld   $07,y       1317  ld(soundTable>>8,Y)             #19
              02c0 8d00  adda [y,x]       1318  adda([Y,X])                     #20
              02c1 e8c4  blt  $02c4       1319  bmi(pc()+3)                     #21
              02c2 fcc5  bra  $02c5       1320  bra(pc()+3)                     #22
              02c3 203f  anda $3f         1321  anda(63)                        #23
              02c4 003f  ld   $3f         1322  ld(63)                          #23(!)
              02c5 8103  adda [$03]       1323  adda([sample])                  #24
              02c6 c203  st   [$03]       1324  st([sample])                    #25
                                          1325
              02c7 0113  ld   [$13]       1326  ld([xout])                      #26 Gets copied to XOUT
              02c8 fd0d  bra  [$0d]       1327  bra([nextVideo])                #27
              02c9 18c0  ld   $c0,out     1328  ld(syncBits,OUT)                #28 End horizontal pulse
                                          1329
                                          1330  # Back porch B: second of 4 repeated scan lines
                                          1331  # - Recompute Xi from dXi and store for retrieval in the next scan lines
                                          1332  label('videoB')
videoB:       02ca 00d3  ld   $d3         1333  ld('videoC')                    #29 2nd scanline of 4
              02cb c20d  st   [$0d]       1334  st([nextVideo])                 #30
              02cc 1401  ld   $01,y       1335  ld(videoTable>>8,Y)             #31
              02cd 0109  ld   [$09]       1336  ld([videoY])                    #32
              02ce 9001  adda $01,x       1337  adda(1,X)                       #33
              02cf 011f  ld   [$1f]       1338  ld([frameX])                    #34
              02d0 8d00  adda [y,x]       1339  adda([Y,X])                     #35
              02d1 fd0a  bra  [$0a]       1340  bra([videoModeB])               #36
              02d2 d21f  st   [$1f],x     1341  st([frameX],X)                  #37 Store in RAM and X
                                          1342
                                          1343  # Back porch C: third of 4 repeated scan lines
                                          1344  # - Nothing new to for video do as Yi and Xi are known,
                                          1345  # - This is the time to emit and reset the next sound sample
                                          1346  label('videoC')
videoC:       02d3 00dc  ld   $dc         1347  ld('videoD')                    #29 3rd scanline of 4
              02d4 c20d  st   [$0d]       1348  st([nextVideo])                 #30
              02d5 0103  ld   [$03]       1349  ld([sample])                    #31 New sound sample is ready (didn't fit in the audio loop)
              02d6 400f  ora  $0f         1350  ora(0x0f)                       #32
              02d7 2114  anda [$14]       1351  anda([xoutMask])                #33
              02d8 c213  st   [$13]       1352  st([xout])                      #34 Update [xout] with new sample (4 channels just updated)
              02d9 c003  st   $03,[$03]   1353  st(sample, [sample])            #35 Reset for next sample
              02da fd0b  bra  [$0b]       1354  bra([videoModeC])               #36
              02db 111f  ld   [$1f],x     1355  ld([frameX],X)                  #37
                                          1356
                                          1357  # Back porch D: last of 4 repeated scan lines
                                          1358  # - Calculate the next frame index
                                          1359  # - Decide if this is the last line or not
                                          1360  label('videoD')                 # Default video mode
videoD:       02dc 111f  ld   [$1f],x     1361  ld([frameX], X)                 #29 4th scanline of 4
              02dd 0109  ld   [$09]       1362  ld([videoY])                    #30
              02de a0ee  suba $ee         1363  suba((120-1)*2)                 #31
                                          1364  beq('.lastpixels#34')           #32
              02df f0e5  beq  .lastpixels#34
              02e0 80f0  adda $f0         1365  adda(120*2)                     #33 More pixel lines to go
              02e1 c209  st   [$09]       1366  st([videoY])                    #34
              02e2 0001  ld   $01         1367  ld('videoA')                    #35
              02e3 fd0c  bra  [$0c]       1368  bra([videoModeD])               #36
              02e4 c20d  st   [$0d]       1369  st([nextVideo])                 #37
                                          1370
                                          1371  label('.lastpixels#34')
                                          1372  if soundDiscontinuity == 1:
.lastpixels#34:
              02e5 c003  st   $03,[$03]   1373    st(sample, [sample])          #34 Sound continuity
                                          1374  else:
                                          1375    nop()                         #34
              02e6 00e9  ld   $e9         1376  ld('videoE')                    #35 No more pixel lines to go
              02e7 fd0c  bra  [$0c]       1377  bra([videoModeD])               #36
              02e8 c20d  st   [$0d]       1378  st([nextVideo])                 #37
                                          1379
                                          1380  # Back porch "E": after the last line
                                          1381  # - Go back and and enter vertical blank (program page 2)
                                          1382  label('videoE') # Exit visible area
videoE:       02e9 1401  ld   $01,y       1383  ld(hi('vBlankStart'),Y)         #29 Return to vertical blank interval
              02ea e004  jmp  y,$04       1384  jmp(Y,'vBlankStart')            #30
              02eb 00c0  ld   $c0         1385  ld(syncBits)                    #31
                                          1386
                                          1387  # Video mode that blacks out one or more pixel lines from the top of screen.
                                          1388  # This yields some speed, but also frees up screen memory for other purposes.
                                          1389  # Note: Sound output becomes choppier the more pixel lines are skipped
                                          1390  # Note: The vertical blank driver leaves 0x80 behind in [videoSync1]
                                          1391  label('videoF')
videoF:       02ec 0120  ld   [$20]       1392  ld([videoSync1])                #29 Completely black pixel line
              02ed 8080  adda $80         1393  adda(0x80)                      #30
              02ee d220  st   [$20],x     1394  st([videoSync1],X)              #31
              02ef 011f  ld   [$1f]       1395  ld([frameX])                    #32
              02f0 a500  suba [x]         1396  suba([X])                       #33 Decrements every two VGA scanlines
              02f1 f0f4  beq  .videoF#36  1397  beq('.videoF#36')               #34
              02f2 c21f  st   [$1f]       1398  st([frameX])                    #35
              02f3 fcf6  bra  nopixels    1399  bra('nopixels')                 #36
                                          1400  label('.videoF#36')
.videoF#36:   02f4 0001  ld   $01         1401  ld('videoA')                    #36,37 Transfer to visible screen area
              02f5 c20d  st   [$0d]       1402  st([nextVideo])                 #37
                                          1403  #
                                          1404  # Alternative for pixel burst: faster application mode
                                          1405  label('nopixels')
nopixels:     02f6 00ff  ld   $ff         1406  runVcpu(200-38, 'ABCD line 40-520',
              02f7 c21e  st   [$1e]
              02f8 1505  ld   [$05],y
              02f9 e0ff  jmp  y,$ff
              02fa 003c  ld   $3c
                                          1407    returnTo=0x1ff)               #38 Application interpreter (black scanlines)
                                          1408
                                          1409  #-----------------------------------------------------------------------
                                          1410  #
                                          1411  #  $0300 ROM page 3: Application interpreter primary page
                                          1412  #
                                          1413  #-----------------------------------------------------------------------
                                          1414
                                          1415  # Enter the timing-aware application interpreter (aka virtual CPU, vCPU)
                                          1416  #
                                          1417  # This routine will execute as many as possible instructions in the
                                          1418  # allotted time. When time runs out, it synchronizes such that the total
                                          1419  # duration matches the caller's request. Durations are counted in `ticks',
                                          1420  # which are multiples of 2 clock cycles.
                                          1421  #
                                          1422  # Synopsis: Use the runVcpu() macro as entry point
                                          1423
                                          1424  # We let 'ENTER' begin one word before the page boundary, for a bit extra
                                          1425  # precious space in the packed interpreter code page. Although ENTER's
                                          1426  # first instruction is bra() which normally doesn't cross page boundaries,
                                          1427  # in this case it will still jump into the right space, because branches
                                          1428  # from $xxFF land in the next page anyway.
                                          1429  while pc()&255 < 255:
              02fb 0200  nop              1430    nop()
              02fc 0200  nop
              02fd 0200  nop
              02fe 0200  nop
                                          1431  label('ENTER')
ENTER:        02ff fc03  bra  .next2      1432  bra('.next2')                   #0 Enter at '.next2' (so no startup overhead)
                                          1433  # --- Page boundary ---
                                          1434  align(0x100,size=0x100)
                                          1435  label('NEXTY')                  # Alternative for REENTER
NEXTY:        0300 1517  ld   [$17],y     1436  ld([vPC+1],Y)                   #1
                                          1437
                                          1438  # Fetch next instruction and execute it, but only if there are sufficient
                                          1439  # ticks left for the slowest instruction.
                                          1440  label('NEXT')
NEXT:         0301 8115  adda [$15]       1441  adda([vTicks])                  #0 Track elapsed ticks (actually counting down: AC<0)
              0302 e80b  blt  EXIT        1442  blt('EXIT')                     #1 Escape near time out
                                          1443  label('.next2')
.next2:       0303 c215  st   [$15]       1444  st([vTicks])                    #2
              0304 0116  ld   [$16]       1445  ld([vPC])                       #3 Advance vPC
              0305 8002  adda $02         1446  adda(2)                         #4
              0306 d216  st   [$16],x     1447  st([vPC],X)                     #5
              0307 0d00  ld   [y,x]       1448  ld([Y,X])                       #6 Fetch opcode (actually a branch target)
              0308 de00  st   [y,x++]     1449  st([Y,Xpp])                     #7 Just X++
              0309 fe00  bra  ac          1450  bra(AC)                         #8 Dispatch
              030a 0d00  ld   [y,x]       1451  ld([Y,X])                       #9 Prefetch operand
                                          1452
                                          1453  # Resync with video driver and transfer control
                                          1454  label('EXIT')
EXIT:         030b 800e  adda $0e         1455  adda(maxTicks)                  #3
              030c e40c  bgt  $030c       1456  bgt(pc()&255)                   #4 Resync
              030d a001  suba $01         1457  suba(1)                         #5
              030e 1401  ld   $01,y       1458  ld(hi('vBlankStart'),Y)         #6
              030f e11e  jmp  y,[$1e]     1459  jmp(Y,[vReturn])                #7 To video driver
              0310 0000  ld   $00         1460  ld(0)                           #8 AC should be 0 already. Still..
                                          1461  assert vCPU_overhead ==          9
                                          1462
                                          1463  # Instruction LDWI: Load immediate word constant (vAC=D), 20 cycles
                                          1464  label('LDWI')
LDWI:         0311 c218  st   [$18]       1465  st([vAC])                       #10
              0312 de00  st   [y,x++]     1466  st([Y,Xpp])                     #11 Just X++
              0313 0d00  ld   [y,x]       1467  ld([Y,X])                       #12 Fetch second operand
              0314 c219  st   [$19]       1468  st([vAC+1])                     #13
              0315 0116  ld   [$16]       1469  ld([vPC])                       #14 Advance vPC one more
              0316 8001  adda $01         1470  adda(1)                         #15
              0317 c216  st   [$16]       1471  st([vPC])                       #16
              0318 00f6  ld   $f6         1472  ld(-20//2)                      #17
              0319 fc01  bra  NEXT        1473  bra('NEXT')                     #18
                                          1474  #dummy()                        #19 Overlap
                                          1475  #
                                          1476  # Instruction LD: Load byte from zero page (vAC=[D]), 22 cycles
                                          1477  label('LD')
LD:           031a 1200  ld   ac,x        1478  ld(AC,X)                        #10,19
              031b 0500  ld   [x]         1479  ld([X])                         #11
              031c 1404  ld   $04,y       1480  ld(hi('ld#15'),Y)               #12
              031d e013  jmp  y,$13       1481  jmp(Y,'ld#15')                  #13
              031e c218  st   [$18]       1482  st([vAC])                       #14
                                          1483
                                          1484  # Instruction CMPHS: Adjust high byte for signed compare (vACH=XXX), 28 cycles
                                          1485  label('CMPHS_DEVROM')
CMPHS_DEVROM: 031f 140b  ld   $0b,y       1486  ld(hi('cmphs#13'),Y)            #10
              0320 e0bc  jmp  y,$bc       1487  jmp(Y,'cmphs#13')               #11
                                          1488  #ld(AC,X)                       #12 Overlap
                                          1489  #
                                          1490  # Instruction LDW: Load word from zero page (vAC=[D]+256*[D+1]), 20 cycles
                                          1491  label('LDW')
LDW:          0321 1200  ld   ac,x        1492  ld(AC,X)                        #10,12
              0322 8001  adda $01         1493  adda(1)                         #11
              0323 c21d  st   [$1d]       1494  st([vTmp])                      #12 Address of high byte
              0324 0500  ld   [x]         1495  ld([X])                         #13
              0325 c218  st   [$18]       1496  st([vAC])                       #14
              0326 111d  ld   [$1d],x     1497  ld([vTmp],X)                    #15
              0327 0500  ld   [x]         1498  ld([X])                         #16
              0328 c219  st   [$19]       1499  st([vAC+1])                     #17
              0329 fc01  bra  NEXT        1500  bra('NEXT')                     #18
              032a 00f6  ld   $f6         1501  ld(-20//2)                      #19
                                          1502
                                          1503  # Instruction STW: Store word in zero page ([D],[D+1]=vAC&255,vAC>>8), 20 cycles
                                          1504  label('STW')
STW:          032b 1200  ld   ac,x        1505  ld(AC,X)                        #10,20
              032c 8001  adda $01         1506  adda(1)                         #11
              032d c21d  st   [$1d]       1507  st([vTmp])                      #12 Address of high byte
              032e 0118  ld   [$18]       1508  ld([vAC])                       #13
              032f c600  st   [x]         1509  st([X])                         #14
              0330 111d  ld   [$1d],x     1510  ld([vTmp],X)                    #15
              0331 0119  ld   [$19]       1511  ld([vAC+1])                     #16
              0332 c600  st   [x]         1512  st([X])                         #17
              0333 fc01  bra  NEXT        1513  bra('NEXT')                     #18
              0334 00f6  ld   $f6         1514  ld(-20//2)                      #19
                                          1515
                                          1516  # Instruction BCC: Test AC sign and branch conditionally, 28 cycles
                                          1517  label('BCC')
BCC:          0335 0119  ld   [$19]       1518  ld([vAC+1])                     #10 First inspect high byte of vAC
              0336 ec40  bne  .bcc#13     1519  bne('.bcc#13')                  #11
              0337 c21d  st   [$1d]       1520  st([vTmp])                      #12
              0338 0118  ld   [$18]       1521  ld([vAC])                       #13 Additionally inspect low byte of vAC
              0339 f043  beq  .bcc#16     1522  beq('.bcc#16')                  #14
              033a 0001  ld   $01         1523  ld(1)                           #15
              033b c21d  st   [$1d]       1524  st([vTmp])                      #16
              033c 0d00  ld   [y,x]       1525  ld([Y,X])                       #17 Operand is the conditional
                                          1526  label('.bcc#18')
.bcc#18:      033d fe00  bra  ac          1527  bra(AC)                         #18
              033e 011d  ld   [$1d]       1528  ld([vTmp])                      #19
                                          1529
                                          1530  # Conditional EQ: Branch if zero (if(vACL==0)vPCL=D)
                                          1531  label('EQ')
EQ:           033f ec45  bne  .bcc#22     1532  bne('.bcc#22')                  #20
                                          1533  label('.bcc#13')
.bcc#13:      0340 f048  beq  .bcc#23     1534  beq('.bcc#23')                  #21,13 AC=0 in EQ, AC!=0 from BCC... Overlap with BCC
              0341 0d00  ld   [y,x]       1535  ld([Y,X])                       #22,14 Overlap with BCC
                                          1536  #
                                          1537  # (continue BCC)
                                          1538  #label('.bcc#13')
                                          1539  #dummy()                        #13
                                          1540  #dummy()                        #14
              0342 0200  nop              1541  nop()                           #15
                                          1542  label('.bcc#16')
.bcc#16:      0343 fc3d  bra  .bcc#18     1543  bra('.bcc#18')                  #16
              0344 0d00  ld   [y,x]       1544  ld([Y,X])                       #17 Operand is the conditional
                                          1545  label('.bcc#22')
.bcc#22:      0345 0116  ld   [$16]       1546  ld([vPC])                       #22 False condition
              0346 fc4a  bra  .bcc#25     1547  bra('.bcc#25')                  #23
              0347 8001  adda $01         1548  adda(1)                         #24
                                          1549  label('.bcc#23')
.bcc#23:      0348 de00  st   [y,x++]     1550  st([Y,Xpp])                     #23 Just X++ True condition
              0349 0d00  ld   [y,x]       1551  ld([Y,X])                       #24
                                          1552  label('.bcc#25')
.bcc#25:      034a c216  st   [$16]       1553  st([vPC])                       #25
              034b fc01  bra  NEXT        1554  bra('NEXT')                     #26
              034c 00f2  ld   $f2         1555  ld(-28//2)                      #27
                                          1556
                                          1557  # Conditional GT: Branch if positive (if(vACL>0)vPCL=D)
                                          1558  label('GT')
GT:           034d f845  ble  .bcc#22     1559  ble('.bcc#22')                  #20
              034e e448  bgt  .bcc#23     1560  bgt('.bcc#23')                  #21
              034f 0d00  ld   [y,x]       1561  ld([Y,X])                       #22
                                          1562
                                          1563  # Conditional LT: Branch if negative (if(vACL<0)vPCL=D)
                                          1564  label('LT')
LT:           0350 f445  bge  .bcc#22     1565  bge('.bcc#22')                  #20
              0351 e848  blt  .bcc#23     1566  blt('.bcc#23')                  #21
              0352 0d00  ld   [y,x]       1567  ld([Y,X])                       #22
                                          1568
                                          1569  # Conditional GE: Branch if positive or zero (if(vACL>=0)vPCL=D)
                                          1570  label('GE')
GE:           0353 e845  blt  .bcc#22     1571  blt('.bcc#22')                  #20
              0354 f448  bge  .bcc#23     1572  bge('.bcc#23')                  #21
              0355 0d00  ld   [y,x]       1573  ld([Y,X])                       #22
                                          1574
                                          1575  # Conditional LE: Branch if negative or zero (if(vACL<=0)vPCL=D)
                                          1576  label('LE')
LE:           0356 e445  bgt  .bcc#22     1577  bgt('.bcc#22')                  #20
              0357 f848  ble  .bcc#23     1578  ble('.bcc#23')                  #21
              0358 0d00  ld   [y,x]       1579  ld([Y,X])                       #22
                                          1580
                                          1581  # Instruction LDI: Load immediate small positive constant (vAC=D), 16 cycles
                                          1582  label('LDI')
LDI:          0359 c218  st   [$18]       1583  st([vAC])                       #10
              035a 0000  ld   $00         1584  ld(0)                           #11
              035b c219  st   [$19]       1585  st([vAC+1])                     #12
              035c fc00  bra  NEXTY       1586  bra('NEXTY')                    #13
              035d 00f8  ld   $f8         1587  ld(-16//2)                      #14
                                          1588
                                          1589  # Instruction ST: Store byte in zero page ([D]=vAC&255), 16 cycles
                                          1590  label('ST')
ST:           035e 1200  ld   ac,x        1591  ld(AC,X)                        #10,15
              035f 0118  ld   [$18]       1592  ld([vAC])                       #11
              0360 c600  st   [x]         1593  st([X])                         #12
              0361 fc00  bra  NEXTY       1594  bra('NEXTY')                    #13
              0362 00f8  ld   $f8         1595  ld(-16//2)                      #14
                                          1596
                                          1597  # Instruction POP: Pop address from stack (vLR,vSP==[vSP]+256*[vSP+1],vSP+2), 26 cycles
                                          1598  label('POP')
POP:          0363 111c  ld   [$1c],x     1599  ld([vSP],X)                     #10,15
              0364 0500  ld   [x]         1600  ld([X])                         #11
              0365 c21a  st   [$1a]       1601  st([vLR])                       #12
              0366 011c  ld   [$1c]       1602  ld([vSP])                       #13
              0367 9001  adda $01,x       1603  adda(1,X)                       #14
              0368 0500  ld   [x]         1604  ld([X])                         #15
              0369 c21b  st   [$1b]       1605  st([vLR+1])                     #16
              036a 011c  ld   [$1c]       1606  ld([vSP])                       #17
              036b 8002  adda $02         1607  adda(2)                         #18
              036c c21c  st   [$1c]       1608  st([vSP])                       #19
                                          1609  label('.pop#20')
.pop#20:      036d 0116  ld   [$16]       1610  ld([vPC])                       #20
              036e a001  suba $01         1611  suba(1)                         #21
              036f c216  st   [$16]       1612  st([vPC])                       #22
              0370 fc00  bra  NEXTY       1613  bra('NEXTY')                    #23
              0371 00f3  ld   $f3         1614  ld(-26//2)                      #24
                                          1615
                                          1616  # Conditional NE: Branch if not zero (if(vACL!=0)vPCL=D)
                                          1617  label('NE')
NE:           0372 f045  beq  .bcc#22     1618  beq('.bcc#22')                  #20,25
              0373 ec48  bne  .bcc#23     1619  bne('.bcc#23')                  #21
              0374 0d00  ld   [y,x]       1620  ld([Y,X])                       #22
                                          1621
                                          1622  # Instruction PUSH: Push vLR on stack ([vSP-2],v[vSP-1],vSP=vLR&255,vLR>>8,vLR-2), 26 cycles
                                          1623  label('PUSH')
PUSH:         0375 011c  ld   [$1c]       1624  ld([vSP])                       #10
              0376 b001  suba $01,x       1625  suba(1,X)                       #11
              0377 011b  ld   [$1b]       1626  ld([vLR+1])                     #12
              0378 c600  st   [x]         1627  st([X])                         #13
              0379 011c  ld   [$1c]       1628  ld([vSP])                       #14
              037a a002  suba $02         1629  suba(2)                         #15
              037b d21c  st   [$1c],x     1630  st([vSP],X)                     #16
              037c 011a  ld   [$1a]       1631  ld([vLR])                       #17
              037d fc6d  bra  .pop#20     1632  bra('.pop#20')                  #18
              037e c600  st   [x]         1633  st([X])                         #19
                                          1634
                                          1635  # Instruction LUP: ROM lookup (vAC=ROM[vAC+D]), 26 cycles
                                          1636  label('LUP')
LUP:          037f 1519  ld   [$19],y     1637  ld([vAC+1],Y)                   #10
              0380 e0fb  jmp  y,$fb       1638  jmp(Y,251)                      #11 Trampoline offset
              0381 8118  adda [$18]       1639  adda([vAC])                     #12
                                          1640
                                          1641  # Instruction ANDI: Logical-AND with small constant (vAC&=D), 22 cycles
                                          1642  label('ANDI')
ANDI:         0382 1404  ld   $04,y       1643  ld(hi('andi#13'),Y)             #10
              0383 e011  jmp  y,$11       1644  jmp(Y,'andi#13')                #11
              0384 2118  anda [$18]       1645  anda([vAC])                     #12
                                          1646
                                          1647  # Instruction CALLI: Goto immediate address and remember vPC (vLR,vPC=vPC+3,$HHLL-2), 28 cycles
                                          1648  label('CALLI_DEVROM')
CALLI_DEVROM: 0385 140b  ld   $0b,y       1649  ld(hi('calli#13'),Y)            #10
              0386 e0b0  jmp  y,$b0       1650  jmp(Y,'calli#13')               #11
              0387 0116  ld   [$16]       1651  ld([vPC])                       #12
                                          1652
                                          1653  # Instruction ORI: Logical-OR with small constant (vAC|=D), 14 cycles
                                          1654  label('ORI')
ORI:          0388 4118  ora  [$18]       1655  ora([vAC])                      #10
              0389 c218  st   [$18]       1656  st([vAC])                       #11
              038a fc01  bra  NEXT        1657  bra('NEXT')                     #12
              038b 00f9  ld   $f9         1658  ld(-14//2)                      #13
                                          1659
                                          1660  # Instruction XORI: Logical-XOR with small constant (vAC^=D), 14 cycles
                                          1661  label('XORI')
XORI:         038c 6118  xora [$18]       1662  xora([vAC])                     #10
              038d c218  st   [$18]       1663  st([vAC])                       #11
              038e fc01  bra  NEXT        1664  bra('NEXT')                     #12
              038f 00f9  ld   $f9         1665  ld(-14//2)                      #13
                                          1666
                                          1667  # Instruction BRA: Branch unconditionally (vPC=(vPC&0xff00)+D), 14 cycles
                                          1668  label('BRA')
BRA:          0390 c216  st   [$16]       1669  st([vPC])                       #10
              0391 fc00  bra  NEXTY       1670  bra('NEXTY')                    #11
              0392 00f9  ld   $f9         1671  ld(-14//2)                      #12
                                          1672
                                          1673  # Instruction INC: Increment zero page byte ([D]++), 20 cycles
                                          1674  label('INC')
INC:          0393 1200  ld   ac,x        1675  ld(AC,X)                        #10,13
              0394 1404  ld   $04,y       1676  ld(hi('inc#14'),Y)              #11
              0395 e0f5  jmp  y,$f5       1677  jmp(Y,'inc#14')                 #12
              0396 0001  ld   $01         1678  ld(1)                           #13
                                          1679
                                          1680  # Instruction CMPHU: Adjust high byte for unsigned compare (vACH=XXX), 28 cycles
                                          1681  label('CMPHU_DEVROM')
CMPHU_DEVROM: 0397 140b  ld   $0b,y       1682  ld(hi('cmphu#13'),Y)            #10
              0398 e0c8  jmp  y,$c8       1683  jmp(Y,'cmphu#13')               #11
                                          1684  #ld(AC,X)                       #12 Overlap
                                          1685  #
                                          1686  # Instruction ADDW: Word addition with zero page (vAC+=[D]+256*[D+1]), 28 cycles
                                          1687  label('ADDW')
                                          1688  # The non-carry paths could be 26 cycles at the expense of (much) more code.
                                          1689  # But a smaller size is better so more instructions fit in this code page.
                                          1690  # 28 cycles is still 4.5 usec. The 6502 equivalent takes 20 cycles or 20 usec.
ADDW:         0399 1200  ld   ac,x        1691  ld(AC,X)                        #10,12 Address of low byte to be added
              039a 8001  adda $01         1692  adda(1)                         #11
              039b c21d  st   [$1d]       1693  st([vTmp])                      #12 Address of high byte to be added
              039c 0118  ld   [$18]       1694  ld([vAC])                       #13 Add the low bytes
              039d 8500  adda [x]         1695  adda([X])                       #14
              039e c218  st   [$18]       1696  st([vAC])                       #15 Store low result
              039f e8a3  blt  .addw#18    1697  bmi('.addw#18')                 #16 Now figure out if there was a carry
              03a0 a500  suba [x]         1698  suba([X])                       #17 Gets back the initial value of vAC
              03a1 fca5  bra  .addw#20    1699  bra('.addw#20')                 #18
              03a2 4500  ora  [x]         1700  ora([X])                        #19 Carry in bit 7
                                          1701  label('.addw#18')
.addw#18:     03a3 2500  anda [x]         1702  anda([X])                       #18 Carry in bit 7
              03a4 0200  nop              1703  nop()                           #19
                                          1704  label('.addw#20')
.addw#20:     03a5 3080  anda $80,x       1705  anda(0x80,X)                    #20 Move carry to bit 0
              03a6 0500  ld   [x]         1706  ld([X])                         #21
              03a7 8119  adda [$19]       1707  adda([vAC+1])                   #22 Add the high bytes with carry
              03a8 111d  ld   [$1d],x     1708  ld([vTmp],X)                    #23
              03a9 8500  adda [x]         1709  adda([X])                       #24
              03aa c219  st   [$19]       1710  st([vAC+1])                     #25 Store high result
              03ab fc01  bra  NEXT        1711  bra('NEXT')                     #26
              03ac 00f2  ld   $f2         1712  ld(-28//2)                      #27
                                          1713
                                          1714  # Instruction PEEK: Read byte from memory (vAC=[vAC]), 26 cycles
                                          1715  label('PEEK')
PEEK:         03ad 1404  ld   $04,y       1716  ld(hi('peek'),Y)                #10
              03ae e062  jmp  y,$62       1717  jmp(Y,'peek')                   #11
                                          1718  #ld([vPC])                      #12 Overlap
                                          1719  #
                                          1720  # Instruction SYS: Native call, <=256 cycles (<=128 ticks, in reality less)
                                          1721  #
                                          1722  # The 'SYS' vCPU instruction first checks the number of desired ticks given by
                                          1723  # the operand. As long as there are insufficient ticks available in the current
                                          1724  # time slice, the instruction will be retried. This will effectively wait for
                                          1725  # the next scan line if the current slice is almost out of time. Then a jump to
                                          1726  # native code is made. This code can do whatever it wants, but it must return
                                          1727  # to the 'REENTER' label when done. When returning, AC must hold (the negative
                                          1728  # of) the actual consumed number of whole ticks for the entire virtual
                                          1729  # instruction cycle (from NEXT to NEXT). This duration may not exceed the prior
                                          1730  # declared duration in the operand + 28 (or maxTicks). The operand specifies the
                                          1731  # (negative) of the maximum number of *extra* ticks that the native call will
                                          1732  # need. The GCL compiler automatically makes this calculation from gross number
                                          1733  # of cycles to excess number of ticks.
                                          1734  # SYS functions can modify vPC to implement repetition. For example to split
                                          1735  # up work into multiple chucks.
                                          1736  label('.sys#13')
.sys#13:      03af 0116  ld   [$16]       1737  ld([vPC])                       #13,12 Retry until sufficient time
              03b0 a002  suba $02         1738  suba(2)                         #14
              03b1 c216  st   [$16]       1739  st([vPC])                       #15
              03b2 fccb  bra  REENTER     1740  bra('REENTER')                  #16
              03b3 00f6  ld   $f6         1741  ld(-20//2)                      #17
                                          1742  label('SYS')
SYS:          03b4 8115  adda [$15]       1743  adda([vTicks])                  #10
              03b5 e8af  blt  .sys#13     1744  blt('.sys#13')                  #11
              03b6 1523  ld   [$23],y     1745  ld([sysFn+1],Y)                 #12
              03b7 e122  jmp  y,[$22]     1746  jmp(Y,[sysFn])                  #13
                                          1747  #dummy()                        #14 Overlap
                                          1748  #
                                          1749  # Instruction SUBW: Word subtract with zero page (AC-=[D]+256*[D+1]), 28 cycles
                                          1750  # All cases can be done in 26 cycles, but the code will become much larger
                                          1751  label('SUBW')
SUBW:         03b8 1200  ld   ac,x        1752  ld(AC,X)                        #10,14 Address of low byte to be subtracted
              03b9 8001  adda $01         1753  adda(1)                         #11
              03ba c21d  st   [$1d]       1754  st([vTmp])                      #12 Address of high byte to be subtracted
              03bb 0118  ld   [$18]       1755  ld([vAC])                       #13
              03bc e8c1  blt  .subw#16    1756  bmi('.subw#16')                 #14
              03bd a500  suba [x]         1757  suba([X])                       #15
              03be c218  st   [$18]       1758  st([vAC])                       #16 Store low result
              03bf fcc4  bra  .subw#19    1759  bra('.subw#19')                 #17
              03c0 4500  ora  [x]         1760  ora([X])                        #18 Carry in bit 7
                                          1761  label('.subw#16')
.subw#16:     03c1 c218  st   [$18]       1762  st([vAC])                       #16 Store low result
              03c2 2500  anda [x]         1763  anda([X])                       #17 Carry in bit 7
              03c3 0200  nop              1764  nop()                           #18
                                          1765  label('.subw#19')
.subw#19:     03c4 3080  anda $80,x       1766  anda(0x80,X)                    #19 Move carry to bit 0
              03c5 0119  ld   [$19]       1767  ld([vAC+1])                     #20
              03c6 a500  suba [x]         1768  suba([X])                       #21
              03c7 111d  ld   [$1d],x     1769  ld([vTmp],X)                    #22
              03c8 a500  suba [x]         1770  suba([X])                       #23
              03c9 c219  st   [$19]       1771  st([vAC+1])                     #24
                                          1772  label('REENTER_28')
REENTER_28:   03ca 00f2  ld   $f2         1773  ld(-28//2)                      #25
                                          1774  label('REENTER')
REENTER:      03cb fc01  bra  NEXT        1775  bra('NEXT')                     #26 Return from SYS calls
              03cc 1517  ld   [$17],y     1776  ld([vPC+1],Y)                   #27
                                          1777
                                          1778  # Instruction DEF: Define data or code (vAC,vPC=vPC+2,(vPC&0xff00)+D), 24 cycles
                                          1779  label('DEF')
DEF:          03cd 1404  ld   $04,y       1780  ld(hi('def#13'),Y)              #10
              03ce e007  jmp  y,$07       1781  jmp(Y,'def#13')                 #11
                                          1782  #st([vTmp])                     #12 Overlap
                                          1783  #
                                          1784  # Instruction CALL: Goto address and remember vPC (vLR,vPC=vPC+2,[D]+256*[D+1]-2), 26 cycles
                                          1785  label('CALL')
CALL:         03cf c21d  st   [$1d]       1786  st([vTmp])                      #10,12
              03d0 0116  ld   [$16]       1787  ld([vPC])                       #11
              03d1 8002  adda $02         1788  adda(2)                         #12 Point to instruction after CALL
              03d2 c21a  st   [$1a]       1789  st([vLR])                       #13
              03d3 0117  ld   [$17]       1790  ld([vPC+1])                     #14
              03d4 c21b  st   [$1b]       1791  st([vLR+1])                     #15
              03d5 111d  ld   [$1d],x     1792  ld([vTmp],X)                    #16
              03d6 0500  ld   [x]         1793  ld([X])                         #17
              03d7 a002  suba $02         1794  suba(2)                         #18 Because NEXT will add 2
              03d8 c216  st   [$16]       1795  st([vPC])                       #19
              03d9 011d  ld   [$1d]       1796  ld([vTmp])                      #20
              03da 9001  adda $01,x       1797  adda(1,X)                       #21
              03db 0500  ld   [x]         1798  ld([X])                         #22
              03dc d617  st   [$17],y     1799  st([vPC+1],Y)                   #23
              03dd fc01  bra  NEXT        1800  bra('NEXT')                     #24
              03de 00f3  ld   $f3         1801  ld(-26//2)                      #25
                                          1802
                                          1803  # Instruction ALLOC: Create or destroy stack frame (vSP+=D), 14 cycles
                                          1804  label('ALLOC')
ALLOC:        03df 811c  adda [$1c]       1805  adda([vSP])                     #10
              03e0 c21c  st   [$1c]       1806  st([vSP])                       #11
              03e1 fc01  bra  NEXT        1807  bra('NEXT')                     #12
              03e2 00f9  ld   $f9         1808  ld(-14//2)                      #13
                                          1809
                                          1810  # The instructions below are all implemented in the second code page. Jumping
                                          1811  # back and forth makes each 6 cycles slower, but it also saves space in the
                                          1812  # primary page for the instructions above. Most of them are in fact not very
                                          1813  # critical, as evidenced by the fact that they weren't needed for the first
                                          1814  # Gigatron applications (Snake, Racer, Mandelbrot, Loader). By providing them
                                          1815  # in this way, at least they don't need to be implemented as a SYS extension.
                                          1816
                                          1817  # Instruction ADDI: Add small positive constant (vAC+=D), 28 cycles
                                          1818  label('ADDI')
ADDI:         03e3 1404  ld   $04,y       1819  ld(hi('addi'),Y)                #10
              03e4 e018  jmp  y,$18       1820  jmp(Y,'addi')                   #11
              03e5 c21d  st   [$1d]       1821  st([vTmp])                      #12
                                          1822
                                          1823  # Instruction SUBI: Subtract small positive constant (vAC+=D), 28 cycles
                                          1824  label('SUBI')
SUBI:         03e6 1404  ld   $04,y       1825  ld(hi('subi'),Y)                #10
              03e7 e026  jmp  y,$26       1826  jmp(Y,'subi')                   #11
              03e8 c21d  st   [$1d]       1827  st([vTmp])                      #12
                                          1828
                                          1829  # Instruction LSLW: Logical shift left (vAC<<=1), 28 cycles
                                          1830  # Useful, because ADDW can't add vAC to itself. Also more compact.
                                          1831  label('LSLW')
LSLW:         03e9 1404  ld   $04,y       1832  ld(hi('lslw'),Y)                #10
              03ea e035  jmp  y,$35       1833  jmp(Y,'lslw')                   #11
              03eb 0118  ld   [$18]       1834  ld([vAC])                       #12
                                          1835
                                          1836  # Instruction STLW: Store word in stack frame ([vSP+D],[vSP+D+1]=vAC&255,vAC>>8), 26 cycles
                                          1837  label('STLW')
STLW:         03ec 1404  ld   $04,y       1838  ld(hi('stlw'),Y)                #10
              03ed e041  jmp  y,$41       1839  jmp(Y,'stlw')                   #11
                                          1840  #dummy()                        #12 Overlap
                                          1841  #
                                          1842  # Instruction LDLW: Load word from stack frame (vAC=[vSP+D]+256*[vSP+D+1]), 26 cycles
                                          1843  label('LDLW')
LDLW:         03ee 1404  ld   $04,y       1844  ld(hi('ldlw'),Y)                #10,12
              03ef e04c  jmp  y,$4c       1845  jmp(Y,'ldlw')                   #11
                                          1846  #dummy()                        #12 Overlap
                                          1847  #
                                          1848  # Instruction POKE: Write byte in memory ([[D+1],[D]]=vAC&255), 28 cycles
                                          1849  label('POKE')
POKE:         03f0 1404  ld   $04,y       1850  ld(hi('poke'),Y)                #10,12
              03f1 e057  jmp  y,$57       1851  jmp(Y,'poke')                   #11
              03f2 c21d  st   [$1d]       1852  st([vTmp])                      #12
                                          1853
                                          1854  # Instruction DOKE: Write word in memory ([[D+1],[D]],[[D+1],[D]+1]=vAC&255,vAC>>8), 28 cycles
                                          1855  label('DOKE')
DOKE:         03f3 1404  ld   $04,y       1856  ld(hi('doke'),Y)                #10
              03f4 e06d  jmp  y,$6d       1857  jmp(Y,'doke')                   #11
              03f5 c21d  st   [$1d]       1858  st([vTmp])                      #12
                                          1859
                                          1860  # Instruction DEEK: Read word from memory (vAC=[vAC]+256*[vAC+1]), 28 cycles
                                          1861  label('DEEK')
DEEK:         03f6 1404  ld   $04,y       1862  ld(hi('deek'),Y)                #10
              03f7 e07a  jmp  y,$7a       1863  jmp(Y,'deek')                   #11
                                          1864  #dummy()                        #12 Overlap
                                          1865  #
                                          1866  # Instruction ANDW: Word logical-AND with zero page (vAC&=[D]+256*[D+1]), 28 cycles
                                          1867  label('ANDW')
ANDW:         03f8 1404  ld   $04,y       1868  ld(hi('andw'),Y)                #10,12
              03f9 e086  jmp  y,$86       1869  jmp(Y,'andw')                   #11
                                          1870  #dummy()                        #12 Overlap
                                          1871  #
                                          1872  # Instruction ORW: Word logical-OR with zero page (vAC|=[D]+256*[D+1]), 28 cycles
                                          1873  label('ORW')
ORW:          03fa 1404  ld   $04,y       1874  ld(hi('orw'),Y)                 #10,12
              03fb e091  jmp  y,$91       1875  jmp(Y,'orw')                    #11
                                          1876  #dummy()                        #12 Overlap
                                          1877  #
                                          1878  # Instruction XORW: Word logical-XOR with zero page (vAC^=[D]+256*[D+1]), 26 cycles
                                          1879  label('XORW')
XORW:         03fc 1404  ld   $04,y       1880  ld(hi('xorw'),Y)                #10,12
              03fd e09c  jmp  y,$9c       1881  jmp(Y,'xorw')                   #11
              03fe c21d  st   [$1d]       1882  st([vTmp])                      #12
                                          1883  # We keep XORW 2 cycles faster than ANDW/ORW, because that
                                          1884  # can be useful for comparing numbers for equality a tiny
                                          1885  # bit faster than with SUBW
                                          1886
                                          1887  # Instruction RET: Function return (vPC=vLR-2), 16 cycles
                                          1888  label('RET')
RET:          03ff 011a  ld   [$1a]       1889  ld([vLR])                       #10
                                          1890  assert pc()&255 == 0
                                          1891
                                          1892  #-----------------------------------------------------------------------
                                          1893  #
                                          1894  #  $0400 ROM page 4: Application interpreter extension
                                          1895  #
                                          1896  #-----------------------------------------------------------------------
                                          1897  align(0x100, size=0x100)
                                          1898
                                          1899  # (Continue RET)
              0400 a002  suba $02         1900  suba(2)                         #11
              0401 c216  st   [$16]       1901  st([vPC])                       #12
              0402 011b  ld   [$1b]       1902  ld([vLR+1])                     #13
              0403 c217  st   [$17]       1903  st([vPC+1])                     #14
              0404 1403  ld   $03,y       1904  ld(hi('REENTER'),Y)             #15
              0405 e0cb  jmp  y,$cb       1905  jmp(Y,'REENTER')                #16
              0406 00f6  ld   $f6         1906  ld(-20//2)                      #17
                                          1907
                                          1908  # DEF implementation
                                          1909  label('def#13')
def#13:       0407 0116  ld   [$16]       1910  ld([vPC])                       #13
              0408 8002  adda $02         1911  adda(2)                         #14
              0409 c218  st   [$18]       1912  st([vAC])                       #15
              040a 0117  ld   [$17]       1913  ld([vPC+1])                     #16
              040b c219  st   [$19]       1914  st([vAC+1])                     #17
              040c 011d  ld   [$1d]       1915  ld([vTmp])                      #18
              040d c216  st   [$16]       1916  st([vPC])                       #19
              040e 1403  ld   $03,y       1917  ld(hi('NEXTY'),Y)               #20
              040f e000  jmp  y,$00       1918  jmp(Y,'NEXTY')                  #21
              0410 00f4  ld   $f4         1919  ld(-24//2)                      #22
                                          1920
                                          1921  # Clear vACH (continuation of ANDI and LD instructions)
                                          1922  label('andi#13')
andi#13:      0411 0200  nop              1923  nop()                           #13
              0412 c218  st   [$18]       1924  st([vAC])                       #14
                                          1925  #
                                          1926  label('ld#15')
ld#15:        0413 0000  ld   $00         1927  ld(0)                           #15 Clear high byte
              0414 c219  st   [$19]       1928  st([vAC+1])                     #16
              0415 1403  ld   $03,y       1929  ld(hi('REENTER'),Y)             #17
              0416 e0cb  jmp  y,$cb       1930  jmp(Y,'REENTER')                #18
              0417 00f5  ld   $f5         1931  ld(-22//2)                      #19
                                          1932
                                          1933  # ADDI implementation
                                          1934  label('addi')
addi:         0418 8118  adda [$18]       1935  adda([vAC])                     #13
              0419 c218  st   [$18]       1936  st([vAC])                       #14 Store low result
              041a e81e  blt  .addi#17    1937  bmi('.addi#17')                 #15 Now figure out if there was a carry
              041b a11d  suba [$1d]       1938  suba([vTmp])                    #16 Gets back the initial value of vAC
              041c fc20  bra  .addi#19    1939  bra('.addi#19')                 #17
              041d 411d  ora  [$1d]       1940  ora([vTmp])                     #18 Carry in bit 7
                                          1941  label('.addi#17')
.addi#17:     041e 211d  anda [$1d]       1942  anda([vTmp])                    #17 Carry in bit 7
              041f 0200  nop              1943  nop()                           #18
                                          1944  label('.addi#19')
.addi#19:     0420 3080  anda $80,x       1945  anda(0x80,X)                    #19 Move carry to bit 0
              0421 0500  ld   [x]         1946  ld([X])                         #20
              0422 8119  adda [$19]       1947  adda([vAC+1])                   #21 Add the high bytes with carry
              0423 1403  ld   $03,y       1948  ld(hi('REENTER_28'),Y)          #22
              0424 e0ca  jmp  y,$ca       1949  jmp(Y,'REENTER_28')             #23
              0425 c219  st   [$19]       1950  st([vAC+1])                     #24 Store high result
                                          1951
                                          1952  # SUBI implementation
                                          1953  label('subi')
subi:         0426 0118  ld   [$18]       1954  ld([vAC])                       #13
              0427 e82c  blt  .subi#16    1955  bmi('.subi#16')                 #14
              0428 a11d  suba [$1d]       1956  suba([vTmp])                    #15
              0429 c218  st   [$18]       1957  st([vAC])                       #16 Store low result
              042a fc2f  bra  .subi#19    1958  bra('.subi#19')                 #17
              042b 411d  ora  [$1d]       1959  ora([vTmp])                     #18 Carry in bit 7
                                          1960  label('.subi#16')
.subi#16:     042c c218  st   [$18]       1961  st([vAC])                       #16 Store low result
              042d 211d  anda [$1d]       1962  anda([vTmp])                    #17 Carry in bit 7
              042e 0200  nop              1963  nop()                           #18
                                          1964  label('.subi#19')
.subi#19:     042f 3080  anda $80,x       1965  anda(0x80,X)                    #19 Move carry to bit 0
              0430 0119  ld   [$19]       1966  ld([vAC+1])                     #20
              0431 a500  suba [x]         1967  suba([X])                       #21
              0432 1403  ld   $03,y       1968  ld(hi('REENTER_28'),Y)          #22
              0433 e0ca  jmp  y,$ca       1969  jmp(Y,'REENTER_28')             #23
              0434 c219  st   [$19]       1970  st([vAC+1])                     #24
                                          1971
                                          1972  # LSLW implementation
                                          1973  label('lslw')
lslw:         0435 3080  anda $80,x       1974  anda(128,X)                     #13
              0436 8118  adda [$18]       1975  adda([vAC])                     #14
              0437 c218  st   [$18]       1976  st([vAC])                       #15
              0438 0500  ld   [x]         1977  ld([X])                         #16
              0439 8119  adda [$19]       1978  adda([vAC+1])                   #17
              043a 8119  adda [$19]       1979  adda([vAC+1])                   #18
              043b c219  st   [$19]       1980  st([vAC+1])                     #19
              043c 0116  ld   [$16]       1981  ld([vPC])                       #20
              043d a001  suba $01         1982  suba(1)                         #21
              043e 1403  ld   $03,y       1983  ld(hi('REENTER_28'),Y)          #22
              043f e0ca  jmp  y,$ca       1984  jmp(Y,'REENTER_28')             #23
              0440 c216  st   [$16]       1985  st([vPC])                       #24
                                          1986
                                          1987  # STLW implementation
                                          1988  label('stlw')
stlw:         0441 811c  adda [$1c]       1989  adda([vSP])                     #13
              0442 c21d  st   [$1d]       1990  st([vTmp])                      #14
              0443 9001  adda $01,x       1991  adda(1,X)                       #15
              0444 0119  ld   [$19]       1992  ld([vAC+1])                     #16
              0445 c600  st   [x]         1993  st([X])                         #17
              0446 111d  ld   [$1d],x     1994  ld([vTmp],X)                    #18
              0447 0118  ld   [$18]       1995  ld([vAC])                       #19
              0448 c600  st   [x]         1996  st([X])                         #20
              0449 1403  ld   $03,y       1997  ld(hi('REENTER'),Y)             #21
              044a e0cb  jmp  y,$cb       1998  jmp(Y,'REENTER')                #22
              044b 00f3  ld   $f3         1999  ld(-26//2)                      #23
                                          2000
                                          2001  # LDLW implementation
                                          2002  label('ldlw')
ldlw:         044c 811c  adda [$1c]       2003  adda([vSP])                     #13
              044d c21d  st   [$1d]       2004  st([vTmp])                      #14
              044e 9001  adda $01,x       2005  adda(1,X)                       #15
              044f 0500  ld   [x]         2006  ld([X])                         #16
              0450 c219  st   [$19]       2007  st([vAC+1])                     #17
              0451 111d  ld   [$1d],x     2008  ld([vTmp],X)                    #18
              0452 0500  ld   [x]         2009  ld([X])                         #19
              0453 c218  st   [$18]       2010  st([vAC])                       #20
              0454 1403  ld   $03,y       2011  ld(hi('REENTER'),Y)             #21
              0455 e0cb  jmp  y,$cb       2012  jmp(Y,'REENTER')                #22
              0456 00f3  ld   $f3         2013  ld(-26//2)                      #23
                                          2014
                                          2015  # POKE implementation
                                          2016  label('poke')
poke:         0457 9001  adda $01,x       2017  adda(1,X)                       #13
              0458 0500  ld   [x]         2018  ld([X])                         #14
              0459 1600  ld   ac,y        2019  ld(AC,Y)                        #15
              045a 111d  ld   [$1d],x     2020  ld([vTmp],X)                    #16
              045b 0500  ld   [x]         2021  ld([X])                         #17
              045c 1200  ld   ac,x        2022  ld(AC,X)                        #18
              045d 0118  ld   [$18]       2023  ld([vAC])                       #19
              045e ce00  st   [y,x]       2024  st([Y,X])                       #20
              045f 1403  ld   $03,y       2025  ld(hi('REENTER'),Y)             #21
              0460 e0cb  jmp  y,$cb       2026  jmp(Y,'REENTER')                #22
              0461 00f3  ld   $f3         2027  ld(-26//2)                      #23
                                          2028
                                          2029  # PEEK implementation
                                          2030  label('peek')
peek:         0462 a001  suba $01         2031  suba(1)                         #13
              0463 c216  st   [$16]       2032  st([vPC])                       #14
              0464 1118  ld   [$18],x     2033  ld([vAC],X)                     #15
              0465 1519  ld   [$19],y     2034  ld([vAC+1],Y)                   #16
              0466 0d00  ld   [y,x]       2035  ld([Y,X])                       #17
              0467 c218  st   [$18]       2036  st([vAC])                       #18
                                          2037  label('lupReturn#19')           #Nice coincidence that lupReturn can be here
lupReturn#19: 0468 0000  ld   $00         2038  ld(0)                           #19
              0469 c219  st   [$19]       2039  st([vAC+1])                     #20
              046a 1403  ld   $03,y       2040  ld(hi('REENTER'),Y)             #21
              046b e0cb  jmp  y,$cb       2041  jmp(Y,'REENTER')                #22
              046c 00f3  ld   $f3         2042  ld(-26//2)                      #23
                                          2043
                                          2044  # DOKE implementation
                                          2045  label('doke')
doke:         046d 9001  adda $01,x       2046  adda(1,X)                       #13
              046e 0500  ld   [x]         2047  ld([X])                         #14
              046f 1600  ld   ac,y        2048  ld(AC,Y)                        #15
              0470 111d  ld   [$1d],x     2049  ld([vTmp],X)                    #16
              0471 0500  ld   [x]         2050  ld([X])                         #17
              0472 1200  ld   ac,x        2051  ld(AC,X)                        #18
              0473 0118  ld   [$18]       2052  ld([vAC])                       #19
              0474 de00  st   [y,x++]     2053  st([Y,Xpp])                     #20
              0475 0119  ld   [$19]       2054  ld([vAC+1])                     #21
              0476 ce00  st   [y,x]       2055  st([Y,X])                       #22 Incompatible with REENTER_28
              0477 1403  ld   $03,y       2056  ld(hi('REENTER'),Y)             #23
              0478 e0cb  jmp  y,$cb       2057  jmp(Y,'REENTER')                #24
              0479 00f2  ld   $f2         2058  ld(-28//2)                      #25
                                          2059
                                          2060  # DEEK implementation
                                          2061  label('deek')
deek:         047a 0116  ld   [$16]       2062  ld([vPC])                       #13
              047b a001  suba $01         2063  suba(1)                         #14
              047c c216  st   [$16]       2064  st([vPC])                       #15
              047d 1118  ld   [$18],x     2065  ld([vAC],X)                     #16
              047e 1519  ld   [$19],y     2066  ld([vAC+1],Y)                   #17
              047f 0d00  ld   [y,x]       2067  ld([Y,X])                       #18
              0480 de00  st   [y,x++]     2068  st([Y,Xpp])                     #19 Just X++
              0481 c218  st   [$18]       2069  st([vAC])                       #20
              0482 0d00  ld   [y,x]       2070  ld([Y,X])                       #21
              0483 1403  ld   $03,y       2071  ld(hi('REENTER_28'),Y)          #22
              0484 e0ca  jmp  y,$ca       2072  jmp(Y,'REENTER_28')             #23
              0485 c219  st   [$19]       2073  st([vAC+1])                     #24
                                          2074
                                          2075  # ANDW implementation
                                          2076  label('andw')
andw:         0486 c21d  st   [$1d]       2077  st([vTmp])                      #13
              0487 9001  adda $01,x       2078  adda(1,X)                       #14
              0488 0500  ld   [x]         2079  ld([X])                         #15
              0489 2119  anda [$19]       2080  anda([vAC+1])                   #16
              048a c219  st   [$19]       2081  st([vAC+1])                     #17
              048b 111d  ld   [$1d],x     2082  ld([vTmp],X)                    #18
              048c 0500  ld   [x]         2083  ld([X])                         #19
              048d 2118  anda [$18]       2084  anda([vAC])                     #20
              048e c218  st   [$18]       2085  st([vAC])                       #21
              048f 1403  ld   $03,y       2086  ld(hi('REENTER_28'),Y)          #22
              0490 e0ca  jmp  y,$ca       2087  jmp(Y,'REENTER_28')             #23
                                          2088  #dummy()                        #24 Overlap
                                          2089  #
                                          2090  # ORW implementation
                                          2091  label('orw')
orw:          0491 c21d  st   [$1d]       2092  st([vTmp])                      #13,24
              0492 9001  adda $01,x       2093  adda(1,X)                       #14
              0493 0500  ld   [x]         2094  ld([X])                         #15
              0494 4119  ora  [$19]       2095  ora([vAC+1])                    #16
              0495 c219  st   [$19]       2096  st([vAC+1])                     #17
              0496 111d  ld   [$1d],x     2097  ld([vTmp],X)                    #18
              0497 0500  ld   [x]         2098  ld([X])                         #19
              0498 4118  ora  [$18]       2099  ora([vAC])                      #20
              0499 c218  st   [$18]       2100  st([vAC])                       #21
              049a 1403  ld   $03,y       2101  ld(hi('REENTER_28'),Y)          #22
              049b e0ca  jmp  y,$ca       2102  jmp(Y,'REENTER_28')             #23
                                          2103  #dummy()                        #24 Overlap
                                          2104  #
                                          2105  # XORW implementation
                                          2106  label('xorw')
xorw:         049c 9001  adda $01,x       2107  adda(1,X)                       #13,24
              049d 0500  ld   [x]         2108  ld([X])                         #14
              049e 6119  xora [$19]       2109  xora([vAC+1])                   #15
              049f c219  st   [$19]       2110  st([vAC+1])                     #16
              04a0 111d  ld   [$1d],x     2111  ld([vTmp],X)                    #17
              04a1 0500  ld   [x]         2112  ld([X])                         #18
              04a2 6118  xora [$18]       2113  xora([vAC])                     #19
              04a3 c218  st   [$18]       2114  st([vAC])                       #20
              04a4 1403  ld   $03,y       2115  ld(hi('REENTER'),Y)             #21
              04a5 e0cb  jmp  y,$cb       2116  jmp(Y,'REENTER')                #22
              04a6 00f3  ld   $f3         2117  ld(-26//2)                      #23
                                          2118
                                          2119  #-----------------------------------------------------------------------
                                          2120  #
                                          2121  #  vCPU extension functions (for acceleration and compaction) follow below.
                                          2122  #
                                          2123  #  The naming convention is: SYS_<CamelCase>[_v<V>]_<N>
                                          2124  #
                                          2125  #  With <N> the maximum number of cycles the function will run
                                          2126  #  (counted from NEXT to NEXT). This is the same number that must
                                          2127  #  be passed to the 'SYS' vCPU instruction as operand, and it will
                                          2128  #  appear in the GCL code upon use.
                                          2129  #
                                          2130  #  If a SYS extension got introduced after ROM v1, the version number of
                                          2131  #  introduction is included in the name. This helps the programmer to be
                                          2132  #  reminded to verify the acutal ROM version and fail gracefully on older
                                          2133  #  ROMs than required. See also Docs/GT1-files.txt on using [romType].
                                          2134  #
                                          2135  #-----------------------------------------------------------------------
                                          2136
                                          2137  #-----------------------------------------------------------------------
                                          2138  # Extension SYS_Random_34: Update entropy and copy to vAC
                                          2139  #-----------------------------------------------------------------------
                                          2140
                                          2141  # This same algorithm runs automatically once per vertical blank.
                                          2142  # Use this function to get numbers at a higher rate.
                                          2143  #
                                          2144  # Variables:
                                          2145  #       vAC
                                          2146
                                          2147  label('SYS_Random_34')
SYS_Random_34:
              04a7 010e  ld   [$0e]       2148  ld([frameCount])                #15
              04a8 6107  xora [$07]       2149  xora([entropy+1])               #16
              04a9 610f  xora [$0f]       2150  xora([serialRaw])               #17
              04aa 8106  adda [$06]       2151  adda([entropy+0])               #18
              04ab c206  st   [$06]       2152  st([entropy+0])                 #19
              04ac c218  st   [$18]       2153  st([vAC+0])                     #20
              04ad 8108  adda [$08]       2154  adda([entropy+2])               #21
              04ae c208  st   [$08]       2155  st([entropy+2])                 #22
              04af e8b2  blt  .sysRnd0    2156  bmi('.sysRnd0')                 #23
              04b0 fcb3  bra  .sysRnd1    2157  bra('.sysRnd1')                 #24
              04b1 6053  xora $53         2158  xora(64+16+2+1)                 #25
                                          2159  label('.sysRnd0')
.sysRnd0:     04b2 606c  xora $6c         2160  xora(64+32+8+4)                 #25
                                          2161  label('.sysRnd1')
.sysRnd1:     04b3 8107  adda [$07]       2162  adda([entropy+1])               #26
              04b4 c207  st   [$07]       2163  st([entropy+1])                 #27
              04b5 c219  st   [$19]       2164  st([vAC+1])                     #28
              04b6 1403  ld   $03,y       2165  ld(hi('REENTER'),Y)             #29
              04b7 e0cb  jmp  y,$cb       2166  jmp(Y,'REENTER')                #30
              04b8 00ef  ld   $ef         2167  ld(-34//2)                      #31
                                          2168
                                          2169  label('SYS_LSRW7_30')
SYS_LSRW7_30: 04b9 0118  ld   [$18]       2170  ld([vAC])                       #15
              04ba 3080  anda $80,x       2171  anda(128,X)                     #16
              04bb 0119  ld   [$19]       2172  ld([vAC+1])                     #17
              04bc 8200  adda ac          2173  adda(AC)                        #18
              04bd 4500  ora  [x]         2174  ora([X])                        #19
              04be c218  st   [$18]       2175  st([vAC])                       #20
              04bf 0119  ld   [$19]       2176  ld([vAC+1])                     #21
              04c0 3080  anda $80,x       2177  anda(128,X)                     #22
              04c1 0500  ld   [x]         2178  ld([X])                         #23
              04c2 c219  st   [$19]       2179  st([vAC+1])                     #24
              04c3 1403  ld   $03,y       2180  ld(hi('REENTER'),Y)             #25
              04c4 e0cb  jmp  y,$cb       2181  jmp(Y,'REENTER')                #26
              04c5 00f1  ld   $f1         2182  ld(-30//2)                      #27
                                          2183
                                          2184  label('SYS_LSRW8_24')
SYS_LSRW8_24: 04c6 0119  ld   [$19]       2185  ld([vAC+1])                     #15
              04c7 c218  st   [$18]       2186  st([vAC])                       #16
              04c8 0000  ld   $00         2187  ld(0)                           #17
              04c9 c219  st   [$19]       2188  st([vAC+1])                     #18
              04ca 1403  ld   $03,y       2189  ld(hi('REENTER'),Y)             #19
              04cb e0cb  jmp  y,$cb       2190  jmp(Y,'REENTER')                #20
              04cc 00f4  ld   $f4         2191  ld(-24//2)                      #21
                                          2192
                                          2193  label('SYS_LSLW8_24')
SYS_LSLW8_24: 04cd 0118  ld   [$18]       2194  ld([vAC])                       #15
              04ce c219  st   [$19]       2195  st([vAC+1])                     #16
              04cf 0000  ld   $00         2196  ld(0)                           #17
              04d0 c218  st   [$18]       2197  st([vAC])                       #18
              04d1 1403  ld   $03,y       2198  ld(hi('REENTER'),Y)             #19
              04d2 e0cb  jmp  y,$cb       2199  jmp(Y,'REENTER')                #20
              04d3 00f4  ld   $f4         2200  ld(-24//2)                      #21
                                          2201
                                          2202  #-----------------------------------------------------------------------
                                          2203  # Extension SYS_Draw4_30
                                          2204  #-----------------------------------------------------------------------
                                          2205
                                          2206  # Draw 4 pixels on screen, horizontally next to each other
                                          2207  #
                                          2208  # Variables:
                                          2209  #       sysArgs[0:3]    Pixels
                                          2210  #       sysArgs[4:5]    Position on screen
                                          2211
                                          2212  label('SYS_Draw4_30')
SYS_Draw4_30: 04d4 1128  ld   [$28],x     2213  ld([sysArgs+4],X)               #15
              04d5 1529  ld   [$29],y     2214  ld([sysArgs+5],Y)               #16
              04d6 0124  ld   [$24]       2215  ld([sysArgs+0])                 #17
              04d7 de00  st   [y,x++]     2216  st([Y,Xpp])                     #18
              04d8 0125  ld   [$25]       2217  ld([sysArgs+1])                 #19
              04d9 de00  st   [y,x++]     2218  st([Y,Xpp])                     #20
              04da 0126  ld   [$26]       2219  ld([sysArgs+2])                 #21
              04db de00  st   [y,x++]     2220  st([Y,Xpp])                     #22
              04dc 0127  ld   [$27]       2221  ld([sysArgs+3])                 #23
              04dd de00  st   [y,x++]     2222  st([Y,Xpp])                     #24
              04de 1403  ld   $03,y       2223  ld(hi('REENTER'),Y)             #25
              04df e0cb  jmp  y,$cb       2224  jmp(Y,'REENTER')                #26
              04e0 00f1  ld   $f1         2225  ld(-30//2)                      #27
                                          2226
                                          2227  #-----------------------------------------------------------------------
                                          2228  # Extension SYS_VDrawBits_134:
                                          2229  #-----------------------------------------------------------------------
                                          2230
                                          2231  # Draw slice of a character, 8 pixels vertical
                                          2232  #
                                          2233  # Variables:
                                          2234  #       sysArgs[0]      Color 0 (background)
                                          2235  #       sysArgs[1]      Color 1 (pen)
                                          2236  #       sysArgs[2]      8 bits, highest bit first (destructive)
                                          2237  #       sysArgs[4:5]    Position on screen
                                          2238
                                          2239  label('SYS_VDrawBits_134')
SYS_VDrawBits_134:
              04e1 1128  ld   [$28],x     2240  ld([sysArgs+4],X)               #15
              04e2 0000  ld   $00         2241  ld(0)                           #16
                                          2242  label('.vdb0')
.vdb0:        04e3 c21d  st   [$1d]       2243  st([vTmp])                      #17+i*14
              04e4 9529  adda [$29],y     2244  adda([sysArgs+5],Y)             #18+i*14 Y=[sysPos+1]+vTmp
              04e5 0126  ld   [$26]       2245  ld([sysArgs+2])                 #19+i*14 Select color
              04e6 e8e9  blt  .vdb1       2246  bmi('.vdb1')                    #20+i*14
              04e7 fcea  bra  .vdb2       2247  bra('.vdb2')                    #21+i*14
              04e8 0124  ld   [$24]       2248  ld([sysArgs+0])                 #22+i*14
                                          2249  label('.vdb1')
.vdb1:        04e9 0125  ld   [$25]       2250  ld([sysArgs+1])                 #22+i*14
                                          2251  label('.vdb2')
.vdb2:        04ea ce00  st   [y,x]       2252  st([Y,X])                       #23+i*14 Draw pixel
              04eb 0126  ld   [$26]       2253  ld([sysArgs+2])                 #24+i*14 Shift byte left
              04ec 8200  adda ac          2254  adda(AC)                        #25+i*14
              04ed c226  st   [$26]       2255  st([sysArgs+2])                 #26+i*14
              04ee 011d  ld   [$1d]       2256  ld([vTmp])                      #27+i*14 Loop counter
              04ef a007  suba $07         2257  suba(7)                         #28+i*14
              04f0 ece3  bne  .vdb0       2258  bne('.vdb0')                    #29+i*14
              04f1 8008  adda $08         2259  adda(8)                         #30+i*14
              04f2 1403  ld   $03,y       2260  ld(hi('REENTER'),Y)             #129
              04f3 e0cb  jmp  y,$cb       2261  jmp(Y,'REENTER')                #130
              04f4 00bd  ld   $bd         2262  ld(-134//2)                     #131
                                          2263
                                          2264  #-----------------------------------------------------------------------
                                          2265
                                          2266  # INC implementation
                                          2267  label('inc#14')
inc#14:       04f5 8500  adda [x]         2268  adda([X])                       #14
              04f6 c600  st   [x]         2269  st([X])                         #15
              04f7 1403  ld   $03,y       2270  ld(hi('NEXTY'),Y)               #16
              04f8 e000  jmp  y,$00       2271  jmp(Y,'NEXTY')                  #17
              04f9 00f6  ld   $f6         2272  ld(-20//2)                      #18
                                          2273
                                          2274  #-----------------------------------------------------------------------
                                          2275  #
                                          2276  #  $0500 ROM page 5-6: Shift table and code
                                          2277  #
                                          2278  #-----------------------------------------------------------------------
                                          2279
              04fa 0200  nop              2280  align(0x100, size=0x200)
              04fb 0200  nop
              04fc 0200  nop
              * 6 times
                                          2281
                                          2282  # Lookup table for i>>n, with n in 1..6
                                          2283  # Indexing ix = i & ~b | (b-1), where b = 1<<(n-1)
                                          2284  #       ...
                                          2285  #       ld   <.ret
                                          2286  #       st   [vTmp]
                                          2287  #       ld   >shiftTable,y
                                          2288  #       <calculate ix>
                                          2289  #       jmp  y,ac
                                          2290  #       bra  $ff
                                          2291  # .ret: ...
                                          2292  #
                                          2293  # i >> 7 can be always be done with RAM: [i&128]
                                          2294  #       ...
                                          2295  #       anda $80,x
                                          2296  #       ld   [x]
                                          2297  #       ...
                                          2298
                                          2299  label('shiftTable')
                                          2300  shiftTable = pc()
                                          2301
                                          2302  for ix in range(255):
                                          2303    for n in range(1,7): # Find first zero
                                          2304      if ~ix & (1 << (n-1)):
                                          2305        break
                                          2306    pattern = ['x' if i<n else '1' if ix&(1<<i) else '0' for i in range(8)]
                                          2307    ld(ix>>n); C('0b%s >> %d' % (''.join(reversed(pattern)), n))
shiftTable:   0500 0000  ld   $00         ;0b0000000x >> 1
              0501 0000  ld   $00         ;0b000000xx >> 2
              0502 0001  ld   $01         ;0b0000001x >> 1
              0503 0000  ld   $00         ;0b00000xxx >> 3
              0504 0002  ld   $02         ;0b0000010x >> 1
              0505 0001  ld   $01         ;0b000001xx >> 2
              0506 0003  ld   $03         ;0b0000011x >> 1
              0507 0000  ld   $00         ;0b0000xxxx >> 4
              0508 0004  ld   $04         ;0b0000100x >> 1
              0509 0002  ld   $02         ;0b000010xx >> 2
              050a 0005  ld   $05         ;0b0000101x >> 1
              050b 0001  ld   $01         ;0b00001xxx >> 3
              050c 0006  ld   $06         ;0b0000110x >> 1
              050d 0003  ld   $03         ;0b000011xx >> 2
              050e 0007  ld   $07         ;0b0000111x >> 1
              050f 0000  ld   $00         ;0b000xxxxx >> 5
              0510 0008  ld   $08         ;0b0001000x >> 1
              0511 0004  ld   $04         ;0b000100xx >> 2
              0512 0009  ld   $09         ;0b0001001x >> 1
              0513 0002  ld   $02         ;0b00010xxx >> 3
              0514 000a  ld   $0a         ;0b0001010x >> 1
              0515 0005  ld   $05         ;0b000101xx >> 2
              0516 000b  ld   $0b         ;0b0001011x >> 1
              0517 0001  ld   $01         ;0b0001xxxx >> 4
              0518 000c  ld   $0c         ;0b0001100x >> 1
              0519 0006  ld   $06         ;0b000110xx >> 2
              051a 000d  ld   $0d         ;0b0001101x >> 1
              051b 0003  ld   $03         ;0b00011xxx >> 3
              051c 000e  ld   $0e         ;0b0001110x >> 1
              051d 0007  ld   $07         ;0b000111xx >> 2
              051e 000f  ld   $0f         ;0b0001111x >> 1
              051f 0000  ld   $00         ;0b00xxxxxx >> 6
              0520 0010  ld   $10         ;0b0010000x >> 1
              0521 0008  ld   $08         ;0b001000xx >> 2
              0522 0011  ld   $11         ;0b0010001x >> 1
              0523 0004  ld   $04         ;0b00100xxx >> 3
              0524 0012  ld   $12         ;0b0010010x >> 1
              0525 0009  ld   $09         ;0b001001xx >> 2
              0526 0013  ld   $13         ;0b0010011x >> 1
              0527 0002  ld   $02         ;0b0010xxxx >> 4
              0528 0014  ld   $14         ;0b0010100x >> 1
              0529 000a  ld   $0a         ;0b001010xx >> 2
              052a 0015  ld   $15         ;0b0010101x >> 1
              052b 0005  ld   $05         ;0b00101xxx >> 3
              052c 0016  ld   $16         ;0b0010110x >> 1
              052d 000b  ld   $0b         ;0b001011xx >> 2
              052e 0017  ld   $17         ;0b0010111x >> 1
              052f 0001  ld   $01         ;0b001xxxxx >> 5
              0530 0018  ld   $18         ;0b0011000x >> 1
              0531 000c  ld   $0c         ;0b001100xx >> 2
              0532 0019  ld   $19         ;0b0011001x >> 1
              0533 0006  ld   $06         ;0b00110xxx >> 3
              0534 001a  ld   $1a         ;0b0011010x >> 1
              0535 000d  ld   $0d         ;0b001101xx >> 2
              0536 001b  ld   $1b         ;0b0011011x >> 1
              0537 0003  ld   $03         ;0b0011xxxx >> 4
              0538 001c  ld   $1c         ;0b0011100x >> 1
              0539 000e  ld   $0e         ;0b001110xx >> 2
              053a 001d  ld   $1d         ;0b0011101x >> 1
              053b 0007  ld   $07         ;0b00111xxx >> 3
              053c 001e  ld   $1e         ;0b0011110x >> 1
              053d 000f  ld   $0f         ;0b001111xx >> 2
              053e 001f  ld   $1f         ;0b0011111x >> 1
              053f 0000  ld   $00         ;0b00xxxxxx >> 6
              0540 0020  ld   $20         ;0b0100000x >> 1
              0541 0010  ld   $10         ;0b010000xx >> 2
              0542 0021  ld   $21         ;0b0100001x >> 1
              0543 0008  ld   $08         ;0b01000xxx >> 3
              0544 0022  ld   $22         ;0b0100010x >> 1
              0545 0011  ld   $11         ;0b010001xx >> 2
              0546 0023  ld   $23         ;0b0100011x >> 1
              0547 0004  ld   $04         ;0b0100xxxx >> 4
              0548 0024  ld   $24         ;0b0100100x >> 1
              0549 0012  ld   $12         ;0b010010xx >> 2
              054a 0025  ld   $25         ;0b0100101x >> 1
              054b 0009  ld   $09         ;0b01001xxx >> 3
              054c 0026  ld   $26         ;0b0100110x >> 1
              054d 0013  ld   $13         ;0b010011xx >> 2
              054e 0027  ld   $27         ;0b0100111x >> 1
              054f 0002  ld   $02         ;0b010xxxxx >> 5
              0550 0028  ld   $28         ;0b0101000x >> 1
              0551 0014  ld   $14         ;0b010100xx >> 2
              0552 0029  ld   $29         ;0b0101001x >> 1
              0553 000a  ld   $0a         ;0b01010xxx >> 3
              0554 002a  ld   $2a         ;0b0101010x >> 1
              0555 0015  ld   $15         ;0b010101xx >> 2
              0556 002b  ld   $2b         ;0b0101011x >> 1
              0557 0005  ld   $05         ;0b0101xxxx >> 4
              0558 002c  ld   $2c         ;0b0101100x >> 1
              0559 0016  ld   $16         ;0b010110xx >> 2
              055a 002d  ld   $2d         ;0b0101101x >> 1
              055b 000b  ld   $0b         ;0b01011xxx >> 3
              055c 002e  ld   $2e         ;0b0101110x >> 1
              055d 0017  ld   $17         ;0b010111xx >> 2
              055e 002f  ld   $2f         ;0b0101111x >> 1
              055f 0001  ld   $01         ;0b01xxxxxx >> 6
              0560 0030  ld   $30         ;0b0110000x >> 1
              0561 0018  ld   $18         ;0b011000xx >> 2
              0562 0031  ld   $31         ;0b0110001x >> 1
              0563 000c  ld   $0c         ;0b01100xxx >> 3
              0564 0032  ld   $32         ;0b0110010x >> 1
              0565 0019  ld   $19         ;0b011001xx >> 2
              0566 0033  ld   $33         ;0b0110011x >> 1
              0567 0006  ld   $06         ;0b0110xxxx >> 4
              0568 0034  ld   $34         ;0b0110100x >> 1
              0569 001a  ld   $1a         ;0b011010xx >> 2
              056a 0035  ld   $35         ;0b0110101x >> 1
              056b 000d  ld   $0d         ;0b01101xxx >> 3
              056c 0036  ld   $36         ;0b0110110x >> 1
              056d 001b  ld   $1b         ;0b011011xx >> 2
              056e 0037  ld   $37         ;0b0110111x >> 1
              056f 0003  ld   $03         ;0b011xxxxx >> 5
              0570 0038  ld   $38         ;0b0111000x >> 1
              0571 001c  ld   $1c         ;0b011100xx >> 2
              0572 0039  ld   $39         ;0b0111001x >> 1
              0573 000e  ld   $0e         ;0b01110xxx >> 3
              0574 003a  ld   $3a         ;0b0111010x >> 1
              0575 001d  ld   $1d         ;0b011101xx >> 2
              0576 003b  ld   $3b         ;0b0111011x >> 1
              0577 0007  ld   $07         ;0b0111xxxx >> 4
              0578 003c  ld   $3c         ;0b0111100x >> 1
              0579 001e  ld   $1e         ;0b011110xx >> 2
              057a 003d  ld   $3d         ;0b0111101x >> 1
              057b 000f  ld   $0f         ;0b01111xxx >> 3
              057c 003e  ld   $3e         ;0b0111110x >> 1
              057d 001f  ld   $1f         ;0b011111xx >> 2
              057e 003f  ld   $3f         ;0b0111111x >> 1
              057f 0001  ld   $01         ;0b01xxxxxx >> 6
              0580 0040  ld   $40         ;0b1000000x >> 1
              0581 0020  ld   $20         ;0b100000xx >> 2
              0582 0041  ld   $41         ;0b1000001x >> 1
              0583 0010  ld   $10         ;0b10000xxx >> 3
              0584 0042  ld   $42         ;0b1000010x >> 1
              0585 0021  ld   $21         ;0b100001xx >> 2
              0586 0043  ld   $43         ;0b1000011x >> 1
              0587 0008  ld   $08         ;0b1000xxxx >> 4
              0588 0044  ld   $44         ;0b1000100x >> 1
              0589 0022  ld   $22         ;0b100010xx >> 2
              058a 0045  ld   $45         ;0b1000101x >> 1
              058b 0011  ld   $11         ;0b10001xxx >> 3
              058c 0046  ld   $46         ;0b1000110x >> 1
              058d 0023  ld   $23         ;0b100011xx >> 2
              058e 0047  ld   $47         ;0b1000111x >> 1
              058f 0004  ld   $04         ;0b100xxxxx >> 5
              0590 0048  ld   $48         ;0b1001000x >> 1
              0591 0024  ld   $24         ;0b100100xx >> 2
              0592 0049  ld   $49         ;0b1001001x >> 1
              0593 0012  ld   $12         ;0b10010xxx >> 3
              0594 004a  ld   $4a         ;0b1001010x >> 1
              0595 0025  ld   $25         ;0b100101xx >> 2
              0596 004b  ld   $4b         ;0b1001011x >> 1
              0597 0009  ld   $09         ;0b1001xxxx >> 4
              0598 004c  ld   $4c         ;0b1001100x >> 1
              0599 0026  ld   $26         ;0b100110xx >> 2
              059a 004d  ld   $4d         ;0b1001101x >> 1
              059b 0013  ld   $13         ;0b10011xxx >> 3
              059c 004e  ld   $4e         ;0b1001110x >> 1
              059d 0027  ld   $27         ;0b100111xx >> 2
              059e 004f  ld   $4f         ;0b1001111x >> 1
              059f 0002  ld   $02         ;0b10xxxxxx >> 6
              05a0 0050  ld   $50         ;0b1010000x >> 1
              05a1 0028  ld   $28         ;0b101000xx >> 2
              05a2 0051  ld   $51         ;0b1010001x >> 1
              05a3 0014  ld   $14         ;0b10100xxx >> 3
              05a4 0052  ld   $52         ;0b1010010x >> 1
              05a5 0029  ld   $29         ;0b101001xx >> 2
              05a6 0053  ld   $53         ;0b1010011x >> 1
              05a7 000a  ld   $0a         ;0b1010xxxx >> 4
              05a8 0054  ld   $54         ;0b1010100x >> 1
              05a9 002a  ld   $2a         ;0b101010xx >> 2
              05aa 0055  ld   $55         ;0b1010101x >> 1
              05ab 0015  ld   $15         ;0b10101xxx >> 3
              05ac 0056  ld   $56         ;0b1010110x >> 1
              05ad 002b  ld   $2b         ;0b101011xx >> 2
              05ae 0057  ld   $57         ;0b1010111x >> 1
              05af 0005  ld   $05         ;0b101xxxxx >> 5
              05b0 0058  ld   $58         ;0b1011000x >> 1
              05b1 002c  ld   $2c         ;0b101100xx >> 2
              05b2 0059  ld   $59         ;0b1011001x >> 1
              05b3 0016  ld   $16         ;0b10110xxx >> 3
              05b4 005a  ld   $5a         ;0b1011010x >> 1
              05b5 002d  ld   $2d         ;0b101101xx >> 2
              05b6 005b  ld   $5b         ;0b1011011x >> 1
              05b7 000b  ld   $0b         ;0b1011xxxx >> 4
              05b8 005c  ld   $5c         ;0b1011100x >> 1
              05b9 002e  ld   $2e         ;0b101110xx >> 2
              05ba 005d  ld   $5d         ;0b1011101x >> 1
              05bb 0017  ld   $17         ;0b10111xxx >> 3
              05bc 005e  ld   $5e         ;0b1011110x >> 1
              05bd 002f  ld   $2f         ;0b101111xx >> 2
              05be 005f  ld   $5f         ;0b1011111x >> 1
              05bf 0002  ld   $02         ;0b10xxxxxx >> 6
              05c0 0060  ld   $60         ;0b1100000x >> 1
              05c1 0030  ld   $30         ;0b110000xx >> 2
              05c2 0061  ld   $61         ;0b1100001x >> 1
              05c3 0018  ld   $18         ;0b11000xxx >> 3
              05c4 0062  ld   $62         ;0b1100010x >> 1
              05c5 0031  ld   $31         ;0b110001xx >> 2
              05c6 0063  ld   $63         ;0b1100011x >> 1
              05c7 000c  ld   $0c         ;0b1100xxxx >> 4
              05c8 0064  ld   $64         ;0b1100100x >> 1
              05c9 0032  ld   $32         ;0b110010xx >> 2
              05ca 0065  ld   $65         ;0b1100101x >> 1
              05cb 0019  ld   $19         ;0b11001xxx >> 3
              05cc 0066  ld   $66         ;0b1100110x >> 1
              05cd 0033  ld   $33         ;0b110011xx >> 2
              05ce 0067  ld   $67         ;0b1100111x >> 1
              05cf 0006  ld   $06         ;0b110xxxxx >> 5
              05d0 0068  ld   $68         ;0b1101000x >> 1
              05d1 0034  ld   $34         ;0b110100xx >> 2
              05d2 0069  ld   $69         ;0b1101001x >> 1
              05d3 001a  ld   $1a         ;0b11010xxx >> 3
              05d4 006a  ld   $6a         ;0b1101010x >> 1
              05d5 0035  ld   $35         ;0b110101xx >> 2
              05d6 006b  ld   $6b         ;0b1101011x >> 1
              05d7 000d  ld   $0d         ;0b1101xxxx >> 4
              05d8 006c  ld   $6c         ;0b1101100x >> 1
              05d9 0036  ld   $36         ;0b110110xx >> 2
              05da 006d  ld   $6d         ;0b1101101x >> 1
              05db 001b  ld   $1b         ;0b11011xxx >> 3
              05dc 006e  ld   $6e         ;0b1101110x >> 1
              05dd 0037  ld   $37         ;0b110111xx >> 2
              05de 006f  ld   $6f         ;0b1101111x >> 1
              05df 0003  ld   $03         ;0b11xxxxxx >> 6
              05e0 0070  ld   $70         ;0b1110000x >> 1
              05e1 0038  ld   $38         ;0b111000xx >> 2
              05e2 0071  ld   $71         ;0b1110001x >> 1
              05e3 001c  ld   $1c         ;0b11100xxx >> 3
              05e4 0072  ld   $72         ;0b1110010x >> 1
              05e5 0039  ld   $39         ;0b111001xx >> 2
              05e6 0073  ld   $73         ;0b1110011x >> 1
              05e7 000e  ld   $0e         ;0b1110xxxx >> 4
              05e8 0074  ld   $74         ;0b1110100x >> 1
              05e9 003a  ld   $3a         ;0b111010xx >> 2
              05ea 0075  ld   $75         ;0b1110101x >> 1
              05eb 001d  ld   $1d         ;0b11101xxx >> 3
              05ec 0076  ld   $76         ;0b1110110x >> 1
              05ed 003b  ld   $3b         ;0b111011xx >> 2
              05ee 0077  ld   $77         ;0b1110111x >> 1
              05ef 0007  ld   $07         ;0b111xxxxx >> 5
              05f0 0078  ld   $78         ;0b1111000x >> 1
              05f1 003c  ld   $3c         ;0b111100xx >> 2
              05f2 0079  ld   $79         ;0b1111001x >> 1
              05f3 001e  ld   $1e         ;0b11110xxx >> 3
              05f4 007a  ld   $7a         ;0b1111010x >> 1
              05f5 003d  ld   $3d         ;0b111101xx >> 2
              05f6 007b  ld   $7b         ;0b1111011x >> 1
              05f7 000f  ld   $0f         ;0b1111xxxx >> 4
              05f8 007c  ld   $7c         ;0b1111100x >> 1
              05f9 003e  ld   $3e         ;0b111110xx >> 2
              05fa 007d  ld   $7d         ;0b1111101x >> 1
              05fb 001f  ld   $1f         ;0b11111xxx >> 3
              05fc 007e  ld   $7e         ;0b1111110x >> 1
              05fd 003f  ld   $3f         ;0b111111xx >> 2
              05fe 007f  ld   $7f         ;0b1111111x >> 1
                                          2308
                                          2309  assert pc()&255 == 255
              05ff fd1d  bra  [$1d]       2310  bra([vTmp])                     # Jumps back into next page
                                          2311
                                          2312  label('SYS_LSRW1_48')
                                          2313  assert pc()&255 == 0            # First instruction on this page *must* be a nop
SYS_LSRW1_48: 0600 0200  nop              2314  nop()                           #15
              0601 1405  ld   $05,y       2315  ld(hi('shiftTable'),Y)          #16 Logical shift right 1 bit (X >> 1)
              0602 0008  ld   $08         2316  ld('.sysLsrw1a')                #17 Shift low byte
              0603 c21d  st   [$1d]       2317  st([vTmp])                      #18
              0604 0118  ld   [$18]       2318  ld([vAC])                       #19
              0605 20fe  anda $fe         2319  anda(0b11111110)                #20
              0606 e200  jmp  y,ac        2320  jmp(Y,AC)                       #21
              0607 fcff  bra  $ff         2321  bra(255)                        #22 bra shiftTable+255
                                          2322  label('.sysLsrw1a')
.sysLsrw1a:   0608 c218  st   [$18]       2323  st([vAC])                       #26
              0609 0119  ld   [$19]       2324  ld([vAC+1])                     #27 Transfer bit 8
              060a 2001  anda $01         2325  anda(1)                         #28
              060b 807f  adda $7f         2326  adda(127)                       #29
              060c 2080  anda $80         2327  anda(128)                       #30
              060d 4118  ora  [$18]       2328  ora([vAC])                      #31
              060e c218  st   [$18]       2329  st([vAC])                       #32
              060f 0015  ld   $15         2330  ld('.sysLsrw1b')                #33 Shift high byte
              0610 c21d  st   [$1d]       2331  st([vTmp])                      #34
              0611 0119  ld   [$19]       2332  ld([vAC+1])                     #35
              0612 20fe  anda $fe         2333  anda(0b11111110)                #36
              0613 e200  jmp  y,ac        2334  jmp(Y,AC)                       #37
              0614 fcff  bra  $ff         2335  bra(255)                        #38 bra shiftTable+255
                                          2336  label('.sysLsrw1b')
.sysLsrw1b:   0615 c219  st   [$19]       2337  st([vAC+1])                     #42
              0616 1403  ld   $03,y       2338  ld(hi('REENTER'),Y)             #43
              0617 e0cb  jmp  y,$cb       2339  jmp(Y,'REENTER')                #44
              0618 00e8  ld   $e8         2340  ld(-48//2)                      #45
                                          2341
                                          2342  label('SYS_LSRW2_52')
SYS_LSRW2_52: 0619 1405  ld   $05,y       2343  ld(hi('shiftTable'),Y)          #15 Logical shift right 2 bit (X >> 2)
              061a 0021  ld   $21         2344  ld('.sysLsrw2a')                #16 Shift low byte
              061b c21d  st   [$1d]       2345  st([vTmp])                      #17
              061c 0118  ld   [$18]       2346  ld([vAC])                       #18
              061d 20fc  anda $fc         2347  anda(0b11111100)                #19
              061e 4001  ora  $01         2348  ora( 0b00000001)                #20
              061f e200  jmp  y,ac        2349  jmp(Y,AC)                       #21
              0620 fcff  bra  $ff         2350  bra(255)                        #22 bra shiftTable+255
                                          2351  label('.sysLsrw2a')
.sysLsrw2a:   0621 c218  st   [$18]       2352  st([vAC])                       #26
              0622 0119  ld   [$19]       2353  ld([vAC+1])                     #27 Transfer bit 8:9
              0623 8200  adda ac          2354  adda(AC)                        #28
              0624 8200  adda ac          2355  adda(AC)                        #29
              0625 8200  adda ac          2356  adda(AC)                        #30
              0626 8200  adda ac          2357  adda(AC)                        #31
              0627 8200  adda ac          2358  adda(AC)                        #32
              0628 8200  adda ac          2359  adda(AC)                        #33
              0629 4118  ora  [$18]       2360  ora([vAC])                      #34
              062a c218  st   [$18]       2361  st([vAC])                       #35
              062b 0032  ld   $32         2362  ld('.sysLsrw2b')                #36 Shift high byte
              062c c21d  st   [$1d]       2363  st([vTmp])                      #37
              062d 0119  ld   [$19]       2364  ld([vAC+1])                     #38
              062e 20fc  anda $fc         2365  anda(0b11111100)                #39
              062f 4001  ora  $01         2366  ora( 0b00000001)                #40
              0630 e200  jmp  y,ac        2367  jmp(Y,AC)                       #41
              0631 fcff  bra  $ff         2368  bra(255)                        #42 bra shiftTable+255
                                          2369  label('.sysLsrw2b')
.sysLsrw2b:   0632 c219  st   [$19]       2370  st([vAC+1])                     #46
              0633 1403  ld   $03,y       2371  ld(hi('REENTER'),Y)             #47
              0634 e0cb  jmp  y,$cb       2372  jmp(Y,'REENTER')                #48
              0635 00e6  ld   $e6         2373  ld(-52//2)                      #49
                                          2374
                                          2375  label('SYS_LSRW3_52')
SYS_LSRW3_52: 0636 1405  ld   $05,y       2376  ld(hi('shiftTable'),Y)          #15 Logical shift right 3 bit (X >> 3)
              0637 003e  ld   $3e         2377  ld('.sysLsrw3a')                #16 Shift low byte
              0638 c21d  st   [$1d]       2378  st([vTmp])                      #17
              0639 0118  ld   [$18]       2379  ld([vAC])                       #18
              063a 20f8  anda $f8         2380  anda(0b11111000)                #19
              063b 4003  ora  $03         2381  ora( 0b00000011)                #20
              063c e200  jmp  y,ac        2382  jmp(Y,AC)                       #21
              063d fcff  bra  $ff         2383  bra(255)                        #22 bra shiftTable+255
                                          2384  label('.sysLsrw3a')
.sysLsrw3a:   063e c218  st   [$18]       2385  st([vAC])                       #26
              063f 0119  ld   [$19]       2386  ld([vAC+1])                     #27 Transfer bit 8:10
              0640 8200  adda ac          2387  adda(AC)                        #28
              0641 8200  adda ac          2388  adda(AC)                        #29
              0642 8200  adda ac          2389  adda(AC)                        #30
              0643 8200  adda ac          2390  adda(AC)                        #31
              0644 8200  adda ac          2391  adda(AC)                        #32
              0645 4118  ora  [$18]       2392  ora([vAC])                      #33
              0646 c218  st   [$18]       2393  st([vAC])                       #34
              0647 004e  ld   $4e         2394  ld('.sysLsrw3b')                #35 Shift high byte
              0648 c21d  st   [$1d]       2395  st([vTmp])                      #36
              0649 0119  ld   [$19]       2396  ld([vAC+1])                     #37
              064a 20f8  anda $f8         2397  anda(0b11111000)                #38
              064b 4003  ora  $03         2398  ora( 0b00000011)                #39
              064c e200  jmp  y,ac        2399  jmp(Y,AC)                       #40
              064d fcff  bra  $ff         2400  bra(255)                        #41 bra shiftTable+255
                                          2401  label('.sysLsrw3b')
.sysLsrw3b:   064e c219  st   [$19]       2402  st([vAC+1])                     #45
              064f 00e6  ld   $e6         2403  ld(-52//2)                      #46
              0650 1403  ld   $03,y       2404  ld(hi('REENTER'),Y)             #47
              0651 e0cb  jmp  y,$cb       2405  jmp(Y,'REENTER')                #48
                                          2406  #nop()                          #49
                                          2407
                                          2408  label('SYS_LSRW4_50')
SYS_LSRW4_50: 0652 1405  ld   $05,y       2409  ld(hi('shiftTable'),Y)          #15,49 Logical shift right 4 bit (X >> 4)
              0653 005a  ld   $5a         2410  ld('.sysLsrw4a')                #16 Shift low byte
              0654 c21d  st   [$1d]       2411  st([vTmp])                      #17
              0655 0118  ld   [$18]       2412  ld([vAC])                       #18
              0656 20f0  anda $f0         2413  anda(0b11110000)                #19
              0657 4007  ora  $07         2414  ora( 0b00000111)                #20
              0658 e200  jmp  y,ac        2415  jmp(Y,AC)                       #21
              0659 fcff  bra  $ff         2416  bra(255)                        #22 bra shiftTable+255
                                          2417  label('.sysLsrw4a')
.sysLsrw4a:   065a c218  st   [$18]       2418  st([vAC])                       #26
              065b 0119  ld   [$19]       2419  ld([vAC+1])                     #27 Transfer bit 8:11
              065c 8200  adda ac          2420  adda(AC)                        #28
              065d 8200  adda ac          2421  adda(AC)                        #29
              065e 8200  adda ac          2422  adda(AC)                        #30
              065f 8200  adda ac          2423  adda(AC)                        #31
              0660 4118  ora  [$18]       2424  ora([vAC])                      #32
              0661 c218  st   [$18]       2425  st([vAC])                       #33
              0662 0069  ld   $69         2426  ld('.sysLsrw4b')                #34 Shift high byte'
              0663 c21d  st   [$1d]       2427  st([vTmp])                      #35
              0664 0119  ld   [$19]       2428  ld([vAC+1])                     #36
              0665 20f0  anda $f0         2429  anda(0b11110000)                #37
              0666 4007  ora  $07         2430  ora( 0b00000111)                #38
              0667 e200  jmp  y,ac        2431  jmp(Y,AC)                       #39
              0668 fcff  bra  $ff         2432  bra(255)                        #40 bra shiftTable+255
                                          2433  label('.sysLsrw4b')
.sysLsrw4b:   0669 c219  st   [$19]       2434  st([vAC+1])                     #44
              066a 1403  ld   $03,y       2435  ld(hi('REENTER'),Y)             #45
              066b e0cb  jmp  y,$cb       2436  jmp(Y,'REENTER')                #46
              066c 00e7  ld   $e7         2437  ld(-50//2)                      #47
                                          2438
                                          2439  label('SYS_LSRW5_50')
SYS_LSRW5_50: 066d 1405  ld   $05,y       2440  ld(hi('shiftTable'),Y)          #15 Logical shift right 5 bit (X >> 5)
              066e 0075  ld   $75         2441  ld('.sysLsrw5a')                #16 Shift low byte
              066f c21d  st   [$1d]       2442  st([vTmp])                      #17
              0670 0118  ld   [$18]       2443  ld([vAC])                       #18
              0671 20e0  anda $e0         2444  anda(0b11100000)                #19
              0672 400f  ora  $0f         2445  ora( 0b00001111)                #20
              0673 e200  jmp  y,ac        2446  jmp(Y,AC)                       #21
              0674 fcff  bra  $ff         2447  bra(255)                        #22 bra shiftTable+255
                                          2448  label('.sysLsrw5a')
.sysLsrw5a:   0675 c218  st   [$18]       2449  st([vAC])                       #26
              0676 0119  ld   [$19]       2450  ld([vAC+1])                     #27 Transfer bit 8:13
              0677 8200  adda ac          2451  adda(AC)                        #28
              0678 8200  adda ac          2452  adda(AC)                        #29
              0679 8200  adda ac          2453  adda(AC)                        #30
              067a 4118  ora  [$18]       2454  ora([vAC])                      #31
              067b c218  st   [$18]       2455  st([vAC])                       #32
              067c 0083  ld   $83         2456  ld('.sysLsrw5b')                #33 Shift high byte
              067d c21d  st   [$1d]       2457  st([vTmp])                      #34
              067e 0119  ld   [$19]       2458  ld([vAC+1])                     #35
              067f 20e0  anda $e0         2459  anda(0b11100000)                #36
              0680 400f  ora  $0f         2460  ora( 0b00001111)                #37
              0681 e200  jmp  y,ac        2461  jmp(Y,AC)                       #38
              0682 fcff  bra  $ff         2462  bra(255)                        #39 bra shiftTable+255
                                          2463  label('.sysLsrw5b')
.sysLsrw5b:   0683 c219  st   [$19]       2464  st([vAC+1])                     #44
              0684 00e7  ld   $e7         2465  ld(-50//2)                      #45
              0685 1403  ld   $03,y       2466  ld(hi('REENTER'),Y)             #46
              0686 e0cb  jmp  y,$cb       2467  jmp(Y,'REENTER')                #47
                                          2468  #nop()                          #48
                                          2469
                                          2470  label('SYS_LSRW6_48')
SYS_LSRW6_48: 0687 1405  ld   $05,y       2471  ld(hi('shiftTable'),Y)          #15,44 Logical shift right 6 bit (X >> 6)
              0688 008f  ld   $8f         2472  ld('.sysLsrw6a')                #16 Shift low byte
              0689 c21d  st   [$1d]       2473  st([vTmp])                      #17
              068a 0118  ld   [$18]       2474  ld([vAC])                       #18
              068b 20c0  anda $c0         2475  anda(0b11000000)                #19
              068c 401f  ora  $1f         2476  ora( 0b00011111)                #20
              068d e200  jmp  y,ac        2477  jmp(Y,AC)                       #21
              068e fcff  bra  $ff         2478  bra(255)                        #22 bra shiftTable+255
                                          2479  label('.sysLsrw6a')
.sysLsrw6a:   068f c218  st   [$18]       2480  st([vAC])                       #26
              0690 0119  ld   [$19]       2481  ld([vAC+1])                     #27 Transfer bit 8:13
              0691 8200  adda ac          2482  adda(AC)                        #28
              0692 8200  adda ac          2483  adda(AC)                        #29
              0693 4118  ora  [$18]       2484  ora([vAC])                      #30
              0694 c218  st   [$18]       2485  st([vAC])                       #31
              0695 009c  ld   $9c         2486  ld('.sysLsrw6b')                #32 Shift high byte
              0696 c21d  st   [$1d]       2487  st([vTmp])                      #33
              0697 0119  ld   [$19]       2488  ld([vAC+1])                     #34
              0698 20c0  anda $c0         2489  anda(0b11000000)                #35
              0699 401f  ora  $1f         2490  ora( 0b00011111)                #36
              069a e200  jmp  y,ac        2491  jmp(Y,AC)                       #37
              069b fcff  bra  $ff         2492  bra(255)                        #38 bra shiftTable+255
                                          2493  label('.sysLsrw6b')
.sysLsrw6b:   069c c219  st   [$19]       2494  st([vAC+1])                     #42
              069d 1403  ld   $03,y       2495  ld(hi('REENTER'),Y)             #43
              069e e0cb  jmp  y,$cb       2496  jmp(Y,'REENTER')                #44
              069f 00e8  ld   $e8         2497  ld(-48//2)                      #45
                                          2498
                                          2499  label('SYS_LSLW4_46')
SYS_LSLW4_46: 06a0 1405  ld   $05,y       2500  ld(hi('shiftTable'),Y)          #15 Logical shift left 4 bit (X << 4)
              06a1 00ae  ld   $ae         2501  ld('.sysLsrl4')                 #16
              06a2 c21d  st   [$1d]       2502  st([vTmp])                      #17
              06a3 0119  ld   [$19]       2503  ld([vAC+1])                     #18
              06a4 8200  adda ac          2504  adda(AC)                        #19
              06a5 8200  adda ac          2505  adda(AC)                        #20
              06a6 8200  adda ac          2506  adda(AC)                        #21
              06a7 8200  adda ac          2507  adda(AC)                        #22
              06a8 c219  st   [$19]       2508  st([vAC+1])                     #23
              06a9 0118  ld   [$18]       2509  ld([vAC])                       #24
              06aa 20f0  anda $f0         2510  anda(0b11110000)                #25
              06ab 4007  ora  $07         2511  ora( 0b00000111)                #26
              06ac e200  jmp  y,ac        2512  jmp(Y,AC)                       #27
              06ad fcff  bra  $ff         2513  bra(255)                        #28 bra shiftTable+255
                                          2514  label('.sysLsrl4')
.sysLsrl4:    06ae 4119  ora  [$19]       2515  ora([vAC+1])                    #32
              06af c219  st   [$19]       2516  st([vAC+1])                     #33
              06b0 0118  ld   [$18]       2517  ld([vAC])                       #34
              06b1 8200  adda ac          2518  adda(AC)                        #35
              06b2 8200  adda ac          2519  adda(AC)                        #36
              06b3 8200  adda ac          2520  adda(AC)                        #37
              06b4 8200  adda ac          2521  adda(AC)                        #38
              06b5 c218  st   [$18]       2522  st([vAC])                       #39
              06b6 00e9  ld   $e9         2523  ld(-46//2)                      #40
              06b7 1403  ld   $03,y       2524  ld(hi('REENTER'),Y)             #41
              06b8 e0cb  jmp  y,$cb       2525  jmp(Y,'REENTER')                #42
                                          2526  #nop()                          #43
                                          2527
                                          2528  #-----------------------------------------------------------------------
                                          2529  # Extension SYS_Read3_40
                                          2530  #-----------------------------------------------------------------------
                                          2531
                                          2532  # Read 3 consecutive bytes from ROM
                                          2533  #
                                          2534  # Note: This function a bit obsolete, as it has very limited use. It's
                                          2535  #       effectively an application-specific SYS function for the Pictures
                                          2536  #       application from ROM v1. It requires the ROM data be organized
                                          2537  #       with trampoline3a and trampoline3b fragments, and their address
                                          2538  #       in ROM to be known. Better avoid using this.
                                          2539  #
                                          2540  # Variables:
                                          2541  #       sysArgs[0:2]    Bytes (output)
                                          2542  #       sysArgs[6:7]    ROM pointer (input)
                                          2543
                                          2544  label('SYS_Read3_40')
SYS_Read3_40: 06b9 152b  ld   [$2b],y     2545  ld([sysArgs+7],Y)               #15,32
              06ba e079  jmp  y,$79       2546  jmp(Y,128-7)                    #16 trampoline3a
              06bb 012a  ld   [$2a]       2547  ld([sysArgs+6])                 #17
                                          2548  label('txReturn')
txReturn:     06bc c226  st   [$26]       2549  st([sysArgs+2])                 #34
              06bd 1403  ld   $03,y       2550  ld(hi('REENTER'),Y)             #35
              06be e0cb  jmp  y,$cb       2551  jmp(Y,'REENTER')                #36
              06bf 00ec  ld   $ec         2552  ld(-40//2)                      #37
                                          2553
                                          2554  def trampoline3a():
                                          2555    """Read 3 bytes from ROM page"""
                                          2556    while pc()&255 < 128-7:
                                          2557      nop()
                                          2558    bra(AC)                       #18
                                          2559    C('Trampoline for page $%02x00 reading (entry)' % (pc()>>8))
                                          2560    bra(123)                      #19
                                          2561    st([sysArgs+0])               #21
                                          2562    ld([sysArgs+6])               #22
                                          2563    adda(1)                       #23
                                          2564    bra(AC)                       #24
                                          2565    bra(250)                      #25 trampoline3b
                                          2566    align(1, size=0x80)
                                          2567
                                          2568  def trampoline3b():
                                          2569    """Read 3 bytes from ROM page (continue)"""
                                          2570    while pc()&255 < 256-6:
                                          2571      nop()
                                          2572    st([sysArgs+1])               #27
                                          2573    C('Trampoline for page $%02x00 reading (continue)' % (pc()>>8))
                                          2574    ld([sysArgs+6])               #28
                                          2575    adda(2)                       #29
                                          2576    ld(hi('txReturn'),Y)          #30
                                          2577    bra(AC)                       #31
                                          2578    jmp(Y,'txReturn')             #32
                                          2579    align(1, size=0x100)
                                          2580
                                          2581  #-----------------------------------------------------------------------
                                          2582  # Extension SYS_Unpack_56
                                          2583  #-----------------------------------------------------------------------
                                          2584
                                          2585  # Unpack 3 bytes into 4 pixels
                                          2586  #
                                          2587  # Variables:
                                          2588  #       sysArgs[0:2]    Packed bytes (input)
                                          2589  #       sysArgs[0:3]    Pixels (output)
                                          2590
                                          2591  label('SYS_Unpack_56')
SYS_Unpack_56:
              06c0 1407  ld   $07,y       2592  ld(soundTable>>8,Y)             #15
              06c1 0126  ld   [$26]       2593  ld([sysArgs+2])                 #16 a[2]>>2
              06c2 5003  ora  $03,x       2594  ora(0x03,X)                     #17
              06c3 0d00  ld   [y,x]       2595  ld([Y,X])                       #18
              06c4 c227  st   [$27]       2596  st([sysArgs+3])                 #19 -> Pixel 3
                                          2597
              06c5 0126  ld   [$26]       2598  ld([sysArgs+2])                 #20 (a[2]&3)<<4
              06c6 2003  anda $03         2599  anda(0x03)                      #21
              06c7 8200  adda ac          2600  adda(AC)                        #22
              06c8 8200  adda ac          2601  adda(AC)                        #23
              06c9 8200  adda ac          2602  adda(AC)                        #24
              06ca 8200  adda ac          2603  adda(AC)                        #25
              06cb c226  st   [$26]       2604  st([sysArgs+2])                 #26
              06cc 0125  ld   [$25]       2605  ld([sysArgs+1])                 #27 | a[1]>>4
              06cd 5003  ora  $03,x       2606  ora(0x03,X)                     #28
              06ce 0d00  ld   [y,x]       2607  ld([Y,X])                       #29
              06cf 5003  ora  $03,x       2608  ora(0x03,X)                     #30
              06d0 0d00  ld   [y,x]       2609  ld([Y,X])                       #31
              06d1 4126  ora  [$26]       2610  ora([sysArgs+2])                #32
              06d2 c226  st   [$26]       2611  st([sysArgs+2])                 #33 -> Pixel 2
                                          2612
              06d3 0125  ld   [$25]       2613  ld([sysArgs+1])                 #34 (a[1]&15)<<2
              06d4 200f  anda $0f         2614  anda(0x0f)                      #35
              06d5 8200  adda ac          2615  adda(AC)                        #36
              06d6 8200  adda ac          2616  adda(AC)                        #37
              06d7 c225  st   [$25]       2617  st([sysArgs+1])                 #38
                                          2618
              06d8 0124  ld   [$24]       2619  ld([sysArgs+0])                 #39 | a[0]>>6
              06d9 5003  ora  $03,x       2620  ora(0x03,X)                     #40
              06da 0d00  ld   [y,x]       2621  ld([Y,X])                       #41
              06db 5003  ora  $03,x       2622  ora(0x03,X)                     #42
              06dc 0d00  ld   [y,x]       2623  ld([Y,X])                       #43
              06dd 5003  ora  $03,x       2624  ora(0x03,X)                     #44
              06de 0d00  ld   [y,x]       2625  ld([Y,X])                       #45
              06df 4125  ora  [$25]       2626  ora([sysArgs+1])                #46
              06e0 c225  st   [$25]       2627  st([sysArgs+1])                 #47 -> Pixel 1
                                          2628
              06e1 0124  ld   [$24]       2629  ld([sysArgs+0])                 #48 a[1]&63
              06e2 203f  anda $3f         2630  anda(0x3f)                      #49
              06e3 c224  st   [$24]       2631  st([sysArgs+0])                 #50 -> Pixel 0
                                          2632
              06e4 1403  ld   $03,y       2633  ld(hi('REENTER'),Y)             #51
              06e5 e0cb  jmp  y,$cb       2634  jmp(Y,'REENTER')                #52
              06e6 00e4  ld   $e4         2635  ld(-56//2)                      #53
                                          2636
                                          2637  #-----------------------------------------------------------------------
                                          2638  #       v6502 right shift instruction
                                          2639  #-----------------------------------------------------------------------
                                          2640
                                          2641  label('v6502_lsr30')
v6502_lsr30:  06e7 1525  ld   [$25],y     2642  ld([v6502_ADH],Y)               #30 Result
              06e8 ce00  st   [y,x]       2643  st([Y,X])                       #31
              06e9 c228  st   [$28]       2644  st([v6502_Qz])                  #32 Z flag
              06ea c229  st   [$29]       2645  st([v6502_Qn])                  #33 N flag
              06eb 140e  ld   $0e,y       2646  ld(hi('v6502_next'),Y)          #34
              06ec 00ed  ld   $ed         2647  ld(-38//2)                      #35
              06ed e020  jmp  y,$20       2648  jmp(Y,'v6502_next')             #36
                                          2649  #nop()                          #37 Overlap
                                          2650  #
                                          2651  label('v6502_ror38')
v6502_ror38:  06ee 1525  ld   [$25],y     2652  ld([v6502_ADH],Y)               #38,38 Result
              06ef 4119  ora  [$19]       2653  ora([v6502_BI])                 #39 Transfer bit 8
              06f0 ce00  st   [y,x]       2654  st([Y,X])                       #40
              06f1 c228  st   [$28]       2655  st([v6502_Qz])                  #41 Z flag
              06f2 c229  st   [$29]       2656  st([v6502_Qn])                  #42 N flag
              06f3 140e  ld   $0e,y       2657  ld(hi('v6502_next'),Y)          #43
              06f4 e020  jmp  y,$20       2658  jmp(Y,'v6502_next')             #44
              06f5 00e9  ld   $e9         2659  ld(-46//2)                      #45
                                          2660
                                          2661  #-----------------------------------------------------------------------
                                          2662  #       Reserved
                                          2663  #-----------------------------------------------------------------------
                                          2664
                                          2665  # XXX Reserve space for LSRW
                                          2666
                                          2667  #-----------------------------------------------------------------------
                                          2668  #
                                          2669  #  $0700 ROM page 7-8: Gigatron font data
                                          2670  #
                                          2671  #-----------------------------------------------------------------------
                                          2672
              06f6 0200  nop              2673  align(0x100, size=0x100)
              06f7 0200  nop
              06f8 0200  nop
              * 10 times
                                          2674
                                          2675  label('font32up')
                                          2676  for ch in range(32, 32+50):
                                          2677    comment = 'Char %s' % repr(chr(ch)).lstrip('u')
                                          2678    for byte in font.font[ch-32]:
                                          2679      ld(byte)
font32up:     0700 0000  ld   $00         ;Char ' '
              0701 0000  ld   $00
              0702 0000  ld   $00
              * 5 times
              0705 0000  ld   $00         ;Char '!'
              0706 0000  ld   $00
              0707 00fa  ld   $fa
              0708 0000  ld   $00
              0709 0000  ld   $00
              070a 00a0  ld   $a0         ;Char '"'
              070b 00c0  ld   $c0
              070c 0000  ld   $00
              070d 00a0  ld   $a0
              070e 00c0  ld   $c0
              070f 0028  ld   $28         ;Char '#'
              0710 00fe  ld   $fe
              0711 0028  ld   $28
              0712 00fe  ld   $fe
              0713 0028  ld   $28
              0714 0024  ld   $24         ;Char '$'
              0715 0054  ld   $54
              0716 00fe  ld   $fe
              0717 0054  ld   $54
              0718 0048  ld   $48
              0719 00c4  ld   $c4         ;Char '%'
              071a 00c8  ld   $c8
              071b 0010  ld   $10
              071c 0026  ld   $26
              071d 0046  ld   $46
              071e 006c  ld   $6c         ;Char '&'
              071f 0092  ld   $92
              0720 006a  ld   $6a
              0721 0004  ld   $04
              0722 000a  ld   $0a
              0723 0000  ld   $00         ;Char "'"
              0724 00a0  ld   $a0
              0725 00c0  ld   $c0
              0726 0000  ld   $00
              0727 0000  ld   $00
              0728 0000  ld   $00         ;Char '('
              0729 0038  ld   $38
              072a 0044  ld   $44
              072b 0082  ld   $82
              072c 0000  ld   $00
              072d 0000  ld   $00         ;Char ')'
              072e 0082  ld   $82
              072f 0044  ld   $44
              0730 0038  ld   $38
              0731 0000  ld   $00
              0732 0028  ld   $28         ;Char '*'
              0733 0010  ld   $10
              0734 007c  ld   $7c
              0735 0010  ld   $10
              0736 0028  ld   $28
              0737 0010  ld   $10         ;Char '+'
              0738 0010  ld   $10
              0739 007c  ld   $7c
              073a 0010  ld   $10
              073b 0010  ld   $10
              073c 0000  ld   $00         ;Char ','
              073d 0005  ld   $05
              073e 0006  ld   $06
              073f 0000  ld   $00
              0740 0000  ld   $00
              0741 0010  ld   $10         ;Char '-'
              0742 0010  ld   $10
              0743 0010  ld   $10
              * 5 times
              0746 0000  ld   $00         ;Char '.'
              0747 0002  ld   $02
              0748 0002  ld   $02
              0749 0000  ld   $00
              074a 0000  ld   $00
              074b 0000  ld   $00         ;Char '/'
              074c 0006  ld   $06
              074d 0018  ld   $18
              074e 0060  ld   $60
              074f 0000  ld   $00
              0750 007c  ld   $7c         ;Char '0'
              0751 008a  ld   $8a
              0752 0092  ld   $92
              0753 00a2  ld   $a2
              0754 007c  ld   $7c
              0755 0022  ld   $22         ;Char '1'
              0756 0042  ld   $42
              0757 00fe  ld   $fe
              0758 0002  ld   $02
              0759 0002  ld   $02
              075a 0046  ld   $46         ;Char '2'
              075b 008a  ld   $8a
              075c 0092  ld   $92
              075d 0092  ld   $92
              075e 0062  ld   $62
              075f 0044  ld   $44         ;Char '3'
              0760 0082  ld   $82
              0761 0092  ld   $92
              0762 0092  ld   $92
              0763 006c  ld   $6c
              0764 0018  ld   $18         ;Char '4'
              0765 0028  ld   $28
              0766 0048  ld   $48
              0767 00fe  ld   $fe
              0768 0008  ld   $08
              0769 00e4  ld   $e4         ;Char '5'
              076a 00a2  ld   $a2
              076b 00a2  ld   $a2
              076c 00a2  ld   $a2
              076d 009c  ld   $9c
              076e 003c  ld   $3c         ;Char '6'
              076f 0052  ld   $52
              0770 0092  ld   $92
              0771 0092  ld   $92
              0772 000c  ld   $0c
              0773 0080  ld   $80         ;Char '7'
              0774 008e  ld   $8e
              0775 0090  ld   $90
              0776 00a0  ld   $a0
              0777 00c0  ld   $c0
              0778 006c  ld   $6c         ;Char '8'
              0779 0092  ld   $92
              077a 0092  ld   $92
              077b 0092  ld   $92
              077c 006c  ld   $6c
              077d 0060  ld   $60         ;Char '9'
              077e 0092  ld   $92
              077f 0092  ld   $92
              0780 0094  ld   $94
              0781 0078  ld   $78
              0782 0000  ld   $00         ;Char ':'
              0783 0024  ld   $24
              0784 0024  ld   $24
              0785 0000  ld   $00
              0786 0000  ld   $00
              0787 0000  ld   $00         ;Char ';'
              0788 0025  ld   $25
              0789 0026  ld   $26
              078a 0000  ld   $00
              078b 0000  ld   $00
              078c 0010  ld   $10         ;Char '<'
              078d 0028  ld   $28
              078e 0044  ld   $44
              078f 0082  ld   $82
              0790 0000  ld   $00
              0791 0028  ld   $28         ;Char '='
              0792 0028  ld   $28
              0793 0028  ld   $28
              * 5 times
              0796 0000  ld   $00         ;Char '>'
              0797 0082  ld   $82
              0798 0044  ld   $44
              0799 0028  ld   $28
              079a 0010  ld   $10
              079b 0040  ld   $40         ;Char '?'
              079c 0080  ld   $80
              079d 008a  ld   $8a
              079e 0090  ld   $90
              079f 0060  ld   $60
              07a0 007c  ld   $7c         ;Char '@'
              07a1 0082  ld   $82
              07a2 00ba  ld   $ba
              07a3 00aa  ld   $aa
              07a4 0078  ld   $78
              07a5 003e  ld   $3e         ;Char 'A'
              07a6 0048  ld   $48
              07a7 0088  ld   $88
              07a8 0048  ld   $48
              07a9 003e  ld   $3e
              07aa 00fe  ld   $fe         ;Char 'B'
              07ab 0092  ld   $92
              07ac 0092  ld   $92
              07ad 0092  ld   $92
              07ae 006c  ld   $6c
              07af 007c  ld   $7c         ;Char 'C'
              07b0 0082  ld   $82
              07b1 0082  ld   $82
              07b2 0082  ld   $82
              07b3 0044  ld   $44
              07b4 00fe  ld   $fe         ;Char 'D'
              07b5 0082  ld   $82
              07b6 0082  ld   $82
              07b7 0044  ld   $44
              07b8 0038  ld   $38
              07b9 00fe  ld   $fe         ;Char 'E'
              07ba 0092  ld   $92
              07bb 0092  ld   $92
              07bc 0092  ld   $92
              07bd 0082  ld   $82
              07be 00fe  ld   $fe         ;Char 'F'
              07bf 0090  ld   $90
              07c0 0090  ld   $90
              07c1 0090  ld   $90
              07c2 0080  ld   $80
              07c3 007c  ld   $7c         ;Char 'G'
              07c4 0082  ld   $82
              07c5 0082  ld   $82
              07c6 0092  ld   $92
              07c7 005c  ld   $5c
              07c8 00fe  ld   $fe         ;Char 'H'
              07c9 0010  ld   $10
              07ca 0010  ld   $10
              07cb 0010  ld   $10
              07cc 00fe  ld   $fe
              07cd 0000  ld   $00         ;Char 'I'
              07ce 0082  ld   $82
              07cf 00fe  ld   $fe
              07d0 0082  ld   $82
              07d1 0000  ld   $00
              07d2 0004  ld   $04         ;Char 'J'
              07d3 0002  ld   $02
              07d4 0082  ld   $82
              07d5 00fc  ld   $fc
              07d6 0080  ld   $80
              07d7 00fe  ld   $fe         ;Char 'K'
              07d8 0010  ld   $10
              07d9 0028  ld   $28
              07da 0044  ld   $44
              07db 0082  ld   $82
              07dc 00fe  ld   $fe         ;Char 'L'
              07dd 0002  ld   $02
              07de 0002  ld   $02
              07df 0002  ld   $02
              07e0 0002  ld   $02
              07e1 00fe  ld   $fe         ;Char 'M'
              07e2 0040  ld   $40
              07e3 0030  ld   $30
              07e4 0040  ld   $40
              07e5 00fe  ld   $fe
              07e6 00fe  ld   $fe         ;Char 'N'
              07e7 0020  ld   $20
              07e8 0010  ld   $10
              07e9 0008  ld   $08
              07ea 00fe  ld   $fe
              07eb 007c  ld   $7c         ;Char 'O'
              07ec 0082  ld   $82
              07ed 0082  ld   $82
              07ee 0082  ld   $82
              07ef 007c  ld   $7c
              07f0 00fe  ld   $fe         ;Char 'P'
              07f1 0090  ld   $90
              07f2 0090  ld   $90
              07f3 0090  ld   $90
              07f4 0060  ld   $60
              07f5 007c  ld   $7c         ;Char 'Q'
              07f6 0082  ld   $82
              07f7 008a  ld   $8a
              07f8 0084  ld   $84
              07f9 007a  ld   $7a
                                          2680      comment = C(comment)
                                          2681
              07fa 0200  nop              2682  trampoline()
              07fb fe00  bra  ac          ;+-----------------------------------+
              07fc fcfd  bra  $07fd       ;|                                   |
              07fd 1404  ld   $04,y       ;| Trampoline for page $0700 lookups |
              07fe e068  jmp  y,$68       ;|                                   |
              07ff c218  st   [$18]       ;+-----------------------------------+
                                          2683
                                          2684  #-----------------------------------------------------------------------
                                          2685
                                          2686  align(0x100, size=0x100)
                                          2687
                                          2688  label('font82up')
                                          2689  for ch in range(32+50, 132):
                                          2690    comment = 'Char %s' % repr(chr(ch)).lstrip('u')
                                          2691    for byte in font.font[ch-32]:
                                          2692      ld(byte)
font82up:     0800 00fe  ld   $fe         ;Char 'R'
              0801 0090  ld   $90
              0802 0098  ld   $98
              0803 0094  ld   $94
              0804 0062  ld   $62
              0805 0062  ld   $62         ;Char 'S'
              0806 0092  ld   $92
              0807 0092  ld   $92
              0808 0092  ld   $92
              0809 000c  ld   $0c
              080a 0080  ld   $80         ;Char 'T'
              080b 0080  ld   $80
              080c 00fe  ld   $fe
              080d 0080  ld   $80
              080e 0080  ld   $80
              080f 00fc  ld   $fc         ;Char 'U'
              0810 0002  ld   $02
              0811 0002  ld   $02
              0812 0002  ld   $02
              0813 00fc  ld   $fc
              0814 00f0  ld   $f0         ;Char 'V'
              0815 000c  ld   $0c
              0816 0002  ld   $02
              0817 000c  ld   $0c
              0818 00f0  ld   $f0
              0819 00fe  ld   $fe         ;Char 'W'
              081a 0004  ld   $04
              081b 0018  ld   $18
              081c 0004  ld   $04
              081d 00fe  ld   $fe
              081e 00c6  ld   $c6         ;Char 'X'
              081f 0028  ld   $28
              0820 0010  ld   $10
              0821 0028  ld   $28
              0822 00c6  ld   $c6
              0823 00e0  ld   $e0         ;Char 'Y'
              0824 0010  ld   $10
              0825 000e  ld   $0e
              0826 0010  ld   $10
              0827 00e0  ld   $e0
              0828 0086  ld   $86         ;Char 'Z'
              0829 008a  ld   $8a
              082a 0092  ld   $92
              082b 00a2  ld   $a2
              082c 00c2  ld   $c2
              082d 0000  ld   $00         ;Char '['
              082e 00fe  ld   $fe
              082f 0082  ld   $82
              0830 0082  ld   $82
              0831 0000  ld   $00
              0832 0000  ld   $00         ;Char '\\'
              0833 0060  ld   $60
              0834 0018  ld   $18
              0835 0006  ld   $06
              0836 0000  ld   $00
              0837 0000  ld   $00         ;Char ']'
              0838 0082  ld   $82
              0839 0082  ld   $82
              083a 00fe  ld   $fe
              083b 0000  ld   $00
              083c 0020  ld   $20         ;Char '^'
              083d 0040  ld   $40
              083e 0080  ld   $80
              083f 0040  ld   $40
              0840 0020  ld   $20
              0841 0002  ld   $02         ;Char '_'
              0842 0002  ld   $02
              0843 0002  ld   $02
              * 5 times
              0846 0000  ld   $00         ;Char '`'
              0847 0000  ld   $00
              0848 00c0  ld   $c0
              0849 00a0  ld   $a0
              084a 0000  ld   $00
              084b 0004  ld   $04         ;Char 'a'
              084c 002a  ld   $2a
              084d 002a  ld   $2a
              084e 002a  ld   $2a
              084f 001e  ld   $1e
              0850 00fe  ld   $fe         ;Char 'b'
              0851 0022  ld   $22
              0852 0022  ld   $22
              0853 0022  ld   $22
              0854 001c  ld   $1c
              0855 001c  ld   $1c         ;Char 'c'
              0856 0022  ld   $22
              0857 0022  ld   $22
              0858 0022  ld   $22
              0859 0002  ld   $02
              085a 001c  ld   $1c         ;Char 'd'
              085b 0022  ld   $22
              085c 0022  ld   $22
              085d 0022  ld   $22
              085e 00fe  ld   $fe
              085f 001c  ld   $1c         ;Char 'e'
              0860 002a  ld   $2a
              0861 002a  ld   $2a
              0862 002a  ld   $2a
              0863 0018  ld   $18
              0864 0010  ld   $10         ;Char 'f'
              0865 007e  ld   $7e
              0866 0090  ld   $90
              0867 0080  ld   $80
              0868 0040  ld   $40
              0869 0018  ld   $18         ;Char 'g'
              086a 0025  ld   $25
              086b 0025  ld   $25
              086c 0025  ld   $25
              086d 001e  ld   $1e
              086e 00fe  ld   $fe         ;Char 'h'
              086f 0020  ld   $20
              0870 0020  ld   $20
              0871 0020  ld   $20
              0872 001e  ld   $1e
              0873 0000  ld   $00         ;Char 'i'
              0874 0022  ld   $22
              0875 00be  ld   $be
              0876 0002  ld   $02
              0877 0000  ld   $00
              0878 0002  ld   $02         ;Char 'j'
              0879 0001  ld   $01
              087a 0021  ld   $21
              087b 00be  ld   $be
              087c 0000  ld   $00
              087d 00fe  ld   $fe         ;Char 'k'
              087e 0008  ld   $08
              087f 0018  ld   $18
              0880 0024  ld   $24
              0881 0002  ld   $02
              0882 0000  ld   $00         ;Char 'l'
              0883 0082  ld   $82
              0884 00fe  ld   $fe
              0885 0002  ld   $02
              0886 0000  ld   $00
              0887 003e  ld   $3e         ;Char 'm'
              0888 0020  ld   $20
              0889 001c  ld   $1c
              088a 0020  ld   $20
              088b 001e  ld   $1e
              088c 003e  ld   $3e         ;Char 'n'
              088d 0010  ld   $10
              088e 0020  ld   $20
              088f 0020  ld   $20
              0890 001e  ld   $1e
              0891 001c  ld   $1c         ;Char 'o'
              0892 0022  ld   $22
              0893 0022  ld   $22
              0894 0022  ld   $22
              0895 001c  ld   $1c
              0896 003f  ld   $3f         ;Char 'p'
              0897 0024  ld   $24
              0898 0024  ld   $24
              0899 0024  ld   $24
              089a 0018  ld   $18
              089b 0018  ld   $18         ;Char 'q'
              089c 0024  ld   $24
              089d 0024  ld   $24
              089e 0024  ld   $24
              089f 003f  ld   $3f
              08a0 003e  ld   $3e         ;Char 'r'
              08a1 0010  ld   $10
              08a2 0020  ld   $20
              08a3 0020  ld   $20
              08a4 0010  ld   $10
              08a5 0012  ld   $12         ;Char 's'
              08a6 002a  ld   $2a
              08a7 002a  ld   $2a
              08a8 002a  ld   $2a
              08a9 0004  ld   $04
              08aa 0020  ld   $20         ;Char 't'
              08ab 00fc  ld   $fc
              08ac 0022  ld   $22
              08ad 0002  ld   $02
              08ae 0004  ld   $04
              08af 003c  ld   $3c         ;Char 'u'
              08b0 0002  ld   $02
              08b1 0002  ld   $02
              08b2 0004  ld   $04
              08b3 003e  ld   $3e
              08b4 0038  ld   $38         ;Char 'v'
              08b5 0004  ld   $04
              08b6 0002  ld   $02
              08b7 0004  ld   $04
              08b8 0038  ld   $38
              08b9 003c  ld   $3c         ;Char 'w'
              08ba 0002  ld   $02
              08bb 000c  ld   $0c
              08bc 0002  ld   $02
              08bd 003c  ld   $3c
              08be 0022  ld   $22         ;Char 'x'
              08bf 0014  ld   $14
              08c0 0008  ld   $08
              08c1 0014  ld   $14
              08c2 0022  ld   $22
              08c3 0038  ld   $38         ;Char 'y'
              08c4 0005  ld   $05
              08c5 0005  ld   $05
              08c6 0005  ld   $05
              08c7 003e  ld   $3e
              08c8 0022  ld   $22         ;Char 'z'
              08c9 0026  ld   $26
              08ca 002a  ld   $2a
              08cb 0032  ld   $32
              08cc 0022  ld   $22
              08cd 0010  ld   $10         ;Char '{'
              08ce 006c  ld   $6c
              08cf 0082  ld   $82
              08d0 0082  ld   $82
              08d1 0000  ld   $00
              08d2 0000  ld   $00         ;Char '|'
              08d3 0000  ld   $00
              08d4 00fe  ld   $fe
              08d5 0000  ld   $00
              08d6 0000  ld   $00
              08d7 0000  ld   $00         ;Char '}'
              08d8 0082  ld   $82
              08d9 0082  ld   $82
              08da 006c  ld   $6c
              08db 0010  ld   $10
              08dc 0040  ld   $40         ;Char '~'
              08dd 0080  ld   $80
              08de 0040  ld   $40
              08df 0020  ld   $20
              08e0 0040  ld   $40
              08e1 00fe  ld   $fe         ;Char '\x7f'
              08e2 00fe  ld   $fe
              08e3 00fe  ld   $fe
              * 5 times
              08e6 0010  ld   $10         ;Char '\x80'
              08e7 0038  ld   $38
              08e8 0054  ld   $54
              08e9 0010  ld   $10
              08ea 0010  ld   $10
              08eb 0010  ld   $10         ;Char '\x81'
              08ec 0020  ld   $20
              08ed 007c  ld   $7c
              08ee 0020  ld   $20
              08ef 0010  ld   $10
              08f0 0010  ld   $10         ;Char '\x82'
              08f1 0010  ld   $10
              08f2 0054  ld   $54
              08f3 0038  ld   $38
              08f4 0010  ld   $10
              08f5 0010  ld   $10         ;Char '\x83'
              08f6 0008  ld   $08
              08f7 007c  ld   $7c
              08f8 0008  ld   $08
              08f9 0010  ld   $10
                                          2693      comment = C(comment)
                                          2694
              08fa 0200  nop              2695  trampoline()
              08fb fe00  bra  ac          ;+-----------------------------------+
              08fc fcfd  bra  $08fd       ;|                                   |
              08fd 1404  ld   $04,y       ;| Trampoline for page $0800 lookups |
              08fe e068  jmp  y,$68       ;|                                   |
              08ff c218  st   [$18]       ;+-----------------------------------+
                                          2696
                                          2697  #-----------------------------------------------------------------------
                                          2698  #
                                          2699  #  $0900 ROM page 9: Key table for music
                                          2700  #
                                          2701  #-----------------------------------------------------------------------
                                          2702
                                          2703  align(0x100, size=0x100)
                                          2704  notes = 'CCDDEFFGGAAB'
                                          2705  sampleRate = cpuClock / 200.0 / 4
                                          2706  label('notesTable')
notesTable:   0900 0000  ld   $00         2707  ld(0)
              0901 0000  ld   $00         2708  ld(0)
                                          2709  for i in range(0, 250, 2):
                                          2710    j = i//2-1
                                          2711    freq = 440.0*2.0**((j-57)/12.0)
                                          2712    if j>=0 and freq <= sampleRate/2.0:
                                          2713      key = int(round(32768 * freq / sampleRate))
                                          2714      octave, note = j//12, notes[j%12]
                                          2715      sharp = '-' if notes[j%12-1] != note else '#'
                                          2716      comment = '%s%s%s (%0.1f Hz)' % (note, sharp, octave, freq)
                                          2717      ld(key&127); C(comment); ld(key>>7)
              0902 0045  ld   $45         ;C-0 (16.4 Hz)
              0903 0000  ld   $00
              0904 0049  ld   $49         ;C#0 (17.3 Hz)
              0905 0000  ld   $00
              0906 004d  ld   $4d         ;D-0 (18.4 Hz)
              0907 0000  ld   $00
              0908 0052  ld   $52         ;D#0 (19.4 Hz)
              0909 0000  ld   $00
              090a 0056  ld   $56         ;E-0 (20.6 Hz)
              090b 0000  ld   $00
              090c 005c  ld   $5c         ;F-0 (21.8 Hz)
              090d 0000  ld   $00
              090e 0061  ld   $61         ;F#0 (23.1 Hz)
              090f 0000  ld   $00
              0910 0067  ld   $67         ;G-0 (24.5 Hz)
              0911 0000  ld   $00
              0912 006d  ld   $6d         ;G#0 (26.0 Hz)
              0913 0000  ld   $00
              0914 0073  ld   $73         ;A-0 (27.5 Hz)
              0915 0000  ld   $00
              0916 007a  ld   $7a         ;A#0 (29.1 Hz)
              0917 0000  ld   $00
              0918 0001  ld   $01         ;B-0 (30.9 Hz)
              0919 0001  ld   $01
              091a 0009  ld   $09         ;C-1 (32.7 Hz)
              091b 0001  ld   $01
              091c 0011  ld   $11         ;C#1 (34.6 Hz)
              091d 0001  ld   $01
              091e 001a  ld   $1a         ;D-1 (36.7 Hz)
              091f 0001  ld   $01
              0920 0023  ld   $23         ;D#1 (38.9 Hz)
              0921 0001  ld   $01
              0922 002d  ld   $2d         ;E-1 (41.2 Hz)
              0923 0001  ld   $01
              0924 0037  ld   $37         ;F-1 (43.7 Hz)
              0925 0001  ld   $01
              0926 0042  ld   $42         ;F#1 (46.2 Hz)
              0927 0001  ld   $01
              0928 004e  ld   $4e         ;G-1 (49.0 Hz)
              0929 0001  ld   $01
              092a 005a  ld   $5a         ;G#1 (51.9 Hz)
              092b 0001  ld   $01
              092c 0067  ld   $67         ;A-1 (55.0 Hz)
              092d 0001  ld   $01
              092e 0074  ld   $74         ;A#1 (58.3 Hz)
              092f 0001  ld   $01
              0930 0003  ld   $03         ;B-1 (61.7 Hz)
              0931 0002  ld   $02
              0932 0012  ld   $12         ;C-2 (65.4 Hz)
              0933 0002  ld   $02
              0934 0023  ld   $23         ;C#2 (69.3 Hz)
              0935 0002  ld   $02
              0936 0034  ld   $34         ;D-2 (73.4 Hz)
              0937 0002  ld   $02
              0938 0046  ld   $46         ;D#2 (77.8 Hz)
              0939 0002  ld   $02
              093a 005a  ld   $5a         ;E-2 (82.4 Hz)
              093b 0002  ld   $02
              093c 006e  ld   $6e         ;F-2 (87.3 Hz)
              093d 0002  ld   $02
              093e 0004  ld   $04         ;F#2 (92.5 Hz)
              093f 0003  ld   $03
              0940 001b  ld   $1b         ;G-2 (98.0 Hz)
              0941 0003  ld   $03
              0942 0033  ld   $33         ;G#2 (103.8 Hz)
              0943 0003  ld   $03
              0944 004d  ld   $4d         ;A-2 (110.0 Hz)
              0945 0003  ld   $03
              0946 0069  ld   $69         ;A#2 (116.5 Hz)
              0947 0003  ld   $03
              0948 0006  ld   $06         ;B-2 (123.5 Hz)
              0949 0004  ld   $04
              094a 0025  ld   $25         ;C-3 (130.8 Hz)
              094b 0004  ld   $04
              094c 0045  ld   $45         ;C#3 (138.6 Hz)
              094d 0004  ld   $04
              094e 0068  ld   $68         ;D-3 (146.8 Hz)
              094f 0004  ld   $04
              0950 000c  ld   $0c         ;D#3 (155.6 Hz)
              0951 0005  ld   $05
              0952 0033  ld   $33         ;E-3 (164.8 Hz)
              0953 0005  ld   $05
              0954 005c  ld   $5c         ;F-3 (174.6 Hz)
              0955 0005  ld   $05
              0956 0008  ld   $08         ;F#3 (185.0 Hz)
              0957 0006  ld   $06
              0958 0036  ld   $36         ;G-3 (196.0 Hz)
              0959 0006  ld   $06
              095a 0067  ld   $67         ;G#3 (207.7 Hz)
              095b 0006  ld   $06
              095c 001b  ld   $1b         ;A-3 (220.0 Hz)
              095d 0007  ld   $07
              095e 0052  ld   $52         ;A#3 (233.1 Hz)
              095f 0007  ld   $07
              0960 000c  ld   $0c         ;B-3 (246.9 Hz)
              0961 0008  ld   $08
              0962 0049  ld   $49         ;C-4 (261.6 Hz)
              0963 0008  ld   $08
              0964 000b  ld   $0b         ;C#4 (277.2 Hz)
              0965 0009  ld   $09
              0966 0050  ld   $50         ;D-4 (293.7 Hz)
              0967 0009  ld   $09
              0968 0019  ld   $19         ;D#4 (311.1 Hz)
              0969 000a  ld   $0a
              096a 0067  ld   $67         ;E-4 (329.6 Hz)
              096b 000a  ld   $0a
              096c 0039  ld   $39         ;F-4 (349.2 Hz)
              096d 000b  ld   $0b
              096e 0010  ld   $10         ;F#4 (370.0 Hz)
              096f 000c  ld   $0c
              0970 006c  ld   $6c         ;G-4 (392.0 Hz)
              0971 000c  ld   $0c
              0972 004e  ld   $4e         ;G#4 (415.3 Hz)
              0973 000d  ld   $0d
              0974 0035  ld   $35         ;A-4 (440.0 Hz)
              0975 000e  ld   $0e
              0976 0023  ld   $23         ;A#4 (466.2 Hz)
              0977 000f  ld   $0f
              0978 0017  ld   $17         ;B-4 (493.9 Hz)
              0979 0010  ld   $10
              097a 0013  ld   $13         ;C-5 (523.3 Hz)
              097b 0011  ld   $11
              097c 0015  ld   $15         ;C#5 (554.4 Hz)
              097d 0012  ld   $12
              097e 001f  ld   $1f         ;D-5 (587.3 Hz)
              097f 0013  ld   $13
              0980 0032  ld   $32         ;D#5 (622.3 Hz)
              0981 0014  ld   $14
              0982 004d  ld   $4d         ;E-5 (659.3 Hz)
              0983 0015  ld   $15
              0984 0072  ld   $72         ;F-5 (698.5 Hz)
              0985 0016  ld   $16
              0986 0020  ld   $20         ;F#5 (740.0 Hz)
              0987 0018  ld   $18
              0988 0058  ld   $58         ;G-5 (784.0 Hz)
              0989 0019  ld   $19
              098a 001c  ld   $1c         ;G#5 (830.6 Hz)
              098b 001b  ld   $1b
              098c 006b  ld   $6b         ;A-5 (880.0 Hz)
              098d 001c  ld   $1c
              098e 0046  ld   $46         ;A#5 (932.3 Hz)
              098f 001e  ld   $1e
              0990 002f  ld   $2f         ;B-5 (987.8 Hz)
              0991 0020  ld   $20
              0992 0025  ld   $25         ;C-6 (1046.5 Hz)
              0993 0022  ld   $22
              0994 002a  ld   $2a         ;C#6 (1108.7 Hz)
              0995 0024  ld   $24
              0996 003f  ld   $3f         ;D-6 (1174.7 Hz)
              0997 0026  ld   $26
              0998 0064  ld   $64         ;D#6 (1244.5 Hz)
              0999 0028  ld   $28
              099a 001a  ld   $1a         ;E-6 (1318.5 Hz)
              099b 002b  ld   $2b
              099c 0063  ld   $63         ;F-6 (1396.9 Hz)
              099d 002d  ld   $2d
              099e 003f  ld   $3f         ;F#6 (1480.0 Hz)
              099f 0030  ld   $30
              09a0 0031  ld   $31         ;G-6 (1568.0 Hz)
              09a1 0033  ld   $33
              09a2 0038  ld   $38         ;G#6 (1661.2 Hz)
              09a3 0036  ld   $36
              09a4 0056  ld   $56         ;A-6 (1760.0 Hz)
              09a5 0039  ld   $39
              09a6 000d  ld   $0d         ;A#6 (1864.7 Hz)
              09a7 003d  ld   $3d
              09a8 005e  ld   $5e         ;B-6 (1975.5 Hz)
              09a9 0040  ld   $40
              09aa 004b  ld   $4b         ;C-7 (2093.0 Hz)
              09ab 0044  ld   $44
              09ac 0055  ld   $55         ;C#7 (2217.5 Hz)
              09ad 0048  ld   $48
              09ae 007e  ld   $7e         ;D-7 (2349.3 Hz)
              09af 004c  ld   $4c
              09b0 0048  ld   $48         ;D#7 (2489.0 Hz)
              09b1 0051  ld   $51
              09b2 0034  ld   $34         ;E-7 (2637.0 Hz)
              09b3 0056  ld   $56
              09b4 0046  ld   $46         ;F-7 (2793.8 Hz)
              09b5 005b  ld   $5b
              09b6 007f  ld   $7f         ;F#7 (2960.0 Hz)
              09b7 0060  ld   $60
              09b8 0061  ld   $61         ;G-7 (3136.0 Hz)
              09b9 0066  ld   $66
              09ba 006f  ld   $6f         ;G#7 (3322.4 Hz)
              09bb 006c  ld   $6c
              09bc 002c  ld   $2c         ;A-7 (3520.0 Hz)
              09bd 0073  ld   $73
              09be 001a  ld   $1a         ;A#7 (3729.3 Hz)
              09bf 007a  ld   $7a
                                          2718
                                          2719  #-----------------------------------------------------------------------
                                          2720  # Steal remaining space in page for stuff that doesn't fit elsewhere
                                          2721  #-----------------------------------------------------------------------
                                          2722
              09c0 0000  ld   $00         2723  fillers(until=0xde, instruction=ld)
              09c1 0000  ld   $00
              09c2 0000  ld   $00
              * 30 times
                                          2724
                                          2725  # Entered last line of vertical blank (line 40)
                                          2726  label('vBlankLast#34')
                                          2727
                                          2728  # Game controller types
                                          2729  # TypeA: Based on 74LS165 shift register (not supported)
                                          2730  # TypeB: Based on CD4021B shift register (standard)
                                          2731  # TypeC: Based on priority encoder
                                          2732  #
                                          2733  # Notes:
                                          2734  # - TypeA was only used during development and first beta test, before ROM v1
                                          2735  # - TypeB appears as type A with negative logic levels
                                          2736  # - TypeB is the game controller type that comes with the original kit and ROM v1
                                          2737  # - TypeB is mimicked by BabelFish / Pluggy McPlugface
                                          2738  # - TypeB requires a prolonged /SER_LATCH, therefore vPulse is 8 scanlines, not 2
                                          2739  # - TypeB and TypeC can be sampled in the same scanline
                                          2740  # - TypeA is 1 scanline shifted as it looks at a different edge (XXX up or down?)
                                          2741  # - TypeC gives incomplete information: lower buttons overshadow higher ones
                                          2742  #
                                          2743  #       TypeC    Alias    Button TypeB
                                          2744  #       00000000  ^@   -> Right  11111110
                                          2745  #       00000001  ^A   -> Left   11111101
                                          2746  #       00000011  ^C   -> Down   11111011
                                          2747  #       00000111  ^G   -> Up     11110111
                                          2748  #       00001111  ^O   -> Start  11101111
                                          2749  #       00011111  ^_   -> Select 11011111
                                          2750  #       00111111  ?    -> B      10111111
                                          2751  #       01111111  DEL  -> A      01111111
                                          2752  #       11111111       -> (None) 11111111
                                          2753  #
                                          2754  #       Conversion formula:
                                          2755  #               f(x) := 254 - x
                                          2756
                                          2757  # Detect controller TypeC codes
vBlankLast#34:
              09de 010f  ld   [$0f]       2758  ld([serialRaw])                 #34 if serialRaw in [0,1,3,7,15,31,63,127,255]
              09df 8001  adda $01         2759  adda(1)                         #35
              09e0 210f  anda [$0f]       2760  anda([serialRaw])               #36
              09e1 ecf2  bne  .buttons#39 2761  bne('.buttons#39')              #37
                                          2762
                                          2763  # TypeC
              09e2 010f  ld   [$0f]       2764  ld([serialRaw])                 #38 [TypeC] if serialRaw < serialLast
              09e3 8001  adda $01         2765  adda(1)                         #39
              09e4 2110  anda [$10]       2766  anda([serialLast])              #40
              09e5 ece9  bne  .buttons#43 2767  bne('.buttons#43')              #41
              09e6 00fe  ld   $fe         2768  ld(254)                         #42 then clear the selected bit
              09e7 0200  nop              2769  nop()                           #43
              09e8 fcec  bra  .buttons#46 2770  bra('.buttons#46')              #44
                                          2771  label('.buttons#43')
.buttons#43:  09e9 a10f  suba [$0f]       2772  suba([serialRaw])               #43,45
              09ea 2111  anda [$11]       2773  anda([buttonState])             #44
              09eb c211  st   [$11]       2774  st([buttonState])               #45
                                          2775  label('.buttons#46')
.buttons#46:  09ec 010f  ld   [$0f]       2776  ld([serialRaw])                 #46 Set the lower bits
              09ed 4111  ora  [$11]       2777  ora([buttonState])              #47
                                          2778  label('.buttons#48')
.buttons#48:  09ee c211  st   [$11]       2779  st([buttonState])               #48
              09ef 010f  ld   [$0f]       2780  ld([serialRaw])                 #49 Update serialLast for next pass
              09f0 e0ae  jmp  y,$ae       2781  jmp(Y,'vBlankLast#52')          #50
              09f1 c210  st   [$10]       2782  st([serialLast])                #51
                                          2783
                                          2784  # TypeB
                                          2785  # pChange = pNew & ~pOld
                                          2786  # nChange = nNew | ~nOld {DeMorgan}
                                          2787  label('.buttons#39')
.buttons#39:  09f2 00ff  ld   $ff         2788  ld(255)                         #39 [TypeB] Bitwise edge-filter to detect button presses
              09f3 6110  xora [$10]       2789  xora([serialLast])              #40
              09f4 410f  ora  [$0f]       2790  ora([serialRaw])                #41 Catch button-press events
              09f5 2111  anda [$11]       2791  anda([buttonState])             #42 Keep active button presses
              09f6 410f  ora  [$0f]       2792  ora([serialRaw])                #43
              09f7 0200  nop              2793  nop()                           #44
              09f8 0200  nop              2794  nop()                           #45
              09f9 fcee  bra  .buttons#48 2795  bra('.buttons#48')              #46
              09fa 0200  nop              2796  nop()                           #47
                                          2797
                                          2798  trampoline()
              09fb fe00  bra  ac          ;+-----------------------------------+
              09fc fcfd  bra  $09fd       ;|                                   |
              09fd 1404  ld   $04,y       ;| Trampoline for page $0900 lookups |
              09fe e068  jmp  y,$68       ;|                                   |
              09ff c218  st   [$18]       ;+-----------------------------------+
                                          2799
                                          2800  #-----------------------------------------------------------------------
                                          2801  #
                                          2802  #  $0a00 ROM page 10: Inversion table
                                          2803  #
                                          2804  #-----------------------------------------------------------------------
                                          2805
                                          2806  align(0x100, size=0x100)
                                          2807  label('invTable')
                                          2808
                                          2809  # Unit 64, table offset 16 (=1/4), value offset 1: (x+16)*(y+1) == 64*64 - e
                                          2810  for i in range(251):
invTable:     0a00 00ff  ld   $ff         2811    ld(4096//(i+16)-1)
              0a01 00ef  ld   $ef
              0a02 00e2  ld   $e2
              0a03 00d6  ld   $d6
              0a04 00cb  ld   $cb
              0a05 00c2  ld   $c2
              0a06 00b9  ld   $b9
              0a07 00b1  ld   $b1
              0a08 00a9  ld   $a9
              0a09 00a2  ld   $a2
              0a0a 009c  ld   $9c
              0a0b 0096  ld   $96
              0a0c 0091  ld   $91
              0a0d 008c  ld   $8c
              0a0e 0087  ld   $87
              0a0f 0083  ld   $83
              0a10 007f  ld   $7f
              0a11 007b  ld   $7b
              0a12 0077  ld   $77
              0a13 0074  ld   $74
              0a14 0070  ld   $70
              0a15 006d  ld   $6d
              0a16 006a  ld   $6a
              0a17 0068  ld   $68
              0a18 0065  ld   $65
              0a19 0062  ld   $62
              0a1a 0060  ld   $60
              0a1b 005e  ld   $5e
              0a1c 005c  ld   $5c
              0a1d 005a  ld   $5a
              0a1e 0058  ld   $58
              0a1f 0056  ld   $56
              0a20 0054  ld   $54
              0a21 0052  ld   $52
              0a22 0050  ld   $50
              0a23 004f  ld   $4f
              0a24 004d  ld   $4d
              0a25 004c  ld   $4c
              0a26 004a  ld   $4a
              0a27 0049  ld   $49
              0a28 0048  ld   $48
              0a29 0046  ld   $46
              0a2a 0045  ld   $45
              0a2b 0044  ld   $44
              0a2c 0043  ld   $43
              0a2d 0042  ld   $42
              0a2e 0041  ld   $41
              0a2f 0040  ld   $40
              0a30 003f  ld   $3f
              0a31 003e  ld   $3e
              0a32 003d  ld   $3d
              0a33 003c  ld   $3c
              0a34 003b  ld   $3b
              0a35 003a  ld   $3a
              0a36 0039  ld   $39
              0a37 0038  ld   $38
              0a38 0037  ld   $37
              0a39 0037  ld   $37
              0a3a 0036  ld   $36
              0a3b 0035  ld   $35
              0a3c 0034  ld   $34
              0a3d 0034  ld   $34
              0a3e 0033  ld   $33
              0a3f 0032  ld   $32
              0a40 0032  ld   $32
              0a41 0031  ld   $31
              0a42 0030  ld   $30
              0a43 0030  ld   $30
              0a44 002f  ld   $2f
              0a45 002f  ld   $2f
              0a46 002e  ld   $2e
              0a47 002e  ld   $2e
              0a48 002d  ld   $2d
              0a49 002d  ld   $2d
              0a4a 002c  ld   $2c
              0a4b 002c  ld   $2c
              0a4c 002b  ld   $2b
              0a4d 002b  ld   $2b
              0a4e 002a  ld   $2a
              0a4f 002a  ld   $2a
              0a50 0029  ld   $29
              0a51 0029  ld   $29
              0a52 0028  ld   $28
              0a53 0028  ld   $28
              0a54 0027  ld   $27
              0a55 0027  ld   $27
              0a56 0027  ld   $27
              0a57 0026  ld   $26
              0a58 0026  ld   $26
              0a59 0026  ld   $26
              0a5a 0025  ld   $25
              0a5b 0025  ld   $25
              0a5c 0024  ld   $24
              0a5d 0024  ld   $24
              0a5e 0024  ld   $24
              0a5f 0023  ld   $23
              0a60 0023  ld   $23
              0a61 0023  ld   $23
              0a62 0022  ld   $22
              0a63 0022  ld   $22
              0a64 0022  ld   $22
              0a65 0022  ld   $22
              0a66 0021  ld   $21
              0a67 0021  ld   $21
              0a68 0021  ld   $21
              0a69 0020  ld   $20
              0a6a 0020  ld   $20
              0a6b 0020  ld   $20
              0a6c 0020  ld   $20
              0a6d 001f  ld   $1f
              0a6e 001f  ld   $1f
              0a6f 001f  ld   $1f
              0a70 001f  ld   $1f
              0a71 001e  ld   $1e
              0a72 001e  ld   $1e
              0a73 001e  ld   $1e
              0a74 001e  ld   $1e
              0a75 001d  ld   $1d
              0a76 001d  ld   $1d
              0a77 001d  ld   $1d
              0a78 001d  ld   $1d
              0a79 001c  ld   $1c
              0a7a 001c  ld   $1c
              0a7b 001c  ld   $1c
              * 5 times
              0a7e 001b  ld   $1b
              0a7f 001b  ld   $1b
              0a80 001b  ld   $1b
              * 5 times
              0a83 001a  ld   $1a
              0a84 001a  ld   $1a
              0a85 001a  ld   $1a
              * 5 times
              0a88 0019  ld   $19
              0a89 0019  ld   $19
              0a8a 0019  ld   $19
              * 6 times
              0a8e 0018  ld   $18
              0a8f 0018  ld   $18
              0a90 0018  ld   $18
              * 6 times
              0a94 0017  ld   $17
              0a95 0017  ld   $17
              0a96 0017  ld   $17
              * 7 times
              0a9b 0016  ld   $16
              0a9c 0016  ld   $16
              0a9d 0016  ld   $16
              * 8 times
              0aa3 0015  ld   $15
              0aa4 0015  ld   $15
              0aa5 0015  ld   $15
              * 8 times
              0aab 0014  ld   $14
              0aac 0014  ld   $14
              0aad 0014  ld   $14
              * 9 times
              0ab4 0013  ld   $13
              0ab5 0013  ld   $13
              0ab6 0013  ld   $13
              * 9 times
              0abd 0012  ld   $12
              0abe 0012  ld   $12
              0abf 0012  ld   $12
              * 11 times
              0ac8 0011  ld   $11
              0ac9 0011  ld   $11
              0aca 0011  ld   $11
              * 12 times
              0ad4 0010  ld   $10
              0ad5 0010  ld   $10
              0ad6 0010  ld   $10
              * 13 times
              0ae1 000f  ld   $0f
              0ae2 000f  ld   $0f
              0ae3 000f  ld   $0f
              * 16 times
              0af1 000e  ld   $0e
              0af2 000e  ld   $0e
              0af3 000e  ld   $0e
              * 10 times
                                          2812
                                          2813  trampoline()
              0afb fe00  bra  ac          ;+-----------------------------------+
              0afc fcfd  bra  $0afd       ;|                                   |
              0afd 1404  ld   $04,y       ;| Trampoline for page $0a00 lookups |
              0afe e068  jmp  y,$68       ;|                                   |
              0aff c218  st   [$18]       ;+-----------------------------------+
                                          2814
                                          2815  #-----------------------------------------------------------------------
                                          2816  #
                                          2817  #  $0d00 ROM page 11: More SYS functions
                                          2818  #
                                          2819  #-----------------------------------------------------------------------
                                          2820
                                          2821  align(0x100, size=0x100)
                                          2822
                                          2823  #-----------------------------------------------------------------------
                                          2824  # Extension SYS_SetMode_v2_80
                                          2825  #-----------------------------------------------------------------------
                                          2826
                                          2827  # Set video mode to 0 to 3 black scanlines per pixel line.
                                          2828  #
                                          2829  # Mainly for making the MODE command available in Tiny BASIC, so that
                                          2830  # the user can experiment. It's adviced to refrain from using
                                          2831  # SYS_SetMode_v2_80 in regular applications. Video mode is a deeply
                                          2832  # personal preference, and the programmer shouldn't overrule the user
                                          2833  # in that choice. The Gigatron philisophy is that the end user has
                                          2834  # the final say on what happens on the system, not the application,
                                          2835  # even if that implies a degraded performance. This doesn't mean that
                                          2836  # all applications must work well in all video modes: mode 1 is still
                                          2837  # the default. If an application really doesn't work at all in that
                                          2838  # mode, it's acceptable to change mode once after loading.
                                          2839  #
                                          2840  # There's no "SYS_GetMode" function.
                                          2841  #
                                          2842  # Variables:
                                          2843  #       vAC bit 0:1     Mode:
                                          2844  #                         0      "ABCD" -> Full mode (slowest)
                                          2845  #                         1      "ABC-" -> Default mode after reset
                                          2846  #                         2      "A-C-" -> at67's mode
                                          2847  #                         3      "A---" -> HGM's mode
                                          2848  #       vAC bit 2:15    Ignored bits and should be 0
                                          2849  #
                                          2850  # Special values (ROM v4):
                                          2851  #       vAC = 1975      Zombie mode (no video signals, no input,
                                          2852  #                        no blinkenlights).
                                          2853  #       vAC = -1        Leave zombie mode and restore previous mode.
                                          2854
                                          2855  # Actual duration is <80 cycles, but keep some room for future extensions
                                          2856  label('SYS_SetMode_v2_80')
SYS_SetMode_v2_80:
              0b00 140b  ld   $0b,y       2857  ld(hi('sys_SetMode'),Y)         #15
              0b01 e054  jmp  y,$54       2858  jmp(Y,'sys_SetMode')            #16
              0b02 011e  ld   [$1e]       2859  ld([vReturn])                   #17
                                          2860
                                          2861  #-----------------------------------------------------------------------
                                          2862  # Extension SYS_SetMemory_v2_54
                                          2863  #-----------------------------------------------------------------------
                                          2864
                                          2865  # SYS function for setting 1..256 bytes
                                          2866  #
                                          2867  # sysArgs[0]   Copy count (destructive)
                                          2868  # sysArgs[1]   Copy value
                                          2869  # sysArgs[2:3] Destination address (destructive)
                                          2870  #
                                          2871  # Sets up to 8 bytes per invocation before restarting itself through vCPU.
                                          2872  # Doesn't wrap around page boundary. Can run 3 times per 148-cycle time slice.
                                          2873  # All combined that gives a 300% speedup over ROMv4 and before.
                                          2874
                                          2875  label('SYS_SetMemory_v2_54')
SYS_SetMemory_v2_54:
              0b03 0124  ld   [$24]       2876  ld([sysArgs+0])                 #15
                                          2877  bra('sys_SetMemory#18')         #16
              0b04 fc18  bra  sys_SetMemory#18
              0b05 1126  ld   [$26],x     2878  ld([sysArgs+2],X)               #17
                                          2879
                                          2880  #-----------------------------------------------------------------------
                                          2881  # Extension SYS_SendSerial1_v3_80
                                          2882  #-----------------------------------------------------------------------
                                          2883
                                          2884  # SYS function for sending data over serial controller port using
                                          2885  # pulse width modulation of the vertical sync signal.
                                          2886  #
                                          2887  # Variables:
                                          2888  #       sysArgs[0:1]    Source address               (destructive)
                                          2889  #       sysArgs[2]      Start bit mask (typically 1) (destructive)
                                          2890  #       sysArgs[3]      Number of send frames X      (destructive)
                                          2891  #
                                          2892  # The sending will abort if input data is detected on the serial port.
                                          2893  # Returns 0 in case of all bits sent, or <>0 in case of abort
                                          2894  #
                                          2895  # This modulates the next upcoming X vertical pulses with the supplied
                                          2896  # data. A zero becomes a 7 line vPulse, a one will be 9 lines.
                                          2897  # After that, the vPulse width falls back to 8 lines (idle).
                                          2898
                                          2899  label('SYS_SendSerial1_v3_80')
SYS_SendSerial1_v3_80:
              0b06 0109  ld   [$09]       2900  ld([videoY])                    #15
                                          2901  bra('sys_SendSerial1')          #16
              0b07 fc83  bra  sys_SendSerial1
              0b08 60b3  xora $b3         2902  xora(videoYline0)               #17 First line of vertical blank
                                          2903
                                          2904  #-----------------------------------------------------------------------
                                          2905  # Extension SYS_ExpanderControl_v4_40
                                          2906  #-----------------------------------------------------------------------
                                          2907
                                          2908  # Sets the I/O and RAM expander's control register
                                          2909  #
                                          2910  # Variables:
                                          2911  #       vAC bit 2       Device enable /SS0
                                          2912  #           bit 3       Device enable /SS1
                                          2913  #           bit 4       Device enable /SS2
                                          2914  #           bit 5       Device enable /SS3
                                          2915  #           bit 6       Banking B0
                                          2916  #           bit 7       Banking B1
                                          2917  #           bit 15      Data out MOSI
                                          2918  #       sysArgs[7]      Cache for control state (written to)
                                          2919  #
                                          2920  # Intended for prototyping, and probably too low-level for most applications
                                          2921  # Still there's a safeguard: it's not possible to disable RAM using this
                                          2922
                                          2923  label('SYS_ExpanderControl_v4_40')
SYS_ExpanderControl_v4_40:
              0b09 140c  ld   $0c,y       2924  ld(hi('sys_ExpanderControl'),Y) #15
              0b0a e0fb  jmp  y,$fb       2925  jmp(Y,'sys_ExpanderControl')    #16
              0b0b 0118  ld   [$18]       2926  ld([vAC])                       #17
                                          2927
                                          2928  #-----------------------------------------------------------------------
                                          2929  # Extension SYS_Run6502_v4_80
                                          2930  #-----------------------------------------------------------------------
                                          2931
                                          2932  # Transfer control to v6502
                                          2933  #
                                          2934  # Calling 6502 code from vCPU goes (only) through this SYS function.
                                          2935  # Directly modifying the vCPUselect variable is unreliable. The
                                          2936  # control transfer is immediate, without waiting for the current
                                          2937  # time slice to end or first returning to vCPU.
                                          2938  #
                                          2939  # vCPU code and v6502 code can interoperate without much hassle:
                                          2940  # - The v6502 program counter is vLR, and v6502 doesn't touch vPC
                                          2941  # - Returning to vCPU is with the BRK instruction
                                          2942  # - BRK doesn't dump process state on the stack
                                          2943  # - vCPU can save/restore the vLR with PUSH/POP
                                          2944  # - Stacks are shared, vAC is shared
                                          2945  # - vAC can indicate what the v6502 code wants. vAC+1 will be cleared
                                          2946  # - Alternative is to leave a word in sysArgs[6:7] (v6502 X and Y registers)
                                          2947  # - Another way is to set vPC before BRK, and vCPU will continue there(+2)
                                          2948  #
                                          2949  # Calling v6502 code from vCPU looks like this:
                                          2950  #       LDWI  SYS_Run6502_v4_80
                                          2951  #       STW   sysFn
                                          2952  #       LDWI  $6502_start_address
                                          2953  #       STW   vLR
                                          2954  #       SYS   80
                                          2955  #
                                          2956  # Variables:
                                          2957  #       vAC             Accumulator
                                          2958  #       vLR             Program Counter
                                          2959  #       vSP             Stack Pointer (+1)
                                          2960  #       sysArgs[6]      Index Register X
                                          2961  #       sysArgs[7]      Index Register Y
                                          2962  # For info:
                                          2963  #       sysArgs[0:1]    Address Register, free to clobber
                                          2964  #       sysArgs[2]      Instruction Register, free to clobber
                                          2965  #       sysArgs[3:5]    Flags, don't clobber
                                          2966  #
                                          2967  # Implementation details::
                                          2968  #
                                          2969  #  The time to reserve for this transition is the maximum time
                                          2970  #  between NEXT and v6502_check. This is
                                          2971  #       SYS call duration + 2*v6502_maxTicks + (v6502_overhead - vCPU_overhead)
                                          2972  #     = 22 + 28 + (11 - 9) = 62 cycles.
                                          2973  #  So reserving 80 cycles is future proof. This isn't overhead, as it includes
                                          2974  #  the fetching of the first 6502 opcode and its operands..
                                          2975  #
                                          2976  #                      0            10                 28=0         9
                                          2977  #    ---+----+---------+------------+------------------+-----------+---
                                          2978  # video | nop| runVcpu |   ENTER    | At least one ins |   EXIT    | video
                                          2979  #    ---+----+---------+------------+------------------+-----------+---
                                          2980  #        sync  prelude  ENTER-to-ins    ins-to-NEXT     NEXT-to-video
                                          2981  #       |<-->|
                                          2982  #        0/1 |<------->|
                                          2983  #                 5    |<----------------------------->|
                                          2984  #          runVCpu_overhead           28               |<--------->|
                                          2985  #                                 2*maxTicks                 9
                                          2986  #                                                      vCPU_overhead
                                          2987  #
                                          2988  #                      0                21                    38=0       11
                                          2989  #    ---+----+---------+----------------+--------------------+-----------+---
                                          2990  # video | nop| runVcpu |   v6502_ENTER  | At least one fetch |v6502_exitB| video
                                          2991  #    ---+----+---------+----------------+--------------------+-----------+---
                                          2992  #        sync  prelude   enter-to-fetch     fetch-to-check    check-to-video
                                          2993  #       |<-->|
                                          2994  #        0/1 |<------->|
                                          2995  #                 5    |<----------------------------------->|
                                          2996  #          runVcpu_overhead           38                     |<--------->|
                                          2997  #                              2*v6520_maxTicks                    11
                                          2998  #                                                            v6502_overhead
                                          2999
                                          3000  label('SYS_Run6502_v4_80')
SYS_Run6502_v4_80:
              0b0c 140d  ld   $0d,y       3001  ld(hi('sys_v6502'),Y)           #15
              0b0d e080  jmp  y,$80       3002  jmp(Y,'sys_v6502')              #16
              0b0e 000d  ld   $0d         3003  ld(hi('v6502_ENTER'))           #17 Activate v6502
                                          3004
                                          3005  #-----------------------------------------------------------------------
                                          3006  # Extension SYS_ResetWaveforms_v4_50
                                          3007  #-----------------------------------------------------------------------
                                          3008
                                          3009  # soundTable[4x+0] = sawtooth, to be modified into metallic/noise
                                          3010  # soundTable[4x+1] = pulse
                                          3011  # soundTable[4x+2] = triangle
                                          3012  # soundTable[4x+3] = sawtooth, also useful to right shift 2 bits
                                          3013
                                          3014  label('SYS_ResetWaveforms_v4_50')
SYS_ResetWaveforms_v4_50:
              0b0f 1412  ld   $12,y       3015  ld(hi('sys_ResetWaveforms'),Y)  #15 Initial setup of waveforms. [vAC+0]=i
              0b10 e040  jmp  y,$40       3016  jmp(Y,'sys_ResetWaveforms')     #16
              0b11 1407  ld   $07,y       3017  ld(soundTable>>8,Y)             #17
                                          3018
                                          3019  #-----------------------------------------------------------------------
                                          3020  # Extension SYS_ShuffleNoise_v4_46
                                          3021  #-----------------------------------------------------------------------
                                          3022
                                          3023  # Use simple 6-bits variation of RC4 to permutate waveform 0 in soundTable
                                          3024
                                          3025  label('SYS_ShuffleNoise_v4_46')
SYS_ShuffleNoise_v4_46:
              0b12 1412  ld   $12,y       3026  ld(hi('sys_ShuffleNoise'),Y)    #15 Shuffle soundTable[4i+0]. [vAC+0]=4j, [vAC+1]=4i
              0b13 e061  jmp  y,$61       3027  jmp(Y,'sys_ShuffleNoise')       #16
              0b14 1407  ld   $07,y       3028  ld(soundTable>>8,Y)             #17
                                          3029
                                          3030  #-----------------------------------------------------------------------
                                          3031  # Extension SYS_SpiExchangeBytes_v4_134
                                          3032  #-----------------------------------------------------------------------
                                          3033
                                          3034  # Send AND receive 1..256 bytes over SPI interface
                                          3035
                                          3036  # Variables:
                                          3037  #       sysArgs[0]      Page index start, for both send/receive (input, modified)
                                          3038  #       sysArgs[1]      Memory page for send data (input)
                                          3039  #       sysArgs[2]      Page index stop (input)
                                          3040  #       sysArgs[3]      Memory page for receive data (input)
                                          3041  #       sysArgs[4]      Scratch (modified)
                                          3042
                                          3043  label('SYS_SpiExchangeBytes_v4_134')
SYS_SpiExchangeBytes_v4_134:
              0b15 140d  ld   $0d,y       3044  ld(hi('sys_SpiExchangeBytes'),Y)#15
              0b16 e00a  jmp  y,$0a       3045  jmp(Y,'sys_SpiExchangeBytes')   #16
              0b17 1401  ld   $01,y       3046  ld(hi(ctrlBits),Y)              #17 Control state as saved by SYS_ExpanderControl
                                          3047
                                          3048  #-----------------------------------------------------------------------
                                          3049  #  Implementations
                                          3050  #-----------------------------------------------------------------------
                                          3051
                                          3052  # SYS_SetMemory_54 implementation
                                          3053  label('sys_SetMemory#18')
sys_SetMemory#18:
              0b18 1527  ld   [$27],y     3054  ld([sysArgs+3],Y)               #18
              0b19 f83c  ble  .sysSb#21   3055  ble('.sysSb#21')                #19 Enter fast lane if >=128 or at 0 (-> 256)
              0b1a a008  suba $08         3056  suba(8)                         #20
              0b1b f43e  bge  .sysSb#23   3057  bge('.sysSb#23')                #21 Or when >=8
              0b1c c224  st   [$24]       3058  st([sysArgs+0])                 #22
              0b1d 2004  anda $04         3059  anda(4)                         #23
              0b1e f025  beq  .sysSb#26   3060  beq('.sysSb#26')                #24
              0b1f 0125  ld   [$25]       3061  ld([sysArgs+1])                 #25 Set 4 pixels
              0b20 de00  st   [y,x++]     3062  st([Y,Xpp])                     #26
              0b21 de00  st   [y,x++]     3063  st([Y,Xpp])                     #27
              0b22 de00  st   [y,x++]     3064  st([Y,Xpp])                     #28
              0b23 fc28  bra  .sysSb#31   3065  bra('.sysSb#31')                #29
              0b24 de00  st   [y,x++]     3066  st([Y,Xpp])                     #30
                                          3067  label('.sysSb#26')
.sysSb#26:    0b25 0001  ld   $01         3068  wait(31-26)                     #26
              0b26 ec26  bne  $0b26
              0b27 a001  suba $01
                                          3069  label('.sysSb#31')
.sysSb#31:    0b28 0124  ld   [$24]       3070  ld([sysArgs+0])                 #31
              0b29 2002  anda $02         3071  anda(2)                         #32
              0b2a f02f  beq  .sysSb#35   3072  beq('.sysSb#35')                #33
              0b2b 0125  ld   [$25]       3073  ld([sysArgs+1])                 #34 Set 2 pixels
              0b2c de00  st   [y,x++]     3074  st([Y,Xpp])                     #35
              0b2d fc32  bra  .sysSb#38   3075  bra('.sysSb#38')                #36
              0b2e de00  st   [y,x++]     3076  st([Y,Xpp])                     #37
                                          3077  label('.sysSb#35')
.sysSb#35:    0b2f 0200  nop              3078  wait(38-35)                     #35
              0b30 0200  nop
              0b31 0200  nop
                                          3079  label('.sysSb#38')
.sysSb#38:    0b32 0124  ld   [$24]       3080  ld([sysArgs+0])                 #38
              0b33 2001  anda $01         3081  anda(1)                         #39
              0b34 f037  beq  $0b37       3082  beq(pc()+3)                     #40
              0b35 fc38  bra  $0b38       3083  bra(pc()+3)                     #41
              0b36 0125  ld   [$25]       3084  ld([sysArgs+1])                 #42 Set 1 pixel
              0b37 0d00  ld   [y,x]       3085  ld([Y,X])                       #42(!) No change
              0b38 ce00  st   [y,x]       3086  st([Y,X])                       #43
              0b39 1403  ld   $03,y       3087  ld(hi('NEXTY'),Y)               #44 Return
              0b3a e000  jmp  y,$00       3088  jmp(Y,'NEXTY')                  #45 All done
              0b3b 00e8  ld   $e8         3089  ld(-48//2)                      #46
                                          3090  label('.sysSb#21')
.sysSb#21:    0b3c 0200  nop              3091  nop()                           #21
              0b3d c224  st   [$24]       3092  st([sysArgs+0])                 #22
                                          3093  label('.sysSb#23')
.sysSb#23:    0b3e 0125  ld   [$25]       3094  ld([sysArgs+1])                 #23 Set 8 pixels
              0b3f de00  st   [y,x++]     3095  st([Y,Xpp])                     #24
              0b40 de00  st   [y,x++]     3096  st([Y,Xpp])                     #25
              0b41 de00  st   [y,x++]     3097  st([Y,Xpp])                     #26
              0b42 de00  st   [y,x++]     3098  st([Y,Xpp])                     #27
              0b43 de00  st   [y,x++]     3099  st([Y,Xpp])                     #28
              0b44 de00  st   [y,x++]     3100  st([Y,Xpp])                     #29
              0b45 de00  st   [y,x++]     3101  st([Y,Xpp])                     #30
              0b46 de00  st   [y,x++]     3102  st([Y,Xpp])                     #31
              0b47 0126  ld   [$26]       3103  ld([sysArgs+2])                 #32 Advance write pointer
              0b48 8008  adda $08         3104  adda(8)                         #33
              0b49 c226  st   [$26]       3105  st([sysArgs+2])                 #34
              0b4a 0124  ld   [$24]       3106  ld([sysArgs+0])                 #35
              0b4b f04e  beq  $0b4e       3107  beq(pc()+3)                     #36
              0b4c fc4f  bra  $0b4f       3108  bra(pc()+3)                     #37
              0b4d 00fe  ld   $fe         3109  ld(-2)                          #38 Self-restart when more to do
              0b4e 0000  ld   $00         3110  ld(0)                           #38(!)
              0b4f 8116  adda [$16]       3111  adda([vPC])                     #39
              0b50 c216  st   [$16]       3112  st([vPC])                       #40
              0b51 1403  ld   $03,y       3113  ld(hi('REENTER'),Y)             #41
              0b52 e0cb  jmp  y,$cb       3114  jmp(Y,'REENTER')                #42
              0b53 00e9  ld   $e9         3115  ld(-46//2)                      #43
                                          3116
                                          3117  # SYS_SetMode_80 implementation
                                          3118  label('sys_SetMode')
sys_SetMode:  0b54 ec57  bne  $0b57       3119  bne(pc()+3)                     #18
              0b55 fc57  bra  $0b57       3120  bra(pc()+2)                     #19
              0b56 0003  ld   $03         3121  ld('startVideo')                #20 First enable video if disabled
              0b57 c21e  st   [$1e]       3122  st([vReturn])                   #20,21
              0b58 0119  ld   [$19]       3123  ld([vAC+1])                     #22
              0b59 f063  beq  .sysSm#25   3124  beq('.sysSm#25')                #23
              0b5a 1403  ld   $03,y       3125  ld(hi('REENTER'),Y)             #24
              0b5b 6118  xora [$18]       3126  xora([vAC])                     #25
              0b5c 60b0  xora $b0         3127  xora((1975>>8)^(1975&255))      #26 Poor man\'s 1975 detection
              0b5d ec60  bne  $0b60       3128  bne(pc()+3)                     #27
              0b5e fc61  bra  $0b61       3129  bra(pc()+3)                     #28
                                          3130  assert videoZ == 0x0100
              0b5f c21e  st   [$1e]       3131  st([vReturn])                   #29 DISABLE video/audio/serial/etc
              0b60 0200  nop              3132  nop()                           #29(!) Ignore and return
              0b61 e0cb  jmp  y,$cb       3133  jmp(Y,'REENTER')                #30
              0b62 00ef  ld   $ef         3134  ld(-34//2)                      #31
                                          3135  label('.sysSm#25')
.sysSm#25:    0b63 0118  ld   [$18]       3136  ld([vAC])                       #25 Mode 0,1,2,3
              0b64 2003  anda $03         3137  anda(3)                         #26
              0b65 8068  adda $68         3138  adda('.sysSm#30')               #27
              0b66 fe00  bra  ac          3139  bra(AC)                         #28
              0b67 fc6c  bra  .sysSm#31   3140  bra('.sysSm#31')                #29
                                          3141  label('.sysSm#30')
.sysSm#30:    0b68 000a  ld   $0a         3142  ld('pixels')                    #30 videoB lines
              0b69 000a  ld   $0a         3143  ld('pixels')                    #30
              0b6a 00f6  ld   $f6         3144  ld('nopixels')                  #30
              0b6b 00f6  ld   $f6         3145  ld('nopixels')                  #30
                                          3146  label('.sysSm#31')
.sysSm#31:    0b6c c20a  st   [$0a]       3147  st([videoModeB])                #31
              0b6d 0118  ld   [$18]       3148  ld([vAC])                       #32
              0b6e 2003  anda $03         3149  anda(3)                         #33
              0b6f 8072  adda $72         3150  adda('.sysSm#37')               #34
              0b70 fe00  bra  ac          3151  bra(AC)                         #35
              0b71 fc76  bra  .sysSm#38   3152  bra('.sysSm#38')                #36
                                          3153  label('.sysSm#37')
.sysSm#37:    0b72 000a  ld   $0a         3154  ld('pixels')                    #37 videoC lines
              0b73 000a  ld   $0a         3155  ld('pixels')                    #37
              0b74 000a  ld   $0a         3156  ld('pixels')                    #37
              0b75 00f6  ld   $f6         3157  ld('nopixels')                  #37
                                          3158  label('.sysSm#38')
.sysSm#38:    0b76 c20b  st   [$0b]       3159  st([videoModeC])                #38
              0b77 0118  ld   [$18]       3160  ld([vAC])                       #39
              0b78 2003  anda $03         3161  anda(3)                         #40
              0b79 807c  adda $7c         3162  adda('.sysSm#44')               #41
              0b7a fe00  bra  ac          3163  bra(AC)                         #42
              0b7b fc80  bra  .sysSm#45   3164  bra('.sysSm#45')                #43
                                          3165  label('.sysSm#44')
.sysSm#44:    0b7c 000a  ld   $0a         3166  ld('pixels')                    #44 videoD lines
              0b7d 00f6  ld   $f6         3167  ld('nopixels')                  #44
              0b7e 00f6  ld   $f6         3168  ld('nopixels')                  #44
              0b7f 00f6  ld   $f6         3169  ld('nopixels')                  #44
                                          3170  label('.sysSm#45')
.sysSm#45:    0b80 c20c  st   [$0c]       3171  st([videoModeD])                #45
              0b81 e0cb  jmp  y,$cb       3172  jmp(Y,'REENTER')                #46
              0b82 00e7  ld   $e7         3173  ld(-50//2)                      #47
                                          3174
                                          3175  # SYS_SendSerial1_v3_80 implementation
                                          3176  label('sys_SendSerial1')
sys_SendSerial1:
              0b83 f08a  beq  .sysSs#20   3177  beq('.sysSs#20')                #18
              0b84 1124  ld   [$24],x     3178  ld([sysArgs+0],X)               #19
              0b85 0116  ld   [$16]       3179  ld([vPC])                       #20 Wait for vBlank
              0b86 a002  suba $02         3180  suba(2)                         #21
              0b87 1403  ld   $03,y       3181  ld(hi('REENTER_28'),Y)          #22
              0b88 e0ca  jmp  y,$ca       3182  jmp(Y,'REENTER_28')             #23
              0b89 c216  st   [$16]       3183  st([vPC])                       #24
                                          3184  label('.sysSs#20')
.sysSs#20:    0b8a 1525  ld   [$25],y     3185  ld([sysArgs+1],Y)               #20 Synchronized with vBlank
              0b8b 0d00  ld   [y,x]       3186  ld([Y,X])                       #21 Copy next bit
              0b8c 2126  anda [$26]       3187  anda([sysArgs+2])               #22
              0b8d ec90  bne  $0b90       3188  bne(pc()+3)                     #23
              0b8e fc91  bra  $0b91       3189  bra(pc()+3)                     #24
              0b8f 000e  ld   $0e         3190  ld(7*2)                         #25
              0b90 0012  ld   $12         3191  ld(9*2)                         #25
              0b91 c20d  st   [$0d]       3192  st([videoPulse])                #26
              0b92 0126  ld   [$26]       3193  ld([sysArgs+2])                 #27 Rotate input bit
              0b93 8200  adda ac          3194  adda(AC)                        #28
              0b94 ec97  bne  $0b97       3195  bne(pc()+3)                     #29
              0b95 fc97  bra  $0b97       3196  bra(pc()+2)                     #30
              0b96 0001  ld   $01         3197  ld(1)                           #31
              0b97 c226  st   [$26]       3198  st([sysArgs+2])                 #31,32 (must be idempotent)
              0b98 2001  anda $01         3199  anda(1)                         #33 Optionally increment pointer
              0b99 8124  adda [$24]       3200  adda([sysArgs+0])               #34
              0b9a d224  st   [$24],x     3201  st([sysArgs+0],X)               #35
              0b9b 0127  ld   [$27]       3202  ld([sysArgs+3])                 #36 Frame counter
              0b9c a001  suba $01         3203  suba(1)                         #37
              0b9d f0ac  beq  .sysSs#40   3204  beq('.sysSs#40')                #38
              0b9e 1403  ld   $03,y       3205  ld(hi('REENTER'),Y)             #39
              0b9f c227  st   [$27]       3206  st([sysArgs+3])                 #40
              0ba0 010f  ld   [$0f]       3207  ld([serialRaw])                 #41 Test for anything being sent back
              0ba1 60ff  xora $ff         3208  xora(255)                       #42
              0ba2 f0a7  beq  .sysSs#45   3209  beq('.sysSs#45')                #43
              0ba3 c218  st   [$18]       3210  st([vAC])                       #44 Abort after key press with non-zero error
              0ba4 c219  st   [$19]       3211  st([vAC+1])                     #45
              0ba5 e0cb  jmp  y,$cb       3212  jmp(Y,'REENTER')                #46
              0ba6 00e7  ld   $e7         3213  ld(-50//2)                      #47
                                          3214  label('.sysSs#45')
.sysSs#45:    0ba7 0116  ld   [$16]       3215  ld([vPC])                       #45 Continue sending bits
              0ba8 a002  suba $02         3216  suba(2)                         #46
              0ba9 c216  st   [$16]       3217  st([vPC])                       #47
              0baa e0cb  jmp  y,$cb       3218  jmp(Y,'REENTER')                #48
              0bab 00e6  ld   $e6         3219  ld(-52//2)                      #49
                                          3220  label('.sysSs#40')
.sysSs#40:    0bac c218  st   [$18]       3221  st([vAC])                       #40 Stop sending bits, no error
              0bad c219  st   [$19]       3222  st([vAC+1])                     #41
              0bae e0cb  jmp  y,$cb       3223  jmp(Y,'REENTER')                #42
              0baf 00e9  ld   $e9         3224  ld(-46//2)                      #43
                                          3225
                                          3226  # CALLI implementation (vCPU instruction)
                                          3227  label('calli#13')
calli#13:     0bb0 8003  adda $03         3228  adda(3)                         #13,43
              0bb1 c21a  st   [$1a]       3229  st([vLR])                       #14
              0bb2 0117  ld   [$17]       3230  ld([vPC+1])                     #15
              0bb3 d61b  st   [$1b],y     3231  st([vLR+1],Y)                   #16
              0bb4 0d00  ld   [y,x]       3232  ld([Y,X])                       #17
              0bb5 de00  st   [y,x++]     3233  st([Y,Xpp])                     #18 Just X++
              0bb6 a002  suba $02         3234  suba(2)                         #19
              0bb7 c216  st   [$16]       3235  st([vPC])                       #20
              0bb8 0d00  ld   [y,x]       3236  ld([Y,X])                       #21
              0bb9 1403  ld   $03,y       3237  ld(hi('REENTER_28'),Y)          #22
              0bba e0ca  jmp  y,$ca       3238  jmp(Y,'REENTER_28')             #23
              0bbb c217  st   [$17]       3239  st([vPC+1])                     #24
                                          3240
                                          3241  # -------------------------------------------------------------
                                          3242  # vCPU instructions for comparisons between two 16-bit operands
                                          3243  # -------------------------------------------------------------
                                          3244  #
                                          3245  # vCPU's conditional branching (BCC) always compares vAC against 0,
                                          3246  # treating vAC as a two's complement 16-bit number. When we need to
                                          3247  # compare two arbitrary numnbers we normally first take their difference
                                          3248  # with SUBW.  However, when this difference is too large, the subtraction
                                          3249  # overflows and we get the wrong outcome. To get it right over the
                                          3250  # entire range, an elaborate sequence is needed. TinyBASIC uses this
                                          3251  # blurp for its relational operators. (It compares stack variable $02
                                          3252  # with zero page variable $3a.)
                                          3253  #
                                          3254  #       0461  ee 02            LDLW  $02
                                          3255  #       0463  fc 3a            XORW  $3a
                                          3256  #       0465  35 53 6a         BGE   $046c
                                          3257  #       0468  ee 02            LDLW  $02
                                          3258  #       046a  90 6e            BRA   $0470
                                          3259  #       046c  ee 02            LDLW  $02
                                          3260  #       046e  b8 3a            SUBW  $3a
                                          3261  #       0470  35 56 73         BLE   $0475
                                          3262  #
                                          3263  # The CMPHS and CMPHU instructions were introduced to simplify this.
                                          3264  # They inspect both operands to see if there is an overflow risk. If
                                          3265  # so, they modify vAC such that their difference gets smaller, while
                                          3266  # preserving the relation between the two operands. After that, the
                                          3267  # SUBW instruction can't overflow and we achieve a correct comparison.
                                          3268  # Use CMPHS for signed comparisons and CMPHU for unsigned. With these,
                                          3269  # the sequence above becomes:
                                          3270  #
                                          3271  #       0461  ee 02            LDLW  $02
                                          3272  #       0463  1f 3b            CMPHS $3b        Note: high byte of operand
                                          3273  #       0465  b8 3a            SUBW  $3a
                                          3274  #       0467  35 56 73         BLE   $0475
                                          3275  #
                                          3276  # CMPHS/CMPHU don't make much sense other than in combination with
                                          3277  # SUBW. These modify vACH, if needed, as given in the following table:
                                          3278  #
                                          3279  #       vACH  varH  |     vACH
                                          3280  #       bit7  bit7  | CMPHS  CMPHU
                                          3281  #       ---------------------------
                                          3282  #         0     0   |  vACH   vACH      no change needed
                                          3283  #         0     1   | varH+1 varH-1     narrowing the range
                                          3284  #         1     0   | varH-1 varH+1     narrowing the range
                                          3285  #         1     1   |  vACH   vACH      no change needed
                                          3286  #       ---------------------------
                                          3287
                                          3288  # CMPHS implementation (vCPU instruction)
                                          3289  label('cmphs#13')
cmphs#13:     0bbc 1403  ld   $03,y       3290  ld(hi('REENTER'),Y)             #13
              0bbd 0500  ld   [x]         3291  ld([X])                         #14
              0bbe 6119  xora [$19]       3292  xora([vAC+1])                   #15
              0bbf f4d0  bge  .cmphu#18   3293  bpl('.cmphu#18')                #16 Skip if same sign
              0bc0 0119  ld   [$19]       3294  ld([vAC+1])                     #17
              0bc1 e8c4  blt  $0bc4       3295  bmi(pc()+3)                     #18
              0bc2 fcc5  bra  .cmphs#21   3296  bra(pc()+3)                     #19
                                          3297  label('.cmphs#20')
.cmphs#20:    0bc3 0001  ld   $01         3298  ld(+1)                          #20    vAC < variable
              0bc4 00ff  ld   $ff         3299  ld(-1)                          #20(!) vAC > variable
                                          3300  label('.cmphs#21')
.cmphs#21:    0bc5 8500  adda [x]         3301  adda([X])                       #21
              0bc6 c219  st   [$19]       3302  st([vAC+1])                     #22
              0bc7 e0ca  jmp  y,$ca       3303  jmp(Y,'REENTER_28')             #23
                                          3304  #dummy()                        #24 Overlap
                                          3305  #
                                          3306  # CMPHS implementation (vCPU instruction)
                                          3307  label('cmphu#13')
cmphu#13:     0bc8 1403  ld   $03,y       3308  ld(hi('REENTER'),Y)             #13,24
              0bc9 0500  ld   [x]         3309  ld([X])                         #14
              0bca 6119  xora [$19]       3310  xora([vAC+1])                   #15
              0bcb f4d0  bge  .cmphu#18   3311  bpl('.cmphu#18')                #16 Skip if same sign
              0bcc 0119  ld   [$19]       3312  ld([vAC+1])                     #17
              0bcd e8c3  blt  .cmphs#20   3313  bmi('.cmphs#20')                #18
              0bce fcc5  bra  .cmphs#21   3314  bra('.cmphs#21')                #19
              0bcf 00ff  ld   $ff         3315  ld(-1)                          #20    vAC > variable
                                          3316
                                          3317  # No-operation for CMPHS/CMPHU when high bits are equal
                                          3318  label('.cmphu#18')
.cmphu#18:    0bd0 e0cb  jmp  y,$cb       3319  jmp(Y,'REENTER')                #18
              0bd1 00f5  ld   $f5         3320  ld(-22//2)                      #19
                                          3321
                                          3322  #-----------------------------------------------------------------------
                                          3323  #
                                          3324  #  $0c00 ROM page 12: More SYS functions (sprites)
                                          3325  #
                                          3326  #       Page 1: vertical blank interval
                                          3327  #       Page 2: visible scanlines
                                          3328  #
                                          3329  #-----------------------------------------------------------------------
                                          3330
              0bd2 0200  nop              3331  align(0x100, size=0x100)
              0bd3 0200  nop
              0bd4 0200  nop
              * 46 times
                                          3332
                                          3333  #-----------------------------------------------------------------------
                                          3334  # Extension SYS_Sprite6_v3_64
                                          3335  # Extension SYS_Sprite6x_v3_64
                                          3336  # Extension SYS_Sprite6y_v3_64
                                          3337  # Extension SYS_Sprite6xy_v3_64
                                          3338  #-----------------------------------------------------------------------
                                          3339
                                          3340  # Blit sprite in screen memory
                                          3341  #
                                          3342  # Variables
                                          3343  #       vAC             Destination address in screen
                                          3344  #       sysArgs[0:1]    Source address of 6xY pixels (colors 0..63) terminated
                                          3345  #                       by negative byte value N (typically N = -Y)
                                          3346  #       sysArgs[2:7]    Scratch (user as copy buffer)
                                          3347  #
                                          3348  # This SYS function draws a sprite of 6 pixels wide and Y pixels high.
                                          3349  # The pixel data is read sequentually from RAM, in horizontal chunks
                                          3350  # of 6 pixels at a time, and then written to the screen through the
                                          3351  # destination pointer (each chunk underneath the previous), thus
                                          3352  # drawing a 6xY stripe. Pixel values should be non-negative. The first
                                          3353  # negative byte N after a chunk signals the end of the sprite data.
                                          3354  # So the sprite's height Y is determined by the source data and is
                                          3355  # therefore flexible. This negative byte value, typically N == -Y,
                                          3356  # is then used to adjust the destination pointer's high byte, to make
                                          3357  # it easier to draw sprites wider than 6 pixels: just repeat the SYS
                                          3358  # call for as many 6-pixel wide stripes you need. All arguments are
                                          3359  # already left in place to facilitate this. After one call, the source
                                          3360  # pointer will point past that source data, effectively:
                                          3361  #       src += Y * 6 + 1
                                          3362  # The destination pointer will have been adjusted as:
                                          3363  #       dst += (Y + N) * 256 + 6
                                          3364  # (With arithmetic wrapping around on the same memory page)
                                          3365  #
                                          3366  # Y is only limited by source memory, not by CPU cycles. The
                                          3367  # implementation is such that the SYS function self-repeats, each
                                          3368  # time drawing the next 6-pixel chunk. It can typically draw 12
                                          3369  # pixels per scanline this way.
                                          3370
                                          3371  label('SYS_Sprite6_v3_64')
                                          3372
SYS_Sprite6_v3_64:
              0c00 1124  ld   [$24],x     3373  ld([sysArgs+0],X)               #15 Pixel data source address
              0c01 1525  ld   [$25],y     3374  ld([sysArgs+1],Y)               #16
              0c02 0d00  ld   [y,x]       3375  ld([Y,X])                       #17 Next pixel or stop
              0c03 f411  bge  .sysDpx0    3376  bpl('.sysDpx0')                 #18
              0c04 de00  st   [y,x++]     3377  st([Y,Xpp])                     #19 Just X++
                                          3378
              0c05 8119  adda [$19]       3379  adda([vAC+1])                   #20 Adjust dst for convenience
              0c06 c219  st   [$19]       3380  st([vAC+1])                     #21
              0c07 0118  ld   [$18]       3381  ld([vAC])                       #22
              0c08 8006  adda $06         3382  adda(6)                         #23
              0c09 c218  st   [$18]       3383  st([vAC])                       #24
              0c0a 0124  ld   [$24]       3384  ld([sysArgs+0])                 #25 Adjust src for convenience
              0c0b 8001  adda $01         3385  adda(1)                         #26
              0c0c c224  st   [$24]       3386  st([sysArgs+0])                 #27
              0c0d 0200  nop              3387  nop()                           #28
              0c0e 1403  ld   $03,y       3388  ld(hi('REENTER'),Y)             #29 Normal exit (no self-repeat)
              0c0f e0cb  jmp  y,$cb       3389  jmp(Y,'REENTER')                #30
              0c10 00ef  ld   $ef         3390  ld(-34//2)                      #31
                                          3391
                                          3392  label('.sysDpx0')
.sysDpx0:     0c11 c226  st   [$26]       3393  st([sysArgs+2])                 #20 Gobble 6 pixels into buffer
              0c12 0d00  ld   [y,x]       3394  ld([Y,X])                       #21
              0c13 de00  st   [y,x++]     3395  st([Y,Xpp])                     #22 Just X++
              0c14 c227  st   [$27]       3396  st([sysArgs+3])                 #23
              0c15 0d00  ld   [y,x]       3397  ld([Y,X])                       #24
              0c16 de00  st   [y,x++]     3398  st([Y,Xpp])                     #25 Just X++
              0c17 c228  st   [$28]       3399  st([sysArgs+4])                 #26
              0c18 0d00  ld   [y,x]       3400  ld([Y,X])                       #27
              0c19 de00  st   [y,x++]     3401  st([Y,Xpp])                     #28 Just X++
              0c1a c229  st   [$29]       3402  st([sysArgs+5])                 #29
              0c1b 0d00  ld   [y,x]       3403  ld([Y,X])                       #30
              0c1c de00  st   [y,x++]     3404  st([Y,Xpp])                     #31 Just X++
              0c1d c22a  st   [$2a]       3405  st([sysArgs+6])                 #32
              0c1e 0d00  ld   [y,x]       3406  ld([Y,X])                       #33
              0c1f de00  st   [y,x++]     3407  st([Y,Xpp])                     #34 Just X++
              0c20 c22b  st   [$2b]       3408  st([sysArgs+7])                 #35
                                          3409
              0c21 1118  ld   [$18],x     3410  ld([vAC],X)                     #36 Screen memory destination address
              0c22 1519  ld   [$19],y     3411  ld([vAC+1],Y)                   #37
              0c23 0126  ld   [$26]       3412  ld([sysArgs+2])                 #38 Write 6 pixels
              0c24 de00  st   [y,x++]     3413  st([Y,Xpp])                     #39
              0c25 0127  ld   [$27]       3414  ld([sysArgs+3])                 #40
              0c26 de00  st   [y,x++]     3415  st([Y,Xpp])                     #41
              0c27 0128  ld   [$28]       3416  ld([sysArgs+4])                 #42
              0c28 de00  st   [y,x++]     3417  st([Y,Xpp])                     #43
              0c29 0129  ld   [$29]       3418  ld([sysArgs+5])                 #44
              0c2a de00  st   [y,x++]     3419  st([Y,Xpp])                     #45
              0c2b 012a  ld   [$2a]       3420  ld([sysArgs+6])                 #46
              0c2c de00  st   [y,x++]     3421  st([Y,Xpp])                     #47
              0c2d 012b  ld   [$2b]       3422  ld([sysArgs+7])                 #48
              0c2e de00  st   [y,x++]     3423  st([Y,Xpp])                     #49
                                          3424
              0c2f 0124  ld   [$24]       3425  ld([sysArgs+0])                 #50 src += 6
              0c30 8006  adda $06         3426  adda(6)                         #51
              0c31 c224  st   [$24]       3427  st([sysArgs+0])                 #52
              0c32 0119  ld   [$19]       3428  ld([vAC+1])                     #53 dst += 256
              0c33 8001  adda $01         3429  adda(1)                         #54
              0c34 c219  st   [$19]       3430  st([vAC+1])                     #55
                                          3431
              0c35 0116  ld   [$16]       3432  ld([vPC])                       #56 Self-repeating SYS call
              0c36 a002  suba $02         3433  suba(2)                         #57
              0c37 c216  st   [$16]       3434  st([vPC])                       #58
              0c38 1403  ld   $03,y       3435  ld(hi('REENTER'),Y)             #59
              0c39 e0cb  jmp  y,$cb       3436  jmp(Y,'REENTER')                #60
              0c3a 00e0  ld   $e0         3437  ld(-64//2)                      #61
                                          3438
              0c3b 0200  nop              3439  align(64)
              0c3c 0200  nop
              0c3d 0200  nop
              * 5 times
                                          3440  label('SYS_Sprite6x_v3_64')
                                          3441
SYS_Sprite6x_v3_64:
              0c40 1124  ld   [$24],x     3442  ld([sysArgs+0],X)               #15 Pixel data source address
              0c41 1525  ld   [$25],y     3443  ld([sysArgs+1],Y)               #16
              0c42 0d00  ld   [y,x]       3444  ld([Y,X])                       #17 Next pixel or stop
              0c43 f451  bge  .sysDpx1    3445  bpl('.sysDpx1')                 #18
              0c44 de00  st   [y,x++]     3446  st([Y,Xpp])                     #19 Just X++
                                          3447
              0c45 8119  adda [$19]       3448  adda([vAC+1])                   #20 Adjust dst for convenience
              0c46 c219  st   [$19]       3449  st([vAC+1])                     #21
              0c47 0118  ld   [$18]       3450  ld([vAC])                       #22
              0c48 a006  suba $06         3451  suba(6)                         #23
              0c49 c218  st   [$18]       3452  st([vAC])                       #24
              0c4a 0124  ld   [$24]       3453  ld([sysArgs+0])                 #25 Adjust src for convenience
              0c4b 8001  adda $01         3454  adda(1)                         #26
              0c4c c224  st   [$24]       3455  st([sysArgs+0])                 #27
              0c4d 0200  nop              3456  nop()                           #28
              0c4e 1403  ld   $03,y       3457  ld(hi('REENTER'),Y)             #29 Normal exit (no self-repeat)
              0c4f e0cb  jmp  y,$cb       3458  jmp(Y,'REENTER')                #30
              0c50 00ef  ld   $ef         3459  ld(-34//2)                      #31
                                          3460
                                          3461  label('.sysDpx1')
.sysDpx1:     0c51 c22b  st   [$2b]       3462  st([sysArgs+7])                 #20 Gobble 6 pixels into buffer (backwards)
              0c52 0d00  ld   [y,x]       3463  ld([Y,X])                       #21
              0c53 de00  st   [y,x++]     3464  st([Y,Xpp])                     #22 Just X++
              0c54 c22a  st   [$2a]       3465  st([sysArgs+6])                 #23
              0c55 0d00  ld   [y,x]       3466  ld([Y,X])                       #24
              0c56 de00  st   [y,x++]     3467  st([Y,Xpp])                     #25 Just X++
              0c57 c229  st   [$29]       3468  st([sysArgs+5])                 #26
              0c58 0d00  ld   [y,x]       3469  ld([Y,X])                       #27
              0c59 de00  st   [y,x++]     3470  st([Y,Xpp])                     #28 Just X++
              0c5a c228  st   [$28]       3471  st([sysArgs+4])                 #29
              0c5b 0d00  ld   [y,x]       3472  ld([Y,X])                       #30
              0c5c de00  st   [y,x++]     3473  st([Y,Xpp])                     #31 Just X++
              0c5d c227  st   [$27]       3474  st([sysArgs+3])                 #32
              0c5e 0d00  ld   [y,x]       3475  ld([Y,X])                       #33
              0c5f de00  st   [y,x++]     3476  st([Y,Xpp])                     #34 Just X++
                                          3477
              0c60 1118  ld   [$18],x     3478  ld([vAC],X)                     #35 Screen memory destination address
              0c61 1519  ld   [$19],y     3479  ld([vAC+1],Y)                   #36
              0c62 de00  st   [y,x++]     3480  st([Y,Xpp])                     #37 Write 6 pixels
              0c63 0127  ld   [$27]       3481  ld([sysArgs+3])                 #38
              0c64 de00  st   [y,x++]     3482  st([Y,Xpp])                     #39
              0c65 0128  ld   [$28]       3483  ld([sysArgs+4])                 #40
              0c66 de00  st   [y,x++]     3484  st([Y,Xpp])                     #41
              0c67 0129  ld   [$29]       3485  ld([sysArgs+5])                 #42
              0c68 de00  st   [y,x++]     3486  st([Y,Xpp])                     #43
              0c69 012a  ld   [$2a]       3487  ld([sysArgs+6])                 #44
              0c6a de00  st   [y,x++]     3488  st([Y,Xpp])                     #45
              0c6b 012b  ld   [$2b]       3489  ld([sysArgs+7])                 #46
              0c6c de00  st   [y,x++]     3490  st([Y,Xpp])                     #47
                                          3491
              0c6d 0124  ld   [$24]       3492  ld([sysArgs+0])                 #48 src += 6
              0c6e 8006  adda $06         3493  adda(6)                         #49
              0c6f c224  st   [$24]       3494  st([sysArgs+0])                 #50
              0c70 0119  ld   [$19]       3495  ld([vAC+1])                     #51 dst += 256
              0c71 8001  adda $01         3496  adda(1)                         #52
              0c72 c219  st   [$19]       3497  st([vAC+1])                     #53
                                          3498
              0c73 0116  ld   [$16]       3499  ld([vPC])                       #54 Self-repeating SYS call
              0c74 a002  suba $02         3500  suba(2)                         #55
              0c75 c216  st   [$16]       3501  st([vPC])                       #56
              0c76 1403  ld   $03,y       3502  ld(hi('REENTER'),Y)             #57
              0c77 e0cb  jmp  y,$cb       3503  jmp(Y,'REENTER')                #58
              0c78 00e1  ld   $e1         3504  ld(-62//2)                      #59
                                          3505
              0c79 0200  nop              3506  align(64)
              0c7a 0200  nop
              0c7b 0200  nop
              * 7 times
                                          3507  label('SYS_Sprite6y_v3_64')
                                          3508
SYS_Sprite6y_v3_64:
              0c80 1124  ld   [$24],x     3509  ld([sysArgs+0],X)               #15 Pixel data source address
              0c81 1525  ld   [$25],y     3510  ld([sysArgs+1],Y)               #16
              0c82 0d00  ld   [y,x]       3511  ld([Y,X])                       #17 Next pixel or stop
              0c83 f493  bge  .sysDpx2    3512  bpl('.sysDpx2')                 #18
              0c84 de00  st   [y,x++]     3513  st([Y,Xpp])                     #19 Just X++
                                          3514
              0c85 60ff  xora $ff         3515  xora(255)                       #20 Adjust dst for convenience
              0c86 8001  adda $01         3516  adda(1)                         #21
              0c87 8119  adda [$19]       3517  adda([vAC+1])                   #22
              0c88 c219  st   [$19]       3518  st([vAC+1])                     #23
              0c89 0118  ld   [$18]       3519  ld([vAC])                       #24
              0c8a 8006  adda $06         3520  adda(6)                         #25
              0c8b c218  st   [$18]       3521  st([vAC])                       #26
              0c8c 0124  ld   [$24]       3522  ld([sysArgs+0])                 #27 Adjust src for convenience
              0c8d 8001  adda $01         3523  adda(1)                         #28
              0c8e c224  st   [$24]       3524  st([sysArgs+0])                 #29
              0c8f 0200  nop              3525  nop()                           #30
              0c90 1403  ld   $03,y       3526  ld(hi('REENTER'),Y)             #31 Normal exit (no self-repeat)
              0c91 e0cb  jmp  y,$cb       3527  jmp(Y,'REENTER')                #32
              0c92 00ee  ld   $ee         3528  ld(-36//2)                      #33
                                          3529
                                          3530  label('.sysDpx2')
.sysDpx2:     0c93 c226  st   [$26]       3531  st([sysArgs+2])                 #20 Gobble 6 pixels into buffer
              0c94 0d00  ld   [y,x]       3532  ld([Y,X])                       #21
              0c95 de00  st   [y,x++]     3533  st([Y,Xpp])                     #22 Just X++
              0c96 c227  st   [$27]       3534  st([sysArgs+3])                 #23
              0c97 0d00  ld   [y,x]       3535  ld([Y,X])                       #24
              0c98 de00  st   [y,x++]     3536  st([Y,Xpp])                     #25 Just X++
              0c99 c228  st   [$28]       3537  st([sysArgs+4])                 #26
              0c9a 0d00  ld   [y,x]       3538  ld([Y,X])                       #27
              0c9b de00  st   [y,x++]     3539  st([Y,Xpp])                     #28 Just X++
              0c9c c229  st   [$29]       3540  st([sysArgs+5])                 #29
              0c9d 0d00  ld   [y,x]       3541  ld([Y,X])                       #30
              0c9e de00  st   [y,x++]     3542  st([Y,Xpp])                     #31 Just X++
              0c9f c22a  st   [$2a]       3543  st([sysArgs+6])                 #32
              0ca0 0d00  ld   [y,x]       3544  ld([Y,X])                       #33
              0ca1 de00  st   [y,x++]     3545  st([Y,Xpp])                     #34 Just X++
              0ca2 c22b  st   [$2b]       3546  st([sysArgs+7])                 #35
                                          3547
              0ca3 1118  ld   [$18],x     3548  ld([vAC],X)                     #36 Screen memory destination address
              0ca4 1519  ld   [$19],y     3549  ld([vAC+1],Y)                   #37
              0ca5 0126  ld   [$26]       3550  ld([sysArgs+2])                 #38 Write 6 pixels
              0ca6 de00  st   [y,x++]     3551  st([Y,Xpp])                     #39
              0ca7 0127  ld   [$27]       3552  ld([sysArgs+3])                 #40
              0ca8 de00  st   [y,x++]     3553  st([Y,Xpp])                     #41
              0ca9 0128  ld   [$28]       3554  ld([sysArgs+4])                 #42
              0caa de00  st   [y,x++]     3555  st([Y,Xpp])                     #43
              0cab 0129  ld   [$29]       3556  ld([sysArgs+5])                 #44
              0cac de00  st   [y,x++]     3557  st([Y,Xpp])                     #45
              0cad 012a  ld   [$2a]       3558  ld([sysArgs+6])                 #46
              0cae de00  st   [y,x++]     3559  st([Y,Xpp])                     #47
              0caf 012b  ld   [$2b]       3560  ld([sysArgs+7])                 #48
              0cb0 de00  st   [y,x++]     3561  st([Y,Xpp])                     #49
                                          3562
              0cb1 0124  ld   [$24]       3563  ld([sysArgs+0])                 #50 src += 6
              0cb2 8006  adda $06         3564  adda(6)                         #51
              0cb3 c224  st   [$24]       3565  st([sysArgs+0])                 #52
              0cb4 0119  ld   [$19]       3566  ld([vAC+1])                     #53 dst -= 256
              0cb5 a001  suba $01         3567  suba(1)                         #54
              0cb6 c219  st   [$19]       3568  st([vAC+1])                     #55
                                          3569
              0cb7 0116  ld   [$16]       3570  ld([vPC])                       #56 Self-repeating SYS call
              0cb8 a002  suba $02         3571  suba(2)                         #57
              0cb9 c216  st   [$16]       3572  st([vPC])                       #58
              0cba 1403  ld   $03,y       3573  ld(hi('REENTER'),Y)             #59
              0cbb e0cb  jmp  y,$cb       3574  jmp(Y,'REENTER')                #60
              0cbc 00e0  ld   $e0         3575  ld(-64//2)                      #61
                                          3576
              0cbd 0200  nop              3577  align(64)
              0cbe 0200  nop
              0cbf 0200  nop
                                          3578  label('SYS_Sprite6xy_v3_64')
                                          3579
SYS_Sprite6xy_v3_64:
              0cc0 1124  ld   [$24],x     3580  ld([sysArgs+0],X)               #15 Pixel data source address
              0cc1 1525  ld   [$25],y     3581  ld([sysArgs+1],Y)               #16
              0cc2 0d00  ld   [y,x]       3582  ld([Y,X])                       #17 Next pixel or stop
              0cc3 f4d3  bge  .sysDpx3    3583  bpl('.sysDpx3')                 #18
              0cc4 de00  st   [y,x++]     3584  st([Y,Xpp])                     #19 Just X++
                                          3585
              0cc5 60ff  xora $ff         3586  xora(255)                       #20 Adjust dst for convenience
              0cc6 8001  adda $01         3587  adda(1)                         #21
              0cc7 8119  adda [$19]       3588  adda([vAC+1])                   #22
              0cc8 c219  st   [$19]       3589  st([vAC+1])                     #23
              0cc9 0118  ld   [$18]       3590  ld([vAC])                       #24
              0cca a006  suba $06         3591  suba(6)                         #25
              0ccb c218  st   [$18]       3592  st([vAC])                       #26
              0ccc 0124  ld   [$24]       3593  ld([sysArgs+0])                 #27 Adjust src for convenience
              0ccd 8001  adda $01         3594  adda(1)                         #28
              0cce c224  st   [$24]       3595  st([sysArgs+0])                 #29
              0ccf 0200  nop              3596  nop()                           #30
              0cd0 1403  ld   $03,y       3597  ld(hi('REENTER'),Y)             #31 Normal exit (no self-repeat)
              0cd1 e0cb  jmp  y,$cb       3598  jmp(Y,'REENTER')                #32
              0cd2 00ee  ld   $ee         3599  ld(-36//2)                      #33
                                          3600
                                          3601  label('.sysDpx3')
.sysDpx3:     0cd3 c22b  st   [$2b]       3602  st([sysArgs+7])                 #20 Gobble 6 pixels into buffer (backwards)
              0cd4 0d00  ld   [y,x]       3603  ld([Y,X])                       #21
              0cd5 de00  st   [y,x++]     3604  st([Y,Xpp])                     #22 Just X++
              0cd6 c22a  st   [$2a]       3605  st([sysArgs+6])                 #23
              0cd7 0d00  ld   [y,x]       3606  ld([Y,X])                       #24
              0cd8 de00  st   [y,x++]     3607  st([Y,Xpp])                     #25 Just X++
              0cd9 c229  st   [$29]       3608  st([sysArgs+5])                 #26
              0cda 0d00  ld   [y,x]       3609  ld([Y,X])                       #27
              0cdb de00  st   [y,x++]     3610  st([Y,Xpp])                     #28 Just X++
              0cdc c228  st   [$28]       3611  st([sysArgs+4])                 #29
              0cdd 0d00  ld   [y,x]       3612  ld([Y,X])                       #30
              0cde de00  st   [y,x++]     3613  st([Y,Xpp])                     #31 Just X++
              0cdf c227  st   [$27]       3614  st([sysArgs+3])                 #32
              0ce0 0d00  ld   [y,x]       3615  ld([Y,X])                       #33
              0ce1 de00  st   [y,x++]     3616  st([Y,Xpp])                     #34 Just X++
                                          3617
              0ce2 1118  ld   [$18],x     3618  ld([vAC],X)                     #35 Screen memory destination address
              0ce3 1519  ld   [$19],y     3619  ld([vAC+1],Y)                   #36
              0ce4 de00  st   [y,x++]     3620  st([Y,Xpp])                     #37 Write 6 pixels
              0ce5 0127  ld   [$27]       3621  ld([sysArgs+3])                 #38
              0ce6 de00  st   [y,x++]     3622  st([Y,Xpp])                     #39
              0ce7 0128  ld   [$28]       3623  ld([sysArgs+4])                 #40
              0ce8 de00  st   [y,x++]     3624  st([Y,Xpp])                     #41
              0ce9 0129  ld   [$29]       3625  ld([sysArgs+5])                 #42
              0cea de00  st   [y,x++]     3626  st([Y,Xpp])                     #43
              0ceb 012a  ld   [$2a]       3627  ld([sysArgs+6])                 #44
              0cec de00  st   [y,x++]     3628  st([Y,Xpp])                     #45
              0ced 012b  ld   [$2b]       3629  ld([sysArgs+7])                 #46
              0cee de00  st   [y,x++]     3630  st([Y,Xpp])                     #47
                                          3631
              0cef 0124  ld   [$24]       3632  ld([sysArgs+0])                 #48 src += 6
              0cf0 8006  adda $06         3633  adda(6)                         #49
              0cf1 c224  st   [$24]       3634  st([sysArgs+0])                 #50
              0cf2 0119  ld   [$19]       3635  ld([vAC+1])                     #51 dst -= 256
              0cf3 a001  suba $01         3636  suba(1)                         #52
              0cf4 c219  st   [$19]       3637  st([vAC+1])                     #53
                                          3638
              0cf5 0116  ld   [$16]       3639  ld([vPC])                       #54 Self-repeating SYS call
              0cf6 a002  suba $02         3640  suba(2)                         #55
              0cf7 c216  st   [$16]       3641  st([vPC])                       #56
              0cf8 1403  ld   $03,y       3642  ld(hi('REENTER'),Y)             #57
              0cf9 e0cb  jmp  y,$cb       3643  jmp(Y,'REENTER')                #58
              0cfa 00e1  ld   $e1         3644  ld(-62//2)                      #59
                                          3645
                                          3646  #-----------------------------------------------------------------------
                                          3647
                                          3648  label('sys_ExpanderControl')
                                          3649
sys_ExpanderControl:
              0cfb 0118  ld   [$18]       3650  ld([vAC])                       #18
              0cfc 20fc  anda $fc         3651  anda(0b11111100)                #19 Safety (SCLK=0)
                                          3652  #      ^^^^^^^^
                                          3653  #      |||||||`-- SCLK
                                          3654  #      ||||||`--- Not connected
                                          3655  #      |||||`---- /SS0
                                          3656  #      ||||`----- /SS1
                                          3657  #      |||`------ /SS2
                                          3658  #      ||`------- /SS3
                                          3659  #      |`-------- B0
                                          3660  #      `--------- B1
              0cfd 1401  ld   $01,y       3661  ld(hi(ctrlBits),Y)              #20
              0cfe caf8  st   [y,$f8]     3662  st([Y,ctrlBits])                #21 Set control register
              0cff 1200  ld   ac,x        3663  ld(AC,X)                        #22
              0d00 1519  ld   [$19],y     3664  ld([vAC+1],Y)                   #23 For MOSI (A15)
              0d01 cd00  ctrl y,x         3665  ctrl(Y,X)                       #24
                                          3666
              0d02 0127  ld   [$27]       3667  ld([sysArgs+3])                 #25 Prepare SYS_SpiExchangeBytes
                                          3668  assert pc()&255 < 255-3         # Beware of page crossing: asm.py won't warn
              0d03 ec06  bne  $0d06       3669  bne(pc()+3)                     #26
              0d04 fc06  bra  $0d06       3670  bra(pc()+2)                     #27
              0d05 0125  ld   [$25]       3671  ld([sysArgs+1])                 #28
              0d06 c227  st   [$27]       3672  st([sysArgs+3])                 #28,29 (must be idempotent)
                                          3673
              0d07 1403  ld   $03,y       3674  ld(hi('NEXTY'),Y)               #30
              0d08 e000  jmp  y,$00       3675  jmp(Y,'NEXTY')                  #31
              0d09 00ef  ld   $ef         3676  ld(-34//2)                      #32
                                          3677
                                          3678  #-----------------------------------------------------------------------
                                          3679
                                          3680  label('sys_SpiExchangeBytes')
                                          3681
sys_SpiExchangeBytes:
              0d0a 09f8  ld   [y,$f8]     3682  ld([Y,ctrlBits])                #18
              0d0b c228  st   [$28]       3683  st([sysArgs+4])                 #19
                                          3684
              0d0c 1124  ld   [$24],x     3685  ld([sysArgs+0],X)               #20 Fetch byte to send
              0d0d 1525  ld   [$25],y     3686  ld([sysArgs+1],Y)               #21
              0d0e 0d00  ld   [y,x]       3687  ld([Y,X])                       #22
                                          3688
                                          3689  for i in range(8):
                                          3690    st([vTmp],Y);C('Bit %d'%(7-i))#23+i*12
              0d0f d61d  st   [$1d],y     ;Bit 7
              0d10 1128  ld   [$28],x     3691    ld([sysArgs+4],X)             #24+i*12
              0d11 dd00  ctrl y,x++       3692    ctrl(Y,Xpp)                   #25+i*12 Set MOSI
              0d12 dd00  ctrl y,x++       3693    ctrl(Y,Xpp)                   #26+i*12 Raise SCLK
              0d13 0100  ld   [$00]       3694    ld([0])                       #27+i*12 Get MISO
              0d14 200f  anda $0f         3695    anda(0b00001111)              #28+i*12
              0d15 f018  beq  $0d18       3696    beq(pc()+3)                   #29+i*12
              0d16 fc18  bra  $0d18       3697    bra(pc()+2)                   #30+i*12
              0d17 0001  ld   $01         3698    ld(1)                         #31+i*12
              0d18 cd00  ctrl y,x         3699    ctrl(Y,X)                     #32+i*12,29+i*12 (Must be idempotent) Lower SCLK
              0d19 811d  adda [$1d]       3700    adda([vTmp])                  #33+i*12 Shift
              0d1a 811d  adda [$1d]       3701    adda([vTmp])                  #34+i*12
              0d1b d61d  st   [$1d],y     ;Bit 6
              0d1c 1128  ld   [$28],x
              0d1d dd00  ctrl y,x++
              0d1e dd00  ctrl y,x++
              0d1f 0100  ld   [$00]
              0d20 200f  anda $0f
              0d21 f024  beq  $0d24
              0d22 fc24  bra  $0d24
              0d23 0001  ld   $01
              0d24 cd00  ctrl y,x
              0d25 811d  adda [$1d]
              0d26 811d  adda [$1d]
              0d27 d61d  st   [$1d],y     ;Bit 5
              0d28 1128  ld   [$28],x
              0d29 dd00  ctrl y,x++
              0d2a dd00  ctrl y,x++
              0d2b 0100  ld   [$00]
              0d2c 200f  anda $0f
              0d2d f030  beq  $0d30
              0d2e fc30  bra  $0d30
              0d2f 0001  ld   $01
              0d30 cd00  ctrl y,x
              0d31 811d  adda [$1d]
              0d32 811d  adda [$1d]
              0d33 d61d  st   [$1d],y     ;Bit 4
              0d34 1128  ld   [$28],x
              0d35 dd00  ctrl y,x++
              0d36 dd00  ctrl y,x++
              0d37 0100  ld   [$00]
              0d38 200f  anda $0f
              0d39 f03c  beq  $0d3c
              0d3a fc3c  bra  $0d3c
              0d3b 0001  ld   $01
              0d3c cd00  ctrl y,x
              0d3d 811d  adda [$1d]
              0d3e 811d  adda [$1d]
              0d3f d61d  st   [$1d],y     ;Bit 3
              0d40 1128  ld   [$28],x
              0d41 dd00  ctrl y,x++
              0d42 dd00  ctrl y,x++
              0d43 0100  ld   [$00]
              0d44 200f  anda $0f
              0d45 f048  beq  $0d48
              0d46 fc48  bra  $0d48
              0d47 0001  ld   $01
              0d48 cd00  ctrl y,x
              0d49 811d  adda [$1d]
              0d4a 811d  adda [$1d]
              0d4b d61d  st   [$1d],y     ;Bit 2
              0d4c 1128  ld   [$28],x
              0d4d dd00  ctrl y,x++
              0d4e dd00  ctrl y,x++
              0d4f 0100  ld   [$00]
              0d50 200f  anda $0f
              0d51 f054  beq  $0d54
              0d52 fc54  bra  $0d54
              0d53 0001  ld   $01
              0d54 cd00  ctrl y,x
              0d55 811d  adda [$1d]
              0d56 811d  adda [$1d]
              0d57 d61d  st   [$1d],y     ;Bit 1
              0d58 1128  ld   [$28],x
              0d59 dd00  ctrl y,x++
              0d5a dd00  ctrl y,x++
              0d5b 0100  ld   [$00]
              0d5c 200f  anda $0f
              0d5d f060  beq  $0d60
              0d5e fc60  bra  $0d60
              0d5f 0001  ld   $01
              0d60 cd00  ctrl y,x
              0d61 811d  adda [$1d]
              0d62 811d  adda [$1d]
              0d63 d61d  st   [$1d],y     ;Bit 0
              0d64 1128  ld   [$28],x
              0d65 dd00  ctrl y,x++
              0d66 dd00  ctrl y,x++
              0d67 0100  ld   [$00]
              0d68 200f  anda $0f
              0d69 f06c  beq  $0d6c
              0d6a fc6c  bra  $0d6c
              0d6b 0001  ld   $01
              0d6c cd00  ctrl y,x
              0d6d 811d  adda [$1d]
              0d6e 811d  adda [$1d]
                                          3702
              0d6f 1124  ld   [$24],x     3703  ld([sysArgs+0],X)               #119 Store received byte
              0d70 1527  ld   [$27],y     3704  ld([sysArgs+3],Y)               #120
              0d71 ce00  st   [y,x]       3705  st([Y,X])                       #121
                                          3706
              0d72 0124  ld   [$24]       3707  ld([sysArgs+0])                 #122 Advance pointer
              0d73 8001  adda $01         3708  adda(1)                         #123
              0d74 c224  st   [$24]       3709  st([sysArgs+0])                 #124
                                          3710
              0d75 6126  xora [$26]       3711  xora([sysArgs+2])               #125 Reached end?
              0d76 f07d  beq  .sysSpi#128 3712  beq('.sysSpi#128')              #126
                                          3713
              0d77 0116  ld   [$16]       3714  ld([vPC])                       #127 Self-repeating SYS call
              0d78 a002  suba $02         3715  suba(2)                         #128
              0d79 c216  st   [$16]       3716  st([vPC])                       #129
              0d7a 1403  ld   $03,y       3717  ld(hi('NEXTY'),Y)               #130
              0d7b e000  jmp  y,$00       3718  jmp(Y,'NEXTY')                  #131
              0d7c 00bd  ld   $bd         3719  ld(-134//2)                     #132
                                          3720
                                          3721  label('.sysSpi#128')
.sysSpi#128:  0d7d 1403  ld   $03,y       3722  ld(hi('NEXTY'),Y)               #128 Continue program
              0d7e e000  jmp  y,$00       3723  jmp(Y,'NEXTY')                  #129
              0d7f 00be  ld   $be         3724  ld(-132//2)                     #130
                                          3725
                                          3726  #-----------------------------------------------------------------------
                                          3727
                                          3728  label('sys_v6502')
                                          3729
sys_v6502:    0d80 d605  st   [$05],y     3730  st([vCPUselect],Y)              #18 Activate v6502
              0d81 00f5  ld   $f5         3731  ld(-22//2)                      #19
              0d82 e0ff  jmp  y,$ff       3732  jmp(Y,'v6502_ENTER')            #20 Transfer control in the same time slice
              0d83 8115  adda [$15]       3733  adda([vTicks])                  #21
                                          3734  assert (38 - 22)//2 >= v6502_adjust
                                          3735
                                          3736  #-----------------------------------------------------------------------
                                          3737  #       MOS 6502 emulator
                                          3738  #-----------------------------------------------------------------------
                                          3739
                                          3740  # Some quirks:
                                          3741  # - Stack in zero page instead of page 1
                                          3742  # - No interrupts
                                          3743  # - No decimal mode (may never be added). D flag is emulated but ignored.
                                          3744  # - BRK switches back to running 16-bits vCPU
                                          3745  # - Illegal opcodes map to BRK, but can read ghost operands before trapping
                                          3746  # - Illegal opcode $ff won't be trapped and cause havoc instead
                                          3747
                                          3748  # Big things TODO:
                                          3749  # XXX Tuning, put most frequent instructions in the primary page
                                          3750
                                          3751  label('v6502_ror')
                                          3752  assert v6502_Cflag == 1
v6502_ror:    0d84 1525  ld   [$25],y     3753  ld([v6502_ADH],Y)               #12
              0d85 00fc  ld   $fc         3754  ld(-46//2+v6502_maxTicks)       #13 Is there enough time for the excess ticks?
              0d86 8115  adda [$15]       3755  adda([vTicks])                  #14
              0d87 e89b  blt  .recheck17  3756  blt('.recheck17')               #15
              0d88 0127  ld   [$27]       3757  ld([v6502_P])                   #16 Transfer C to "bit 8"
              0d89 2001  anda $01         3758  anda(1)                         #17
              0d8a 807f  adda $7f         3759  adda(127)                       #18
              0d8b 2080  anda $80         3760  anda(128)                       #19
              0d8c c219  st   [$19]       3761  st([v6502_BI])                  #20 The real 6502 wouldn't use BI for this
              0d8d 0127  ld   [$27]       3762  ld([v6502_P])                   #21 Transfer bit 0 to C
              0d8e 20fe  anda $fe         3763  anda(~1)                        #22
              0d8f c227  st   [$27]       3764  st([v6502_P])                   #23
              0d90 0d00  ld   [y,x]       3765  ld([Y,X])                       #24
              0d91 2001  anda $01         3766  anda(1)                         #25
              0d92 4127  ora  [$27]       3767  ora([v6502_P])                  #26
              0d93 c227  st   [$27]       3768  st([v6502_P])                   #27
              0d94 00ee  ld   $ee         3769  ld('v6502_ror38')               #28 Shift table lookup
              0d95 c21d  st   [$1d]       3770  st([vTmp])                      #29
              0d96 0d00  ld   [y,x]       3771  ld([Y,X])                       #30
              0d97 20fe  anda $fe         3772  anda(~1)                        #31
              0d98 1405  ld   $05,y       3773  ld(hi('shiftTable'),Y)          #32
              0d99 e200  jmp  y,ac        3774  jmp(Y,AC)                       #33
              0d9a fcff  bra  $ff         3775  bra(255)                        #34 bra shiftTable+255
                                          3776  label('.recheck17')
.recheck17:   0d9b 140e  ld   $0e,y       3777  ld(hi('v6502_check'),Y)         #17 Go back to time check before dispatch
              0d9c e0f2  jmp  y,$f2       3778  jmp(Y,'v6502_check')            #18
              0d9d 00f6  ld   $f6         3779  ld(-20//2)                      #19
                                          3780
                                          3781  label('v6502_lsr')
                                          3782  assert v6502_Cflag == 1
v6502_lsr:    0d9e 1525  ld   [$25],y     3783  ld([v6502_ADH],Y)               #12
              0d9f 0127  ld   [$27]       3784  ld([v6502_P])                   #13 Transfer bit 0 to C
              0da0 20fe  anda $fe         3785  anda(~1)                        #14
              0da1 c227  st   [$27]       3786  st([v6502_P])                   #15
              0da2 0d00  ld   [y,x]       3787  ld([Y,X])                       #16
              0da3 2001  anda $01         3788  anda(1)                         #17
              0da4 4127  ora  [$27]       3789  ora([v6502_P])                  #18
              0da5 c227  st   [$27]       3790  st([v6502_P])                   #19
              0da6 00e7  ld   $e7         3791  ld('v6502_lsr30')               #20 Shift table lookup
              0da7 c21d  st   [$1d]       3792  st([vTmp])                      #21
              0da8 0d00  ld   [y,x]       3793  ld([Y,X])                       #22
              0da9 20fe  anda $fe         3794  anda(~1)                        #23
              0daa 1405  ld   $05,y       3795  ld(hi('shiftTable'),Y)          #24
              0dab e200  jmp  y,ac        3796  jmp(Y,AC)                       #25
              0dac fcff  bra  $ff         3797  bra(255)                        #26 bra shiftTable+255
                                          3798
                                          3799  label('v6502_rol')
                                          3800  assert v6502_Cflag == 1
v6502_rol:    0dad 1525  ld   [$25],y     3801  ld([v6502_ADH],Y)               #12
              0dae 0d00  ld   [y,x]       3802  ld([Y,X])                       #13
              0daf 2080  anda $80         3803  anda(0x80)                      #14
              0db0 c21d  st   [$1d]       3804  st([v6502_Tmp])                 #15
              0db1 0127  ld   [$27]       3805  ld([v6502_P])                   #16
              0db2 2001  anda $01         3806  anda(1)                         #17
                                          3807  label('.rol18')
.rol18:       0db3 8d00  adda [y,x]       3808  adda([Y,X])                     #18
              0db4 8d00  adda [y,x]       3809  adda([Y,X])                     #19
              0db5 ce00  st   [y,x]       3810  st([Y,X])                       #20
              0db6 c228  st   [$28]       3811  st([v6502_Qz])                  #21 Z flag
              0db7 c229  st   [$29]       3812  st([v6502_Qn])                  #22 N flag
              0db8 0127  ld   [$27]       3813  ld([v6502_P])                   #23 C Flag
              0db9 20fe  anda $fe         3814  anda(~1)                        #24
              0dba 111d  ld   [$1d],x     3815  ld([v6502_Tmp],X)               #25
              0dbb 4500  ora  [x]         3816  ora([X])                        #26
              0dbc c227  st   [$27]       3817  st([v6502_P])                   #27
              0dbd 140e  ld   $0e,y       3818  ld(hi('v6502_next'),Y)          #28
              0dbe 00f0  ld   $f0         3819  ld(-32//2)                      #29
              0dbf e020  jmp  y,$20       3820  jmp(Y,'v6502_next')             #30
                                          3821  #nop()                          #31 Overlap
                                          3822  #
                                          3823  label('v6502_asl')
v6502_asl:    0dc0 1525  ld   [$25],y     3824  ld([v6502_ADH],Y)               #12,32
              0dc1 0d00  ld   [y,x]       3825  ld([Y,X])                       #13
              0dc2 2080  anda $80         3826  anda(0x80)                      #14
              0dc3 c21d  st   [$1d]       3827  st([v6502_Tmp])                 #15
              0dc4 fcb3  bra  .rol18      3828  bra('.rol18')                   #16
              0dc5 0000  ld   $00         3829  ld(0)                           #17
                                          3830
                                          3831  label('v6502_jmp1')
v6502_jmp1:   0dc6 0200  nop              3832  nop()                           #12
              0dc7 0124  ld   [$24]       3833  ld([v6502_ADL])                 #13
              0dc8 c21a  st   [$1a]       3834  st([v6502_PCL])                 #14
              0dc9 0125  ld   [$25]       3835  ld([v6502_ADH])                 #15
              0dca c21b  st   [$1b]       3836  st([v6502_PCH])                 #16
              0dcb 140e  ld   $0e,y       3837  ld(hi('v6502_next'),Y)          #17
              0dcc e020  jmp  y,$20       3838  jmp(Y,'v6502_next')             #18
              0dcd 00f6  ld   $f6         3839  ld(-20//2)                      #19
                                          3840
                                          3841  label('v6502_jmp2')
v6502_jmp2:   0dce 0200  nop              3842  nop()                           #12
              0dcf 1525  ld   [$25],y     3843  ld([v6502_ADH],Y)               #13
              0dd0 0d00  ld   [y,x]       3844  ld([Y,X])                       #14
              0dd1 de00  st   [y,x++]     3845  st([Y,Xpp])                     #15 (Just X++) Wrap around: bug compatible with NMOS
              0dd2 c21a  st   [$1a]       3846  st([v6502_PCL])                 #16
              0dd3 0d00  ld   [y,x]       3847  ld([Y,X])                       #17
              0dd4 c21b  st   [$1b]       3848  st([v6502_PCH])                 #18
              0dd5 140e  ld   $0e,y       3849  ld(hi('v6502_next'),Y)          #19
              0dd6 e020  jmp  y,$20       3850  jmp(Y,'v6502_next')             #20
              0dd7 00f5  ld   $f5         3851  ld(-22//2)                      #21
                                          3852
                                          3853  label('v6502_pla')
v6502_pla:    0dd8 011c  ld   [$1c]       3854  ld([v6502_S])                   #12
              0dd9 1200  ld   ac,x        3855  ld(AC,X)                        #13
              0dda 8001  adda $01         3856  adda(1)                         #14
              0ddb c21c  st   [$1c]       3857  st([v6502_S])                   #15
              0ddc 0500  ld   [x]         3858  ld([X])                         #16
              0ddd c218  st   [$18]       3859  st([v6502_A])                   #17
              0dde c228  st   [$28]       3860  st([v6502_Qz])                  #18 Z flag
              0ddf c229  st   [$29]       3861  st([v6502_Qn])                  #19 N flag
              0de0 140e  ld   $0e,y       3862  ld(hi('v6502_next'),Y)          #20
              0de1 00f4  ld   $f4         3863  ld(-24//2)                      #21
              0de2 e020  jmp  y,$20       3864  jmp(Y,'v6502_next')             #22
                                          3865  #nop()                          #23 Overlap
                                          3866  #
                                          3867  label('v6502_pha')
v6502_pha:    0de3 140e  ld   $0e,y       3868  ld(hi('v6502_next'),Y)          #12,24
              0de4 011c  ld   [$1c]       3869  ld([v6502_S])                   #13
              0de5 a001  suba $01         3870  suba(1)                         #14
              0de6 d21c  st   [$1c],x     3871  st([v6502_S],X)                 #15
              0de7 0118  ld   [$18]       3872  ld([v6502_A])                   #16
              0de8 c600  st   [x]         3873  st([X])                         #17
              0de9 e020  jmp  y,$20       3874  jmp(Y,'v6502_next')             #18
              0dea 00f6  ld   $f6         3875  ld(-20//2)                      #19
                                          3876
                                          3877  label('v6502_brk')
v6502_brk:    0deb 0002  ld   $02         3878  ld(hi('ENTER'))                 #12 Switch to vCPU
              0dec c205  st   [$05]       3879  st([vCPUselect])                #13
                                          3880  assert v6502_A == vAC
              0ded 0000  ld   $00         3881  ld(0)                           #14
              0dee c219  st   [$19]       3882  st([vAC+1])                     #15
              0def 1403  ld   $03,y       3883  ld(hi('REENTER'),Y)             #16 Switch in the current time slice
              0df0 00fb  ld   $fb         3884  ld(-22//2+v6502_adjust)         #17
              0df1 e0cb  jmp  y,$cb       3885  jmp(Y,'REENTER')                #18
              0df2 0200  nop              3886  nop()                           #19
                                          3887
                                          3888  # All interpreter entry points must share the same page offset, because
                                          3889  # this offset is hard-coded as immediate operand in the video driver.
                                          3890  # The Gigatron's original vCPU's 'ENTER' label is already at $2ff, so we
                                          3891  # just use $dff for 'v6502_ENTER'. v6502 actually has two entry points.
                                          3892  # The other is 'v6502_RESUME' at $10ff. It is used for instructions
                                          3893  # that were fetched but not yet executed. Allowing the split gives finer
                                          3894  # granulariy, and hopefully more throughput for the simpler instructions.
                                          3895  # (There is no "overhead" for allowing instruction splitting, because
                                          3896  #  both emulation phases must administer [vTicks] anyway.)
                                          3897  while pc()&255 < 255:
              0df3 0200  nop              3898    nop()
              0df4 0200  nop
              0df5 0200  nop
              * 12 times
                                          3899  label('v6502_ENTER')
v6502_ENTER:  0dff fc22  bra  v6502_next2 3900  bra('v6502_next2')              #0 v6502 primary entry point
                                          3901  # --- Page boundary ---
              0e00 a006  suba $06         3902  suba(v6502_adjust)              #1,19 Adjust for vCPU/v6520 timing differences
                                          3903
                                          3904  #19 Addressing modes
                                          3905  (   'v6502_mode0'  ); bra('v6502_modeIZX'); bra('v6502_modeIMM'); bra('v6502_modeILL') # $00 xxx000xx
              0e01 fce0  bra  v6502_modeIZX
              0e02 fc42  bra  v6502_modeIMM
              0e03 fc58  bra  v6502_modeIMP
                                          3906  bra('v6502_modeZP');  bra('v6502_modeZP');  bra('v6502_modeZP');  bra('v6502_modeILL') # $04 xxx001xx
              0e04 fc5d  bra  v6502_modeZP
              0e05 fc5d  bra  v6502_modeZP
              0e06 fc5d  bra  v6502_modeZP
              0e07 fc58  bra  v6502_modeIMP
                                          3907  bra('v6502_modeIMP'); bra('v6502_modeIMM'); bra('v6502_modeACC'); bra('v6502_modeILL') # $08 xxx010xx
              0e08 fc58  bra  v6502_modeIMP
              0e09 fc42  bra  v6502_modeIMM
              0e0a fc52  bra  v6502_modeACC
              0e0b fc58  bra  v6502_modeIMP
                                          3908  bra('v6502_modeABS'); bra('v6502_modeABS'); bra('v6502_modeABS'); bra('v6502_modeILL') # $0c xxx011xx
              0e0c fc78  bra  v6502_modeABS
              0e0d fc78  bra  v6502_modeABS
              0e0e fc78  bra  v6502_modeABS
              0e0f fc58  bra  v6502_modeIMP
                                          3909  bra('v6502_modeREL'); bra('v6502_modeIZY'); bra('v6502_modeIMM'); bra('v6502_modeILL') # $10 xxx100xx
              0e10 fccf  bra  v6502_modeREL
              0e11 fcab  bra  v6502_modeIZY
              0e12 fc42  bra  v6502_modeIMM
              0e13 fc58  bra  v6502_modeIMP
                                          3910  bra('v6502_modeZPX'); bra('v6502_modeZPX'); bra('v6502_modeZPX'); bra('v6502_modeILL') # $14 xxx101xx
              0e14 fc5b  bra  v6502_modeZPX
              0e15 fc5b  bra  v6502_modeZPX
              0e16 fc5b  bra  v6502_modeZPX
              0e17 fc58  bra  v6502_modeIMP
                                          3911  bra('v6502_modeIMP'); bra('v6502_modeABY'); bra('v6502_modeIMP'); bra('v6502_modeILL') # $18 xxx110xx
              0e18 fc58  bra  v6502_modeIMP
              0e19 fc7b  bra  v6502_modeABY
              0e1a fc58  bra  v6502_modeIMP
              0e1b fc58  bra  v6502_modeIMP
                                          3912  bra('v6502_modeABX'); bra('v6502_modeABX'); bra('v6502_modeABX'); bra('v6502_modeILL') # $1c xxx111xx
              0e1c fc7a  bra  v6502_modeABX
              0e1d fc7a  bra  v6502_modeABX
              0e1e fc7a  bra  v6502_modeABX
              0e1f fc58  bra  v6502_modeIMP
                                          3913
                                          3914  # Special encoding cases for emulator:
                                          3915  #     $00 BRK -         but gets mapped to #$DD      handled in v6502_mode0
                                          3916  #     $20 JSR $DDDD     but gets mapped to #$DD      handled in v6502_mode0 and v6502_JSR
                                          3917  #     $40 RTI -         but gets mapped to #$DD      handled in v6502_mode0
                                          3918  #     $60 RTS -         but gets mapped to #$DD      handled in v6502_mode0
                                          3919  #     $6C JMP ($DDDD)   but gets mapped to $DDDD     handled in v6502_JMP2
                                          3920  #     $96 STX $DD,Y     but gets mapped to $DD,X     handled in v6502_STX2
                                          3921  #     $B6 LDX $DD,Y     but gets mapped to $DD,X     handled in v6502_LDX2
                                          3922  #     $BE LDX $DDDD,Y   but gets mapped to $DDDD,X   handled in v6502_modeABX
                                          3923
                                          3924  label('v6502_next')
v6502_next:   0e20 8115  adda [$15]       3925  adda([vTicks])                  #0
                                          3926  blt('v6502_exitBefore')         #1 No more ticks
              0e21 e83a  blt  v6502_exitBefore
                                          3927  label('v6502_next2')
v6502_next2:  0e22 c215  st   [$15]       3928  st([vTicks])                    #2
                                          3929  #
                                          3930  # Fetch opcode
              0e23 111a  ld   [$1a],x     3931  ld([v6502_PCL],X)               #3
              0e24 151b  ld   [$1b],y     3932  ld([v6502_PCH],Y)               #4
              0e25 0d00  ld   [y,x]       3933  ld([Y,X])                       #5 Fetch IR
              0e26 c226  st   [$26]       3934  st([v6502_IR])                  #6
              0e27 011a  ld   [$1a]       3935  ld([v6502_PCL])                 #7 PC++
              0e28 8001  adda $01         3936  adda(1)                         #8
              0e29 d21a  st   [$1a],x     3937  st([v6502_PCL],X)               #9
              0e2a f02d  beq  $0e2d       3938  beq(pc()+3)                     #10
              0e2b fc2e  bra  $0e2e       3939  bra(pc()+3)                     #11
              0e2c 0000  ld   $00         3940  ld(0)                           #12
              0e2d 0001  ld   $01         3941  ld(1)                           #12(!)
              0e2e 811b  adda [$1b]       3942  adda([v6502_PCH])               #13
              0e2f d61b  st   [$1b],y     3943  st([v6502_PCH],Y)               #14
                                          3944  #
                                          3945  # Get addressing mode and fetch operands
              0e30 0126  ld   [$26]       3946  ld([v6502_IR])                  #15 Get addressing mode
              0e31 201f  anda $1f         3947  anda(31)                        #16
              0e32 fe00  bra  ac          3948  bra(AC)                         #17
              0e33 fc34  bra  .next20     3949  bra('.next20')                  #18
                                          3950  # (jump table)                  #19
                                          3951  label('.next20')
.next20:      0e34 0d00  ld   [y,x]       3952  ld([Y,X])                       #20 Fetch L
                                          3953  # Most opcodes branch away at this point, but IR & 31 == 0 falls through
                                          3954  #
                                          3955  # Implicit Mode for  BRK JSR RTI RTS (<  0x80) -- 26 cycles
                                          3956  # Immediate Mode for LDY CPY CPX     (>= 0x80) -- 36 cycles
                                          3957  label('v6502_mode0')
v6502_mode0:  0e35 0126  ld   [$26]       3958  ld([v6502_IR])                  #21 'xxx0000'
              0e36 e845  blt  .imm24      3959  bmi('.imm24')                   #22
              0e37 011b  ld   [$1b]       3960  ld([v6502_PCH])                 #23
              0e38 fcf2  bra  v6502_check 3961  bra('v6502_check')              #24
              0e39 00f3  ld   $f3         3962  ld(-26//2)                      #25
                                          3963
                                          3964  # Resync with video driver. At this point we're returning BEFORE
                                          3965  # fetching and executing the next instruction.
                                          3966  label('v6502_exitBefore')
v6502_exitBefore:
              0e3a 8013  adda $13         3967  adda(v6502_maxTicks)            #3 Exit BEFORE fetch
              0e3b e43b  bgt  $0e3b       3968  bgt(pc()&255)                   #4 Resync
              0e3c a001  suba $01         3969  suba(1)                         #5
              0e3d 000d  ld   $0d         3970  ld(hi('v6502_ENTER'))           #6 Set entry point to before 'fetch'
              0e3e c205  st   [$05]       3971  st([vCPUselect])                #7
              0e3f 1401  ld   $01,y       3972  ld(hi('vBlankStart'),Y)         #8
              0e40 e11e  jmp  y,[$1e]     3973  jmp(Y,[vReturn])                #9 To video driver
              0e41 0000  ld   $00         3974  ld(0)                           #10
                                          3975  assert v6502_overhead ==         11
                                          3976
                                          3977  # Immediate Mode: #$FF -- 36 cycles
                                          3978  label('v6502_modeIMM')
v6502_modeIMM:
              0e42 0200  nop              3979  nop()                           #21 Wait for v6502_mode0 to join
              0e43 0200  nop              3980  nop()                           #22
              0e44 011b  ld   [$1b]       3981  ld([v6502_PCH])                 #23 Copy PC
                                          3982  label('.imm24')
.imm24:       0e45 c225  st   [$25]       3983  st([v6502_ADH])                 #24
              0e46 011a  ld   [$1a]       3984  ld([v6502_PCL])                 #25
              0e47 d224  st   [$24],x     3985  st([v6502_ADL],X)               #26
              0e48 8001  adda $01         3986  adda(1)                         #27 PC++
              0e49 c21a  st   [$1a]       3987  st([v6502_PCL])                 #28
              0e4a f04d  beq  $0e4d       3988  beq(pc()+3)                     #29
              0e4b fc4e  bra  $0e4e       3989  bra(pc()+3)                     #30
              0e4c 0000  ld   $00         3990  ld(0)                           #31
              0e4d 0001  ld   $01         3991  ld(1)                           #31(!)
              0e4e 811b  adda [$1b]       3992  adda([v6502_PCH])               #32
              0e4f c21b  st   [$1b]       3993  st([v6502_PCH])                 #33
              0e50 fcf2  bra  v6502_check 3994  bra('v6502_check')              #34
              0e51 00ee  ld   $ee         3995  ld(-36//2)                      #35
                                          3996
                                          3997  # Accumulator Mode: ROL ROR LSL ASR -- 28 cycles
                                          3998  label('v6502_modeACC')
v6502_modeACC:
              0e52 0018  ld   $18         3999  ld(v6502_A&255)                 #21 Address of AC
              0e53 d224  st   [$24],x     4000  st([v6502_ADL],X)               #22
              0e54 0000  ld   $00         4001  ld(v6502_A>>8)                  #23
              0e55 c225  st   [$25]       4002  st([v6502_ADH])                 #24
              0e56 00f2  ld   $f2         4003  ld(-28//2)                      #25
              0e57 fcf2  bra  v6502_check 4004  bra('v6502_check')              #26
                                          4005  #nop()                          #27 Overlap
                                          4006  #
                                          4007  # Implied Mode: no operand -- 24 cycles
                                          4008  label('v6502_modeILL')
                                          4009  label('v6502_modeIMP')
v6502_modeILL:
v6502_modeIMP:
              0e58 0200  nop              4010  nop()                           #21,27
              0e59 fcf2  bra  v6502_check 4011  bra('v6502_check')              #22
              0e5a 00f4  ld   $f4         4012  ld(-24//2)                      #23
                                          4013
                                          4014  # Zero Page Modes: $DD $DD,X $DD,Y -- 36 cycles
                                          4015  label('v6502_modeZPX')
v6502_modeZPX:
              0e5b fc5f  bra  .zp23       4016  bra('.zp23')                    #21
              0e5c 812a  adda [$2a]       4017  adda([v6502_X])                 #22
                                          4018  label('v6502_modeZP')
v6502_modeZP: 0e5d fc5f  bra  .zp23       4019  bra('.zp23')                    #21
              0e5e 0200  nop              4020  nop()                           #22
                                          4021  label('.zp23')
.zp23:        0e5f d224  st   [$24],x     4022  st([v6502_ADL],X)               #23
              0e60 0000  ld   $00         4023  ld(0)                           #24 H=0
              0e61 c225  st   [$25]       4024  st([v6502_ADH])                 #25
              0e62 0001  ld   $01         4025  ld(1)                           #26 PC++
              0e63 811a  adda [$1a]       4026  adda([v6502_PCL])               #27
              0e64 c21a  st   [$1a]       4027  st([v6502_PCL])                 #28
              0e65 f068  beq  $0e68       4028  beq(pc()+3)                     #29
              0e66 fc69  bra  $0e69       4029  bra(pc()+3)                     #30
              0e67 0000  ld   $00         4030  ld(0)                           #31
              0e68 0001  ld   $01         4031  ld(1)                           #31(!)
              0e69 811b  adda [$1b]       4032  adda([v6502_PCH])               #32
              0e6a c21b  st   [$1b]       4033  st([v6502_PCH])                 #33
              0e6b fcf2  bra  v6502_check 4034  bra('v6502_check')              #34
              0e6c 00ee  ld   $ee         4035  ld(-36//2)                      #35
                                          4036
                                          4037  # Possible retry loop for modeABS and modeIZY. Because these need
                                          4038  # more time than the v6502_maxTicks of 38 Gigatron cycles, we may
                                          4039  # have to restart them after the next horizontal pulse.
                                          4040  label('.retry28')
.retry28:     0e6d f070  beq  $0e70       4041  beq(pc()+3)                     #28,37 PC--
              0e6e fc71  bra  $0e71       4042  bra(pc()+3)                     #29
              0e6f 0000  ld   $00         4043  ld(0)                           #30
              0e70 00ff  ld   $ff         4044  ld(-1)                          #30(!)
              0e71 811b  adda [$1b]       4045  adda([v6502_PCH])               #31
              0e72 c21b  st   [$1b]       4046  st([v6502_PCH])                 #32
              0e73 011a  ld   [$1a]       4047  ld([v6502_PCL])                 #33
              0e74 a001  suba $01         4048  suba(1)                         #34
              0e75 c21a  st   [$1a]       4049  st([v6502_PCL])                 #35
              0e76 fc20  bra  v6502_next  4050  bra('v6502_next')               #36 Retry until sufficient time
              0e77 00ed  ld   $ed         4051  ld(-38//2)                      #37
                                          4052
                                          4053  # Absolute Modes: $DDDD $DDDD,X $DDDD,Y -- 64 cycles
                                          4054  label('v6502_modeABS')
v6502_modeABS:
              0e78 fc7d  bra  .abs23      4055  bra('.abs23')                   #21
              0e79 0000  ld   $00         4056  ld(0)                           #22
                                          4057  label('v6502_modeABX')
v6502_modeABX:
              0e7a fc7d  bra  .abs23      4058  bra('.abs23')                   #21
                                          4059  label('v6502_modeABY')
v6502_modeABY:
              0e7b 012a  ld   [$2a]       4060  ld([v6502_X])                   #21,22
              0e7c 012b  ld   [$2b]       4061  ld([v6502_Y])                   #22
                                          4062  label('.abs23')
.abs23:       0e7d c224  st   [$24]       4063  st([v6502_ADL])                 #23
              0e7e 00f3  ld   $f3         4064  ld(-64//2+v6502_maxTicks)       #24 Is there enough time for the excess ticks?
              0e7f 8115  adda [$15]       4065  adda([vTicks])                  #25
              0e80 e86d  blt  .retry28    4066  blt('.retry28')                 #26
              0e81 011a  ld   [$1a]       4067  ld([v6502_PCL])                 #27
              0e82 0126  ld   [$26]       4068  ld([v6502_IR])                  #28 Special case $BE: LDX $DDDD,Y (we got X in ADL)
              0e83 60be  xora $be         4069  xora(0xbe)                      #29
              0e84 f087  beq  $0e87       4070  beq(pc()+3)                     #30
              0e85 fc88  bra  $0e88       4071  bra(pc()+3)                     #31
              0e86 0124  ld   [$24]       4072  ld([v6502_ADL])                 #32
              0e87 012b  ld   [$2b]       4073  ld([v6502_Y])                   #32(!)
              0e88 8d00  adda [y,x]       4074  adda([Y,X])                     #33 Fetch and add L
              0e89 c224  st   [$24]       4075  st([v6502_ADL])                 #34
              0e8a e88e  blt  .abs37      4076  bmi('.abs37')                   #35 Carry?
              0e8b ad00  suba [y,x]       4077  suba([Y,X])                     #36 Gets back original operand
              0e8c fc90  bra  .abs39      4078  bra('.abs39')                   #37
              0e8d 4d00  ora  [y,x]       4079  ora([Y,X])                      #38 Carry in bit 7
                                          4080  label('.abs37')
.abs37:       0e8e 2d00  anda [y,x]       4081  anda([Y,X])                     #37 Carry in bit 7
              0e8f 0200  nop              4082  nop()                           #38
                                          4083  label('.abs39')
.abs39:       0e90 3080  anda $80,x       4084  anda(0x80,X)                    #39 Move carry to bit 0
              0e91 0500  ld   [x]         4085  ld([X])                         #40
              0e92 c225  st   [$25]       4086  st([v6502_ADH])                 #41
              0e93 011a  ld   [$1a]       4087  ld([v6502_PCL])                 #42 PC++
              0e94 8001  adda $01         4088  adda(1)                         #43
              0e95 d21a  st   [$1a],x     4089  st([v6502_PCL],X)               #44
              0e96 f099  beq  $0e99       4090  beq(pc()+3)                     #45
              0e97 fc9a  bra  $0e9a       4091  bra(pc()+3)                     #46
              0e98 0000  ld   $00         4092  ld(0)                           #47
              0e99 0001  ld   $01         4093  ld(1)                           #47(!)
              0e9a 811b  adda [$1b]       4094  adda([v6502_PCH])               #48
              0e9b d61b  st   [$1b],y     4095  st([v6502_PCH],Y)               #49
              0e9c 0d00  ld   [y,x]       4096  ld([Y,X])                       #50 Fetch H
              0e9d 8125  adda [$25]       4097  adda([v6502_ADH])               #51
              0e9e c225  st   [$25]       4098  st([v6502_ADH])                 #52
              0e9f 011a  ld   [$1a]       4099  ld([v6502_PCL])                 #53 PC++
              0ea0 8001  adda $01         4100  adda(1)                         #54
              0ea1 c21a  st   [$1a]       4101  st([v6502_PCL])                 #55
              0ea2 f0a5  beq  $0ea5       4102  beq(pc()+3)                     #56
              0ea3 fca6  bra  $0ea6       4103  bra(pc()+3)                     #57
              0ea4 0000  ld   $00         4104  ld(0)                           #58
              0ea5 0001  ld   $01         4105  ld(1)                           #58(!)
              0ea6 811b  adda [$1b]       4106  adda([v6502_PCH])               #59
              0ea7 c21b  st   [$1b]       4107  st([v6502_PCH])                 #60
              0ea8 1124  ld   [$24],x     4108  ld([v6502_ADL],X)               #61
              0ea9 fcf2  bra  v6502_check 4109  bra('v6502_check')              #62
              0eaa 00e0  ld   $e0         4110  ld(-64//2)                      #63
                                          4111
                                          4112  # Indirect Indexed Mode: ($DD),Y -- 54 cycles
                                          4113  label('v6502_modeIZY')
v6502_modeIZY:
              0eab 1200  ld   ac,x        4114  ld(AC,X)                        #21 $DD
              0eac 1400  ld   $00,y       4115  ld(0,Y)                         #22 $00DD
              0ead 00f8  ld   $f8         4116  ld(-54//2+v6502_maxTicks)       #23 Is there enough time for the excess ticks?
              0eae 8115  adda [$15]       4117  adda([vTicks])                  #24
              0eaf 0200  nop              4118  nop()                           #25
              0eb0 e86d  blt  .retry28    4119  blt('.retry28')                 #26
              0eb1 011a  ld   [$1a]       4120  ld([v6502_PCL])                 #27
              0eb2 8001  adda $01         4121  adda(1)                         #28 PC++
              0eb3 c21a  st   [$1a]       4122  st([v6502_PCL])                 #29
              0eb4 f0b7  beq  $0eb7       4123  beq(pc()+3)                     #30
              0eb5 fcb8  bra  $0eb8       4124  bra(pc()+3)                     #31
              0eb6 0000  ld   $00         4125  ld(0)                           #32
              0eb7 0001  ld   $01         4126  ld(1)                           #32(!)
              0eb8 811b  adda [$1b]       4127  adda([v6502_PCH])               #33
              0eb9 c21b  st   [$1b]       4128  st([v6502_PCH])                 #34
              0eba 0d00  ld   [y,x]       4129  ld([Y,X])                       #35 Read word from zero-page
              0ebb de00  st   [y,x++]     4130  st([Y,Xpp])                     #36 (Just X++) Wrap-around is correct
              0ebc c224  st   [$24]       4131  st([v6502_ADL])                 #37
              0ebd 0d00  ld   [y,x]       4132  ld([Y,X])                       #38
              0ebe c225  st   [$25]       4133  st([v6502_ADH])                 #39
              0ebf 012b  ld   [$2b]       4134  ld([v6502_Y])                   #40 Add Y
              0ec0 8124  adda [$24]       4135  adda([v6502_ADL])               #41
              0ec1 c224  st   [$24]       4136  st([v6502_ADL])                 #42
              0ec2 e8c6  blt  .izy45      4137  bmi('.izy45')                   #43 Carry?
              0ec3 a12b  suba [$2b]       4138  suba([v6502_Y])                 #44 Gets back original operand
              0ec4 fcc8  bra  .izy47      4139  bra('.izy47')                   #45
              0ec5 412b  ora  [$2b]       4140  ora([v6502_Y])                  #46 Carry in bit 7
                                          4141  label('.izy45')
.izy45:       0ec6 212b  anda [$2b]       4142  anda([v6502_Y])                 #45 Carry in bit 7
              0ec7 0200  nop              4143  nop()                           #46
                                          4144  label('.izy47')
.izy47:       0ec8 3080  anda $80,x       4145  anda(0x80,X)                    #47 Move carry to bit 0
              0ec9 0500  ld   [x]         4146  ld([X])                         #48
              0eca 8125  adda [$25]       4147  adda([v6502_ADH])               #49
              0ecb c225  st   [$25]       4148  st([v6502_ADH])                 #50
              0ecc 1124  ld   [$24],x     4149  ld([v6502_ADL],X)               #51
              0ecd fcf2  bra  v6502_check 4150  bra('v6502_check')              #52
              0ece 00e5  ld   $e5         4151  ld(-54//2)                      #53
                                          4152
                                          4153  # Relative Mode: BEQ BNE BPL BMI BCC BCS BVC BVS -- 36 cycles
                                          4154  label('v6502_modeREL')
v6502_modeREL:
              0ecf d224  st   [$24],x     4155  st([v6502_ADL],X)               #21 Offset (Only needed for branch)
              0ed0 e8d3  blt  $0ed3       4156  bmi(pc()+3)                     #22 Sign extend
              0ed1 fcd4  bra  $0ed4       4157  bra(pc()+3)                     #23
              0ed2 0000  ld   $00         4158  ld(0)                           #24
              0ed3 00ff  ld   $ff         4159  ld(255)                         #24(!)
              0ed4 c225  st   [$25]       4160  st([v6502_ADH])                 #25
              0ed5 011a  ld   [$1a]       4161  ld([v6502_PCL])                 #26 PC++ (Needed for both cases)
              0ed6 8001  adda $01         4162  adda(1)                         #27
              0ed7 c21a  st   [$1a]       4163  st([v6502_PCL])                 #28
              0ed8 f0db  beq  $0edb       4164  beq(pc()+3)                     #29
              0ed9 fcdc  bra  $0edc       4165  bra(pc()+3)                     #30
              0eda 0000  ld   $00         4166  ld(0)                           #31
              0edb 0001  ld   $01         4167  ld(1)                           #31(!)
              0edc 811b  adda [$1b]       4168  adda([v6502_PCH])               #32
              0edd c21b  st   [$1b]       4169  st([v6502_PCH])                 #33
              0ede fcf2  bra  v6502_check 4170  bra('v6502_check')              #34
              0edf 00ee  ld   $ee         4171  ld(-36//2)                      #53
                                          4172
                                          4173  # Indexed Indirect Mode: ($DD,X) -- 38 cycles
                                          4174  label('v6502_modeIZX')
v6502_modeIZX:
              0ee0 812a  adda [$2a]       4175  adda([v6502_X])                 #21 Add X
              0ee1 c21d  st   [$1d]       4176  st([v6502_Tmp])                 #22
              0ee2 9001  adda $01,x       4177  adda(1,X)                       #23 Read word from zero-page
              0ee3 0500  ld   [x]         4178  ld([X])                         #24
              0ee4 c225  st   [$25]       4179  st([v6502_ADH])                 #25
              0ee5 111d  ld   [$1d],x     4180  ld([v6502_Tmp],X)               #26
              0ee6 0500  ld   [x]         4181  ld([X])                         #27
              0ee7 d224  st   [$24],x     4182  st([v6502_ADL],X)               #28
              0ee8 011a  ld   [$1a]       4183  ld([v6502_PCL])                 #29 PC++
              0ee9 8001  adda $01         4184  adda(1)                         #30
              0eea c21a  st   [$1a]       4185  st([v6502_PCL])                 #31
              0eeb f0ee  beq  $0eee       4186  beq(pc()+3)                     #32
              0eec fcef  bra  $0eef       4187  bra(pc()+3)                     #33
              0eed 0000  ld   $00         4188  ld(0)                           #34
              0eee 0001  ld   $01         4189  ld(1)                           #34(!)
              0eef 811b  adda [$1b]       4190  adda([v6502_PCH])               #35
              0ef0 c21b  st   [$1b]       4191  st([v6502_PCH])                 #36
              0ef1 00ed  ld   $ed         4192  ld(-38//2)                      #37 !!! Fall through to v6502_check !!!
                                          4193  #
                                          4194  # Update elapsed time for the addressing mode processing.
                                          4195  # Then check if we can immediately execute this instruction.
                                          4196  # Otherwise transfer control to the video driver.
                                          4197  label('v6502_check')
v6502_check:  0ef2 8115  adda [$15]       4198  adda([vTicks])                  #0
                                          4199  blt('v6502_exitAfter')          #1 No more ticks
              0ef3 e8f8  blt  v6502_exitAfter
              0ef4 c215  st   [$15]       4200  st([vTicks])                    #2
              0ef5 140f  ld   $0f,y       4201  ld(hi('v6502_execute'),Y)       #3
              0ef6 e126  jmp  y,[$26]     4202  jmp(Y,[v6502_IR])               #4
              0ef7 fcff  bra  $ff         4203  bra(255)                        #5
                                          4204
                                          4205  # Otherwise resync with video driver. At this point we're returning AFTER
                                          4206  # addressing mode decoding, but before executing the instruction.
                                          4207  label('v6502_exitAfter')
v6502_exitAfter:
              0ef8 8013  adda $13         4208  adda(v6502_maxTicks)            #3 Exit AFTER fetch
              0ef9 e4f9  bgt  $0ef9       4209  bgt(pc()&255)                   #4 Resync
              0efa a001  suba $01         4210  suba(1)                         #5
              0efb 0010  ld   $10         4211  ld(hi('v6502_RESUME'))          #6 Set entry point to before 'execute'
              0efc c205  st   [$05]       4212  st([vCPUselect])                #7
              0efd 1401  ld   $01,y       4213  ld(hi('vBlankStart'),Y)         #8
              0efe e11e  jmp  y,[$1e]     4214  jmp(Y,[vReturn])                #9 To video driver
              0eff 0000  ld   $00         4215  ld(0)                           #10
                                          4216  assert v6502_overhead ==         11
                                          4217
                                          4218  align(0x100,size=0x100)
                                          4219  label('v6502_execute')
                                          4220  # This page works as a 255-entry (0..254) jump table for 6502 opcodes.
                                          4221  # Jumping into this page must have 'bra 255' in the branch delay slot
                                          4222  # in order to get out again and dispatch to the right continuation.
                                          4223  # X must hold [v6502_ADL],
                                          4224  # Y will hold hi('v6502_execute'),
                                          4225  # A will be loaded with the code offset (this is skipped at offset $ff)
v6502_execute:
              0f00 00fd  ld   $fd         4226  ld('v6502_BRK'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $00
              0f01 0089  ld   $89
              0f02 00fd  ld   $fd
              0f03 00fd  ld   $fd
              0f04 00fd  ld   $fd         4227  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f05 0089  ld   $89
              0f06 00f1  ld   $f1
              0f07 00fd  ld   $fd
              0f08 00f3  ld   $f3         4228  ld('v6502_PHP'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f09 0089  ld   $89
              0f0a 00f1  ld   $f1
              0f0b 00fd  ld   $fd
              0f0c 00fd  ld   $fd         4229  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f0d 0089  ld   $89
              0f0e 00f1  ld   $f1
              0f0f 00fd  ld   $fd
              0f10 003f  ld   $3f         4230  ld('v6502_BPL'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $10
              0f11 0089  ld   $89
              0f12 00fd  ld   $fd
              0f13 00fd  ld   $fd
              0f14 00fd  ld   $fd         4231  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f15 0089  ld   $89
              0f16 00f1  ld   $f1
              0f17 00fd  ld   $fd
              0f18 0036  ld   $36         4232  ld('v6502_CLC'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f19 0089  ld   $89
              0f1a 00fd  ld   $fd
              0f1b 00fd  ld   $fd
              0f1c 00fd  ld   $fd         4233  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f1d 0089  ld   $89
              0f1e 00f1  ld   $f1
              0f1f 00fd  ld   $fd
              0f20 009a  ld   $9a         4234  ld('v6502_JSR'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6 $20
              0f21 0085  ld   $85
              0f22 00fd  ld   $fd
              0f23 00fd  ld   $fd
              0f24 00f5  ld   $f5         4235  ld('v6502_BIT'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f25 0085  ld   $85
              0f26 00f7  ld   $f7
              0f27 00fd  ld   $fd
              0f28 00f9  ld   $f9         4236  ld('v6502_PLP'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f29 0085  ld   $85
              0f2a 00f7  ld   $f7
              0f2b 00fd  ld   $fd
              0f2c 00f5  ld   $f5         4237  ld('v6502_BIT'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f2d 0085  ld   $85
              0f2e 00f7  ld   $f7
              0f2f 00fd  ld   $fd
              0f30 0042  ld   $42         4238  ld('v6502_BMI'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6 $30
              0f31 0085  ld   $85
              0f32 00fd  ld   $fd
              0f33 00fd  ld   $fd
              0f34 00fd  ld   $fd         4239  ld('v6502_ILL'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f35 0085  ld   $85
              0f36 00f7  ld   $f7
              0f37 00fd  ld   $fd
              0f38 0038  ld   $38         4240  ld('v6502_SEC'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f39 0085  ld   $85
              0f3a 00fd  ld   $fd
              0f3b 00fd  ld   $fd
              0f3c 00fd  ld   $fd         4241  ld('v6502_ILL'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f3d 0085  ld   $85
              0f3e 00f7  ld   $f7
              0f3f 00fd  ld   $fd
              0f40 00d3  ld   $d3         4242  ld('v6502_RTI'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6 $40
              0f41 008c  ld   $8c
              0f42 00fd  ld   $fd
              0f43 00fd  ld   $fd
              0f44 00fd  ld   $fd         4243  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f45 008c  ld   $8c
              0f46 00d7  ld   $d7
              0f47 00fd  ld   $fd
              0f48 00d9  ld   $d9         4244  ld('v6502_PHA'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f49 008c  ld   $8c
              0f4a 00d7  ld   $d7
              0f4b 00fd  ld   $fd
              0f4c 0096  ld   $96         4245  ld('v6502_JMP1');ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f4d 008c  ld   $8c
              0f4e 00d7  ld   $d7
              0f4f 00fd  ld   $fd
              0f50 0045  ld   $45         4246  ld('v6502_BVC'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6 $50
              0f51 008c  ld   $8c
              0f52 00fd  ld   $fd
              0f53 00fd  ld   $fd
              0f54 00fd  ld   $fd         4247  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f55 008c  ld   $8c
              0f56 00d7  ld   $d7
              0f57 00fd  ld   $fd
              0f58 00db  ld   $db         4248  ld('v6502_CLI'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f59 008c  ld   $8c
              0f5a 00fd  ld   $fd
              0f5b 00fd  ld   $fd
              0f5c 00fd  ld   $fd         4249  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f5d 008c  ld   $8c
              0f5e 00d7  ld   $d7
              0f5f 00fd  ld   $fd
              0f60 00dd  ld   $dd         4250  ld('v6502_RTS'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $60
              0f61 0001  ld   $01
              0f62 00fd  ld   $fd
              0f63 00fd  ld   $fd
              0f64 00fd  ld   $fd         4251  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f65 0001  ld   $01
              0f66 00d5  ld   $d5
              0f67 00fd  ld   $fd
              0f68 00df  ld   $df         4252  ld('v6502_PLA'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f69 0001  ld   $01
              0f6a 00d5  ld   $d5
              0f6b 00fd  ld   $fd
              0f6c 0098  ld   $98         4253  ld('v6502_JMP2');ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f6d 0001  ld   $01
              0f6e 00d5  ld   $d5
              0f6f 00fd  ld   $fd
              0f70 0049  ld   $49         4254  ld('v6502_BVS'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $70
              0f71 0001  ld   $01
              0f72 00fd  ld   $fd
              0f73 00fd  ld   $fd
              0f74 00fd  ld   $fd         4255  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f75 0001  ld   $01
              0f76 00d5  ld   $d5
              0f77 00fd  ld   $fd
              0f78 00e1  ld   $e1         4256  ld('v6502_SEI'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f79 0001  ld   $01
              0f7a 00fd  ld   $fd
              0f7b 00fd  ld   $fd
              0f7c 00fd  ld   $fd         4257  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f7d 0001  ld   $01
              0f7e 00d5  ld   $d5
              0f7f 00fd  ld   $fd
              0f80 00fd  ld   $fd         4258  ld('v6502_ILL'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $80
              0f81 00c1  ld   $c1
              0f82 00fd  ld   $fd
              0f83 00fd  ld   $fd
              0f84 00c7  ld   $c7         4259  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX'); ld('v6502_ILL') #6
              0f85 00c1  ld   $c1
              0f86 00c3  ld   $c3
              0f87 00fd  ld   $fd
              0f88 007f  ld   $7f         4260  ld('v6502_DEY'); ld('v6502_ILL'); ld('v6502_TXA'); ld('v6502_ILL') #6
              0f89 00fd  ld   $fd
              0f8a 00cd  ld   $cd
              0f8b 00fd  ld   $fd
              0f8c 00c7  ld   $c7         4261  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX'); ld('v6502_ILL') #6
              0f8d 00c1  ld   $c1
              0f8e 00c3  ld   $c3
              0f8f 00fd  ld   $fd
              0f90 004d  ld   $4d         4262  ld('v6502_BCC'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $90
              0f91 00c1  ld   $c1
              0f92 00fd  ld   $fd
              0f93 00fd  ld   $fd
              0f94 00c7  ld   $c7         4263  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX2');ld('v6502_ILL') #6
              0f95 00c1  ld   $c1
              0f96 00c5  ld   $c5
              0f97 00fd  ld   $fd
              0f98 00cf  ld   $cf         4264  ld('v6502_TYA'); ld('v6502_STA'); ld('v6502_TXS'); ld('v6502_ILL') #6
              0f99 00c1  ld   $c1
              0f9a 00e3  ld   $e3
              0f9b 00fd  ld   $fd
              0f9c 00fd  ld   $fd         4265  ld('v6502_ILL'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f9d 00c1  ld   $c1
              0f9e 00fd  ld   $fd
              0f9f 00fd  ld   $fd
              0fa0 00bf  ld   $bf         4266  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6 $A0
              0fa1 00b9  ld   $b9
              0fa2 00bb  ld   $bb
              0fa3 00fd  ld   $fd
              0fa4 00bf  ld   $bf         4267  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fa5 00b9  ld   $b9
              0fa6 00bb  ld   $bb
              0fa7 00fd  ld   $fd
              0fa8 00cb  ld   $cb         4268  ld('v6502_TAY'); ld('v6502_LDA'); ld('v6502_TAX'); ld('v6502_ILL') #6
              0fa9 00b9  ld   $b9
              0faa 00c9  ld   $c9
              0fab 00fd  ld   $fd
              0fac 00bf  ld   $bf         4269  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fad 00b9  ld   $b9
              0fae 00bb  ld   $bb
              0faf 00fd  ld   $fd
              0fb0 0051  ld   $51         4270  ld('v6502_BCS'); ld('v6502_LDA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $B0
              0fb1 00b9  ld   $b9
              0fb2 00fd  ld   $fd
              0fb3 00fd  ld   $fd
              0fb4 00bf  ld   $bf         4271  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX2');ld('v6502_ILL') #6
              0fb5 00b9  ld   $b9
              0fb6 00bd  ld   $bd
              0fb7 00fd  ld   $fd
              0fb8 00d1  ld   $d1         4272  ld('v6502_CLV'); ld('v6502_LDA'); ld('v6502_TSX'); ld('v6502_ILL') #6
              0fb9 00b9  ld   $b9
              0fba 00e5  ld   $e5
              0fbb 00fd  ld   $fd
              0fbc 00bf  ld   $bf         4273  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fbd 00b9  ld   $b9
              0fbe 00bb  ld   $bb
              0fbf 00fd  ld   $fd
              0fc0 00e7  ld   $e7         4274  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6 $C0
              0fc1 00e9  ld   $e9
              0fc2 00fd  ld   $fd
              0fc3 00fd  ld   $fd
              0fc4 00e7  ld   $e7         4275  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fc5 00e9  ld   $e9
              0fc6 00eb  ld   $eb
              0fc7 00fd  ld   $fd
              0fc8 007b  ld   $7b         4276  ld('v6502_INY'); ld('v6502_CMP'); ld('v6502_DEX'); ld('v6502_ILL') #6
              0fc9 00e9  ld   $e9
              0fca 0077  ld   $77
              0fcb 00fd  ld   $fd
              0fcc 00e7  ld   $e7         4277  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fcd 00e9  ld   $e9
              0fce 00eb  ld   $eb
              0fcf 00fd  ld   $fd
              0fd0 0055  ld   $55         4278  ld('v6502_BNE'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6 $D0
              0fd1 00e9  ld   $e9
              0fd2 00fd  ld   $fd
              0fd3 00fd  ld   $fd
              0fd4 00fd  ld   $fd         4279  ld('v6502_ILL'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fd5 00e9  ld   $e9
              0fd6 00eb  ld   $eb
              0fd7 00fd  ld   $fd
              0fd8 00ed  ld   $ed         4280  ld('v6502_CLD'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0fd9 00e9  ld   $e9
              0fda 00fd  ld   $fd
              0fdb 00fd  ld   $fd
              0fdc 00fd  ld   $fd         4281  ld('v6502_ILL'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fdd 00e9  ld   $e9
              0fde 00eb  ld   $eb
              0fdf 00fd  ld   $fd
              0fe0 00ef  ld   $ef         4282  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $E0
              0fe1 0029  ld   $29
              0fe2 00fd  ld   $fd
              0fe3 00fd  ld   $fd
              0fe4 00ef  ld   $ef         4283  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0fe5 0029  ld   $29
              0fe6 00b7  ld   $b7
              0fe7 00fd  ld   $fd
              0fe8 006c  ld   $6c         4284  ld('v6502_INX'); ld('v6502_SBC'); ld('v6502_NOP'); ld('v6502_ILL') #6
              0fe9 0029  ld   $29
              0fea 0083  ld   $83
              0feb 00fd  ld   $fd
              0fec 00ef  ld   $ef         4285  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0fed 0029  ld   $29
              0fee 00b7  ld   $b7
              0fef 00fd  ld   $fd
              0ff0 0058  ld   $58         4286  ld('v6502_BEQ'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $F0
              0ff1 0029  ld   $29
              0ff2 00fd  ld   $fd
              0ff3 00fd  ld   $fd
              0ff4 00fd  ld   $fd         4287  ld('v6502_ILL'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0ff5 0029  ld   $29
              0ff6 00b7  ld   $b7
              0ff7 00fd  ld   $fd
              0ff8 00fb  ld   $fb         4288  ld('v6502_SED'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0ff9 0029  ld   $29
              0ffa 00fd  ld   $fd
              0ffb 00fd  ld   $fd
              0ffc 00fd  ld   $fd         4289  ld('v6502_ILL'); ld('v6502_SBC'); ld('v6502_INC')                  #6
              0ffd 0029  ld   $29
              0ffe 00b7  ld   $b7
              0fff fe00  bra  ac          4290  bra(AC)                         #6,7 Dispatch into next page
                                          4291  # --- Page boundary ---
                                          4292  align(0x100,size=0x100)
              1000 140e  ld   $0e,y       4293  ld(hi('v6502_next'),Y)          #8 Handy for instructions that don't clobber Y
                                          4294
                                          4295  label('v6502_ADC')
                                          4296  assert pc()&255 == 1
                                          4297  assert v6502_Cflag == 1
                                          4298  assert v6502_Vemu == 128
v6502_ADC:    1001 1525  ld   [$25],y     4299  ld([v6502_ADH],Y)               #9 Must be at page offset 1, so A=1
              1002 2127  anda [$27]       4300  anda([v6502_P])                 #10 Carry in (AC=1 because lo('v6502_ADC')=1)
              1003 8118  adda [$18]       4301  adda([v6502_A])                 #11 Sum
              1004 f020  beq  .adc14      4302  beq('.adc14')                   #12 Danger zone for dropping a carry
              1005 8d00  adda [y,x]       4303  adda([Y,X])                     #13
              1006 c228  st   [$28]       4304  st([v6502_Qz])                  #14 Z flag, don't overwrite left-hand side (A) yet
              1007 c229  st   [$29]       4305  st([v6502_Qn])                  #15 N flag
              1008 6118  xora [$18]       4306  xora([v6502_A])                 #16 V flag, (Q^A) & (B^Q) & 0x80
              1009 c218  st   [$18]       4307  st([v6502_A])                   #17
              100a 0d00  ld   [y,x]       4308  ld([Y,X])                       #18
              100b 6128  xora [$28]       4309  xora([v6502_Qz])                #19
              100c 2118  anda [$18]       4310  anda([v6502_A])                 #20
              100d 2080  anda $80         4311  anda(0x80)                      #21
              100e c21d  st   [$1d]       4312  st([v6502_Tmp])                 #22
              100f 0128  ld   [$28]       4313  ld([v6502_Qz])                  #23 Update A
              1010 c218  st   [$18]       4314  st([v6502_A])                   #24
              1011 e815  blt  .adc27      4315  bmi('.adc27')                   #25 C flag
              1012 ad00  suba [y,x]       4316  suba([Y,X])                     #26
              1013 fc17  bra  .adc29      4317  bra('.adc29')                   #27
              1014 4d00  ora  [y,x]       4318  ora([Y,X])                      #28
                                          4319  label('.adc27')
.adc27:       1015 2d00  anda [y,x]       4320  anda([Y,X])                     #27
              1016 0200  nop              4321  nop()                           #28
                                          4322  label('.adc29')
.adc29:       1017 3080  anda $80,x       4323  anda(0x80,X)                    #29
              1018 0127  ld   [$27]       4324  ld([v6502_P])                   #30 Update P
              1019 207e  anda $7e         4325  anda(~v6502_Vemu&~v6502_Cflag)  #31
              101a 4500  ora  [x]         4326  ora([X])                        #32
              101b 411d  ora  [$1d]       4327  ora([v6502_Tmp])                #33
              101c c227  st   [$27]       4328  st([v6502_P])                   #34
              101d 140e  ld   $0e,y       4329  ld(hi('v6502_next'),Y)          #35
              101e e020  jmp  y,$20       4330  jmp(Y,'v6502_next')             #36
              101f 00ed  ld   $ed         4331  ld(-38//2)                      #37
                                          4332  # Cin=1, A=$FF, B=$DD --> Result=$DD, Cout=1, V=0
                                          4333  # Cin=0, A=$00, B=$DD --> Result=$DD, Cout=0, V=0
                                          4334  label('.adc14')
.adc14:       1020 c218  st   [$18]       4335  st([v6502_A])                   #14 Special case
              1021 c228  st   [$28]       4336  st([v6502_Qz])                  #15 Z flag
              1022 c229  st   [$29]       4337  st([v6502_Qn])                  #16 N flag
              1023 0127  ld   [$27]       4338  ld([v6502_P])                   #17
              1024 207f  anda $7f         4339  anda(0x7f)                      #18 V=0, keep C
              1025 c227  st   [$27]       4340  st([v6502_P])                   #19
              1026 140e  ld   $0e,y       4341  ld(hi('v6502_next'),Y)          #20
              1027 00f4  ld   $f4         4342  ld(-24//2)                      #21
              1028 e020  jmp  y,$20       4343  jmp(Y,'v6502_next')             #22
                                          4344  #nop()                          #23 Overlap
                                          4345  #
                                          4346  label('v6502_SBC')
                                          4347  # No matter how hard we try, v6502_SBC always comes out a lot clumsier
                                          4348  # than v6502_ADC. And that one already barely fits in 38 cycles and is
                                          4349  # hard to follow. So we use a hack: transmorph our SBC into an ADC with
                                          4350  # inverted operand, and then dispatch again. Simple and effective.
v6502_SBC:    1029 1525  ld   [$25],y     4351  ld([v6502_ADH],Y)               #9,24
              102a 0d00  ld   [y,x]       4352  ld([Y,X])                       #10
              102b 60ff  xora $ff         4353  xora(255)                       #11 Invert right-hand side operand
              102c c219  st   [$19]       4354  st([v6502_BI])                  #12 Park modified operand for v6502_ADC
              102d 0019  ld   $19         4355  ld(v6502_BI&255)                #13 Address of BI
              102e d224  st   [$24],x     4356  st([v6502_ADL],X)               #14
              102f 0000  ld   $00         4357  ld(v6502_BI>>8)                 #15
              1030 c225  st   [$25]       4358  st([v6502_ADH])                 #16
              1031 0069  ld   $69         4359  ld(0x69)                        #17 ADC #$xx (Any ADC opcode will do)
              1032 c226  st   [$26]       4360  st([v6502_IR])                  #18
              1033 140e  ld   $0e,y       4361  ld(hi('v6502_check'),Y)         #20 Go back to time check before dispatch
              1034 e0f2  jmp  y,$f2       4362  jmp(Y,'v6502_check')            #20
              1035 00f5  ld   $f5         4363  ld(-22//2)                      #21
                                          4364
                                          4365  # Carry calculation table
                                          4366  #   L7 R7 C7   RX UC SC
                                          4367  #   -- -- -- | -- -- --
                                          4368  #    0  0  0 |  0  0  0
                                          4369  #    0  0  1 |  0  0  0
                                          4370  #    1  0  0 |  0  1 +1
                                          4371  #    1  0  1 |  0  0  0
                                          4372  #    0  1  0 | -1  1  0
                                          4373  #    0  1  1 | -1  0 -1
                                          4374  #    1  1  0 | -1  1  0
                                          4375  #    1  1  1 | -1  1  0
                                          4376  #   -- -- -- | -- -- --
                                          4377  #    ^  ^  ^    ^  ^  ^
                                          4378  #    |  |  |    |  |  `--- Carry of unsigned L + signed R: SC = RX + UC
                                          4379  #    |  |  |    |  `----- Carry of unsigned L + unsigned R: UC = C7 ? L7&R7 : L7|R7
                                          4380  #    |  |  |    `------- Sign extension of signed R
                                          4381  #    |  |  `--------- MSB of unextended L + R
                                          4382  #    |  `----------- MSB of right operand R
                                          4383  #    `------------- MSB of left operand L
                                          4384
                                          4385  label('v6502_CLC')
v6502_CLC:    1036 0127  ld   [$27]       4386  ld([v6502_P])                   #9
              1037 fc3b  bra  .sec12      4387  bra('.sec12')                   #10
                                          4388  label('v6502_SEC')
v6502_SEC:    1038 20fe  anda $fe         4389  anda(~v6502_Cflag)              #9,11 Overlap
              1039 0127  ld   [$27]       4390  ld([v6502_P])                   #10
              103a 4001  ora  $01         4391  ora(v6502_Cflag)                #11
                                          4392  label('.sec12')
.sec12:       103b c227  st   [$27]       4393  st([v6502_P])                   #12
              103c 0200  nop              4394  nop()                           #13
                                          4395  label('.next14')
.next14:      103d e020  jmp  y,$20       4396  jmp(Y,'v6502_next')             #14
              103e 00f8  ld   $f8         4397  ld(-16//2)                      #15
                                          4398
                                          4399  label('v6502_BPL')
v6502_BPL:    103f 0129  ld   [$29]       4400  ld([v6502_Qn])                  #9
              1040 e875  blt  .next12     4401  bmi('.next12')                  #10
              1041 f45b  bge  .branch13   4402  bpl('.branch13')                #11
                                          4403  #nop()                          #12 Overlap
                                          4404  label('v6502_BMI')
v6502_BMI:    1042 0129  ld   [$29]       4405  ld([v6502_Qn])                  #9,12
              1043 f475  bge  .next12     4406  bpl('.next12')                  #10
              1044 e85b  blt  .branch13   4407  bmi('.branch13')                #11
                                          4408  #nop()                          #12 Overlap
                                          4409  label('v6502_BVC')
v6502_BVC:    1045 0127  ld   [$27]       4410  ld([v6502_P])                   #9,12
              1046 2080  anda $80         4411  anda(v6502_Vemu)                #10
              1047 f05b  beq  .branch13   4412  beq('.branch13')                #11
              1048 ec3d  bne  .next14     4413  bne('.next14')                  #12
                                          4414  #nop()                          #13 Overlap
                                          4415  label('v6502_BVS')
v6502_BVS:    1049 0127  ld   [$27]       4416  ld([v6502_P])                   #9,13
              104a 2080  anda $80         4417  anda(v6502_Vemu)                #10
              104b ec5b  bne  .branch13   4418  bne('.branch13')                #11
              104c f03d  beq  .next14     4419  beq('.next14')                  #12
                                          4420  #nop()                          #13 Overlap
                                          4421  label('v6502_BCC')
v6502_BCC:    104d 0127  ld   [$27]       4422  ld([v6502_P])                   #9,13
              104e 2001  anda $01         4423  anda(v6502_Cflag)               #10
              104f f05b  beq  .branch13   4424  beq('.branch13')                #11
              1050 ec3d  bne  .next14     4425  bne('.next14')                  #12
                                          4426  #nop()                          #13 Overlap
                                          4427  label('v6502_BCS')
v6502_BCS:    1051 0127  ld   [$27]       4428  ld([v6502_P])                   #9,13
              1052 2001  anda $01         4429  anda(v6502_Cflag)               #10
              1053 ec5b  bne  .branch13   4430  bne('.branch13')                #11
              1054 f03d  beq  .next14     4431  beq('.next14')                  #12
                                          4432  #nop()                          #13 Overlap
                                          4433  label('v6502_BNE')
v6502_BNE:    1055 0128  ld   [$28]       4434  ld([v6502_Qz])                  #9,13
              1056 f075  beq  .next12     4435  beq('.next12')                  #10
              1057 ec5b  bne  .branch13   4436  bne('.branch13')                #11
                                          4437  #nop()                          #12 Overlap
                                          4438  label('v6502_BEQ')
v6502_BEQ:    1058 0128  ld   [$28]       4439  ld([v6502_Qz])                  #9,12
              1059 ec75  bne  .next12     4440  bne('.next12')                  #10
              105a f05b  beq  .branch13   4441  beq('.branch13')                #11
                                          4442  #nop()                          #12 Overlap
                                          4443  label('.branch13')
.branch13:    105b 0124  ld   [$24]       4444  ld([v6502_ADL])                 #13,12 PC + offset
              105c 811a  adda [$1a]       4445  adda([v6502_PCL])               #14
              105d c21a  st   [$1a]       4446  st([v6502_PCL])                 #15
              105e e862  blt  .bra0       4447  bmi('.bra0')                    #16 Carry
              105f a124  suba [$24]       4448  suba([v6502_ADL])               #17
              1060 fc64  bra  .bra1       4449  bra('.bra1')                    #18
              1061 4124  ora  [$24]       4450  ora([v6502_ADL])                #19
                                          4451  label('.bra0')
.bra0:        1062 2124  anda [$24]       4452  anda([v6502_ADL])               #18
              1063 0200  nop              4453  nop()                           #19
                                          4454  label('.bra1')
.bra1:        1064 3080  anda $80,x       4455  anda(0x80,X)                    #20
              1065 0500  ld   [x]         4456  ld([X])                         #21
              1066 8125  adda [$25]       4457  adda([v6502_ADH])               #22
              1067 811b  adda [$1b]       4458  adda([v6502_PCH])               #23
              1068 c21b  st   [$1b]       4459  st([v6502_PCH])                 #24
              1069 0200  nop              4460  nop()                           #25
              106a e020  jmp  y,$20       4461  jmp(Y,'v6502_next')             #26
              106b 00f2  ld   $f2         4462  ld(-28//2)                      #27
                                          4463
                                          4464  label('v6502_INX')
v6502_INX:    106c 0200  nop              4465  nop()                           #9
              106d 012a  ld   [$2a]       4466  ld([v6502_X])                   #10
              106e 8001  adda $01         4467  adda(1)                         #11
              106f c22a  st   [$2a]       4468  st([v6502_X])                   #12
                                          4469  label('.inx13')
.inx13:       1070 c228  st   [$28]       4470  st([v6502_Qz])                  #13 Z flag
              1071 c229  st   [$29]       4471  st([v6502_Qn])                  #14 N flag
              1072 00f7  ld   $f7         4472  ld(-18//2)                      #15
              1073 e020  jmp  y,$20       4473  jmp(Y,'v6502_next')             #16
              1074 0200  nop              4474  nop()                           #17
                                          4475
                                          4476  label('.next12')
.next12:      1075 e020  jmp  y,$20       4477  jmp(Y,'v6502_next')             #12
              1076 00f9  ld   $f9         4478  ld(-14//2)                      #13
                                          4479
                                          4480  label('v6502_DEX')
v6502_DEX:    1077 012a  ld   [$2a]       4481  ld([v6502_X])                   #9
              1078 a001  suba $01         4482  suba(1)                         #10
              1079 fc70  bra  .inx13      4483  bra('.inx13')                   #11
              107a c22a  st   [$2a]       4484  st([v6502_X])                   #12
                                          4485
                                          4486  label('v6502_INY')
v6502_INY:    107b 012b  ld   [$2b]       4487  ld([v6502_Y])                   #9
              107c 8001  adda $01         4488  adda(1)                         #10
              107d fc70  bra  .inx13      4489  bra('.inx13')                   #11
              107e c22b  st   [$2b]       4490  st([v6502_Y])                   #12
                                          4491
                                          4492  label('v6502_DEY')
v6502_DEY:    107f 012b  ld   [$2b]       4493  ld([v6502_Y])                   #9
              1080 a001  suba $01         4494  suba(1)                         #10
              1081 fc70  bra  .inx13      4495  bra('.inx13')                   #11
              1082 c22b  st   [$2b]       4496  st([v6502_Y])                   #12
                                          4497
                                          4498  label('v6502_NOP')
v6502_NOP:    1083 00fa  ld   $fa         4499  ld(-12//2)                      #9
              1084 e020  jmp  y,$20       4500  jmp(Y,'v6502_next')             #10
                                          4501  #nop()                          #11 Overlap
                                          4502  #
                                          4503  label('v6502_AND')
v6502_AND:    1085 1525  ld   [$25],y     4504  ld([v6502_ADH],Y)               #9,11
              1086 0118  ld   [$18]       4505  ld([v6502_A])                   #10
              1087 fc90  bra  .eor13      4506  bra('.eor13')                   #11
              1088 2d00  anda [y,x]       4507  anda([Y,X])                     #12
                                          4508
                                          4509  label('v6502_ORA')
v6502_ORA:    1089 1525  ld   [$25],y     4510  ld([v6502_ADH],Y)               #9
              108a 0118  ld   [$18]       4511  ld([v6502_A])                   #10
              108b fc90  bra  .eor13      4512  bra('.eor13')                   #11
                                          4513  label('v6502_EOR')
v6502_EOR:    108c 4d00  ora  [y,x]       4514  ora([Y,X])                      #12,9
                                          4515  #
                                          4516  #label('v6502_EOR')
                                          4517  #nop()                          #9 Overlap
              108d 1525  ld   [$25],y     4518  ld([v6502_ADH],Y)               #10
              108e 0118  ld   [$18]       4519  ld([v6502_A])                   #11
              108f 6d00  xora [y,x]       4520  xora([Y,X])                     #12
                                          4521  label('.eor13')
.eor13:       1090 c218  st   [$18]       4522  st([v6502_A])                   #13
              1091 c228  st   [$28]       4523  st([v6502_Qz])                  #14 Z flag
              1092 c229  st   [$29]       4524  st([v6502_Qn])                  #15 N flag
              1093 140e  ld   $0e,y       4525  ld(hi('v6502_next'),Y)          #16
              1094 00f6  ld   $f6         4526  ld(-20//2)                      #17
              1095 e020  jmp  y,$20       4527  jmp(Y,'v6502_next')             #18
                                          4528  #nop()                          #19 Overlap
                                          4529  #
                                          4530  label('v6502_JMP1')
v6502_JMP1:   1096 140d  ld   $0d,y       4531  ld(hi('v6502_jmp1'),Y)          #9,19 JMP $DDDD
              1097 e0c6  jmp  y,$c6       4532  jmp(Y,'v6502_jmp1')             #10
                                          4533  #nop()                          #11 Overlap
                                          4534  label('v6502_JMP2')
v6502_JMP2:   1098 140d  ld   $0d,y       4535  ld(hi('v6502_jmp2'),Y)          #9 JMP ($DDDD)
              1099 e0ce  jmp  y,$ce       4536  jmp(Y,'v6502_jmp2')             #10
                                          4537  #nop()                          #11 Overlap
                                          4538  label('v6502_JSR')
v6502_JSR:    109a 011c  ld   [$1c]       4539  ld([v6502_S])                   #9,11
              109b a002  suba $02         4540  suba(2)                         #10
              109c d21c  st   [$1c],x     4541  st([v6502_S],X)                 #11
              109d 1400  ld   $00,y       4542  ld(v6502_Stack>>8,Y)            #12
              109e 011b  ld   [$1b]       4543  ld([v6502_PCH])                 #13 Let ADL,ADH point to L operand
              109f c225  st   [$25]       4544  st([v6502_ADH])                 #14
              10a0 011a  ld   [$1a]       4545  ld([v6502_PCL])                 #15
              10a1 c224  st   [$24]       4546  st([v6502_ADL])                 #16
              10a2 8001  adda $01         4547  adda(1)                         #17 Push ++PC
              10a3 c21a  st   [$1a]       4548  st([v6502_PCL])                 #18 Let PCL,PCH point to H operand
              10a4 de00  st   [y,x++]     4549  st([Y,Xpp])                     #19
              10a5 f0a8  beq  $10a8       4550  beq(pc()+3)                     #20
              10a6 fca9  bra  $10a9       4551  bra(pc()+3)                     #21
              10a7 0000  ld   $00         4552  ld(0)                           #22
              10a8 0001  ld   $01         4553  ld(1)                           #22(!)
              10a9 811b  adda [$1b]       4554  adda([v6502_PCH])               #23
              10aa c21b  st   [$1b]       4555  st([v6502_PCH])                 #24
              10ab ce00  st   [y,x]       4556  st([Y,X])                       #25
              10ac 1124  ld   [$24],x     4557  ld([v6502_ADL],X)               #26 Fetch L
              10ad 1525  ld   [$25],y     4558  ld([v6502_ADH],Y)               #27
              10ae 0d00  ld   [y,x]       4559  ld([Y,X])                       #28
              10af 111a  ld   [$1a],x     4560  ld([v6502_PCL],X)               #29 Fetch H
              10b0 c21a  st   [$1a]       4561  st([v6502_PCL])                 #30
              10b1 151b  ld   [$1b],y     4562  ld([v6502_PCH],Y)               #31
              10b2 0d00  ld   [y,x]       4563  ld([Y,X])                       #32
              10b3 c21b  st   [$1b]       4564  st([v6502_PCH])                 #33
              10b4 140e  ld   $0e,y       4565  ld(hi('v6502_next'),Y)          #34
              10b5 00ed  ld   $ed         4566  ld(-38//2)                      #35
              10b6 e020  jmp  y,$20       4567  jmp(Y,'v6502_next')             #36
                                          4568  #nop()                          #37 Overlap
                                          4569  #
                                          4570  label('v6502_INC')
v6502_INC:    10b7 1411  ld   $11,y       4571  ld(hi('v6502_inc'),Y)           #9,37
              10b8 e00e  jmp  y,$0e       4572  jmp(Y,'v6502_inc')              #10
                                          4573  #nop()                          #11 Overlap
                                          4574  label('v6502_LDA')
v6502_LDA:    10b9 1411  ld   $11,y       4575  ld(hi('v6502_lda'),Y)           #9,11
              10ba e018  jmp  y,$18       4576  jmp(Y,'v6502_lda')              #10
                                          4577  #nop()                          #11 Overlap
                                          4578  label('v6502_LDX')
v6502_LDX:    10bb 1411  ld   $11,y       4579  ld(hi('v6502_ldx'),Y)           #9,11
              10bc e022  jmp  y,$22       4580  jmp(Y,'v6502_ldx')              #10
                                          4581  #nop()                          #11 Overlap
                                          4582  label('v6502_LDX2')
v6502_LDX2:   10bd 1411  ld   $11,y       4583  ld(hi('v6502_ldx2'),Y)          #9,11
              10be e02a  jmp  y,$2a       4584  jmp(Y,'v6502_ldx2')             #10
                                          4585  #nop()                          #11 Overlap
                                          4586  label('v6502_LDY')
v6502_LDY:    10bf 1411  ld   $11,y       4587  ld(hi('v6502_ldy'),Y)           #9,11
              10c0 e026  jmp  y,$26       4588  jmp(Y,'v6502_ldy')              #10
                                          4589  #nop()                          #11 Overlap
                                          4590  label('v6502_STA')
v6502_STA:    10c1 1411  ld   $11,y       4591  ld(hi('v6502_sta'),Y)           #9,11
              10c2 e034  jmp  y,$34       4592  jmp(Y,'v6502_sta')              #10
                                          4593  #nop()                          #11 Overlap
                                          4594  label('v6502_STX')
v6502_STX:    10c3 1411  ld   $11,y       4595  ld(hi('v6502_stx'),Y)           #9,11
              10c4 e03a  jmp  y,$3a       4596  jmp(Y,'v6502_stx')              #10
                                          4597  #nop()                          #11 Overlap
                                          4598  label('v6502_STX2')
v6502_STX2:   10c5 1411  ld   $11,y       4599  ld(hi('v6502_stx2'),Y)          #9,11
              10c6 e040  jmp  y,$40       4600  jmp(Y,'v6502_stx2')             #10
                                          4601  #nop()                          #11 Overlap
                                          4602  label('v6502_STY')
v6502_STY:    10c7 1411  ld   $11,y       4603  ld(hi('v6502_sty'),Y)           #9,11
              10c8 e048  jmp  y,$48       4604  jmp(Y,'v6502_sty')              #10
                                          4605  #nop()                          #11 Overlap
                                          4606  label('v6502_TAX')
v6502_TAX:    10c9 1411  ld   $11,y       4607  ld(hi('v6502_tax'),Y)           #9,11
              10ca e04d  jmp  y,$4d       4608  jmp(Y,'v6502_tax')              #10
                                          4609  #nop()                          #11 Overlap
                                          4610  label('v6502_TAY')
v6502_TAY:    10cb 1411  ld   $11,y       4611  ld(hi('v6502_tay'),Y)           #9,11
              10cc e062  jmp  y,$62       4612  jmp(Y,'v6502_tay')              #10
                                          4613  #nop()                          #11 Overlap
                                          4614  label('v6502_TXA')
v6502_TXA:    10cd 1411  ld   $11,y       4615  ld(hi('v6502_txa'),Y)           #9,11
              10ce e065  jmp  y,$65       4616  jmp(Y,'v6502_txa')              #10
                                          4617  #nop()                          #11 Overlap
                                          4618  label('v6502_TYA')
v6502_TYA:    10cf 1411  ld   $11,y       4619  ld(hi('v6502_tya'),Y)           #9,11
              10d0 e068  jmp  y,$68       4620  jmp(Y,'v6502_tya')              #10
                                          4621  #nop()                          #11 Overlap
                                          4622  label('v6502_CLV')
v6502_CLV:    10d1 1411  ld   $11,y       4623  ld(hi('v6502_clv'),Y)           #9,11
              10d2 e076  jmp  y,$76       4624  jmp(Y,'v6502_clv')              #10
                                          4625  #nop()                          #11 Overlap
                                          4626  label('v6502_RTI')
v6502_RTI:    10d3 1411  ld   $11,y       4627  ld(hi('v6502_rti'),Y)           #9,11
              10d4 e0e4  jmp  y,$e4       4628  jmp(Y,'v6502_rti')              #10
                                          4629  #nop()                          #11 Overlap
                                          4630  label('v6502_ROR')
v6502_ROR:    10d5 140d  ld   $0d,y       4631  ld(hi('v6502_ror'),Y)           #9,11
              10d6 e084  jmp  y,$84       4632  jmp(Y,'v6502_ror')              #10
                                          4633  #nop()                          #11 Overlap
                                          4634  label('v6502_LSR')
v6502_LSR:    10d7 140d  ld   $0d,y       4635  ld(hi('v6502_lsr'),Y)           #9,11
              10d8 e09e  jmp  y,$9e       4636  jmp(Y,'v6502_lsr')              #10
                                          4637  #nop()                          #11 Overlap
                                          4638  label('v6502_PHA')
v6502_PHA:    10d9 140d  ld   $0d,y       4639  ld(hi('v6502_pha'),Y)           #9,11
              10da e0e3  jmp  y,$e3       4640  jmp(Y,'v6502_pha')              #10
                                          4641  #nop()                          #11 Overlap
                                          4642  label('v6502_CLI')
v6502_CLI:    10db 1411  ld   $11,y       4643  ld(hi('v6502_cli'),Y)           #9,11
              10dc e06b  jmp  y,$6b       4644  jmp(Y,'v6502_cli')              #10
                                          4645  #nop()                          #11 Overlap
                                          4646  label('v6502_RTS')
v6502_RTS:    10dd 1411  ld   $11,y       4647  ld(hi('v6502_rts'),Y)           #9,11
              10de e08f  jmp  y,$8f       4648  jmp(Y,'v6502_rts')              #10
                                          4649  #nop()                          #11 Overlap
                                          4650  label('v6502_PLA')
v6502_PLA:    10df 140d  ld   $0d,y       4651  ld(hi('v6502_pla'),Y)           #9,11
              10e0 e0d8  jmp  y,$d8       4652  jmp(Y,'v6502_pla')              #10
                                          4653  #nop()                          #11 Overlap
                                          4654  label('v6502_SEI')
v6502_SEI:    10e1 1411  ld   $11,y       4655  ld(hi('v6502_sei'),Y)           #9,11
              10e2 e06e  jmp  y,$6e       4656  jmp(Y,'v6502_sei')              #10
                                          4657  #nop()                          #11 Overlap
                                          4658  label('v6502_TXS')
v6502_TXS:    10e3 1411  ld   $11,y       4659  ld(hi('v6502_txs'),Y)           #9,11
              10e4 e05e  jmp  y,$5e       4660  jmp(Y,'v6502_txs')              #10
                                          4661  #nop()                          #11 Overlap
                                          4662  label('v6502_TSX')
v6502_TSX:    10e5 1411  ld   $11,y       4663  ld(hi('v6502_tsx'),Y)           #9,11
              10e6 e054  jmp  y,$54       4664  jmp(Y,'v6502_tsx')              #10
                                          4665  #nop()                          #11 Overlap
                                          4666  label('v6502_CPY')
v6502_CPY:    10e7 1411  ld   $11,y       4667  ld(hi('v6502_cpy'),Y)           #9,11
              10e8 e0bd  jmp  y,$bd       4668  jmp(Y,'v6502_cpy')              #10
                                          4669  #nop()                          #11 Overlap
                                          4670  label('v6502_CMP')
v6502_CMP:    10e9 1411  ld   $11,y       4671  ld(hi('v6502_cmp'),Y)           #9,11
              10ea e0be  jmp  y,$be       4672  jmp(Y,'v6502_cmp')              #10
                                          4673  #nop()                          #11 Overlap
                                          4674  label('v6502_DEC')
v6502_DEC:    10eb 1411  ld   $11,y       4675  ld(hi('v6502_dec'),Y)           #9,11
              10ec e005  jmp  y,$05       4676  jmp(Y,'v6502_dec')              #10
                                          4677  #nop()                          #11 Overlap
                                          4678  label('v6502_CLD')
v6502_CLD:    10ed 1411  ld   $11,y       4679  ld(hi('v6502_cld'),Y)           #9,11
              10ee e071  jmp  y,$71       4680  jmp(Y,'v6502_cld')              #10
                                          4681  #nop()                          #11 Overlap
                                          4682  label('v6502_CPX')
v6502_CPX:    10ef 1411  ld   $11,y       4683  ld(hi('v6502_cpx'),Y)           #9,11
              10f0 e0bb  jmp  y,$bb       4684  jmp(Y,'v6502_cpx')              #10
                                          4685  #nop()                          #11 Overlap
                                          4686  label('v6502_ASL')
v6502_ASL:    10f1 140d  ld   $0d,y       4687  ld(hi('v6502_asl'),Y)           #9,11
              10f2 e0c0  jmp  y,$c0       4688  jmp(Y,'v6502_asl')              #10
                                          4689  #nop()                          #11 Overlap
                                          4690  label('v6502_PHP')
v6502_PHP:    10f3 1411  ld   $11,y       4691  ld(hi('v6502_php'),Y)           #9,11
              10f4 e0a2  jmp  y,$a2       4692  jmp(Y,'v6502_php')              #10
                                          4693  #nop()                          #11 Overlap
                                          4694  label('v6502_BIT')
v6502_BIT:    10f5 1411  ld   $11,y       4695  ld(hi('v6502_bit'),Y)           #9
              10f6 e07d  jmp  y,$7d       4696  jmp(Y,'v6502_bit')              #10
                                          4697  #nop()                          #11 Overlap
                                          4698  label('v6502_ROL')
v6502_ROL:    10f7 140d  ld   $0d,y       4699  ld(hi('v6502_rol'),Y)           #9
              10f8 e0ad  jmp  y,$ad       4700  jmp(Y,'v6502_rol')              #10
                                          4701  #nop()                          #11 Overlap
                                          4702  label('v6502_PLP')
v6502_PLP:    10f9 1411  ld   $11,y       4703  ld(hi('v6502_plp'),Y)           #9
              10fa e0d4  jmp  y,$d4       4704  jmp(Y,'v6502_plp')              #10
                                          4705  #nop()                          #11 Overlap
                                          4706  label('v6502_SED')              # Decimal mode not implemented
v6502_SED:    10fb 1411  ld   $11,y       4707  ld(hi('v6502_sed'),Y)           #9,11
              10fc e074  jmp  y,$74       4708  jmp(Y,'v6502_sed')              #10
                                          4709  #nop()                          #11 Overlap
                                          4710  label('v6502_ILL') # All illegal opcodes map to BRK, except $FF which will crash
                                          4711  label('v6502_BRK')
v6502_ILL:
v6502_BRK:    10fd 140d  ld   $0d,y       4712  ld(hi('v6502_brk'),Y)           #9
              10fe e0eb  jmp  y,$eb       4713  jmp(Y,'v6502_brk')              #10
                                          4714  #nop()                          #11 Overlap
                                          4715
                                          4716  while pc()&255 < 255:
                                          4717    nop()
                                          4718
                                          4719  # `v6502_RESUME' is the interpreter's secondary entry point for when
                                          4720  # the opcode and operands were already fetched, just before the last hPulse.
                                          4721  # It must be at $xxff, prefably somewhere in v6502's own code pages.
                                          4722  label('v6502_RESUME')
                                          4723  assert (pc()&255) == 255
v6502_RESUME: 10ff a006  suba $06         4724  suba(v6502_adjust)              #0,11 v6502 secondary entry point
                                          4725  # --- Page boundary ---
                                          4726  align(0x100,size=0x200)
              1100 c215  st   [$15]       4727  st([vTicks])                    #1
              1101 1124  ld   [$24],x     4728  ld([v6502_ADL],X)               #2
              1102 140f  ld   $0f,y       4729  ld(hi('v6502_execute'),Y)       #3
              1103 e126  jmp  y,[$26]     4730  jmp(Y,[v6502_IR])               #4
              1104 fcff  bra  $ff         4731  bra(255)                        #5
                                          4732
                                          4733  label('v6502_dec')
v6502_dec:    1105 1525  ld   [$25],y     4734  ld([v6502_ADH],Y)               #12
              1106 0d00  ld   [y,x]       4735  ld([Y,X])                       #13
              1107 a001  suba $01         4736  suba(1)                         #14
              1108 ce00  st   [y,x]       4737  st([Y,X])                       #15
              1109 c228  st   [$28]       4738  st([v6502_Qz])                  #16 Z flag
              110a c229  st   [$29]       4739  st([v6502_Qn])                  #17 N flag
              110b 140e  ld   $0e,y       4740  ld(hi('v6502_next'),Y)          #18
              110c 00f5  ld   $f5         4741  ld(-22//2)                      #19
              110d e020  jmp  y,$20       4742  jmp(Y,'v6502_next')             #20
                                          4743  #nop()                          #21 Overlap
                                          4744  #
                                          4745  label('v6502_inc')
v6502_inc:    110e 1525  ld   [$25],y     4746  ld([v6502_ADH],Y)               #12,22
              110f 0d00  ld   [y,x]       4747  ld([Y,X])                       #13
              1110 8001  adda $01         4748  adda(1)                         #14
              1111 ce00  st   [y,x]       4749  st([Y,X])                       #15
              1112 c228  st   [$28]       4750  st([v6502_Qz])                  #16 Z flag
              1113 c229  st   [$29]       4751  st([v6502_Qn])                  #17 N flag
              1114 140e  ld   $0e,y       4752  ld(hi('v6502_next'),Y)          #18
              1115 00f5  ld   $f5         4753  ld(-22//2)                      #19
              1116 e020  jmp  y,$20       4754  jmp(Y,'v6502_next')             #20
              1117 0200  nop              4755  nop()                           #21
                                          4756
                                          4757  label('v6502_lda')
v6502_lda:    1118 0200  nop              4758  nop()                           #12
              1119 1525  ld   [$25],y     4759  ld([v6502_ADH],Y)               #13
              111a 0d00  ld   [y,x]       4760  ld([Y,X])                       #14
              111b c218  st   [$18]       4761  st([v6502_A])                   #15
                                          4762  label('.lda16')
.lda16:       111c c228  st   [$28]       4763  st([v6502_Qz])                  #16 Z flag
              111d c229  st   [$29]       4764  st([v6502_Qn])                  #17 N flag
              111e 0200  nop              4765  nop()                           #18
              111f 140e  ld   $0e,y       4766  ld(hi('v6502_next'),Y)          #19
              1120 e020  jmp  y,$20       4767  jmp(Y,'v6502_next')             #20
              1121 00f5  ld   $f5         4768  ld(-22//2)                      #21
                                          4769
                                          4770  label('v6502_ldx')
v6502_ldx:    1122 1525  ld   [$25],y     4771  ld([v6502_ADH],Y)               #12
              1123 0d00  ld   [y,x]       4772  ld([Y,X])                       #13
              1124 fc1c  bra  .lda16      4773  bra('.lda16')                   #14
              1125 c22a  st   [$2a]       4774  st([v6502_X])                   #15
                                          4775
                                          4776  label('v6502_ldy')
v6502_ldy:    1126 1525  ld   [$25],y     4777  ld([v6502_ADH],Y)               #12
              1127 0d00  ld   [y,x]       4778  ld([Y,X])                       #13
              1128 fc1c  bra  .lda16      4779  bra('.lda16')                   #14
              1129 c22b  st   [$2b]       4780  st([v6502_Y])                   #15
                                          4781
                                          4782  label('v6502_ldx2')
v6502_ldx2:   112a 0124  ld   [$24]       4783  ld([v6502_ADL])                 #12 Special case $B6: LDX $DD,Y
              112b a12a  suba [$2a]       4784  suba([v6502_X])                 #13 Undo X offset
              112c 912b  adda [$2b],x     4785  adda([v6502_Y],X)               #14 Apply Y instead
              112d 0500  ld   [x]         4786  ld([X])                         #15
              112e c22a  st   [$2a]       4787  st([v6502_X])                   #16
              112f c228  st   [$28]       4788  st([v6502_Qz])                  #17 Z flag
              1130 c229  st   [$29]       4789  st([v6502_Qn])                  #18 N flag
              1131 140e  ld   $0e,y       4790  ld(hi('v6502_next'),Y)          #19
              1132 e020  jmp  y,$20       4791  jmp(Y,'v6502_next')             #20
              1133 00f5  ld   $f5         4792  ld(-22//2)                      #21
                                          4793
                                          4794  label('v6502_sta')
v6502_sta:    1134 1525  ld   [$25],y     4795  ld([v6502_ADH],Y)               #12
              1135 0118  ld   [$18]       4796  ld([v6502_A])                   #13
              1136 ce00  st   [y,x]       4797  st([Y,X])                       #14
              1137 140e  ld   $0e,y       4798  ld(hi('v6502_next'),Y)          #15
              1138 e020  jmp  y,$20       4799  jmp(Y,'v6502_next')             #16
              1139 00f7  ld   $f7         4800  ld(-18//2)                      #17
                                          4801
                                          4802  label('v6502_stx')
v6502_stx:    113a 1525  ld   [$25],y     4803  ld([v6502_ADH],Y)               #12
              113b 012a  ld   [$2a]       4804  ld([v6502_X])                   #13
              113c ce00  st   [y,x]       4805  st([Y,X])                       #14
              113d 140e  ld   $0e,y       4806  ld(hi('v6502_next'),Y)          #15
              113e e020  jmp  y,$20       4807  jmp(Y,'v6502_next')             #16
              113f 00f7  ld   $f7         4808  ld(-18//2)                      #17
                                          4809
                                          4810  label('v6502_stx2')
v6502_stx2:   1140 0124  ld   [$24]       4811  ld([v6502_ADL])                 #12 Special case $96: STX $DD,Y
              1141 a12a  suba [$2a]       4812  suba([v6502_X])                 #13 Undo X offset
              1142 912b  adda [$2b],x     4813  adda([v6502_Y],X)               #14 Apply Y instead
              1143 012a  ld   [$2a]       4814  ld([v6502_X])                   #15
              1144 c600  st   [x]         4815  st([X])                         #16
              1145 140e  ld   $0e,y       4816  ld(hi('v6502_next'),Y)          #17
              1146 e020  jmp  y,$20       4817  jmp(Y,'v6502_next')             #18
              1147 00f6  ld   $f6         4818  ld(-20//2)                      #19
                                          4819
                                          4820  label('v6502_sty')
v6502_sty:    1148 1525  ld   [$25],y     4821  ld([v6502_ADH],Y)               #12
              1149 012b  ld   [$2b]       4822  ld([v6502_Y])                   #13
              114a ce00  st   [y,x]       4823  st([Y,X])                       #14
              114b 140e  ld   $0e,y       4824  ld(hi('v6502_next'),Y)          #15
              114c e020  jmp  y,$20       4825  jmp(Y,'v6502_next')             #16
                                          4826  label('v6502_tax')
v6502_tax:    114d 00f7  ld   $f7         4827  ld(-18//2)                      #17,12
                                          4828  #
                                          4829  #label('v6502_tax')
                                          4830  #nop()                          #12 Overlap
              114e 0118  ld   [$18]       4831  ld([v6502_A])                   #13
              114f c22a  st   [$2a]       4832  st([v6502_X])                   #14
                                          4833  label('.tax15')
.tax15:       1150 c228  st   [$28]       4834  st([v6502_Qz])                  #15 Z flag
              1151 c229  st   [$29]       4835  st([v6502_Qn])                  #16 N flag
              1152 140e  ld   $0e,y       4836  ld(hi('v6502_next'),Y)          #17
              1153 e020  jmp  y,$20       4837  jmp(Y,'v6502_next')             #18
                                          4838  label('v6502_tsx')
v6502_tsx:    1154 00f6  ld   $f6         4839  ld(-20//2)                      #19
                                          4840  #
                                          4841  #label('v6502_tsx')
                                          4842  #nop()                          #12 Overlap
              1155 011c  ld   [$1c]       4843  ld([v6502_S])                   #13
              1156 a001  suba $01         4844  suba(1)                         #14 Shift down on export
              1157 c22a  st   [$2a]       4845  st([v6502_X])                   #15
                                          4846  label('.tsx16')
.tsx16:       1158 c228  st   [$28]       4847  st([v6502_Qz])                  #16 Z flag
              1159 c229  st   [$29]       4848  st([v6502_Qn])                  #17 N flag
              115a 0200  nop              4849  nop()                           #18
              115b 140e  ld   $0e,y       4850  ld(hi('v6502_next'),Y)          #19
              115c e020  jmp  y,$20       4851  jmp(Y,'v6502_next')             #20
              115d 00f5  ld   $f5         4852  ld(-22//2)                      #21
                                          4853
                                          4854  label('v6502_txs')
v6502_txs:    115e 012a  ld   [$2a]       4855  ld([v6502_X])                   #12
              115f 8001  adda $01         4856  adda(1)                         #13 Shift up on import
              1160 fc58  bra  .tsx16      4857  bra('.tsx16')                   #14
              1161 c21c  st   [$1c]       4858  st([v6502_S])                   #15
                                          4859
                                          4860  label('v6502_tay')
v6502_tay:    1162 0118  ld   [$18]       4861  ld([v6502_A])                   #12
              1163 fc50  bra  .tax15      4862  bra('.tax15')                   #13
              1164 c22b  st   [$2b]       4863  st([v6502_Y])                   #14
                                          4864
                                          4865  label('v6502_txa')
v6502_txa:    1165 012a  ld   [$2a]       4866  ld([v6502_X])                   #12
              1166 fc50  bra  .tax15      4867  bra('.tax15')                   #13
              1167 c218  st   [$18]       4868  st([v6502_A])                   #14
                                          4869
                                          4870  label('v6502_tya')
v6502_tya:    1168 012b  ld   [$2b]       4871  ld([v6502_Y])                   #12
              1169 fc50  bra  .tax15      4872  bra('.tax15')                   #13
              116a c218  st   [$18]       4873  st([v6502_A])                   #14
                                          4874
                                          4875  label('v6502_cli')
v6502_cli:    116b 0127  ld   [$27]       4876  ld([v6502_P])                   #12
              116c fc79  bra  .clv15      4877  bra('.clv15')                   #13
              116d 20fb  anda $fb         4878  anda(~v6502_Iflag)              #14
                                          4879
                                          4880  label('v6502_sei')
v6502_sei:    116e 0127  ld   [$27]       4881  ld([v6502_P])                   #12
              116f fc79  bra  .clv15      4882  bra('.clv15')                   #13
              1170 4004  ora  $04         4883  ora(v6502_Iflag)                #14
                                          4884
                                          4885  label('v6502_cld')
v6502_cld:    1171 0127  ld   [$27]       4886  ld([v6502_P])                   #12
              1172 fc79  bra  .clv15      4887  bra('.clv15')                   #13
              1173 20f7  anda $f7         4888  anda(~v6502_Dflag)              #14
                                          4889
                                          4890  label('v6502_sed')
v6502_sed:    1174 0127  ld   [$27]       4891  ld([v6502_P])                   #12
              1175 fc79  bra  .clv15      4892  bra('.clv15')                   #13
                                          4893  label('v6502_clv')
v6502_clv:    1176 4008  ora  $08         4894  ora(v6502_Dflag)                #14,12 Overlap
                                          4895  #
                                          4896  #label('v6502_clv')
                                          4897  #nop()                          #12
              1177 0127  ld   [$27]       4898  ld([v6502_P])                   #13
              1178 207f  anda $7f         4899  anda(~v6502_Vemu)               #14
                                          4900  label('.clv15')
.clv15:       1179 c227  st   [$27]       4901  st([v6502_P])                   #15
              117a 140e  ld   $0e,y       4902  ld(hi('v6502_next'),Y)          #16
              117b 00f6  ld   $f6         4903  ld(-20//2)                      #17
              117c e020  jmp  y,$20       4904  jmp(Y,'v6502_next')             #18
                                          4905  label('v6502_bit')
v6502_bit:    117d 0200  nop              4906  nop()                           #19,12
                                          4907  #
                                          4908  #label('v6502_bit')
                                          4909  #nop()                          #12 Overlap
              117e 1124  ld   [$24],x     4910  ld([v6502_ADL],X)               #13
              117f 1525  ld   [$25],y     4911  ld([v6502_ADH],Y)               #14
              1180 0d00  ld   [y,x]       4912  ld([Y,X])                       #15
              1181 c229  st   [$29]       4913  st([v6502_Qn])                  #16 N flag
              1182 2118  anda [$18]       4914  anda([v6502_A])                 #17 This is a reason we keep N and Z in separate bytes
              1183 c228  st   [$28]       4915  st([v6502_Qz])                  #18 Z flag
              1184 0127  ld   [$27]       4916  ld([v6502_P])                   #19
              1185 207f  anda $7f         4917  anda(~v6502_Vemu)               #20
              1186 c227  st   [$27]       4918  st([v6502_P])                   #21
              1187 0d00  ld   [y,x]       4919  ld([Y,X])                       #22
              1188 8200  adda ac          4920  adda(AC)                        #23
              1189 2080  anda $80         4921  anda(v6502_Vemu)                #24
              118a 4127  ora  [$27]       4922  ora([v6502_P])                  #25
              118b c227  st   [$27]       4923  st([v6502_P])                   #26 Update V
              118c 140e  ld   $0e,y       4924  ld(hi('v6502_next'),Y)          #27
              118d e020  jmp  y,$20       4925  jmp(Y,'v6502_next')             #28
              118e 00f1  ld   $f1         4926  ld(-30//2)                      #29
                                          4927
                                          4928  label('v6502_rts')
v6502_rts:    118f 011c  ld   [$1c]       4929  ld([v6502_S])                   #12
              1190 1200  ld   ac,x        4930  ld(AC,X)                        #13
              1191 8002  adda $02         4931  adda(2)                         #14
              1192 c21c  st   [$1c]       4932  st([v6502_S])                   #15
              1193 1400  ld   $00,y       4933  ld(0,Y)                         #16
              1194 0d00  ld   [y,x]       4934  ld([Y,X])                       #17
              1195 de00  st   [y,x++]     4935  st([Y,Xpp])                     #18 Just X++
              1196 8001  adda $01         4936  adda(1)                         #19
              1197 c21a  st   [$1a]       4937  st([v6502_PCL])                 #20
              1198 f09b  beq  $119b       4938  beq(pc()+3)                     #21
              1199 fc9c  bra  $119c       4939  bra(pc()+3)                     #22
              119a 0000  ld   $00         4940  ld(0)                           #23
              119b 0001  ld   $01         4941  ld(1)                           #23(!)
              119c 8d00  adda [y,x]       4942  adda([Y,X])                     #24
              119d c21b  st   [$1b]       4943  st([v6502_PCH])                 #25
              119e 0200  nop              4944  nop()                           #26
              119f 140e  ld   $0e,y       4945  ld(hi('v6502_next'),Y)          #27
              11a0 e020  jmp  y,$20       4946  jmp(Y,'v6502_next')             #28
              11a1 00f1  ld   $f1         4947  ld(-30//2)                      #29
                                          4948
                                          4949  label('v6502_php')
v6502_php:    11a2 011c  ld   [$1c]       4950  ld([v6502_S])                   #12
              11a3 a001  suba $01         4951  suba(1)                         #13
              11a4 d21c  st   [$1c],x     4952  st([v6502_S],X)                 #14
              11a5 0127  ld   [$27]       4953  ld([v6502_P])                   #15
              11a6 20bd  anda $bd         4954  anda(~v6502_Vflag&~v6502_Zflag) #16 Keep Vemu,B,D,I,C
              11a7 f4aa  bge  $11aa       4955  bpl(pc()+3)                     #17 V to bit 6 and clear N
              11a8 fcaa  bra  $11aa       4956  bra(pc()+2)                     #18
              11a9 60c0  xora $c0         4957  xora(v6502_Vflag^v6502_Vemu)    #19
              11aa c600  st   [x]         4958  st([X])                         #19,20
              11ab 0128  ld   [$28]       4959  ld([v6502_Qz])                  #21 Z flag
              11ac f0af  beq  $11af       4960  beq(pc()+3)                     #22
              11ad fcb0  bra  $11b0       4961  bra(pc()+3)                     #23
              11ae 0000  ld   $00         4962  ld(0)                           #24
              11af 0002  ld   $02         4963  ld(v6502_Zflag)                 #24(!)
              11b0 4500  ora  [x]         4964  ora([X])                        #25
              11b1 c600  st   [x]         4965  st([X])                         #26
              11b2 0129  ld   [$29]       4966  ld([v6502_Qn])                  #27 N flag
              11b3 2080  anda $80         4967  anda(0x80)                      #28
              11b4 4500  ora  [x]         4968  ora([X])                        #29
              11b5 4020  ora  $20         4969  ora(v6502_Uflag)                #30 Unused bit
              11b6 c600  st   [x]         4970  st([X])                         #31
              11b7 0200  nop              4971  nop()                           #32
              11b8 140e  ld   $0e,y       4972  ld(hi('v6502_next'),Y)          #33
              11b9 e020  jmp  y,$20       4973  jmp(Y,'v6502_next')             #34
              11ba 00ee  ld   $ee         4974  ld(-36//2)                      #35
                                          4975
                                          4976  label('v6502_cpx')
v6502_cpx:    11bb fcc0  bra  .cmp14      4977  bra('.cmp14')                   #12
              11bc 012a  ld   [$2a]       4978  ld([v6502_X])                   #13
                                          4979
                                          4980  label('v6502_cpy')
v6502_cpy:    11bd fcc0  bra  .cmp14      4981  bra('.cmp14')                   #12
                                          4982  label('v6502_cmp')
v6502_cmp:    11be 012b  ld   [$2b]       4983  ld([v6502_Y])                   #13,12
                                          4984  #
                                          4985  #label('v6502_cmp')             #12 Overlap
                                          4986  assert v6502_Cflag == 1
              11bf 0118  ld   [$18]       4987  ld([v6502_A])                   #13
                                          4988  label('.cmp14')
.cmp14:       11c0 1525  ld   [$25],y     4989  ld([v6502_ADH],Y)               #14
              11c1 e8c7  blt  .cmp17      4990  bmi('.cmp17')                   #15 Carry?
              11c2 ad00  suba [y,x]       4991  suba([Y,X])                     #16
              11c3 c228  st   [$28]       4992  st([v6502_Qz])                  #17 Z flag
              11c4 c229  st   [$29]       4993  st([v6502_Qn])                  #18 N flag
              11c5 fccb  bra  .cmp21      4994  bra('.cmp21')                   #19
              11c6 4d00  ora  [y,x]       4995  ora([Y,X])                      #20
                                          4996  label('.cmp17')
.cmp17:       11c7 c228  st   [$28]       4997  st([v6502_Qz])                  #17 Z flag
              11c8 c229  st   [$29]       4998  st([v6502_Qn])                  #18 N flag
              11c9 2d00  anda [y,x]       4999  anda([Y,X])                     #19
              11ca 0200  nop              5000  nop()                           #20
                                          5001  label('.cmp21')
.cmp21:       11cb 6080  xora $80         5002  xora(0x80)                      #21
              11cc 3080  anda $80,x       5003  anda(0x80,X)                    #22 Move carry to bit 0
              11cd 0127  ld   [$27]       5004  ld([v6502_P])                   #23 C flag
              11ce 20fe  anda $fe         5005  anda(~1)                        #24
              11cf 4500  ora  [x]         5006  ora([X])                        #25
              11d0 c227  st   [$27]       5007  st([v6502_P])                   #26
              11d1 140e  ld   $0e,y       5008  ld(hi('v6502_next'),Y)          #27
              11d2 e020  jmp  y,$20       5009  jmp(Y,'v6502_next')             #28
              11d3 00f1  ld   $f1         5010  ld(-30//2)                      #29
                                          5011
                                          5012  label('v6502_plp')
                                          5013  assert v6502_Nflag == 128
                                          5014  assert 2*v6502_Vflag == v6502_Vemu
v6502_plp:    11d4 011c  ld   [$1c]       5015  ld([v6502_S])                   #12
              11d5 1200  ld   ac,x        5016  ld(AC,X)                        #13
              11d6 8001  adda $01         5017  adda(1)                         #14
              11d7 c21c  st   [$1c]       5018  st([v6502_S])                   #15
              11d8 0500  ld   [x]         5019  ld([X])                         #16
              11d9 c229  st   [$29]       5020  st([v6502_Qn])                  #17 N flag
              11da 2002  anda $02         5021  anda(v6502_Zflag)               #18
              11db 6002  xora $02         5022  xora(v6502_Zflag)               #19
              11dc c228  st   [$28]       5023  st([v6502_Qz])                  #20 Z flag
              11dd 0500  ld   [x]         5024  ld([X])                         #21
              11de 207f  anda $7f         5025  anda(~v6502_Vemu)               #22 V to bit 7
              11df 8040  adda $40         5026  adda(v6502_Vflag)               #23
              11e0 c227  st   [$27]       5027  st([v6502_P])                   #24 All other flags
              11e1 140e  ld   $0e,y       5028  ld(hi('v6502_next'),Y)          #25
              11e2 e020  jmp  y,$20       5029  jmp(Y,'v6502_next')             #26
              11e3 00f2  ld   $f2         5030  ld(-28//2)                      #27
                                          5031
                                          5032  label('v6502_rti')
v6502_rti:    11e4 011c  ld   [$1c]       5033  ld([v6502_S])                   #12
              11e5 1200  ld   ac,x        5034  ld(AC,X)                        #13
              11e6 8003  adda $03         5035  adda(3)                         #14
              11e7 c21c  st   [$1c]       5036  st([v6502_S])                   #15
              11e8 0500  ld   [x]         5037  ld([X])                         #16
              11e9 c229  st   [$29]       5038  st([v6502_Qn])                  #17 N flag
              11ea 2002  anda $02         5039  anda(v6502_Zflag)               #18
              11eb 6002  xora $02         5040  xora(v6502_Zflag)               #19
              11ec c228  st   [$28]       5041  st([v6502_Qz])                  #20 Z flag
              11ed 1400  ld   $00,y       5042  ld(0,Y)                         #21
              11ee 0d00  ld   [y,x]       5043  ld([Y,X])                       #22
              11ef de00  st   [y,x++]     5044  st([Y,Xpp])                     #23 Just X++
              11f0 207f  anda $7f         5045  anda(~v6502_Vemu)               #24 V to bit 7
              11f1 8040  adda $40         5046  adda(v6502_Vflag)               #25
              11f2 c227  st   [$27]       5047  st([v6502_P])                   #26 All other flags
              11f3 0d00  ld   [y,x]       5048  ld([Y,X])                       #27
              11f4 de00  st   [y,x++]     5049  st([Y,Xpp])                     #28 Just X++
              11f5 c21a  st   [$1a]       5050  st([v6502_PCL])                 #29
              11f6 0d00  ld   [y,x]       5051  ld([Y,X])                       #30
              11f7 c21b  st   [$1b]       5052  st([v6502_PCH])                 #31
              11f8 0200  nop              5053  nop()                           #32
              11f9 140e  ld   $0e,y       5054  ld(hi('v6502_next'),Y)          #33
              11fa e020  jmp  y,$20       5055  jmp(Y,'v6502_next')             #34
              11fb 00ee  ld   $ee         5056  ld(-36//2)                      #35
                                          5057
                                          5058  #-----------------------------------------------------------------------
                                          5059  #       More SYS functions
                                          5060  #-----------------------------------------------------------------------
                                          5061
                                          5062  # SYS_Exec_88 implementation
                                          5063  label('sys_Exec')
sys_Exec:     11fc d617  st   [$17],y     5064  st([vPC+1],Y)                   #18 Clear vPCH and Y
              11fd 011c  ld   [$1c]       5065  ld([vSP])                       #19 Place ROM loader below current stack pointer
              11fe a037  suba $37         5066  suba(53+2)                      #20 (AC -> *+0) One extra word for PUSH
              11ff d21d  st   [$1d],x     5067  st([vTmp],X)                    #21
              1200 80fe  adda $fe         5068  adda(-2)                        #22 (AC -> *-2)
              1201 c216  st   [$16]       5069  st([vPC])                       #23
                                          5070  # Start of manually compiled vCPU section
              1202 dc75  st   $75,[y,x++] 5071  st('PUSH',    [Y,Xpp])          #24 *+0
              1203 dccf  st   $cf,[y,x++] 5072  st('CALL',    [Y,Xpp])          #25 *+26 Fetch first byte
              1204 8023  adda $23         5073  adda(33-(-2))                   #26 (AC -> *+33)
              1205 de00  st   [y,x++]     5074  st(           [Y,Xpp])          #27 *+27
              1206 dc5e  st   $5e,[y,x++] 5075  st('ST',      [Y,Xpp])          #28 *+3 Chunk copy loop
              1207 dc27  st   $27,[y,x++] 5076  st(sysArgs+3, [Y,Xpp])          #29 *+4 High-address comes first
              1208 dccf  st   $cf,[y,x++] 5077  st('CALL',    [Y,Xpp])          #30 *+5
              1209 de00  st   [y,x++]     5078  st(           [Y,Xpp])          #31 *+6
              120a dc5e  st   $5e,[y,x++] 5079  st('ST',      [Y,Xpp])          #32 *+7
              120b dc26  st   $26,[y,x++] 5080  st(sysArgs+2, [Y,Xpp])          #33 *+8 Then the low address
              120c dccf  st   $cf,[y,x++] 5081  st('CALL',    [Y,Xpp])          #34 *+9
              120d de00  st   [y,x++]     5082  st(           [Y,Xpp])          #35 *+10
              120e dc5e  st   $5e,[y,x++] 5083  st('ST',      [Y,Xpp])          #36 *+11 Byte copy loop
              120f dc28  st   $28,[y,x++] 5084  st(sysArgs+4, [Y,Xpp])          #37 *+12 Byte count (0 means 256)
              1210 dccf  st   $cf,[y,x++] 5085  st('CALL',    [Y,Xpp])          #38 *+13
              1211 de00  st   [y,x++]     5086  st(           [Y,Xpp])          #39 *+14
              1212 dcf0  st   $f0,[y,x++] 5087  st('POKE',    [Y,Xpp])          #40 *+15
              1213 dc26  st   $26,[y,x++] 5088  st(sysArgs+2, [Y,Xpp])          #41 *+16
              1214 dc93  st   $93,[y,x++] 5089  st('INC',     [Y,Xpp])          #42 *+17
              1215 dc26  st   $26,[y,x++] 5090  st(sysArgs+2, [Y,Xpp])          #43 *+18
              1216 dc1a  st   $1a,[y,x++] 5091  st('LD',      [Y,Xpp])          #44 *+19
              1217 dc28  st   $28,[y,x++] 5092  st(sysArgs+4, [Y,Xpp])          #45 *+20
              1218 dce6  st   $e6,[y,x++] 5093  st('SUBI',    [Y,Xpp])          #46 *+21
              1219 dc01  st   $01,[y,x++] 5094  st(1,         [Y,Xpp])          #47 *+22
              121a dc35  st   $35,[y,x++] 5095  st('BCC',     [Y,Xpp])          #48 *+23
              121b dc72  st   $72,[y,x++] 5096  st('NE',      [Y,Xpp])          #49 *+24
              121c 80e8  adda $e8         5097  adda(11-2-33)                   #50 (AC -> *+9)
              121d de00  st   [y,x++]     5098  st(           [Y,Xpp])          #51 *+25
              121e dccf  st   $cf,[y,x++] 5099  st('CALL',    [Y,Xpp])          #52 *+26 Go to next block
              121f 8018  adda $18         5100  adda(33-9)                      #53 (AC -> *+33)
              1220 de00  st   [y,x++]     5101  st(           [Y,Xpp])          #54 *+27
              1221 dc35  st   $35,[y,x++] 5102  st('BCC',     [Y,Xpp])          #55 *+28
              1222 dc72  st   $72,[y,x++] 5103  st('NE',      [Y,Xpp])          #56 *+29
              1223 80e0  adda $e0         5104  adda(3-2-33)                    #57 (AC -> *+1)
              1224 de00  st   [y,x++]     5105  st(           [Y,Xpp])          #58 *+30
              1225 dc63  st   $63,[y,x++] 5106  st('POP',     [Y,Xpp])          #59 *+31 End
              1226 dcff  st   $ff,[y,x++] 5107  st('RET',     [Y,Xpp])          #60 *+32
                                          5108  # Pointer constant pointing to the routine below (for use by CALL)
              1227 8022  adda $22         5109  adda(35-1)                      #61 (AC -> *+35)
              1228 de00  st   [y,x++]     5110  st(           [Y,Xpp])          #62 *+33
              1229 dc00  st   $00,[y,x++] 5111  st(0,         [Y,Xpp])          #63 *+34
                                          5112  # Routine to read next byte from ROM and advance read pointer
              122a dc1a  st   $1a,[y,x++] 5113  st('LD',      [Y,Xpp])          #64 *+35 Test for end of ROM table
              122b dc24  st   $24,[y,x++] 5114  st(sysArgs+0, [Y,Xpp])          #65 *+36
              122c dc8c  st   $8c,[y,x++] 5115  st('XORI',    [Y,Xpp])          #66 *+37
              122d dcfb  st   $fb,[y,x++] 5116  st(251,       [Y,Xpp])          #67 *+38
              122e dc35  st   $35,[y,x++] 5117  st('BCC',     [Y,Xpp])          #68 *+39
              122f dc72  st   $72,[y,x++] 5118  st('NE',      [Y,Xpp])          #69 *+40
              1230 8009  adda $09         5119  adda(46-2-35)                   #70 (AC -> *+44)
              1231 de00  st   [y,x++]     5120  st(           [Y,Xpp])          #71 *+41
              1232 dc5e  st   $5e,[y,x++] 5121  st('ST',      [Y,Xpp])          #72 *+42 Wrap to next ROM page
              1233 dc24  st   $24,[y,x++] 5122  st(sysArgs+0, [Y,Xpp])          #73 *+43
              1234 dc93  st   $93,[y,x++] 5123  st('INC',     [Y,Xpp])          #74 *+44
              1235 dc25  st   $25,[y,x++] 5124  st(sysArgs+1, [Y,Xpp])          #75 *+45
              1236 dc21  st   $21,[y,x++] 5125  st('LDW',     [Y,Xpp])          #76 *+46 Read next byte from ROM table
              1237 dc24  st   $24,[y,x++] 5126  st(sysArgs+0, [Y,Xpp])          #77 *+47
              1238 dc7f  st   $7f,[y,x++] 5127  st('LUP',     [Y,Xpp])          #78 *+48
              1239 dc00  st   $00,[y,x++] 5128  st(0,         [Y,Xpp])          #79 *+49
              123a dc93  st   $93,[y,x++] 5129  st('INC',     [Y,Xpp])          #80 *+50 Increment read pointer
              123b dc24  st   $24,[y,x++] 5130  st(sysArgs+0, [Y,Xpp])          #81 *+51
              123c dcff  st   $ff,[y,x++] 5131  st('RET',     [Y,Xpp])          #82 *+52 Return
                                          5132  # Return to interpreter
              123d 1403  ld   $03,y       5133  ld(hi('REENTER'),Y)             #83
              123e e0cb  jmp  y,$cb       5134  jmp(Y,'REENTER')                #84
              123f 00d4  ld   $d4         5135  ld(-88//2)                      #85
                                          5136
                                          5137  # SYS_ResetWaveforms_v4_50 implementation
                                          5138  label('sys_ResetWaveforms')
sys_ResetWaveforms:
              1240 0118  ld   [$18]       5139  ld([vAC+0])                     #18 X=4i
              1241 8200  adda ac          5140  adda(AC)                        #19
              1242 9200  adda ac,x        5141  adda(AC,X)                      #20
              1243 0118  ld   [$18]       5142  ld([vAC+0])                     #21
              1244 de00  st   [y,x++]     5143  st([Y,Xpp])                     #22 Sawtooth: T[4i+0] = i
              1245 2020  anda $20         5144  anda(0x20)                      #23 Triangle: T[4i+1] = 2i if i<32 else 127-2i
              1246 ec49  bne  $1249       5145  bne(pc()+3)                     #24
              1247 0118  ld   [$18]       5146  ld([vAC+0])                     #25
              1248 fc4b  bra  $124b       5147  bra(pc()+3)                     #26
              1249 8118  adda [$18]       5148  adda([vAC+0])                   #26,27
              124a 607f  xora $7f         5149  xora(127)                       #27
              124b de00  st   [y,x++]     5150  st([Y,Xpp])                     #28
              124c 0118  ld   [$18]       5151  ld([vAC+0])                     #29 Pulse: T[4i+2] = 0 if i<32 else 63
              124d 2020  anda $20         5152  anda(0x20)                      #30
              124e ec51  bne  $1251       5153  bne(pc()+3)                     #31
              124f fc52  bra  $1252       5154  bra(pc()+3)                     #32
              1250 0000  ld   $00         5155  ld(0)                           #33
              1251 003f  ld   $3f         5156  ld(63)                          #33(!)
              1252 de00  st   [y,x++]     5157  st([Y,Xpp])                     #34
              1253 0118  ld   [$18]       5158  ld([vAC+0])                     #35 Sawtooth: T[4i+3] = i
              1254 ce00  st   [y,x]       5159  st([Y,X])                       #36
              1255 8001  adda $01         5160  adda(1)                         #37 i += 1
              1256 c218  st   [$18]       5161  st([vAC+0])                     #38
              1257 6040  xora $40         5162  xora(64)                        #39 For 64 iterations
              1258 f05b  beq  $125b       5163  beq(pc()+3)                     #40
              1259 fc5c  bra  $125c       5164  bra(pc()+3)                     #41
              125a 00fe  ld   $fe         5165  ld(-2)                          #42
              125b 0000  ld   $00         5166  ld(0)                           #42(!)
              125c 8116  adda [$16]       5167  adda([vPC])                     #43
              125d c216  st   [$16]       5168  st([vPC])                       #44
              125e 1403  ld   $03,y       5169  ld(hi('REENTER'),Y)             #45
              125f e0cb  jmp  y,$cb       5170  jmp(Y,'REENTER')                #46
              1260 00e7  ld   $e7         5171  ld(-50//2)                      #47
                                          5172
                                          5173  # SYS_ShuffleNoise_v4_46 implementation
                                          5174  label('sys_ShuffleNoise')
sys_ShuffleNoise:
              1261 1118  ld   [$18],x     5175  ld([vAC+0],X)                   #18 tmp = T[4j]
              1262 0d00  ld   [y,x]       5176  ld([Y,X])                       #19
              1263 c21d  st   [$1d]       5177  st([vTmp])                      #20
              1264 1119  ld   [$19],x     5178  ld([vAC+1],X)                   #21 T[4j] = T[4i]
              1265 0d00  ld   [y,x]       5179  ld([Y,X])                       #22
              1266 1118  ld   [$18],x     5180  ld([vAC+0],X)                   #23
              1267 ce00  st   [y,x]       5181  st([Y,X])                       #24
              1268 8200  adda ac          5182  adda(AC)                        #25 j += T[4i]
              1269 8200  adda ac          5183  adda(AC,)                       #26
              126a 8118  adda [$18]       5184  adda([vAC+0])                   #27
              126b c218  st   [$18]       5185  st([vAC+0])                     #28
              126c 1119  ld   [$19],x     5186  ld([vAC+1],X)                   #29 T[4i] = tmp
              126d 011d  ld   [$1d]       5187  ld([vTmp])                      #30
              126e ce00  st   [y,x]       5188  st([Y,X])                       #31
              126f 0119  ld   [$19]       5189  ld([vAC+1])                     #32 i += 1
              1270 8004  adda $04         5190  adda(4)                         #33
              1271 c219  st   [$19]       5191  st([vAC+1])                     #34
              1272 f075  beq  $1275       5192  beq(pc()+3)                     #35 For 64 iterations
              1273 fc76  bra  $1276       5193  bra(pc()+3)                     #36
              1274 00fe  ld   $fe         5194  ld(-2)                          #37
              1275 0000  ld   $00         5195  ld(0)                           #37(!)
              1276 8116  adda [$16]       5196  adda([vPC])                     #38
              1277 c216  st   [$16]       5197  st([vPC])                       #39
              1278 1403  ld   $03,y       5198  ld(hi('NEXTY'),Y)               #40
              1279 e000  jmp  y,$00       5199  jmp(Y,'NEXTY')                  #41
              127a 00ea  ld   $ea         5200  ld(-44//2)                      #42
                                          5201
                                          5202  #-----------------------------------------------------------------------
                                          5203
              127b 0200  nop              5204  forth.emit_entry_page(vTicks, vReturn)
              127c 0200  nop
              127d 0200  nop
              * 131 times
              12fe 0200  nop              ;You are now entering... Forth
FORTH_ENTER:  12ff 801c  adda $1c
              1300 c215  st   [$15]       ;Timing point: [vTicks] == AC == accurate number of ticks until we need to be back
forth.next1:  1301 a00c  suba $0c
              1302 1531  ld   [$31],y
              1303 e130  jmp  y,[$30]
              1304 fc00  bra  $00
forth.next1.reenter:
forth.next1.reenter.even:
              1305 0200  nop
forth.next1.reenter.odd:
              1306 a008  suba $08
              1307 8115  adda [$15]
              1308 c215  st   [$15]
              1309 a009  suba $09
              130a e81d  blt  forth.exit.from-next2
              130b 0001  ld   $01
              130c fc01  bra  forth.next1
              130d 0115  ld   [$15]
forth.next2:
forth.next2.odd:
              130e 0200  nop
forth.next2.even:
              130f a00a  suba $0a
              1310 8115  adda [$15]
              1311 c215  st   [$15]
              1312 0132  ld   [$32]
              1313 c230  st   [$30]
              1314 0014  ld   $14
              1315 c231  st   [$31]
              1316 0115  ld   [$15]
              1317 a009  suba $09
              1318 e81d  blt  forth.exit.from-next2
              1319 0001  ld   $01
              131a fc01  bra  forth.next1
              131b 0115  ld   [$15]
forth.exit:
forth.exit.from-failed-test:
              131c 00fa  ld   $fa
forth.exit.from-next1-reenter:
forth.exit.from-next2:
              131d 8115  adda [$15]
              131e 1401  ld   $01,y
              131f e41f  bgt  $131f
              1320 a001  suba $01
              1321 e11e  jmp  y,[$1e]
              1322 0200  nop
              1323 0200  nop              5205  forth.emit_core_words()
              1324 0200  nop
              1325 0200  nop
              * 221 times
forth.restart-or-quit:
              1400 fd30  bra  [$30]
              1401 f802  ble  .quit
.quit:        1402 1413  ld   $13,y       ;jmp forth.exit.from-failed-test
              1403 e01c  jmp  y,$1c
forth.next3:
forth.next3.rom-mode:
              1404 80f9  adda $f9
forth.next3.fast-entry:
              1405 1030  ld   $30,x
              1406 1534  ld   [$34],y
              1407 e133  jmp  y,[$33]
              1408 1400  ld   $00,y
forth.next3.ram-rom-mode:
              1409 80f6  adda $f6
              140a 1534  ld   [$34],y     ;W <- [IP]
              140b 1133  ld   [$33],x
              140c 0d00  ld   [y,x]
              140d c230  st   [$30]
              140e 0133  ld   [$33]
              140f 8001  adda $01
              1410 1200  ld   ac,x
              1411 0d00  ld   [y,x]
              1412 c231  st   [$31]       ;IP <- IP + 2
              1413 0133  ld   [$33]
              1414 8002  adda $02
              1415 f01a  beq  .page-boundary
              1416 c233  st   [$33]
              1417 1413  ld   $13,y       ;REENTER
              1418 e006  jmp  y,$06
              1419 00f8  ld   $f8
.page-boundary:
              141a 0134  ld   [$34]
              141b 8001  adda $01
              141c c234  st   [$34]
              141d 1413  ld   $13,y       ;REENTER
              141e e005  jmp  y,$05
              141f 00f6  ld   $f6
forth.next3.ram-ram-mode:
              1420 80f2  adda $f2
              1421 1534  ld   [$34],y     ;[tmp] <- [IP]
              1422 1133  ld   [$33],x
              1423 0d00  ld   [y,x]
              1424 c224  st   [$24]
              1425 0133  ld   [$33]
              1426 8001  adda $01
              1427 1200  ld   ac,x
              1428 0d00  ld   [y,x]
              1429 1600  ld   ac,y        ;[W] <- [tmp]
              142a 1124  ld   [$24],x
              142b 0d00  ld   [y,x]
              142c c230  st   [$30]
              142d 0124  ld   [$24]
              142e 8001  adda $01
              142f 1200  ld   ac,x
              1430 0d00  ld   [y,x]
              1431 c231  st   [$31]
              1432 0133  ld   [$33]       ;IP <- IP + 2
              1433 8002  adda $02
              1434 ec3c  bne  .not-page-boundary
              1435 c233  st   [$33]
              1436 0134  ld   [$34]
              1437 8001  adda $01
              1438 c234  st   [$34]
              1439 1413  ld   $13,y       ;REENTER
              143a e005  jmp  y,$05
              143b 00f2  ld   $f2
.not-page-boundary:
              143c 1413  ld   $13,y       ;REENTER
              143d e006  jmp  y,$06
              143e 00f4  ld   $f4
              143f 0200  nop
              1440 0200  nop
              1441 0200  nop
              * 193 times
forth.restart-or-quit:
              1500 fd30  bra  [$30]
              1501 f802  ble  .quit
.quit:        1502 1413  ld   $13,y       ;jmp forth.exit.from-failed-test
              1503 e01c  jmp  y,$1c
forth.core.DROP:
              1504 80fc  adda $fc
              1505 011c  ld   [$1c]
              1506 8002  adda $02
              1507 c21c  st   [$1c]
              1508 1413  ld   $13,y       ;NEXT
              1509 e00e  jmp  y,$0e
              150a 00fc  ld   $fc
forth.core.2DROP:
              150b 80fc  adda $fc
              150c 011c  ld   [$1c]
              150d 8004  adda $04
              150e c21c  st   [$1c]
              150f 1413  ld   $13,y       ;NEXT
              1510 e00e  jmp  y,$0e
              1511 00fc  ld   $fc
forth.core.SWAP:
              1512 80f0  adda $f0         ;Copy top 4 bytes of stack to tmp
              1513 111c  ld   [$1c],x
              1514 0500  ld   [x]
              1515 c224  st   [$24]
              1516 011c  ld   [$1c]
              1517 8001  adda $01
              1518 1200  ld   ac,x
              1519 0500  ld   [x]
              151a c225  st   [$25]
              151b 011c  ld   [$1c]
              151c 8002  adda $02
              151d 1200  ld   ac,x
              151e 0500  ld   [x]
              151f c226  st   [$26]
              1520 011c  ld   [$1c]
              1521 8003  adda $03
              1522 1200  ld   ac,x
              1523 0500  ld   [x]
              1524 c227  st   [$27]
              1525 1400  ld   $00,y       ;Copy back to stack in order
              1526 111c  ld   [$1c],x
              1527 0126  ld   [$26]
              1528 de00  st   [y,x++]
              1529 0127  ld   [$27]
              152a de00  st   [y,x++]
              152b 0124  ld   [$24]
              152c de00  st   [y,x++]
              152d 0125  ld   [$25]
              152e de00  st   [y,x++]
              152f 1413  ld   $13,y       ;NEXT
              1530 e00f  jmp  y,$0f
              1531 00f0  ld   $f0
forth.core.DUP:
              1532 80f6  adda $f6
              1533 111c  ld   [$1c],x
              1534 0500  ld   [x]
              1535 c224  st   [$24]
              1536 011c  ld   [$1c]
              1537 9001  adda $01,x
              1538 0500  ld   [x]
              1539 c225  st   [$25]
              153a 1400  ld   $00,y
              153b 011c  ld   [$1c]
              153c a002  suba $02
              153d d21c  st   [$1c],x
              153e 0124  ld   [$24]
              153f de00  st   [y,x++]
              1540 0125  ld   [$25]
              1541 ce00  st   [y,x]
              1542 1413  ld   $13,y       ;NEXT
              1543 e00e  jmp  y,$0e
              1544 00f6  ld   $f6
forth.core.OVER:
              1545 80f6  adda $f6
              1546 011c  ld   [$1c]
              1547 9002  adda $02,x
              1548 0500  ld   [x]
              1549 c224  st   [$24]
              154a 011c  ld   [$1c]
              154b 9003  adda $03,x
              154c 0500  ld   [x]
              154d c225  st   [$25]
              154e 1400  ld   $00,y
              154f 011c  ld   [$1c]
              1550 a002  suba $02
              1551 d21c  st   [$1c],x
              1552 0124  ld   [$24]
              1553 de00  st   [y,x++]
              1554 0125  ld   [$25]
              1555 ce00  st   [y,x]
              1556 1413  ld   $13,y       ;NEXT
              1557 e00f  jmp  y,$0f
              1558 00f6  ld   $f6
forth.core.ROT:
              1559 80ef  adda $ef
              155a 1400  ld   $00,y
              155b 011c  ld   [$1c]
              155c 9004  adda $04,x
              155d 0500  ld   [x]
              155e c224  st   [$24]
              155f 011c  ld   [$1c]
              1560 9005  adda $05,x
              1561 0500  ld   [x]
              1562 c225  st   [$25]
              1563 111c  ld   [$1c],x
              1564 0500  ld   [x]
              1565 c226  st   [$26]
              1566 0124  ld   [$24]
              1567 de00  st   [y,x++]
              1568 0500  ld   [x]
              1569 c224  st   [$24]
              156a 0125  ld   [$25]
              156b de00  st   [y,x++]
              156c 0500  ld   [x]
              156d c225  st   [$25]
              156e 0126  ld   [$26]
              156f de00  st   [y,x++]
              1570 0500  ld   [x]
              1571 c226  st   [$26]
              1572 0124  ld   [$24]
              1573 de00  st   [y,x++]
              1574 0125  ld   [$25]
              1575 de00  st   [y,x++]
              1576 0126  ld   [$26]
              1577 de00  st   [y,x++]
              1578 1413  ld   $13,y       ;NEXT
              1579 e00f  jmp  y,$0f
              157a 00ef  ld   $ef
forth.core.2SWAP:
              157b 80ea  adda $ea
              157c 1400  ld   $00,y
              157d 011c  ld   [$1c]
              157e 9004  adda $04,x
              157f 0500  ld   [x]
              1580 de00  st   [y,x++]
              1581 c224  st   [$24]
              1582 0500  ld   [x]
              1583 de00  st   [y,x++]
              1584 c225  st   [$25]
              1585 0500  ld   [x]
              1586 de00  st   [y,x++]
              1587 c226  st   [$26]
              1588 0500  ld   [x]
              1589 c227  st   [$27]
              158a 111c  ld   [$1c],x
              158b 0500  ld   [x]
              158c c228  st   [$28]
              158d 0124  ld   [$24]
              158e de00  st   [y,x++]
              158f 0500  ld   [x]
              1590 c224  st   [$24]
              1591 0125  ld   [$25]
              1592 de00  st   [y,x++]
              1593 0500  ld   [x]
              1594 c225  st   [$25]
              1595 0126  ld   [$26]
              1596 de00  st   [y,x++]
              1597 0500  ld   [x]
              1598 c226  st   [$26]
              1599 0127  ld   [$27]
              159a de00  st   [y,x++]
              159b 0128  ld   [$28]
              159c de00  st   [y,x++]
              159d 0124  ld   [$24]
              159e de00  st   [y,x++]
              159f 0125  ld   [$25]
              15a0 de00  st   [y,x++]
              15a1 0126  ld   [$26]
              15a2 de00  st   [y,x++]
              15a3 1413  ld   $13,y       ;NEXT
              15a4 e00e  jmp  y,$0e
              15a5 00ea  ld   $ea
                                          5206  # --- Page boundary ---
                                          5207  start_of_forth_word_space = pc()  # Variable used in unit tests to locate test data
              15a6 0200  nop              5208  align(0x100,0x100)
              15a7 0200  nop
              15a8 0200  nop
              * 89 times
              15ff 0200  nop              5208  align(0x100,0x100)
                                          5209
                                          5210  #-----------------------------------------------------------------------
                                          5211  #
                                          5212  #  End of core
                                          5213  #
                                          5214  #-----------------------------------------------------------------------
                                          5215  disableListing()
                                          ;+-----------------------------------+
                                          ;| MainMenu\MainMenu.gcl             |
                                          ;+-----------------------------------+
Main:         1600 0002  ld   $02         ;| RAM segment address (high byte first)
              1601 0000  ld   $00         ;|
              1602 00cc  ld   $cc         ;| Length (1..256)
              1603 00cd  ld   $cd         ;0200 DEF
              1604 004e  ld   $4e
              1605 0021  ld   $21         ;0202 LDW
              1606 0030  ld   $30         ;0202 'Char'
              1607 00e6  ld   $e6         ;0204 SUBI
              1608 0052  ld   $52
              1609 0035  ld   $35         ;0206 BCC
              160a 0053  ld   $53         ;0207 GE
              160b 0010  ld   $10
              160c 00e3  ld   $e3         ;0209 ADDI
              160d 0032  ld   $32
              160e 002b  ld   $2b         ;020b STW
              160f 0032  ld   $32         ;020b 'i'
              1610 0011  ld   $11         ;020d LDWI
              1611 0000  ld   $00
              1612 0007  ld   $07
              1613 0090  ld   $90         ;0210 BRA
              1614 0015  ld   $15
              1615 002b  ld   $2b         ;0212 STW
              1616 0032  ld   $32         ;0212 'i'
              1617 0011  ld   $11         ;0214 LDWI
              1618 0000  ld   $00
              1619 0008  ld   $08
              161a 002b  ld   $2b         ;0217 STW
              161b 0034  ld   $34         ;0217 'fontData'
              161c 0021  ld   $21         ;0219 LDW
              161d 0032  ld   $32         ;0219 'i'
              161e 00e9  ld   $e9         ;021b LSLW
              161f 00e9  ld   $e9         ;021c LSLW
              1620 0099  ld   $99         ;021d ADDW
              1621 0032  ld   $32         ;021d 'i'
              1622 0099  ld   $99         ;021f ADDW
              1623 0034  ld   $34         ;021f 'fontData'
              1624 002b  ld   $2b         ;0221 STW
              1625 0034  ld   $34         ;0221 'fontData'
              1626 0059  ld   $59         ;0223 LDI
              1627 0020  ld   $20
              1628 005e  ld   $5e         ;0225 ST
              1629 0024  ld   $24
              162a 0021  ld   $21         ;0227 LDW
              162b 0036  ld   $36         ;0227 'Color'
              162c 005e  ld   $5e         ;0229 ST
              162d 0025  ld   $25
              162e 0021  ld   $21         ;022b LDW
              162f 0038  ld   $38         ;022b 'Pos'
              1630 002b  ld   $2b         ;022d STW
              1631 0028  ld   $28
              1632 00e3  ld   $e3         ;022f ADDI
              1633 0006  ld   $06
              1634 002b  ld   $2b         ;0231 STW
              1635 0038  ld   $38         ;0231 'Pos'
              1636 0011  ld   $11         ;0233 LDWI
              1637 00e1  ld   $e1
              1638 0004  ld   $04
              1639 002b  ld   $2b         ;0236 STW
              163a 0022  ld   $22
              163b 0059  ld   $59         ;0238 LDI
              163c 00fb  ld   $fb
              163d 002b  ld   $2b         ;023a STW
              163e 0032  ld   $32         ;023a 'i'
              163f 0021  ld   $21         ;023c LDW
              1640 0034  ld   $34         ;023c 'fontData'
              1641 007f  ld   $7f         ;023e LUP
              1642 0000  ld   $00
              1643 0093  ld   $93         ;0240 INC
              1644 0034  ld   $34         ;0240 'fontData'
              1645 005e  ld   $5e         ;0242 ST
              1646 0026  ld   $26
              1647 00b4  ld   $b4         ;0244 SYS
              1648 00cb  ld   $cb
              1649 0093  ld   $93         ;0246 INC
              164a 0028  ld   $28
              164b 0093  ld   $93         ;0248 INC
              164c 0032  ld   $32         ;0248 'i'
              164d 0021  ld   $21         ;024a LDW
              164e 0032  ld   $32         ;024a 'i'
              164f 0035  ld   $35         ;024c BCC
              1650 0072  ld   $72         ;024d NE
              1651 003a  ld   $3a
              1652 00ff  ld   $ff         ;024f RET
              1653 002b  ld   $2b         ;0250 STW
              1654 003a  ld   $3a         ;0250 'PrintChar'
              1655 00cd  ld   $cd         ;0252 DEF
              1656 007b  ld   $7b
              1657 0075  ld   $75         ;0254 PUSH
              1658 002b  ld   $2b         ;0255 STW
              1659 003c  ld   $3c         ;0255 'Text'
              165a 0021  ld   $21         ;0257 LDW
              165b 003c  ld   $3c         ;0257 'Text'
              165c 00ad  ld   $ad         ;0259 PEEK
              165d 0035  ld   $35         ;025a BCC
              165e 003f  ld   $3f         ;025b EQ
              165f 0079  ld   $79
              1660 002b  ld   $2b         ;025d STW
              1661 0030  ld   $30         ;025d 'Char'
              1662 0093  ld   $93         ;025f INC
              1663 003c  ld   $3c         ;025f 'Text'
              1664 008c  ld   $8c         ;0261 XORI
              1665 0009  ld   $09
              1666 0035  ld   $35         ;0263 BCC
              1667 0072  ld   $72         ;0264 NE
              1668 006c  ld   $6c
              1669 0021  ld   $21         ;0266 LDW
              166a 0038  ld   $38         ;0266 'Pos'
              166b 00e3  ld   $e3         ;0268 ADDI
              166c 0012  ld   $12
              166d 002b  ld   $2b         ;026a STW
              166e 0038  ld   $38         ;026a 'Pos'
              166f 0090  ld   $90         ;026c BRA
              1670 0055  ld   $55
              1671 008c  ld   $8c         ;026e XORI
              1672 0003  ld   $03
              1673 0035  ld   $35         ;0270 BCC
              1674 0072  ld   $72         ;0271 NE
              1675 0075  ld   $75
              1676 00cf  ld   $cf         ;0273 CALL
              1677 003e  ld   $3e         ;0273 'Newline'
              1678 0090  ld   $90         ;0275 BRA
              1679 0055  ld   $55
              167a 00cf  ld   $cf         ;0277 CALL
              167b 003a  ld   $3a         ;0277 'PrintChar'
              167c 0090  ld   $90         ;0279 BRA
              167d 0055  ld   $55
              167e 0063  ld   $63         ;027b POP
              167f 00ff  ld   $ff         ;027c RET
              1680 002b  ld   $2b         ;027d STW
              1681 0040  ld   $40         ;027d 'PrintText'
              1682 00cd  ld   $cd         ;027f DEF
              1683 0095  ld   $95
              1684 0075  ld   $75         ;0281 PUSH
              1685 0059  ld   $59         ;0282 LDI
              1686 002d  ld   $2d
              1687 002b  ld   $2b         ;0284 STW
              1688 0030  ld   $30         ;0284 'Char'
              1689 0059  ld   $59         ;0286 LDI
              168a 001a  ld   $1a
              168b 002b  ld   $2b         ;0288 STW
              168c 0042  ld   $42         ;0288 'j'
              168d 00cf  ld   $cf         ;028a CALL
              168e 003a  ld   $3a         ;028a 'PrintChar'
              168f 0021  ld   $21         ;028c LDW
              1690 0042  ld   $42         ;028c 'j'
              1691 00e6  ld   $e6         ;028e SUBI
              1692 0001  ld   $01
              1693 0035  ld   $35         ;0290 BCC
              1694 004d  ld   $4d         ;0291 GT
              1695 0086  ld   $86
              1696 00cf  ld   $cf         ;0293 CALL
              1697 003e  ld   $3e         ;0293 'Newline'
              1698 0063  ld   $63         ;0295 POP
              1699 00ff  ld   $ff         ;0296 RET
              169a 002b  ld   $2b         ;0297 STW
              169b 0044  ld   $44         ;0297 'PrintDivider'
              169c 00cd  ld   $cd         ;0299 DEF
              169d 00c5  ld   $c5
              169e 0075  ld   $75         ;029b PUSH
              169f 0021  ld   $21         ;029c LDW
              16a0 0046  ld   $46         ;029c 'MenuItem'
              16a1 00e6  ld   $e6         ;029e SUBI
              16a2 0006  ld   $06
              16a3 0035  ld   $35         ;02a0 BCC
              16a4 0053  ld   $53         ;02a1 GE
              16a5 00a6  ld   $a6
              16a6 0011  ld   $11         ;02a3 LDWI
              16a7 000b  ld   $0b
              16a8 0020  ld   $20
              16a9 0090  ld   $90         ;02a6 BRA
              16aa 00a9  ld   $a9
              16ab 0011  ld   $11         ;02a8 LDWI
              16ac 0059  ld   $59
              16ad 00f0  ld   $f0
              16ae 002b  ld   $2b         ;02ab STW
              16af 0038  ld   $38         ;02ab 'Pos'
              16b0 0021  ld   $21         ;02ad LDW
              16b1 0046  ld   $46         ;02ad 'MenuItem'
              16b2 002b  ld   $2b         ;02af STW
              16b3 0042  ld   $42         ;02af 'j'
              16b4 0011  ld   $11         ;02b1 LDWI
              16b5 0000  ld   $00
              16b6 0008  ld   $08
              16b7 0099  ld   $99         ;02b4 ADDW
              16b8 0038  ld   $38         ;02b4 'Pos'
              16b9 002b  ld   $2b         ;02b6 STW
              16ba 0038  ld   $38         ;02b6 'Pos'
              16bb 0021  ld   $21         ;02b8 LDW
              16bc 0042  ld   $42         ;02b8 'j'
              16bd 00e6  ld   $e6         ;02ba SUBI
              16be 0001  ld   $01
              16bf 0035  ld   $35         ;02bc BCC
              16c0 0053  ld   $53         ;02bd GE
              16c1 00ad  ld   $ad
              16c2 0059  ld   $59         ;02bf LDI
              16c3 0082  ld   $82
              16c4 002b  ld   $2b         ;02c1 STW
              16c5 0030  ld   $30         ;02c1 'Char'
              16c6 00cf  ld   $cf         ;02c3 CALL
              16c7 003a  ld   $3a         ;02c3 'PrintChar'
              16c8 0063  ld   $63         ;02c5 POP
              16c9 00ff  ld   $ff         ;02c6 RET
              16ca 002b  ld   $2b         ;02c7 STW
              16cb 0048  ld   $48         ;02c7 'PrintArrow'
              16cc 0093  ld   $93         ;02c9 INC
              16cd 001b  ld   $1b         ;02c9 '_vLR'+1
              16ce 00ff  ld   $ff         ;02cb RET
              16cf 0003  ld   $03         ;| RAM segment address (high byte first)
              16d0 0000  ld   $00         ;|
              16d1 00f5  ld   $f5         ;| Length (1..256)
              16d2 00cd  ld   $cd         ;0300 DEF
              16d3 00ee  ld   $ee
              16d4 0075  ld   $75         ;0302 PUSH
              16d5 001a  ld   $1a         ;0303 LD
              16d6 000e  ld   $0e
              16d7 002b  ld   $2b         ;0305 STW
              16d8 0036  ld   $36         ;0305 'Color'
              16d9 00cf  ld   $cf         ;0307 CALL
              16da 0048  ld   $48         ;0307 'PrintArrow'
              16db 001a  ld   $1a         ;0309 LD
              16dc 0011  ld   $11
              16dd 008c  ld   $8c         ;030b XORI
              16de 00fe  ld   $fe
              16df 0035  ld   $35         ;030d BCC
              16e0 0072  ld   $72         ;030e NE
              16e1 001f  ld   $1f
              16e2 00cf  ld   $cf         ;0310 CALL
              16e3 004a  ld   $4a         ;0310 'WipeOutArrow'
              16e4 0021  ld   $21         ;0312 LDW
              16e5 0046  ld   $46         ;0312 'MenuItem'
              16e6 00e6  ld   $e6         ;0314 SUBI
              16e7 0005  ld   $05
              16e8 0035  ld   $35         ;0316 BCC
              16e9 004d  ld   $4d         ;0317 GT
              16ea 001b  ld   $1b
              16eb 00e3  ld   $e3         ;0319 ADDI
              16ec 000b  ld   $0b
              16ed 002b  ld   $2b         ;031b STW
              16ee 0046  ld   $46         ;031b 'MenuItem'
              16ef 0059  ld   $59         ;031d LDI
              16f0 00ef  ld   $ef
              16f1 005e  ld   $5e         ;031f ST
              16f2 0011  ld   $11
              16f3 001a  ld   $1a         ;0321 LD
              16f4 0011  ld   $11
              16f5 008c  ld   $8c         ;0323 XORI
              16f6 00fd  ld   $fd
              16f7 0035  ld   $35         ;0325 BCC
              16f8 0072  ld   $72         ;0326 NE
              16f9 0035  ld   $35
              16fa 00cf  ld   $cf         ;0328 CALL
              16fb fe00  bra  ac          ;+-----------------------------------+
              16fc fcfd  bra  $16fd       ;|                                   |
              16fd 1404  ld   $04,y       ;| Trampoline for page $1600 lookups |
              16fe e068  jmp  y,$68       ;|                                   |
              16ff c218  st   [$18]       ;+-----------------------------------+
              1700 004a  ld   $4a         ;0328 'WipeOutArrow'
              1701 0021  ld   $21         ;032a LDW
              1702 0046  ld   $46         ;032a 'MenuItem'
              1703 00e6  ld   $e6         ;032c SUBI
              1704 0006  ld   $06
              1705 0035  ld   $35         ;032e BCC
              1706 0050  ld   $50         ;032f LT
              1707 0031  ld   $31
              1708 002b  ld   $2b         ;0331 STW
              1709 0046  ld   $46         ;0331 'MenuItem'
              170a 0059  ld   $59         ;0333 LDI
              170b 00ef  ld   $ef
              170c 005e  ld   $5e         ;0335 ST
              170d 0011  ld   $11
              170e 001a  ld   $1a         ;0337 LD
              170f 0011  ld   $11
              1710 008c  ld   $8c         ;0339 XORI
              1711 00fb  ld   $fb
              1712 0035  ld   $35         ;033b BCC
              1713 0072  ld   $72         ;033c NE
              1714 0050  ld   $50
              1715 00cf  ld   $cf         ;033e CALL
              1716 004a  ld   $4a         ;033e 'WipeOutArrow'
              1717 0021  ld   $21         ;0340 LDW
              1718 0046  ld   $46         ;0340 'MenuItem'
              1719 00e6  ld   $e6         ;0342 SUBI
              171a 0005  ld   $05
              171b 0035  ld   $35         ;0344 BCC
              171c 003f  ld   $3f         ;0345 EQ
              171d 004c  ld   $4c
              171e 00e6  ld   $e6         ;0347 SUBI
              171f 0006  ld   $06
              1720 0035  ld   $35         ;0349 BCC
              1721 003f  ld   $3f         ;034a EQ
              1722 004c  ld   $4c
              1723 0093  ld   $93         ;034c INC
              1724 0046  ld   $46         ;034c 'MenuItem'
              1725 0059  ld   $59         ;034e LDI
              1726 00ef  ld   $ef
              1727 005e  ld   $5e         ;0350 ST
              1728 0011  ld   $11
              1729 001a  ld   $1a         ;0352 LD
              172a 0011  ld   $11
              172b 008c  ld   $8c         ;0354 XORI
              172c 00f7  ld   $f7
              172d 0035  ld   $35         ;0356 BCC
              172e 0072  ld   $72         ;0357 NE
              172f 006d  ld   $6d
              1730 00cf  ld   $cf         ;0359 CALL
              1731 004a  ld   $4a         ;0359 'WipeOutArrow'
              1732 0021  ld   $21         ;035b LDW
              1733 0046  ld   $46         ;035b 'MenuItem'
              1734 0035  ld   $35         ;035d BCC
              1735 003f  ld   $3f         ;035e EQ
              1736 0069  ld   $69
              1737 00e6  ld   $e6         ;0360 SUBI
              1738 0006  ld   $06
              1739 0035  ld   $35         ;0362 BCC
              173a 003f  ld   $3f         ;0363 EQ
              173b 0069  ld   $69
              173c 0021  ld   $21         ;0365 LDW
              173d 0046  ld   $46         ;0365 'MenuItem'
              173e 00e6  ld   $e6         ;0367 SUBI
              173f 0001  ld   $01
              1740 002b  ld   $2b         ;0369 STW
              1741 0046  ld   $46         ;0369 'MenuItem'
              1742 0059  ld   $59         ;036b LDI
              1743 00ef  ld   $ef
              1744 005e  ld   $5e         ;036d ST
              1745 0011  ld   $11
              1746 001a  ld   $1a         ;036f LD
              1747 0011  ld   $11
              1748 0082  ld   $82         ;0371 ANDI
              1749 0080  ld   $80
              174a 0035  ld   $35         ;0373 BCC
              174b 0072  ld   $72         ;0374 NE
              174c 0001  ld   $01
              174d 0059  ld   $59         ;0376 LDI
              174e 002a  ld   $2a
              174f 002b  ld   $2b         ;0378 STW
              1750 0036  ld   $36         ;0378 'Color'
              1751 00cf  ld   $cf         ;037a CALL
              1752 0048  ld   $48         ;037a 'PrintArrow'
              1753 0021  ld   $21         ;037c LDW
              1754 0046  ld   $46         ;037c 'MenuItem'
              1755 0035  ld   $35         ;037e BCC
              1756 0072  ld   $72         ;037f NE
              1757 0084  ld   $84
              1758 0011  ld   $11         ;0381 LDWI
              1759 0058  ld   $58
              175a 0019  ld   $19
              175b 0090  ld   $90         ;0384 BRA
              175c 00ea  ld   $ea
              175d 00e6  ld   $e6         ;0386 SUBI
              175e 0001  ld   $01
              175f 0035  ld   $35         ;0388 BCC
              1760 0072  ld   $72         ;0389 NE
              1761 008e  ld   $8e
              1762 0011  ld   $11         ;038b LDWI
              1763 0058  ld   $58
              1764 0019  ld   $19
              1765 0090  ld   $90         ;038e BRA
              1766 00ea  ld   $ea
              1767 00e6  ld   $e6         ;0390 SUBI
              1768 0001  ld   $01
              1769 0035  ld   $35         ;0392 BCC
              176a 0072  ld   $72         ;0393 NE
              176b 0098  ld   $98
              176c 0011  ld   $11         ;0395 LDWI
              176d 0058  ld   $58
              176e 0019  ld   $19
              176f 0090  ld   $90         ;0398 BRA
              1770 00ea  ld   $ea
              1771 00e6  ld   $e6         ;039a SUBI
              1772 0001  ld   $01
              1773 0035  ld   $35         ;039c BCC
              1774 0072  ld   $72         ;039d NE
              1775 00a2  ld   $a2
              1776 0011  ld   $11         ;039f LDWI
              1777 0058  ld   $58
              1778 0019  ld   $19
              1779 0090  ld   $90         ;03a2 BRA
              177a 00ea  ld   $ea
              177b 00e6  ld   $e6         ;03a4 SUBI
              177c 0001  ld   $01
              177d 0035  ld   $35         ;03a6 BCC
              177e 0072  ld   $72         ;03a7 NE
              177f 00ac  ld   $ac
              1780 0011  ld   $11         ;03a9 LDWI
              1781 0058  ld   $58
              1782 0019  ld   $19
              1783 0090  ld   $90         ;03ac BRA
              1784 00ea  ld   $ea
              1785 00e6  ld   $e6         ;03ae SUBI
              1786 0001  ld   $01
              1787 0035  ld   $35         ;03b0 BCC
              1788 0072  ld   $72         ;03b1 NE
              1789 00b6  ld   $b6
              178a 0011  ld   $11         ;03b3 LDWI
              178b 0058  ld   $58
              178c 0019  ld   $19
              178d 0090  ld   $90         ;03b6 BRA
              178e 00ea  ld   $ea
              178f 00e6  ld   $e6         ;03b8 SUBI
              1790 0001  ld   $01
              1791 0035  ld   $35         ;03ba BCC
              1792 0072  ld   $72         ;03bb NE
              1793 00c0  ld   $c0
              1794 0011  ld   $11         ;03bd LDWI
              1795 0058  ld   $58
              1796 0019  ld   $19
              1797 0090  ld   $90         ;03c0 BRA
              1798 00ea  ld   $ea
              1799 00e6  ld   $e6         ;03c2 SUBI
              179a 0001  ld   $01
              179b 0035  ld   $35         ;03c4 BCC
              179c 0072  ld   $72         ;03c5 NE
              179d 00ca  ld   $ca
              179e 0011  ld   $11         ;03c7 LDWI
              179f 0058  ld   $58
              17a0 0019  ld   $19
              17a1 0090  ld   $90         ;03ca BRA
              17a2 00ea  ld   $ea
              17a3 00e6  ld   $e6         ;03cc SUBI
              17a4 0002  ld   $02
              17a5 0035  ld   $35         ;03ce BCC
              17a6 004d  ld   $4d         ;03cf GT
              17a7 00d4  ld   $d4
              17a8 0011  ld   $11         ;03d1 LDWI
              17a9 0058  ld   $58
              17aa 0019  ld   $19
              17ab 0090  ld   $90         ;03d4 BRA
              17ac 00ea  ld   $ea
              17ad 00e6  ld   $e6         ;03d6 SUBI
              17ae 0001  ld   $01
              17af 0035  ld   $35         ;03d8 BCC
              17b0 0072  ld   $72         ;03d9 NE
              17b1 00de  ld   $de
              17b2 0011  ld   $11         ;03db LDWI
              17b3 0058  ld   $58
              17b4 0019  ld   $19
              17b5 0090  ld   $90         ;03de BRA
              17b6 00ea  ld   $ea
              17b7 00e6  ld   $e6         ;03e0 SUBI
              17b8 0001  ld   $01
              17b9 0035  ld   $35         ;03e2 BCC
              17ba 0072  ld   $72         ;03e3 NE
              17bb 00e8  ld   $e8
              17bc 0011  ld   $11         ;03e5 LDWI
              17bd 0058  ld   $58
              17be 0019  ld   $19
              17bf 0090  ld   $90         ;03e8 BRA
              17c0 00ea  ld   $ea
              17c1 0090  ld   $90         ;03ea BRA
              17c2 0001  ld   $01
              17c3 002b  ld   $2b         ;03ec STW
              17c4 004c  ld   $4c         ;03ec 'Program'
              17c5 0063  ld   $63         ;03ee POP
              17c6 00ff  ld   $ff         ;03ef RET
              17c7 002b  ld   $2b         ;03f0 STW
              17c8 004e  ld   $4e         ;03f0 'SelectMenu'
              17c9 0093  ld   $93         ;03f2 INC
              17ca 001b  ld   $1b         ;03f2 '_vLR'+1
              17cb 00ff  ld   $ff         ;03f4 RET
              17cc 0004  ld   $04         ;| RAM segment address (high byte first)
              17cd 0000  ld   $00         ;|
              17ce 00d6  ld   $d6         ;| Length (1..256)
              17cf 00cd  ld   $cd         ;0400 DEF
              17d0 000b  ld   $0b
              17d1 001a  ld   $1a         ;0402 LD
              17d2 0039  ld   $39         ;0402 'Pos'+1
              17d3 00e3  ld   $e3         ;0404 ADDI
              17d4 0008  ld   $08
              17d5 005e  ld   $5e         ;0406 ST
              17d6 0039  ld   $39         ;0406 'Pos'+1
              17d7 0059  ld   $59         ;0408 LDI
              17d8 0002  ld   $02
              17d9 005e  ld   $5e         ;040a ST
              17da 0038  ld   $38         ;040a 'Pos'
              17db 00ff  ld   $ff         ;040c RET
              17dc 002b  ld   $2b         ;040d STW
              17dd 003e  ld   $3e         ;040d 'Newline'
              17de 00cd  ld   $cd         ;040f DEF
              17df 0081  ld   $81
              17e0 0009  ld   $09         ;0411 9
              17e1 0053  ld   $53         ;0412 'S'
              17e2 006e  ld   $6e         ;0413 'n'
              17e3 0061  ld   $61         ;0414 'a'
              17e4 006b  ld   $6b         ;0415 'k'
              17e5 0065  ld   $65         ;0416 'e'
              17e6 0009  ld   $09         ;0417 9
              17e7 0020  ld   $20         ;0418 ' '
              17e8 0020  ld   $20         ;0419 ' '
              17e9 0009  ld   $09         ;041a 9
              17ea 0054  ld   $54         ;041b 'T'
              17eb 0065  ld   $65         ;041c 'e'
              17ec 0074  ld   $74         ;041d 't'
              17ed 0072  ld   $72         ;041e 'r'
              17ee 006f  ld   $6f         ;041f 'o'
              17ef 006e  ld   $6e         ;0420 'n'
              17f0 0069  ld   $69         ;0421 'i'
              17f1 0073  ld   $73         ;0422 's'
              17f2 000a  ld   $0a         ;0423 10
              17f3 0009  ld   $09         ;0424 9
              17f4 0052  ld   $52         ;0425 'R'
              17f5 0061  ld   $61         ;0426 'a'
              17f6 0063  ld   $63         ;0427 'c'
              17f7 0065  ld   $65         ;0428 'e'
              17f8 0072  ld   $72         ;0429 'r'
              17f9 0009  ld   $09         ;042a 9
              17fa 0020  ld   $20         ;042b ' '
              17fb fe00  bra  ac          ;+-----------------------------------+
              17fc fcfd  bra  $17fd       ;|                                   |
              17fd 1404  ld   $04,y       ;| Trampoline for page $1700 lookups |
              17fe e068  jmp  y,$68       ;|                                   |
              17ff c218  st   [$18]       ;+-----------------------------------+
              1800 0020  ld   $20         ;042c ' '
              1801 0009  ld   $09         ;042d 9
              1802 0042  ld   $42         ;042e 'B'
              1803 0072  ld   $72         ;042f 'r'
              1804 0069  ld   $69         ;0430 'i'
              1805 0063  ld   $63         ;0431 'c'
              1806 006b  ld   $6b         ;0432 'k'
              1807 0073  ld   $73         ;0433 's'
              1808 000a  ld   $0a         ;0434 10
              1809 0009  ld   $09         ;0435 9
              180a 004d  ld   $4d         ;0436 'M'
              180b 0061  ld   $61         ;0437 'a'
              180c 006e  ld   $6e         ;0438 'n'
              180d 0064  ld   $64         ;0439 'd'
              180e 0065  ld   $65         ;043a 'e'
              180f 006c  ld   $6c         ;043b 'l'
              1810 0062  ld   $62         ;043c 'b'
              1811 0072  ld   $72         ;043d 'r'
              1812 006f  ld   $6f         ;043e 'o'
              1813 0074  ld   $74         ;043f 't'
              1814 0009  ld   $09         ;0440 9
              1815 0054  ld   $54         ;0441 'T'
              1816 0069  ld   $69         ;0442 'i'
              1817 0063  ld   $63         ;0443 'c'
              1818 0054  ld   $54         ;0444 'T'
              1819 0061  ld   $61         ;0445 'a'
              181a 0063  ld   $63         ;0446 'c'
              181b 0054  ld   $54         ;0447 'T'
              181c 006f  ld   $6f         ;0448 'o'
              181d 0065  ld   $65         ;0449 'e'
              181e 000a  ld   $0a         ;044a 10
              181f 0009  ld   $09         ;044b 9
              1820 0050  ld   $50         ;044c 'P'
              1821 0069  ld   $69         ;044d 'i'
              1822 0063  ld   $63         ;044e 'c'
              1823 0074  ld   $74         ;044f 't'
              1824 0075  ld   $75         ;0450 'u'
              1825 0072  ld   $72         ;0451 'r'
              1826 0065  ld   $65         ;0452 'e'
              1827 0073  ld   $73         ;0453 's'
              1828 0020  ld   $20         ;0454 ' '
              1829 0020  ld   $20         ;0455 ' '
              182a 0009  ld   $09         ;0456 9
              182b 0042  ld   $42         ;0457 'B'
              182c 0041  ld   $41         ;0458 'A'
              182d 0053  ld   $53         ;0459 'S'
              182e 0049  ld   $49         ;045a 'I'
              182f 0043  ld   $43         ;045b 'C'
              1830 000a  ld   $0a         ;045c 10
              1831 0009  ld   $09         ;045d 9
              1832 0043  ld   $43         ;045e 'C'
              1833 0072  ld   $72         ;045f 'r'
              1834 0065  ld   $65         ;0460 'e'
              1835 0064  ld   $64         ;0461 'd'
              1836 0069  ld   $69         ;0462 'i'
              1837 0074  ld   $74         ;0463 't'
              1838 0073  ld   $73         ;0464 's'
              1839 0009  ld   $09         ;0465 9
              183a 0009  ld   $09         ;0466 9
              183b 004d  ld   $4d         ;0467 'M'
              183c 0053  ld   $53         ;0468 'S'
              183d 0020  ld   $20         ;0469 ' '
              183e 0042  ld   $42         ;046a 'B'
              183f 0041  ld   $41         ;046b 'A'
              1840 0053  ld   $53         ;046c 'S'
              1841 0049  ld   $49         ;046d 'I'
              1842 0043  ld   $43         ;046e 'C'
              1843 000a  ld   $0a         ;046f 10
              1844 0009  ld   $09         ;0470 9
              1845 004c  ld   $4c         ;0471 'L'
              1846 006f  ld   $6f         ;0472 'o'
              1847 0061  ld   $61         ;0473 'a'
              1848 0064  ld   $64         ;0474 'd'
              1849 0065  ld   $65         ;0475 'e'
              184a 0072  ld   $72         ;0476 'r'
              184b 0009  ld   $09         ;0477 9
              184c 0020  ld   $20         ;0478 ' '
              184d 0009  ld   $09         ;0479 9
              184e 0041  ld   $41         ;047a 'A'
              184f 0070  ld   $70         ;047b 'p'
              1850 0070  ld   $70         ;047c 'p'
              1851 006c  ld   $6c         ;047d 'l'
              1852 0065  ld   $65         ;047e 'e'
              1853 002d  ld   $2d         ;047f '-'
              1854 0031  ld   $31         ;0480 '1'
              1855 000a  ld   $0a         ;0481 10
              1856 0000  ld   $00         ;0482 0
              1857 002b  ld   $2b         ;0483 STW
              1858 0050  ld   $50         ;0483 'MainMenu'
              1859 00cd  ld   $cd         ;0485 DEF
              185a 00cf  ld   $cf
              185b 0055  ld   $55         ;0487 'U'
              185c 0073  ld   $73         ;0488 's'
              185d 0065  ld   $65         ;0489 'e'
              185e 0020  ld   $20         ;048a ' '
              185f 005b  ld   $5b         ;048b 91
              1860 0041  ld   $41         ;048c 'A'
              1861 0072  ld   $72         ;048d 'r'
              1862 0072  ld   $72         ;048e 'r'
              1863 006f  ld   $6f         ;048f 'o'
              1864 0077  ld   $77         ;0490 'w'
              1865 0073  ld   $73         ;0491 's'
              1866 005d  ld   $5d         ;0492 93
              1867 0020  ld   $20         ;0493 ' '
              1868 0074  ld   $74         ;0494 't'
              1869 006f  ld   $6f         ;0495 'o'
              186a 0020  ld   $20         ;0496 ' '
              186b 0073  ld   $73         ;0497 's'
              186c 0065  ld   $65         ;0498 'e'
              186d 006c  ld   $6c         ;0499 'l'
              186e 0065  ld   $65         ;049a 'e'
              186f 0063  ld   $63         ;049b 'c'
              1870 0074  ld   $74         ;049c 't'
              1871 000a  ld   $0a         ;049d 10
              1872 0050  ld   $50         ;049e 'P'
              1873 0072  ld   $72         ;049f 'r'
              1874 0065  ld   $65         ;04a0 'e'
              1875 0073  ld   $73         ;04a1 's'
              1876 0073  ld   $73         ;04a2 's'
              1877 0020  ld   $20         ;04a3 ' '
              1878 005b  ld   $5b         ;04a4 91
              1879 0041  ld   $41         ;04a5 'A'
              187a 005d  ld   $5d         ;04a6 93
              187b 0020  ld   $20         ;04a7 ' '
              187c 0074  ld   $74         ;04a8 't'
              187d 006f  ld   $6f         ;04a9 'o'
              187e 0020  ld   $20         ;04aa ' '
              187f 0073  ld   $73         ;04ab 's'
              1880 0074  ld   $74         ;04ac 't'
              1881 0061  ld   $61         ;04ad 'a'
              1882 0072  ld   $72         ;04ae 'r'
              1883 0074  ld   $74         ;04af 't'
              1884 0020  ld   $20         ;04b0 ' '
              1885 0070  ld   $70         ;04b1 'p'
              1886 0072  ld   $72         ;04b2 'r'
              1887 006f  ld   $6f         ;04b3 'o'
              1888 0067  ld   $67         ;04b4 'g'
              1889 0072  ld   $72         ;04b5 'r'
              188a 0061  ld   $61         ;04b6 'a'
              188b 006d  ld   $6d         ;04b7 'm'
              188c 000a  ld   $0a         ;04b8 10
              188d 000a  ld   $0a         ;04b9 10
              188e 0048  ld   $48         ;04ba 'H'
              188f 006f  ld   $6f         ;04bb 'o'
              1890 006c  ld   $6c         ;04bc 'l'
              1891 0064  ld   $64         ;04bd 'd'
              1892 0020  ld   $20         ;04be ' '
              1893 005b  ld   $5b         ;04bf 91
              1894 0053  ld   $53         ;04c0 'S'
              1895 0074  ld   $74         ;04c1 't'
              1896 0061  ld   $61         ;04c2 'a'
              1897 0072  ld   $72         ;04c3 'r'
              1898 0074  ld   $74         ;04c4 't'
              1899 005d  ld   $5d         ;04c5 93
              189a 0020  ld   $20         ;04c6 ' '
              189b 0066  ld   $66         ;04c7 'f'
              189c 006f  ld   $6f         ;04c8 'o'
              189d 0072  ld   $72         ;04c9 'r'
              189e 0020  ld   $20         ;04ca ' '
              189f 0072  ld   $72         ;04cb 'r'
              18a0 0065  ld   $65         ;04cc 'e'
              18a1 0073  ld   $73         ;04cd 's'
              18a2 0065  ld   $65         ;04ce 'e'
              18a3 0074  ld   $74         ;04cf 't'
              18a4 0000  ld   $00         ;04d0 0
              18a5 002b  ld   $2b         ;04d1 STW
              18a6 0052  ld   $52         ;04d1 'HelpText'
              18a7 0093  ld   $93         ;04d3 INC
              18a8 001b  ld   $1b         ;04d3 '_vLR'+1
              18a9 00ff  ld   $ff         ;04d5 RET
              18aa 0005  ld   $05         ;| RAM segment address (high byte first)
              18ab 0000  ld   $00         ;|
              18ac 00a5  ld   $a5         ;| Length (1..256)
              18ad 00cd  ld   $cd         ;0500 DEF
              18ae 0011  ld   $11
              18af 0075  ld   $75         ;0502 PUSH
              18b0 0021  ld   $21         ;0503 LDW
              18b1 0038  ld   $38         ;0503 'Pos'
              18b2 00e6  ld   $e6         ;0505 SUBI
              18b3 000c  ld   $0c
              18b4 002b  ld   $2b         ;0507 STW
              18b5 0038  ld   $38         ;0507 'Pos'
              18b6 0059  ld   $59         ;0509 LDI
              18b7 0020  ld   $20
              18b8 002b  ld   $2b         ;050b STW
              18b9 0030  ld   $30         ;050b 'Char'
              18ba 00cf  ld   $cf         ;050d CALL
              18bb 003a  ld   $3a         ;050d 'PrintChar'
              18bc 00cf  ld   $cf         ;050f CALL
              18bd 003a  ld   $3a         ;050f 'PrintChar'
              18be 0063  ld   $63         ;0511 POP
              18bf 00ff  ld   $ff         ;0512 RET
              18c0 002b  ld   $2b         ;0513 STW
              18c1 004a  ld   $4a         ;0513 'WipeOutArrow'
              18c2 00cd  ld   $cd         ;0515 DEF
              18c3 0030  ld   $30
              18c4 0075  ld   $75         ;0517 PUSH
              18c5 0059  ld   $59         ;0518 LDI
              18c6 002a  ld   $2a
              18c7 002b  ld   $2b         ;051a STW
              18c8 0036  ld   $36         ;051a 'Color'
              18c9 00cf  ld   $cf         ;051c CALL
              18ca 0044  ld   $44         ;051c 'PrintDivider'
              18cb 0059  ld   $59         ;051e LDI
              18cc 000f  ld   $0f
              18cd 002b  ld   $2b         ;0520 STW
              18ce 0036  ld   $36         ;0520 'Color'
              18cf 0021  ld   $21         ;0522 LDW
              18d0 0050  ld   $50         ;0522 'MainMenu'
              18d1 00cf  ld   $cf         ;0524 CALL
              18d2 0040  ld   $40         ;0524 'PrintText'
              18d3 0059  ld   $59         ;0526 LDI
              18d4 002a  ld   $2a
              18d5 002b  ld   $2b         ;0528 STW
              18d6 0036  ld   $36         ;0528 'Color'
              18d7 00cf  ld   $cf         ;052a CALL
              18d8 0044  ld   $44         ;052a 'PrintDivider'
              18d9 0021  ld   $21         ;052c LDW
              18da 0052  ld   $52         ;052c 'HelpText'
              18db 00cf  ld   $cf         ;052e CALL
              18dc 0040  ld   $40         ;052e 'PrintText'
              18dd 0063  ld   $63         ;0530 POP
              18de 00ff  ld   $ff         ;0531 RET
              18df 002b  ld   $2b         ;0532 STW
              18e0 0054  ld   $54         ;0532 'PrintMenu'
              18e1 001a  ld   $1a         ;0534 LD
              18e2 0021  ld   $21
              18e3 0088  ld   $88         ;0536 ORI
              18e4 0003  ld   $03
              18e5 005e  ld   $5e         ;0538 ST
              18e6 0021  ld   $21
              18e7 0059  ld   $59         ;053a LDI
              18e8 005a  ld   $5a
              18e9 005e  ld   $5e         ;053c ST
              18ea 002c  ld   $2c
              18eb 0011  ld   $11         ;053e LDWI
              18ec 0002  ld   $02
              18ed 0020  ld   $20
              18ee 002b  ld   $2b         ;0541 STW
              18ef 0038  ld   $38         ;0541 'Pos'
              18f0 00cf  ld   $cf         ;0543 CALL
              18f1 0054  ld   $54         ;0543 'PrintMenu'
              18f2 0059  ld   $59         ;0545 LDI
              18f3 0000  ld   $00
              18f4 002b  ld   $2b         ;0547 STW
              18f5 0046  ld   $46         ;0547 'MenuItem'
              18f6 00cf  ld   $cf         ;0549 CALL
              18f7 004e  ld   $4e         ;0549 'SelectMenu'
              18f8 0011  ld   $11         ;054b LDWI
              18f9 0000  ld   $00
              18fa 0008  ld   $08
              18fb fe00  bra  ac          ;+-----------------------------------+
              18fc fcfd  bra  $18fd       ;|                                   |
              18fd 1404  ld   $04,y       ;| Trampoline for page $1800 lookups |
              18fe e068  jmp  y,$68       ;|                                   |
              18ff c218  st   [$18]       ;+-----------------------------------+
              1900 002b  ld   $2b         ;054e STW
              1901 0028  ld   $28         ;054e '_sysArgs4'
              1902 0011  ld   $11         ;0550 LDWI
              1903 0001  ld   $01
              1904 0088  ld   $88
              1905 002b  ld   $2b         ;0553 STW
              1906 0032  ld   $32         ;0553 'i'
              1907 0011  ld   $11         ;0555 LDWI
              1908 0080  ld   $80
              1909 00ff  ld   $ff
              190a 002b  ld   $2b         ;0558 STW
              190b 0042  ld   $42         ;0558 'j'
              190c 0021  ld   $21         ;055a LDW
              190d 0038  ld   $38         ;055a 'Pos'
              190e 00e3  ld   $e3         ;055c ADDI
              190f 0030  ld   $30
              1910 00f8  ld   $f8         ;055e ANDW
              1911 0042  ld   $42         ;055e 'j'
              1912 002b  ld   $2b         ;0560 STW
              1913 0056  ld   $56         ;0560 'q'
              1914 0011  ld   $11         ;0562 LDWI
              1915 00e1  ld   $e1
              1916 0004  ld   $04
              1917 002b  ld   $2b         ;0565 STW
              1918 0022  ld   $22         ;0565 '_sysFn'
              1919 0059  ld   $59         ;0567 LDI
              191a 0020  ld   $20
              191b 005e  ld   $5e         ;0569 ST
              191c 0024  ld   $24
              191d 005e  ld   $5e         ;056b ST
              191e 0025  ld   $25
              191f 0021  ld   $21         ;056d LDW
              1920 0028  ld   $28         ;056d '_sysArgs4'
              1921 00e3  ld   $e3         ;056f ADDI
              1922 0030  ld   $30
              1923 00f8  ld   $f8         ;0571 ANDW
              1924 0042  ld   $42         ;0571 'j'
              1925 00fc  ld   $fc         ;0573 XORW
              1926 0056  ld   $56         ;0573 'q'
              1927 0035  ld   $35         ;0575 BCC
              1928 003f  ld   $3f         ;0576 EQ
              1929 007f  ld   $7f
              192a 001a  ld   $1a         ;0578 LD
              192b 0059  ld   $59         ;0578 'p'+1
              192c 008c  ld   $8c         ;057a XORI
              192d 0078  ld   $78
              192e 0035  ld   $35         ;057c BCC
              192f 003f  ld   $3f         ;057d EQ
              1930 007f  ld   $7f
              1931 00b4  ld   $b4         ;057f SYS
              1932 00cb  ld   $cb
              1933 0011  ld   $11         ;0581 LDWI
              1934 0000  ld   $00
              1935 0008  ld   $08
              1936 0099  ld   $99         ;0584 921
              1937 0028  ld   $28         ;0585 40
              1938 002b  ld   $2b         ;0586 STW
              1939 0028  ld   $28
              193a 0035  ld   $35         ;0588 BCC
              193b 004d  ld   $4d         ;0589 GT
              193c 006d  ld   $6d
              193d 0099  ld   $99         ;058b ADDW
              193e 0032  ld   $32         ;058b 'i'
              193f 002b  ld   $2b         ;058d STW
              1940 0028  ld   $28
              1941 0082  ld   $82         ;058f ANDI
              1942 00ff  ld   $ff
              1943 008c  ld   $8c         ;0591 XORI
              1944 00a0  ld   $a0
              1945 0035  ld   $35         ;0593 BCC
              1946 0072  ld   $72         ;0594 NE
              1947 006b  ld   $6b
              1948 0059  ld   $59         ;0596 LDI
              1949 00ad  ld   $ad
              194a 002b  ld   $2b         ;0598 STW
              194b 0022  ld   $22         ;0598 '_sysFn'
              194c 0021  ld   $21         ;059a LDW
              194d 004c  ld   $4c         ;059a 'Program'
              194e 002b  ld   $2b         ;059c STW
              194f 0024  ld   $24         ;059c '_sysArgs0'
              1950 0011  ld   $11         ;059e LDWI
              1951 0000  ld   $00
              1952 0002  ld   $02
              1953 002b  ld   $2b         ;05a1 STW
              1954 001a  ld   $1a         ;05a1 '_vLR'
              1955 00b4  ld   $b4         ;05a3 SYS
              1956 00e2  ld   $e2
              1957 0000  ld   $00         ;End of MainMenu\MainMenu.gcl, size 856
                                          ;+-----------------------------------+
                                          ;| Reset.gcl                         |
                                          ;+-----------------------------------+
Reset:        1958 0002  ld   $02         ;| RAM segment address (high byte first)
              1959 0000  ld   $00         ;|
              195a 00d0  ld   $d0         ;| Length (1..256)
              195b 0011  ld   $11         ;0200 LDWI
              195c 0009  ld   $09
              195d 000b  ld   $0b
              195e 002b  ld   $2b         ;0203 STW
              195f 0022  ld   $22         ;0203 '_sysFn'
              1960 0059  ld   $59         ;0205 LDI
              1961 007c  ld   $7c
              1962 00b4  ld   $b4         ;0207 SYS
              1963 00fa  ld   $fa
              1964 00cd  ld   $cd         ;0209 DEF
              1965 0045  ld   $45
              1966 0011  ld   $11         ;020b LDWI
              1967 0000  ld   $00
              1968 0001  ld   $01
              1969 002b  ld   $2b         ;020e STW
              196a 0030  ld   $30         ;020e 'p'
              196b 0011  ld   $11         ;0210 LDWI
              196c 0000  ld   $00
              196d 0008  ld   $08
              196e 002b  ld   $2b         ;0213 STW
              196f 0032  ld   $32         ;0213 'q'
              1970 001a  ld   $1a         ;0215 LD
              1971 0033  ld   $33         ;0215 'q'+1
              1972 00f0  ld   $f0         ;0217 POKE
              1973 0030  ld   $30         ;0217 'p'
              1974 0093  ld   $93         ;0219 INC
              1975 0030  ld   $30         ;0219 'p'
              1976 0059  ld   $59         ;021b LDI
              1977 0000  ld   $00
              1978 00f0  ld   $f0         ;021d POKE
              1979 0030  ld   $30         ;021d 'p'
              197a 0093  ld   $93         ;021f INC
              197b 0030  ld   $30         ;021f 'p'
              197c 0093  ld   $93         ;0221 INC
              197d 0033  ld   $33         ;0221 'q'+1
              197e 0021  ld   $21         ;0223 LDW
              197f 0032  ld   $32         ;0223 'q'
              1980 0035  ld   $35         ;0225 BCC
              1981 004d  ld   $4d         ;0226 GT
              1982 0013  ld   $13
              1983 0011  ld   $11         ;0228 LDWI
              1984 0003  ld   $03
              1985 000b  ld   $0b
              1986 002b  ld   $2b         ;022b STW
              1987 0022  ld   $22
              1988 0059  ld   $59         ;022d LDI
              1989 0020  ld   $20
              198a 005e  ld   $5e         ;022f ST
              198b 0025  ld   $25
              198c 0011  ld   $11         ;0231 LDWI
              198d 0000  ld   $00
              198e 0008  ld   $08
              198f 002b  ld   $2b         ;0234 STW
              1990 0030  ld   $30         ;0234 'p'
              1991 002b  ld   $2b         ;0236 STW
              1992 0026  ld   $26
              1993 0059  ld   $59         ;0238 LDI
              1994 00a0  ld   $a0
              1995 005e  ld   $5e         ;023a ST
              1996 0024  ld   $24
              1997 00b4  ld   $b4         ;023c SYS
              1998 00f3  ld   $f3
              1999 0011  ld   $11         ;023e LDWI
              199a 0000  ld   $00
              199b 0001  ld   $01
              199c 0099  ld   $99         ;0241 ADDW
              199d 0030  ld   $30         ;0241 'p'
              199e 0035  ld   $35         ;0243 BCC
              199f 004d  ld   $4d         ;0244 GT
              19a0 0032  ld   $32
              19a1 00ff  ld   $ff         ;0246 RET
              19a2 002b  ld   $2b         ;0247 STW
              19a3 0034  ld   $34         ;0247 'SetupVideo'
              19a4 00cd  ld   $cd         ;0249 DEF
              19a5 00c9  ld   $c9
              19a6 0075  ld   $75         ;024b PUSH
              19a7 00cd  ld   $cd         ;024c DEF
              19a8 007b  ld   $7b
              19a9 002a  ld   $2a         ;024e '*'
              19aa 002a  ld   $2a         ;024f '*'
              19ab 002a  ld   $2a         ;0250 '*'
              19ac 0020  ld   $20         ;0251 ' '
              19ad 0047  ld   $47         ;0252 'G'
              19ae 0069  ld   $69         ;0253 'i'
              19af 0067  ld   $67         ;0254 'g'
              19b0 0061  ld   $61         ;0255 'a'
              19b1 0074  ld   $74         ;0256 't'
              19b2 0072  ld   $72         ;0257 'r'
              19b3 006f  ld   $6f         ;0258 'o'
              19b4 006e  ld   $6e         ;0259 'n'
              19b5 0020  ld   $20         ;025a ' '
              19b6 003f  ld   $3f         ;025b '?'
              19b7 003f  ld   $3f         ;025c '?'
              19b8 004b  ld   $4b         ;025d 'K'
              19b9 0020  ld   $20         ;025e ' '
              19ba 002a  ld   $2a         ;025f '*'
              19bb 002a  ld   $2a         ;0260 '*'
              19bc 002a  ld   $2a         ;0261 '*'
              19bd 000a  ld   $0a         ;0262 10
              19be 0020  ld   $20         ;0263 ' '
              19bf 0054  ld   $54         ;0264 'T'
              19c0 0054  ld   $54         ;0265 'T'
              19c1 004c  ld   $4c         ;0266 'L'
              19c2 0020  ld   $20         ;0267 ' '
              19c3 006d  ld   $6d         ;0268 'm'
              19c4 0069  ld   $69         ;0269 'i'
              19c5 0063  ld   $63         ;026a 'c'
              19c6 0072  ld   $72         ;026b 'r'
              19c7 006f  ld   $6f         ;026c 'o'
              19c8 0063  ld   $63         ;026d 'c'
              19c9 006f  ld   $6f         ;026e 'o'
              19ca 006d  ld   $6d         ;026f 'm'
              19cb 0070  ld   $70         ;0270 'p'
              19cc 0075  ld   $75         ;0271 'u'
              19cd 0074  ld   $74         ;0272 't'
              19ce 0065  ld   $65         ;0273 'e'
              19cf 0072  ld   $72         ;0274 'r'
              19d0 0020  ld   $20         ;0275 ' '
              19d1 0044  ld   $44         ;0276 'D'
              19d2 0045  ld   $45         ;0277 'E'
              19d3 0056  ld   $56         ;0278 'V'
              19d4 0052  ld   $52         ;0279 'R'
              19d5 004f  ld   $4f         ;027a 'O'
              19d6 004d  ld   $4d         ;027b 'M'
              19d7 0000  ld   $00         ;027c 0
              19d8 002b  ld   $2b         ;027d STW
              19d9 0036  ld   $36         ;027d 'Text'
              19da 00e3  ld   $e3         ;027f ADDI
              19db 000d  ld   $0d
              19dc 002b  ld   $2b         ;0281 STW
              19dd 0030  ld   $30         ;0281 'p'
              19de 0011  ld   $11         ;0283 LDWI
              19df 002f  ld   $2f
              19e0 002f  ld   $2f
              19e1 002b  ld   $2b         ;0286 STW
              19e2 0038  ld   $38         ;0286 'Char'
              19e3 001a  ld   $1a         ;0288 LD
              19e4 0001  ld   $01
              19e5 00e6  ld   $e6         ;028a SUBI
              19e6 0001  ld   $01
              19e7 0082  ld   $82         ;028c ANDI
              19e8 00ff  ld   $ff
              19e9 00e3  ld   $e3         ;028e ADDI
              19ea 0001  ld   $01
              19eb 0093  ld   $93         ;0290 INC
              19ec 0039  ld   $39         ;0290 'Char'+1
              19ed 00e6  ld   $e6         ;0292 SUBI
              19ee 0028  ld   $28
              19ef 0035  ld   $35         ;0294 BCC
              19f0 0053  ld   $53         ;0295 GE
              19f1 008e  ld   $8e
              19f2 00e3  ld   $e3         ;0297 ADDI
              19f3 0028  ld   $28
              19f4 0093  ld   $93         ;0299 INC
              19f5 0038  ld   $38         ;0299 'Char'
              19f6 00e6  ld   $e6         ;029b SUBI
              19f7 0004  ld   $04
              19f8 0035  ld   $35         ;029d BCC
              19f9 0053  ld   $53         ;029e GE
              19fa 0097  ld   $97
              19fb fe00  bra  ac          ;+-----------------------------------+
              19fc fcfd  bra  $19fd       ;|                                   |
              19fd 1404  ld   $04,y       ;| Trampoline for page $1900 lookups |
              19fe e068  jmp  y,$68       ;|                                   |
              19ff c218  st   [$18]       ;+-----------------------------------+
              1a00 001a  ld   $1a         ;02a0 LD
              1a01 0039  ld   $39         ;02a0 'Char'+1
              1a02 00f0  ld   $f0         ;02a2 POKE
              1a03 0030  ld   $30         ;02a2 'p'
              1a04 0093  ld   $93         ;02a4 INC
              1a05 0030  ld   $30         ;02a4 'p'
              1a06 0021  ld   $21         ;02a6 LDW
              1a07 0038  ld   $38         ;02a6 'Char'
              1a08 00f0  ld   $f0         ;02a8 POKE
              1a09 0030  ld   $30         ;02a8 'p'
              1a0a 0021  ld   $21         ;02aa LDW
              1a0b 0036  ld   $36         ;02aa 'Text'
              1a0c 00ad  ld   $ad         ;02ac PEEK
              1a0d 0035  ld   $35         ;02ad BCC
              1a0e 003f  ld   $3f         ;02ae EQ
              1a0f 00c7  ld   $c7
              1a10 002b  ld   $2b         ;02b0 STW
              1a11 0038  ld   $38         ;02b0 'Char'
              1a12 0093  ld   $93         ;02b2 INC
              1a13 0036  ld   $36         ;02b2 'Text'
              1a14 008c  ld   $8c         ;02b4 XORI
              1a15 000a  ld   $0a
              1a16 0035  ld   $35         ;02b6 BCC
              1a17 0072  ld   $72         ;02b7 NE
              1a18 00c3  ld   $c3
              1a19 0059  ld   $59         ;02b9 LDI
              1a1a 0002  ld   $02
              1a1b 005e  ld   $5e         ;02bb ST
              1a1c 003a  ld   $3a         ;02bb 'Pos'
              1a1d 001a  ld   $1a         ;02bd LD
              1a1e 003b  ld   $3b         ;02bd 'Pos'+1
              1a1f 00e3  ld   $e3         ;02bf ADDI
              1a20 0008  ld   $08
              1a21 005e  ld   $5e         ;02c1 ST
              1a22 003b  ld   $3b         ;02c1 'Pos'+1
              1a23 0090  ld   $90         ;02c3 BRA
              1a24 00c5  ld   $c5
              1a25 00cf  ld   $cf         ;02c5 CALL
              1a26 003c  ld   $3c         ;02c5 'PrintChar'
              1a27 0090  ld   $90         ;02c7 BRA
              1a28 00a8  ld   $a8
              1a29 0063  ld   $63         ;02c9 POP
              1a2a 00ff  ld   $ff         ;02ca RET
              1a2b 002b  ld   $2b         ;02cb STW
              1a2c 003e  ld   $3e         ;02cb 'PrintStartupMessage'
              1a2d 0093  ld   $93         ;02cd INC
              1a2e 001b  ld   $1b
              1a2f 00ff  ld   $ff         ;02cf RET
              1a30 0003  ld   $03         ;| RAM segment address (high byte first)
              1a31 0000  ld   $00         ;|
              1a32 00e7  ld   $e7         ;| Length (1..256)
              1a33 00cd  ld   $cd         ;0300 DEF
              1a34 004b  ld   $4b
              1a35 0021  ld   $21         ;0302 LDW
              1a36 0038  ld   $38         ;0302 'Char'
              1a37 00e6  ld   $e6         ;0304 SUBI
              1a38 0052  ld   $52
              1a39 0035  ld   $35         ;0306 BCC
              1a3a 0053  ld   $53         ;0307 GE
              1a3b 0010  ld   $10
              1a3c 00e3  ld   $e3         ;0309 ADDI
              1a3d 0032  ld   $32
              1a3e 002b  ld   $2b         ;030b STW
              1a3f 0040  ld   $40         ;030b 'i'
              1a40 0011  ld   $11         ;030d LDWI
              1a41 0000  ld   $00
              1a42 0007  ld   $07
              1a43 0090  ld   $90         ;0310 BRA
              1a44 0015  ld   $15
              1a45 002b  ld   $2b         ;0312 STW
              1a46 0040  ld   $40         ;0312 'i'
              1a47 0011  ld   $11         ;0314 LDWI
              1a48 0000  ld   $00
              1a49 0008  ld   $08
              1a4a 002b  ld   $2b         ;0317 STW
              1a4b 0042  ld   $42         ;0317 'j'
              1a4c 0021  ld   $21         ;0319 LDW
              1a4d 0040  ld   $40         ;0319 'i'
              1a4e 00e9  ld   $e9         ;031b LSLW
              1a4f 00e9  ld   $e9         ;031c LSLW
              1a50 0099  ld   $99         ;031d ADDW
              1a51 0040  ld   $40         ;031d 'i'
              1a52 0099  ld   $99         ;031f ADDW
              1a53 0042  ld   $42         ;031f 'j'
              1a54 002b  ld   $2b         ;0321 STW
              1a55 0042  ld   $42         ;0321 'j'
              1a56 0011  ld   $11         ;0323 LDWI
              1a57 00e1  ld   $e1
              1a58 0004  ld   $04
              1a59 002b  ld   $2b         ;0326 STW
              1a5a 0022  ld   $22
              1a5b 0011  ld   $11         ;0328 LDWI
              1a5c 0020  ld   $20
              1a5d 003f  ld   $3f
              1a5e 002b  ld   $2b         ;032b STW
              1a5f 0024  ld   $24
              1a60 0021  ld   $21         ;032d LDW
              1a61 003a  ld   $3a         ;032d 'Pos'
              1a62 002b  ld   $2b         ;032f STW
              1a63 0028  ld   $28
              1a64 00e3  ld   $e3         ;0331 ADDI
              1a65 0006  ld   $06
              1a66 002b  ld   $2b         ;0333 STW
              1a67 003a  ld   $3a         ;0333 'Pos'
              1a68 0059  ld   $59         ;0335 LDI
              1a69 0005  ld   $05
              1a6a 002b  ld   $2b         ;0337 STW
              1a6b 0040  ld   $40         ;0337 'i'
              1a6c 0021  ld   $21         ;0339 LDW
              1a6d 0042  ld   $42         ;0339 'j'
              1a6e 007f  ld   $7f         ;033b LUP
              1a6f 0000  ld   $00
              1a70 005e  ld   $5e         ;033d ST
              1a71 0026  ld   $26
              1a72 00b4  ld   $b4         ;033f SYS
              1a73 00cb  ld   $cb
              1a74 0093  ld   $93         ;0341 INC
              1a75 0042  ld   $42         ;0341 'j'
              1a76 0093  ld   $93         ;0343 INC
              1a77 0028  ld   $28
              1a78 0021  ld   $21         ;0345 LDW
              1a79 0040  ld   $40         ;0345 'i'
              1a7a 00e6  ld   $e6         ;0347 SUBI
              1a7b 0001  ld   $01
              1a7c 0035  ld   $35         ;0349 BCC
              1a7d 004d  ld   $4d         ;034a GT
              1a7e 0035  ld   $35
              1a7f 00ff  ld   $ff         ;034c RET
              1a80 002b  ld   $2b         ;034d STW
              1a81 003c  ld   $3c         ;034d 'PrintChar'
              1a82 00cd  ld   $cd         ;034f DEF
              1a83 0086  ld   $86
              1a84 002b  ld   $2b         ;0351 STW
              1a85 0040  ld   $40         ;0351 'i'
              1a86 0088  ld   $88         ;0353 ORI
              1a87 00ff  ld   $ff
              1a88 008c  ld   $8c         ;0355 XORI
              1a89 00ff  ld   $ff
              1a8a 0088  ld   $88         ;0357 ORI
              1a8b 00fa  ld   $fa
              1a8c 002b  ld   $2b         ;0359 STW
              1a8d 0030  ld   $30         ;0359 'p'
              1a8e 001a  ld   $1a         ;035b LD
              1a8f 0040  ld   $40         ;035b 'i'
              1a90 002b  ld   $2b         ;035d STW
              1a91 0040  ld   $40         ;035d 'i'
              1a92 0059  ld   $59         ;035f LDI
              1a93 0000  ld   $00
              1a94 00f0  ld   $f0         ;0361 POKE
              1a95 0030  ld   $30         ;0361 'p'
              1a96 0093  ld   $93         ;0363 INC
              1a97 0030  ld   $30         ;0363 'p'
              1a98 0059  ld   $59         ;0365 LDI
              1a99 0003  ld   $03
              1a9a 00f0  ld   $f0         ;0367 POKE
              1a9b 0030  ld   $30         ;0367 'p'
              1a9c 0093  ld   $93         ;0369 INC
              1a9d 0030  ld   $30         ;0369 'p'
              1a9e 0011  ld   $11         ;036b LDWI
              1a9f 0000  ld   $00
              1aa0 0009  ld   $09
              1aa1 0099  ld   $99         ;036e ADDW
              1aa2 0040  ld   $40         ;036e 'i'
              1aa3 007f  ld   $7f         ;0370 LUP
              1aa4 0000  ld   $00
              1aa5 00f0  ld   $f0         ;0372 POKE
              1aa6 0030  ld   $30         ;0372 'p'
              1aa7 0093  ld   $93         ;0374 INC
              1aa8 0030  ld   $30         ;0374 'p'
              1aa9 0011  ld   $11         ;0376 LDWI
              1aaa 0000  ld   $00
              1aab 0009  ld   $09
              1aac 0099  ld   $99         ;0379 ADDW
              1aad 0040  ld   $40         ;0379 'i'
              1aae 007f  ld   $7f         ;037b LUP
              1aaf 0001  ld   $01
              1ab0 00f0  ld   $f0         ;037d POKE
              1ab1 0030  ld   $30         ;037d 'p'
              1ab2 0093  ld   $93         ;037f INC
              1ab3 0030  ld   $30         ;037f 'p'
              1ab4 00f0  ld   $f0         ;0381 POKE
              1ab5 0030  ld   $30         ;0381 'p'
              1ab6 0093  ld   $93         ;0383 INC
              1ab7 0030  ld   $30         ;0383 'p'
              1ab8 00f0  ld   $f0         ;0385 POKE
              1ab9 0030  ld   $30         ;0385 'p'
              1aba 00ff  ld   $ff         ;0387 RET
              1abb 002b  ld   $2b         ;0388 STW
              1abc 0044  ld   $44         ;0388 'SetupChannel'
              1abd 0011  ld   $11         ;038a LDWI
              1abe 000f  ld   $0f
              1abf 000b  ld   $0b
              1ac0 002b  ld   $2b         ;038d STW
              1ac1 0022  ld   $22
              1ac2 0059  ld   $59         ;038f LDI
              1ac3 0000  ld   $00
              1ac4 00b4  ld   $b4         ;0391 SYS
              1ac5 00f5  ld   $f5
              1ac6 0011  ld   $11         ;0393 LDWI
              1ac7 0012  ld   $12
              1ac8 000b  ld   $0b
              1ac9 002b  ld   $2b         ;0396 STW
              1aca 0022  ld   $22
              1acb 0059  ld   $59         ;0398 LDI
              1acc 0000  ld   $00
              1acd 00b4  ld   $b4         ;039a SYS
              1ace 00f7  ld   $f7
              1acf 00b4  ld   $b4         ;039c SYS
              1ad0 00f7  ld   $f7
              1ad1 00b4  ld   $b4         ;039e SYS
              1ad2 00f7  ld   $f7
              1ad3 00b4  ld   $b4         ;03a0 SYS
              1ad4 00f7  ld   $f7
              1ad5 0011  ld   $11         ;03a2 LDWI
              1ad6 0058  ld   $58
              1ad7 0001  ld   $01
              1ad8 00cf  ld   $cf         ;03a5 CALL
              1ad9 0044  ld   $44         ;03a5 'SetupChannel'
              1ada 0011  ld   $11         ;03a7 LDWI
              1adb 0070  ld   $70
              1adc 0002  ld   $02
              1add 00cf  ld   $cf         ;03aa CALL
              1ade 0044  ld   $44         ;03aa 'SetupChannel'
              1adf 0011  ld   $11         ;03ac LDWI
              1ae0 0078  ld   $78
              1ae1 0003  ld   $03
              1ae2 00cf  ld   $cf         ;03af CALL
              1ae3 0044  ld   $44         ;03af 'SetupChannel'
              1ae4 0011  ld   $11         ;03b1 LDWI
              1ae5 007e  ld   $7e
              1ae6 0004  ld   $04
              1ae7 00cf  ld   $cf         ;03b4 CALL
              1ae8 0044  ld   $44         ;03b4 'SetupChannel'
              1ae9 00cf  ld   $cf         ;03b6 CALL
              1aea 0034  ld   $34         ;03b6 'SetupVideo'
              1aeb 0011  ld   $11         ;03b8 LDWI
              1aec 0014  ld   $14
              1aed 0008  ld   $08
              1aee 002b  ld   $2b         ;03bb STW
              1aef 003a  ld   $3a         ;03bb 'Pos'
              1af0 00cf  ld   $cf         ;03bd CALL
              1af1 003e  ld   $3e         ;03bd 'PrintStartupMessage'
              1af2 001a  ld   $1a         ;03bf LD
              1af3 002e  ld   $2e
              1af4 0082  ld   $82         ;03c1 ANDI
              1af5 0080  ld   $80
              1af6 0035  ld   $35         ;03c3 BCC
              1af7 0072  ld   $72         ;03c4 NE
              1af8 00c8  ld   $c8
              1af9 005e  ld   $5e         ;03c6 ST
              1afa 002e  ld   $2e
              1afb fe00  bra  ac          ;+-----------------------------------+
              1afc fcfd  bra  $1afd       ;|                                   |
              1afd 1404  ld   $04,y       ;| Trampoline for page $1a00 lookups |
              1afe e068  jmp  y,$68       ;|                                   |
              1aff c218  st   [$18]       ;+-----------------------------------+
              1b00 005e  ld   $5e         ;03c8 ST
              1b01 002d  ld   $2d
              1b02 0059  ld   $59         ;03ca LDI
              1b03 0009  ld   $09
              1b04 005e  ld   $5e         ;03cc ST
              1b05 002f  ld   $2f
              1b06 0011  ld   $11         ;03ce LDWI
              1b07 0000  ld   $00
              1b08 000b  ld   $0b
              1b09 002b  ld   $2b         ;03d1 STW
              1b0a 0022  ld   $22
              1b0b 0059  ld   $59         ;03d3 LDI
              1b0c 0001  ld   $01
              1b0d 00b4  ld   $b4         ;03d5 SYS
              1b0e 00e6  ld   $e6
              1b0f 0011  ld   $11         ;03d7 LDWI
              1b10 0000  ld   $00
              1b11 0016  ld   $16
              1b12 002b  ld   $2b         ;03da STW
              1b13 0024  ld   $24
              1b14 0011  ld   $11         ;03dc LDWI
              1b15 0000  ld   $00
              1b16 0002  ld   $02
              1b17 002b  ld   $2b         ;03df STW
              1b18 001a  ld   $1a
              1b19 0059  ld   $59         ;03e1 LDI
              1b1a 00ad  ld   $ad
              1b1b 002b  ld   $2b         ;03e3 STW
              1b1c 0022  ld   $22
              1b1d 00b4  ld   $b4         ;03e5 SYS
              1b1e 00e2  ld   $e2
              1b1f 0000  ld   $00         ;End of Reset.gcl, size 456
              1b20 0200  nop              ;219 fillers
              1b21 0200  nop
              1b22 0200  nop
              * 219 times
              1bfb fe00  bra  ac          ;+-----------------------------------+
              1bfc fcfd  bra  $1bfd       ;|                                   |
              1bfd 1404  ld   $04,y       ;| Trampoline for page $1b00 lookups |
              1bfe e068  jmp  y,$68       ;|                                   |
              1bff c218  st   [$18]       ;+-----------------------------------+
              1c00
