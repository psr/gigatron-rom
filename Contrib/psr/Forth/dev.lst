* source: .\dev.py
                                          160   enableListing()
                                          161   #-----------------------------------------------------------------------
                                          162   #
                                          163   #  Start of core
                                          164   #
                                          165   #-----------------------------------------------------------------------
                                          166
                                          167   # Pre-loading the formal interface as a way to get warnings when
                                          168   # accidentally redefined with a different value
                                          169   loadBindings('interface.json')
                                          170   loadBindings('Core/interface-dev.json') # Provisional values for DEVROM
                                          171
                                          172   # Gigatron clock
                                          173   cpuClock = 6.250e+06
                                          174
                                          175   # Output pin assignment for VGA
                                          176   R, G, B, hSync, vSync = 1, 4, 16, 64, 128
                                          177   syncBits = hSync+vSync # Both pulses negative
                                          178
                                          179   # When the XOUT register is in the circuit, the rising edge triggers its update.
                                          180   # The loop can therefore not be agnostic to the horizontal pulse polarity.
                                          181   assert syncBits & hSync != 0
                                          182
                                          183   # VGA 640x480 defaults (to be adjusted below!)
                                          184   vFront = 10     # Vertical front porch
                                          185   vPulse = 2      # Vertical sync pulse
                                          186   vBack  = 33     # Vertical back porch
                                          187   vgaLines = vFront + vPulse + vBack + 480
                                          188   vgaClock = 25.175e+06
                                          189
                                          190   # Video adjustments for Gigatron
                                          191   # 1. Our clock is (slightly) slower than 1/4th VGA clock. Not all monitors will
                                          192   #    accept the decreased frame rate, so we restore the frame rate to above
                                          193   #    minimum 59.94 Hz by cutting some lines from the vertical front porch.
                                          194   vFrontAdjust = vgaLines - int(4 * cpuClock / vgaClock * vgaLines)
                                          195   vFront -= vFrontAdjust
                                          196   # 2. Extend vertical sync pulse so we can feed the game controller the same
                                          197   #    signal. This is needed for controllers based on the 4021 instead of 74165
                                          198   vPulseExtension = max(0, 8-vPulse)
                                          199   vPulse += vPulseExtension
                                          200   # 3. Borrow these lines from the back porch so the refresh rate remains
                                          201   #    unaffected
                                          202   vBack -= vPulseExtension
                                          203
                                          204   # Start value of vertical blank counter
                                          205   videoYline0 = 1-2*(vFront+vPulse+vBack-2)
                                          206
                                          207   # Mismatch between video lines and sound channels
                                          208   soundDiscontinuity = (vFront+vPulse+vBack) % 4
                                          209
                                          210   # Game controller bits (actual controllers in kit have negative output)
                                          211   # +----------------------------------------+
                                          212   # |       Up                        B*     |
                                          213   # |  Left    Right               B     A*  |
                                          214   # |      Down      Select Start     A      |
                                          215   # +----------------------------------------+ *=Auto fire
                                          216   buttonRight     = 1
                                          217   buttonLeft      = 2
                                          218   buttonDown      = 4
                                          219   buttonUp        = 8
                                          220   buttonStart     = 16
                                          221   buttonSelect    = 32
                                          222   buttonB         = 64
                                          223   buttonA         = 128
                                          224
                                          225   #-----------------------------------------------------------------------
                                          226   #
                                          227   #  RAM page 0: zero-page variables
                                          228   #
                                          229   #-----------------------------------------------------------------------
                                          230
                                          231   # Memory size in pages from auto-detect
                                          232   memSize         = zpByte()
                                          233
                                          234   # The current channel number for sound generation. Advanced every scan line
                                          235   # and independent of the vertical refresh to maintain constant oscillation.
                                          236   channel         = zpByte()
                                          237
                                          238   # Next sound sample being synthesized
                                          239   sample          = zpByte()
                                          240   # To save one instruction in the critical inner loop, `sample' is always
                                          241   # reset with its own address instead of, for example, the value 0. Compare:
                                          242   # 1 instruction reset
                                          243   #       st sample,[sample]
                                          244   # 2 instruction reset:
                                          245   #       ld 0
                                          246   #       st [sample]
                                          247   # The difference is not audible. This is fine when the reset/address
                                          248   # value is low and doesn't overflow with 4 channels added to it.
                                          249   # There is an alternative, but it requires pull-down diodes on the data bus:
                                          250   #       st [sample],[sample]
                                          251   assert 4*63 + sample < 256
                                          252   # We pin this reset/address value to 3, so `sample' swings from 3 to 255
                                          253   assert sample == 3
                                          254
                                          255   # Former bootCount and bootCheck (<= ROMv3)
                                          256   zpReserved      = zpByte() # Recycled and still unused. Candidate future uses:
                                          257                              # - Video driver high address (for alternative video modes)
                                          258                              # - v6502: ADH offset ("MMU")
                                          259                              # - v8080: ???
                                          260   vCpuSelect      = zpByte() # Active interpreter page
                                          261
                                          262   # Entropy harvested from SRAM startup and controller input
                                          263   entropy         = zpByte(3)
                                          264
                                          265   # Visible video
                                          266   videoY          = zpByte() # Counts up from 0 to 238 in steps of 2
                                          267                              # Counts up (and is odd) during vertical blank
                                          268   videoModeB      = zpByte() # Handler for every 2nd line (pixel burst or vCPU)
                                          269   videoModeC      = zpByte() # Handler for every 3rd line (pixel burst or vCPU)
                                          270   videoModeD      = zpByte() # Handler for every 4th line (pixel burst or vCPU)
                                          271
                                          272   nextVideo       = zpByte() # Jump offset to scan line handler (videoA, B, C...)
                                          273   videoPulse      = nextVideo # Used for pulse width modulation
                                          274
                                          275   # Frame counter is good enough as system clock
                                          276   frameCount      = zpByte(1)
                                          277
                                          278   # Serial input (game controller)
                                          279   serialRaw       = zpByte() # New raw serial read
                                          280   serialLast      = zpByte() # Previous serial read
                                          281   buttonState     = zpByte() # Clearable button state
                                          282   resetTimer      = zpByte() # After 2 seconds of holding 'Start', do a soft reset
                                          283                              # XXX move to page 1 to free up space
                                          284
                                          285   # Extended output (blinkenlights in bit 0:3 and audio in bit 4:7). This
                                          286   # value must be present in AC during a rising hSync edge. It then gets
                                          287   # copied to the XOUT register by the hardware. The XOUT register is only
                                          288   # accessible in this indirect manner because it isn't part of the core
                                          289   # CPU architecture.
                                          290   xout            = zpByte()
                                          291   xoutMask        = zpByte() # The blinkenlights and sound on/off state
                                          292
                                          293   # vCPU interpreter
                                          294   vTicks          = zpByte()  # Interpreter ticks are units of 2 clocks
                                          295   vPC             = zpByte(2) # Interpreter program counter, points into RAM
                                          296   vAC             = zpByte(2) # Interpreter accumulator, 16-bits
                                          297   vLR             = zpByte(2) # Return address, for returning after CALL
                                          298   vSP             = zpByte(1) # Stack pointer
                                          299   vTmp            = zpByte()
                                          300   vReturn         = zpByte()  # Return into video loop (in page of vBlankStart)
                                          301
                                          302   # Scratch
                                          303   frameX          = zpByte() # Starting byte within page
                                          304   frameY          = zpByte() # Page of current pixel line (updated by videoA)
                                          305
                                          306   # Vertical blank (reuse some variables used in the visible part)
                                          307   videoSync0      = frameX   # Vertical sync type on current line (0xc0 or 0x40)
                                          308   videoSync1      = frameY   # Same during horizontal pulse (0x80 or 0x00)
                                          309
                                          310   # Versioning for GT1 compatibility
                                          311   # Please refer to Docs/GT1-files.txt for interpreting this variable
                                          312   romType         = zpByte(1)
                                          313
                                          314   # The low 3 bits are repurposed to select the actively updated sound channels.
                                          315   # Valid bit combinations are:
                                          316   #  xxxxx011     Default after reset: 4 channels (page 1,2,3,4)
                                          317   #  xxxxx001     2 channels at double update rate (page 1,2)
                                          318   #  xxxxx000     1 channel at quadruple update rate (page 1)
                                          319   # The main application for this is to free up the high bytes of page 2,3,4.
                                          320   channelMask = symbol('channelMask_v4')
                                          321   assert romType == channelMask
                                          322
                                          323   # SYS function arguments and results/scratch
                                          324   sysFn           = zpByte(2)
                                          325   sysArgs         = zpByte(8)
                                          326
                                          327   # Play sound if non-zero, count down and stop sound when zero
                                          328   soundTimer      = zpByte()
                                          329
                                          330   # Fow now the LED state machine itself is hard-coded in the program ROM
                                          331   ledTimer        = zpByte() # Number of ticks until next LED change
                                          332   ledState_v2     = zpByte() # Current LED state
                                          333   ledTempo        = zpByte() # Next value for ledTimer after LED state change
                                          334
                                          335   # All bytes above, except 0x80, are free for temporary/scratch/stacks etc
                                          336   userVars        = zpByte(0)
                                          337
                                          338   #-----------------------------------------------------------------------
                                          339   #
                                          340   #  RAM page 1: video line table
                                          341   #
                                          342   #-----------------------------------------------------------------------
                                          343
                                          344   # Byte 0-239 define the video lines
                                          345   videoTable      = 0x0100 # Indirection table: Y[0] dX[0]  ..., Y[119] dX[119]
                                          346
                                          347   vReset          = 0x01f0
                                          348   vIRQ_DEVROM     = 0x01f6
                                          349   ctrlBits        = 0x01f8
                                          350   videoTop_DEVROM = 0x01f9 # Number of skip lines
                                          351
                                          352   # Highest bytes are for sound channel variables
                                          353   wavA = 250      # Waveform modulation with `adda'
                                          354   wavX = 251      # Waveform modulation with `xora'
                                          355   keyL = 252      # Frequency low 7 bits (bit7 == 0)
                                          356   keyH = 253      # Frequency high 8 bits
                                          357   oscL = 254      # Phase low 7 bits
                                          358   oscH = 255      # Phase high 8 bits
                                          359
                                          360   #-----------------------------------------------------------------------
                                          361   #  Memory layout
                                          362   #-----------------------------------------------------------------------
                                          363
                                          364   userCode = 0x0200       # Application vCPU code
                                          365   soundTable = 0x0700     # Wave form tables (doubles as right-shift-2 table)
                                          366   screenMemory = 0x0800   # Default start of screen memory: 0x0800 to 0x7fff
                                          367
                                          368   #-----------------------------------------------------------------------
                                          369   #  Application definitions
                                          370   #-----------------------------------------------------------------------
                                          371
                                          372   maxTicks = 28//2                 # Duration of vCPU's slowest virtual opcode (ticks)
                                          373   minTicks = 14//2                 # vcPU's fastest instruction
                                          374   v6502_maxTicks = 38//2           # Max duration of v6502 processing phase (ticks)
                                          375
                                          376   runVcpu_overhead = 5            # Caller overhead (cycles)
                                          377   vCPU_overhead = 9               # Callee overhead of jumping in and out (cycles)
                                          378   v6502_overhead = 11             # Callee overhead for v6502 (cycles)
                                          379
                                          380   v6502_adjust = (v6502_maxTicks - maxTicks) + (v6502_overhead - vCPU_overhead)//2
                                          381   assert v6502_adjust >= 0        # v6502's overhead is a bit more than vCPU
                                          382
                                          383   def runVcpu(n, ref=None, returnTo=None):
                                          384     """Macro to run interpreter for exactly n cycles. Returns 0 in AC.
                                          385
                                          386     - `n' is the number of available Gigatron cycles including overhead.
                                          387       This is converted into interpreter ticks and takes into account
                                          388       the vCPU calling overheads. A `nop' is inserted when necessary
                                          389       for alignment between cycles and ticks.
                                          390     - `returnTo' is where program flow continues after return. If not set
                                          391        explicitely, it will be the first instruction behind the expansion.
                                          392     - If another interpreter than vCPU is active (v6502...), that one
                                          393       must adjust for the timing differences, because runVcpu wouldn't know."""
                                          394
                                          395     overhead = runVcpu_overhead + vCPU_overhead
                                          396     if returnTo == 0x100:         # Special case for videoZ
                                          397       overhead -= 2
                                          398
                                          399     if n is None:
                                          400       # (Clumsily) create a maximum time slice, corresponding to a vTicks
                                          401       # value of 127 (giving 282 cycles). A higher value doesn't work because
                                          402       # then SYS functions that just need 28 cycles (0 excess) won't start.
                                          403       n = (127 + maxTicks) * 2 + overhead
                                          404
                                          405     n -= overhead
                                          406     assert n > 0
                                          407
                                          408     if n % 2 == 1:
                                          409       nop()                       # Tick alignment
                                          410       n -= 1
                                          411     assert n % 2 == 0
                                          412
                                          413     print('runVcpu at $%04x net cycles %3s info %s' % (pc(), n, ref))
                                          414
                                          415     if returnTo != 0x100:
                                          416       if returnTo is None:
                                          417         returnTo = pc() + 5       # Next instruction
                                          418       ld(lo(returnTo))            #0
                                          419       st([vReturn])               #1
                                          420
                                          421     n //= 2
                                          422     n -= maxTicks                 # First instruction always runs
                                          423     assert n < 128
                                          424     assert n >= v6502_adjust
                                          425
                                          426     ld([vCpuSelect],Y)            #2
                                          427     jmp(Y,'ENTER')                #3
                                          428     ld(n)                         #4
                                          429   assert runVcpu_overhead ==       5
                                          430
                                          431   #-----------------------------------------------------------------------
                                          432   #       v6502 definitions
                                          433   #-----------------------------------------------------------------------
                                          434
                                          435   # Registers are zero page variables
                                          436   v6502_PC        = vLR           # Program Counter
                                          437   v6502_PCL       = vLR+0         # Program Counter Low
                                          438   v6502_PCH       = vLR+1         # Program Counter High
                                          439   v6502_S         = vSP           # Stack Pointer (kept as "S+1")
                                          440   v6502_A         = vAC+0         # Accumulator
                                          441   v6502_BI        = vAC+1         # B Input Register (used by SBC)
                                          442   v6502_ADL       = sysArgs+0     # Low Address Register
                                          443   v6502_ADH       = sysArgs+1     # High Address Register
                                          444   v6502_IR        = sysArgs+2     # Instruction Register
                                          445   v6502_P         = sysArgs+3     # Processor Status Register (V flag in bit 7)
                                          446   v6502_Qz        = sysArgs+4     # Quick Status Register for Z flag
                                          447   v6502_Qn        = sysArgs+5     # Quick Status Register for N flag
                                          448   v6502_X         = sysArgs+6     # Index Register X
                                          449   v6502_Y         = sysArgs+7     # Index Register Y
                                          450   v6502_Tmp       = vTmp          # Scratch (may be clobbered outside v6502)
                                          451
                                          452   # MOS 6502 definitions for P register
                                          453   v6502_Cflag = 1                 # Carry Flag (unsigned overflow)
                                          454   v6502_Zflag = 2                 # Zero Flag (all bits zero)
                                          455   v6502_Iflag = 4                 # Interrupt Enable Flag (1=Disable)
                                          456   v6502_Dflag = 8                 # Decimal Enable Flag (aka BCD mode, 1=Enable)
                                          457   v6502_Bflag = 16                # Break (or PHP) Instruction Flag
                                          458   v6502_Uflag = 32                # Unused (always 1)
                                          459   v6502_Vflag = 64                # Overflow Flag (signed overflow)
                                          460   v6502_Nflag = 128               # Negative Flag (bit 7 of result)
                                          461
                                          462   # In emulation it is much faster to keep the V flag in bit 7
                                          463   # This can be corrected when importing/exporting with PHP, PLP, etc
                                          464   v6502_Vemu = 128
                                          465
                                          466   # On overflow:
                                          467   #       """Overflow is set if two inputs with the same sign produce
                                          468   #          a result with a different sign. Otherwise it is clear."""
                                          469   # Formula (without carry/borrow in!):
                                          470   #       (A ^ (A+B)) & (B ^ (A+B)) & 0x80
                                          471   # References:
                                          472   #       http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
                                          473   #       http://6502.org/tutorials/vflag.html
                                          474
                                          475   # Memory layout
                                          476   v6502_Stack     = 0x0000        # 0x0100 is already used in the Gigatron
                                          477   #v6502_NMI      = 0xfffa
                                          478   #v6502_RESET    = 0xfffc
                                          479   #v6502_IRQ      = 0xfffe
                                          480
                                          481   #-----------------------------------------------------------------------
                                          482   #
                                          483   #  $0000 ROM page 0: Boot
                                          484   #
                                          485   #-----------------------------------------------------------------------
                                          486
                                          487   align(0x100, size=0x80)
                                          488
                                          489   # Give a first sign of life that can be checked with a voltmeter
              address
              |    encoding
              |    |     instruction
              |    |     |    operands
              |    |     |    |
              V    V     V    V
              0000 0000  ld   $00         490   ld(0b0000)                      # LEDs |OOOO|
              0001 1880  ld   $80,out     491   ld(syncBits^hSync,OUT)          # Prepare XOUT update, hSync goes down, RGB to black
              0002 18c0  ld   $c0,out     492   ld(syncBits,OUT)                # hSync goes up, updating XOUT
                                          493
                                          494   # Setup I/O and RAM expander
              0003 c17c  ctrl $7c         495   ctrl(0b01111100)                # Disable SPI slaves, enable RAM, bank 1
                                          496   #      ^^^^^^^^
                                          497   #      |||||||`-- SCLK
                                          498   #      ||||||`--- Not connected
                                          499   #      |||||`---- /SS0
                                          500   #      ||||`----- /SS1
                                          501   #      |||`------ /SS2
                                          502   #      ||`------- /SS3
                                          503   #      |`-------- B0
                                          504   #      `--------- B1
                                          505   # bit15 --------- MOSI = 0
                                          506
                                          507   # Simple RAM test and size check by writing to [1<<n] and see if [0] changes or not.
              0004 0001  ld   $01         508   ld(1)                           # Quick RAM test and count
                                          509   label('.countMem0')
.countMem0:   0005 d601  st   [$01],y     510   st([memSize],Y)                 # Store in RAM and load AC in Y
              0006 00ff  ld   $ff         511   ld(255)
              0007 6900  xora [y,$00]     512   xora([Y,0])                     # Invert value from memory
              0008 ca00  st   [y,$00]     513   st([Y,0])                       # Test RAM by writing the new value
              0009 c200  st   [$00]       514   st([0])                         # Copy result in [0]
              000a 6900  xora [y,$00]     515   xora([Y,0])                     # Read back and compare if written ok
              000b ec0b  bne  $000b       516   bne(pc())                       # Loop forever on RAM failure here
              000c 00ff  ld   $ff         517   ld(255)
              000d 6900  xora [y,$00]     518   xora([Y,0])                     # Invert memory value again
              000e ca00  st   [y,$00]     519   st([Y,0])                       # To restore original value
              000f 6100  xora [$00]       520   xora([0])                       # Compare with inverted copy
              0010 f014  beq  .countMem1  521   beq('.countMem1')               # If equal, we wrapped around
              0011 0101  ld   [$01]       522   ld([memSize])
              0012 fc05  bra  .countMem0  523   bra('.countMem0')               # Loop to test next address line
              0013 8200  adda ac          524   adda(AC)                        # Executes in the branch delay slot!
                                          525   label('.countMem1')
                                          526
                                          527   # Momentarily wait to allow for debouncing of the reset switch by spinning
                                          528   # roughly 2^15 times at 2 clocks per loop: 6.5ms@10MHz to 10ms@6.3MHz
                                          529   # Real-world switches normally bounce shorter than that.
                                          530   # "[...] 16 switches exhibited an average 1557 usec of bouncing, with,
                                          531   #  as I said, a max of 6200 usec" (From: http://www.ganssle.com/debouncing.htm)
                                          532   # Relevant for the breadboard version, as the kit doesn't have a reset switch.
                                          533
.countMem1:   0014 00ff  ld   $ff         534   ld(255)                         # Debounce reset button
                                          535   label('.debounce')
.debounce:    0015 c200  st   [$00]       536   st([0])
              0016 ec16  bne  $0016       537   bne(pc())
              0017 a001  suba $01         538   suba(1)                         # Branch delay slot
              0018 0100  ld   [$00]       539   ld([0])
              0019 ec15  bne  .debounce   540   bne('.debounce')
              001a a001  suba $01         541   suba(1)                         # Branch delay slot
                                          542
                                          543   # Update LEDs (memory is present and counted, reset is stable)
              001b 0001  ld   $01         544   ld(0b0001)                      # LEDs |*OOO|
              001c 1880  ld   $80,out     545   ld(syncBits^hSync,OUT)
              001d 18c0  ld   $c0,out     546   ld(syncBits,OUT)
                                          547
                                          548   # Scan the entire RAM space to collect entropy for a random number generator.
                                          549   # The 16-bit address space is scanned, even if less RAM was detected.
              001e 0000  ld   $00         550   ld(0)                           # Collect entropy from RAM
              001f d218  st   [$18],x     551   st([vAC+0],X)
              0020 d619  st   [$19],y     552   st([vAC+1],Y)
                                          553   label('.initEnt0')
.initEnt0:    0021 0106  ld   [$06]       554   ld([entropy+0])
              0022 f425  bge  .initEnt1   555   bpl('.initEnt1')
              0023 8d00  adda [y,x]       556   adda([Y,X])
              0024 60bf  xora $bf         557   xora(191)
                                          558   label('.initEnt1')
.initEnt1:    0025 c206  st   [$06]       559   st([entropy+0])
              0026 0107  ld   [$07]       560   ld([entropy+1])
              0027 f42a  bge  .initEnt2   561   bpl('.initEnt2')
              0028 8106  adda [$06]       562   adda([entropy+0])
              0029 60c1  xora $c1         563   xora(193)
                                          564   label('.initEnt2')
.initEnt2:    002a c207  st   [$07]       565   st([entropy+1])
              002b 8108  adda [$08]       566   adda([entropy+2])
              002c c208  st   [$08]       567   st([entropy+2])
              002d 0118  ld   [$18]       568   ld([vAC+0])
              002e 8001  adda $01         569   adda(1)
              002f ec21  bne  .initEnt0   570   bne('.initEnt0')
              0030 d218  st   [$18],x     571   st([vAC+0],X)
              0031 0119  ld   [$19]       572   ld([vAC+1])
              0032 8001  adda $01         573   adda(1)
              0033 ec21  bne  .initEnt0   574   bne('.initEnt0')
              0034 d619  st   [$19],y     575   st([vAC+1],Y)
                                          576
                                          577   # Update LEDs
              0035 0003  ld   $03         578   ld(0b0011)                      # LEDs |**OO|
              0036 1880  ld   $80,out     579   ld(syncBits^hSync,OUT)
              0037 18c0  ld   $c0,out     580   ld(syncBits,OUT)
                                          581
                                          582   # vCPU reset handler
              0038 00ee  ld   $ee         583   ld((vReset&255)-2)              # Setup vCPU reset handler
              0039 c216  st   [$16]       584   st([vPC])
              003a 9002  adda $02,x       585   adda(2,X)
              003b 0001  ld   $01         586   ld(vReset>>8)
              003c d617  st   [$17],y     587   st([vPC+1],Y)
              003d dc59  st   $59,[y,x++] 588   st('LDI',             [Y,Xpp])
              003e dc5e  st   $5e,[y,x++] 589   st('SYS_Reset_88',    [Y,Xpp])
              003f dc2b  st   $2b,[y,x++] 590   st('STW',             [Y,Xpp])
              0040 dc22  st   $22,[y,x++] 591   st(sysFn,             [Y,Xpp])
              0041 dcb4  st   $b4,[y,x++] 592   st('SYS',             [Y,Xpp])  # SYS -> SYS_Reset_88 -> SYS_Exec_88
              0042 dce2  st   $e2,[y,x++] 593   st(256-88//2+maxTicks,[Y,Xpp])
              0043 dc00  st   $00,[y,x++] 594   st(0,                 [Y,Xpp])  # vIRQ_DEVROM: Disable interrupts
              0044 dc00  st   $00,[y,x++] 595   st(0,                 [Y,Xpp])  # vIRQ_DEVROM
              0045 dcfc  st   $fc,[y,x++] 596   st(0b11111100,        [Y,Xpp])  # Control register
              0046 dc00  st   $00,[y,x++] 597   st(0,                 [Y,Xpp])  # videoTop
                                          598
              0047 0002  ld   $02         599   ld(hi('ENTER'))                 # Active interpreter (vCPU,v6502) = vCPU
              0048 c205  st   [$05]       600   st([vCpuSelect])
                                          601
              0049 00ff  ld   $ff         602   ld(255)                         # Setup serial input
              004a c20e  st   [$0e]       603   st([frameCount])
              004b c20f  st   [$0f]       604   st([serialRaw])
              004c c210  st   [$10]       605   st([serialLast])
              004d c211  st   [$11]       606   st([buttonState])
              004e c212  st   [$12]       607   st([resetTimer])                # resetTimer<0 when entering Main.gcl
                                          608
              004f 0007  ld   $07         609   ld(0b0111)                      # LEDs |***O|
              0050 1880  ld   $80,out     610   ld(syncBits^hSync,OUT)
              0051 18c0  ld   $c0,out     611   ld(syncBits,OUT)
                                          612
              0052 0000  ld   $00         613   ld(0)
              0053 c200  st   [$00]       614   st([0])                         # Carry lookup ([0x80] in 1st line of vBlank)
              0054 c202  st   [$02]       615   st([channel])
              0055 c22c  st   [$2c]       616   st([soundTimer])
                                          617
              0056 000f  ld   $0f         618   ld(0b1111)                      # LEDs |****|
              0057 1880  ld   $80,out     619   ld(syncBits^hSync,OUT)
              0058 18c0  ld   $c0,out     620   ld(syncBits,OUT)
              0059 c213  st   [$13]       621   st([xout])                      # Setup for control by video loop
              005a c214  st   [$14]       622   st([xoutMask])
                                          623
              005b 1401  ld   $01,y       624   ld(hi('startVideo'),Y)          # Enter video loop at vertical blank
              005c e003  jmp  y,$03       625   jmp(Y,'startVideo')
              005d c22e  st   [$2e]       626   st([ledState_v2])               # Setting to 1..126 means "stopped"
                                          627
                                          628   #-----------------------------------------------------------------------
                                          629   # Extension SYS_Reset_88: Soft reset
                                          630   #-----------------------------------------------------------------------
                                          631
                                          632   # SYS_Reset_88 initiates an immediate Gigatron reset from within the vCPU.
                                          633   # The reset sequence itself is mostly implemented in GCL by Reset.gcl,
                                          634   # which must first be loaded into RAM. But as that takes more than 1 scanline,
                                          635   # some vCPU bootstrapping code gets loaded with SYS_Exec_88.
                                          636   # !!! This function was REMOVED from interface.json
                                          637   # !!! Better use vReset as generic entry point for soft reset
                                          638
                                          639   # ROM type (see also Docs/GT1-files.txt)
                                          640   romTypeValue = symbol('romTypeValue_DEVROM')
                                          641
                                          642   label('SYS_Reset_88')
                                          643   assert pc()>>8 == 0
                                          644   assert (romTypeValue & 7) == 0
SYS_Reset_88: 005e 00f8  ld   $f8         645   ld(romTypeValue)                #15 Set ROM type/version and clear channel mask
              005f c221  st   [$21]       646   st([romType])                   #16
              0060 0000  ld   $00         647   ld(0)                           #17
              0061 c21c  st   [$1c]       648   st([vSP])                       #18 vSP
              0062 1401  ld   $01,y       649   ld(hi('videoTop_DEVROM'),Y)     #19
              0063 caf9  st   [y,$f9]     650   st([Y,lo('videoTop_DEVROM')])   #20 Show all 120 pixel lines
              0064 caf6  st   [y,$f6]     651   st([Y,vIRQ_DEVROM])             #21 Disable vIRQ dispatch
              0065 caf7  st   [y,$f7]     652   st([Y,vIRQ_DEVROM+1])           #22
              0066 c22c  st   [$2c]       653   st([soundTimer])                #23 soundTimer
                                          654   assert userCode&255 == 0
              0067 c21a  st   [$1a]       655   st([vLR])                       #24 vLR
              0068 0002  ld   $02         656   ld(userCode>>8)                 #25
              0069 c21b  st   [$1b]       657   st([vLR+1])                     #26
              006a 00f6  ld   $f6         658   ld('nopixels')                  #27 Video mode 3 (fast)
              006b c20a  st   [$0a]       659   st([videoModeB])                #28
              006c c20b  st   [$0b]       660   st([videoModeC])                #29
              006d c20c  st   [$0c]       661   st([videoModeD])                #30
              006e 00ad  ld   $ad         662   ld('SYS_Exec_88')               #31 SYS_Exec_88
              006f c222  st   [$22]       663   st([sysFn])                     #32 High byte (remains) 0
              0070 0015  ld   $15         664   ld('Reset')                     #33 Reset.gt1 from EPROM
              0071 c224  st   [$24]       665   st([sysArgs+0])                 #34
              0072 0026  ld   $26         666   ld(hi('Reset'))                 #35
              0073 c225  st   [$25]       667   st([sysArgs+1])                 #36
              0074 0116  ld   [$16]       668   ld([vPC])                       #37 Force second SYS call
              0075 a002  suba $02         669   suba(2)                         #38
              0076 c216  st   [$16]       670   st([vPC])                       #39
                                          671   # Return to interpreter
              0077 1403  ld   $03,y       672   ld(hi('NEXTY'),Y)               #40
              0078 e000  jmp  y,$00       673   jmp(Y,'NEXTY')                  #41
              0079 00ea  ld   $ea         674   ld(-44/2)                       #42
                                          675
                                          676   import forth
forth.move-ip:
              007a 8133  adda [$33]       677   forth.move_ip()
              007b c233  st   [$33]
              007c 1413  ld   $13,y       ;REENTER
              007d e006  jmp  y,$06
              007e 0124  ld   [$24]
                                          678
                                          679   #-----------------------------------------------------------------------
                                          680   # Placeholders for future SYS functions. This works as a kind of jump
                                          681   # table. The indirection allows SYS implementations to be moved around
                                          682   # between ROM versions, at the expense of 2 clock cycles (or 1). When
                                          683   # the function is not present it just acts as a NOP. Of course, when a
                                          684   # SYS function must be patched or extended it needs to have budget for
                                          685   # that in its declared maximum cycle count.
                                          686   #
                                          687   # Technically the same goal can be achieved by starting each function
                                          688   # with 2 nop's, or by overdeclaring their duration in the first place
                                          689   # (a bit is still wise to do). But this can result in fragmentation
                                          690   # of future ROM images. The indirection avoids that.
                                          691   #
                                          692   # An added advantage of having these in ROM page 0 is that it saves one
                                          693   # byte when setting sysFn: LDI+STW (4 bytes) instead of LDWI+STW (5 bytes)
                                          694   #-----------------------------------------------------------------------
                                          695
              007f 0200  nop              696   align(0x80, size=0x80)
                                          697   assert pc() == 0x80
                                          698
              0080 1403  ld   $03,y       699   ld(hi('REENTER'),Y)             #15 slot 0x80
              0081 e0cb  jmp  y,$cb       700   jmp(Y,'REENTER')                #16
              0082 00f6  ld   $f6         701   ld(-20/2)                       #17
                                          702
              0083 1403  ld   $03,y       703   ld(hi('REENTER'),Y)             #15 slot 0x83
              0084 e0cb  jmp  y,$cb       704   jmp(Y,'REENTER')                #16
              0085 00f6  ld   $f6         705   ld(-20/2)                       #17
                                          706
              0086 1403  ld   $03,y       707   ld(hi('REENTER'),Y)             #15 slot 0x86
              0087 e0cb  jmp  y,$cb       708   jmp(Y,'REENTER')                #16
              0088 00f6  ld   $f6         709   ld(-20/2)                       #17
                                          710
              0089 1403  ld   $03,y       711   ld(hi('REENTER'),Y)             #15 slot 0x89
              008a e0cb  jmp  y,$cb       712   jmp(Y,'REENTER')                #16
              008b 00f6  ld   $f6         713   ld(-20/2)                       #17
                                          714
              008c 1403  ld   $03,y       715   ld(hi('REENTER'),Y)             #15 slot 0x8c
              008d e0cb  jmp  y,$cb       716   jmp(Y,'REENTER')                #16
              008e 00f6  ld   $f6         717   ld(-20/2)                       #17
                                          718
              008f 1403  ld   $03,y       719   ld(hi('REENTER'),Y)             #15 slot 0x8f
              0090 e0cb  jmp  y,$cb       720   jmp(Y,'REENTER')                #16
              0091 00f6  ld   $f6         721   ld(-20/2)                       #17
                                          722
              0092 1403  ld   $03,y       723   ld(hi('REENTER'),Y)             #15 slot 0x92
              0093 e0cb  jmp  y,$cb       724   jmp(Y,'REENTER')                #16
              0094 00f6  ld   $f6         725   ld(-20/2)                       #17
                                          726
              0095 1403  ld   $03,y       727   ld(hi('REENTER'),Y)             #15 slot 0x95
              0096 e0cb  jmp  y,$cb       728   jmp(Y,'REENTER')                #16
              0097 00f6  ld   $f6         729   ld(-20/2)                       #17
                                          730
              0098 1403  ld   $03,y       731   ld(hi('REENTER'),Y)             #15 slot 0x98
              0099 e0cb  jmp  y,$cb       732   jmp(Y,'REENTER')                #16
              009a 00f6  ld   $f6         733   ld(-20/2)                       #17
                                          734
              009b 1403  ld   $03,y       735   ld(hi('REENTER'),Y)             #15 slot 0x9b
              009c e0cb  jmp  y,$cb       736   jmp(Y,'REENTER')                #16
              009d 00f6  ld   $f6         737   ld(-20/2)                       #17
                                          738
              009e 1403  ld   $03,y       739   ld(hi('REENTER'),Y)             #15 slot 0x9e
              009f e0cb  jmp  y,$cb       740   jmp(Y,'REENTER')                #16
              00a0 00f6  ld   $f6         741   ld(-20/2)                       #17
                                          742
              00a1 1403  ld   $03,y       743   ld(hi('REENTER'),Y)             #15 slot 0xa1
              00a2 e0cb  jmp  y,$cb       744   jmp(Y,'REENTER')                #16
              00a3 00f6  ld   $f6         745   ld(-20/2)                       #17
                                          746
              00a4 1403  ld   $03,y       747   ld(hi('REENTER'),Y)             #15 slot 0xa4
              00a5 e0cb  jmp  y,$cb       748   jmp(Y,'REENTER')                #16
              00a6 00f6  ld   $f6         749   ld(-20/2)                       #17
                                          750
              00a7 1403  ld   $03,y       751   ld(hi('REENTER'),Y)             #15 slot 0xa7
              00a8 e0cb  jmp  y,$cb       752   jmp(Y,'REENTER')                #16
              00a9 00f6  ld   $f6         753   ld(-20/2)                       #17
                                          754
              00aa 1403  ld   $03,y       755   ld(hi('REENTER'),Y)             #15 slot 0xaa
              00ab e0cb  jmp  y,$cb       756   jmp(Y,'REENTER')                #16
              00ac 00f6  ld   $f6         757   ld(-20/2)                       #17
                                          758
                                          759   #-----------------------------------------------------------------------
                                          760   # Extension SYS_Exec_88: Load code from ROM into memory and execute it
                                          761   #-----------------------------------------------------------------------
                                          762   #
                                          763   # This loads the vCPU code with consideration of the current vSP
                                          764   # Used during reset, but also for switching between applications or for
                                          765   # loading data from ROM from within an application (overlays).
                                          766   #
                                          767   # ROM stream format is [<addrH> <addrL> <n&255> n*<byte>]* 0
                                          768   # on top of lookup tables.
                                          769   #
                                          770   # Variables:
                                          771   #       sysArgs[0:1]    ROM pointer (in)
                                          772   #       sysArgs[2:3]    RAM pointer (changed)
                                          773   #       sysArgs[4]      State counter (changed)
                                          774   #       vLR             vCPU continues here (in)
                                          775
                                          776   label('SYS_Exec_88')
SYS_Exec_88:  00ad 1412  ld   $12,y       777   ld(hi('sys_Exec'),Y)            #15
              00ae e04b  jmp  y,$4b       778   jmp(Y,'sys_Exec')               #16
              00af 0000  ld   $00         779   ld(0)                           #17 Address of loader on zero page
                                          780
                                          781   #-----------------------------------------------------------------------
                                          782   # More placeholders for future SYS functions
                                          783   #-----------------------------------------------------------------------
                                          784
              00b0 1403  ld   $03,y       785   ld(hi('REENTER'),Y)             #15 slot 0xb0
              00b1 e0cb  jmp  y,$cb       786   jmp(Y,'REENTER')                #16
              00b2 00f6  ld   $f6         787   ld(-20/2)                       #17
                                          788
              00b3 1403  ld   $03,y       789   ld(hi('REENTER'),Y)             #15 slot 0xb3
              00b4 e0cb  jmp  y,$cb       790   jmp(Y,'REENTER')                #16
              00b5 00f6  ld   $f6         791   ld(-20/2)                       #17
                                          792
              00b6 1403  ld   $03,y       793   ld(hi('REENTER'),Y)             #15 slot 0xb6
              00b7 e0cb  jmp  y,$cb       794   jmp(Y,'REENTER')                #16
              00b8 00f6  ld   $f6         795   ld(-20/2)                       #17
                                          796
              00b9 1403  ld   $03,y       797   ld(hi('REENTER'),Y)             #15 slot 0xb9
              00ba e0cb  jmp  y,$cb       798   jmp(Y,'REENTER')                #16
              00bb 00f6  ld   $f6         799   ld(-20/2)                       #17
                                          800
              00bc 1403  ld   $03,y       801   ld(hi('REENTER'),Y)             #15 slot 0xbc
              00bd e0cb  jmp  y,$cb       802   jmp(Y,'REENTER')                #16
              00be 00f6  ld   $f6         803   ld(-20/2)                       #17
                                          804
              00bf 1403  ld   $03,y       805   ld(hi('REENTER'),Y)             #15 slot 0xbf
              00c0 e0cb  jmp  y,$cb       806   jmp(Y,'REENTER')                #16
              00c1 00f6  ld   $f6         807   ld(-20/2)                       #17
                                          808
              00c2 1403  ld   $03,y       809   ld(hi('REENTER'),Y)             #15 slot 0xc2
              00c3 e0cb  jmp  y,$cb       810   jmp(Y,'REENTER')                #16
              00c4 00f6  ld   $f6         811   ld(-20/2)                       #17
                                          812
              00c5 1403  ld   $03,y       813   ld(hi('REENTER'),Y)             #15 slot 0xc5
              00c6 e0cb  jmp  y,$cb       814   jmp(Y,'REENTER')                #16
              00c7 00f6  ld   $f6         815   ld(-20/2)                       #17
                                          816
              00c8 1403  ld   $03,y       817   ld(hi('REENTER'),Y)             #15 slot 0xc8
              00c9 e0cb  jmp  y,$cb       818   jmp(Y,'REENTER')                #16
              00ca 00f6  ld   $f6         819   ld(-20/2)                       #17
                                          820
              00cb 1403  ld   $03,y       821   ld(hi('REENTER'),Y)             #15 slot 0xcb
              00cc e0cb  jmp  y,$cb       822   jmp(Y,'REENTER')                #16
              00cd 00f6  ld   $f6         823   ld(-20/2)                       #17
                                          824
              00ce 1403  ld   $03,y       825   ld(hi('REENTER'),Y)             #15 slot 0xce
              00cf e0cb  jmp  y,$cb       826   jmp(Y,'REENTER')                #16
              00d0 00f6  ld   $f6         827   ld(-20/2)                       #17
                                          828
              00d1 1403  ld   $03,y       829   ld(hi('REENTER'),Y)             #15 slot 0xd1
              00d2 e0cb  jmp  y,$cb       830   jmp(Y,'REENTER')                #16
              00d3 00f6  ld   $f6         831   ld(-20/2)                       #17
                                          832
              00d4 1403  ld   $03,y       833   ld(hi('REENTER'),Y)             #15 slot 0xd4
              00d5 e0cb  jmp  y,$cb       834   jmp(Y,'REENTER')                #16
              00d6 00f6  ld   $f6         835   ld(-20/2)                       #17
                                          836
              00d7 1403  ld   $03,y       837   ld(hi('REENTER'),Y)             #15 slot 0xd7
              00d8 e0cb  jmp  y,$cb       838   jmp(Y,'REENTER')                #16
              00d9 00f6  ld   $f6         839   ld(-20/2)                       #17
                                          840
              00da 1403  ld   $03,y       841   ld(hi('REENTER'),Y)             #15 slot 0xda
              00db e0cb  jmp  y,$cb       842   jmp(Y,'REENTER')                #16
              00dc 00f6  ld   $f6         843   ld(-20/2)                       #17
                                          844
              00dd 1403  ld   $03,y       845   ld(hi('REENTER'),Y)             #15 slot 0xdd
              00de e0cb  jmp  y,$cb       846   jmp(Y,'REENTER')                #16
              00df 00f6  ld   $f6         847   ld(-20/2)                       #17
                                          848
              00e0 1403  ld   $03,y       849   ld(hi('REENTER'),Y)             #15 slot 0xe0
              00e1 e0cb  jmp  y,$cb       850   jmp(Y,'REENTER')                #16
              00e2 00f6  ld   $f6         851   ld(-20/2)                       #17
                                          852
              00e3 1403  ld   $03,y       853   ld(hi('REENTER'),Y)             #15 slot 0xe3
              00e4 e0cb  jmp  y,$cb       854   jmp(Y,'REENTER')                #16
              00e5 00f6  ld   $f6         855   ld(-20/2)                       #17
                                          856
              00e6 1403  ld   $03,y       857   ld(hi('REENTER'),Y)             #15 slot 0xe6
              00e7 e0cb  jmp  y,$cb       858   jmp(Y,'REENTER')                #16
              00e8 00f6  ld   $f6         859   ld(-20/2)                       #17
                                          860
                                          861   #-----------------------------------------------------------------------
                                          862   # Extension SYS_StoreBytes_DEVROM_XXX
                                          863   #-----------------------------------------------------------------------
                                          864
              00e9 1403  ld   $03,y       865   ld(hi('REENTER'),Y)             #15 slot 0xe9
              00ea e0cb  jmp  y,$cb       866   jmp(Y,'REENTER')                #16
              00eb 00f6  ld   $f6         867   ld(-20/2)                       #17
                                          868
                                          869   #-----------------------------------------------------------------------
                                          870   # Extension SYS_LoadBytes_DEVROM_XXX
                                          871   #-----------------------------------------------------------------------
                                          872
                                          873   # Load object variables into zero-page
                                          874   # XXX Unfinished
                                          875   #
                                          876   # Variables
                                          877   #       vLR             Pointer to size byte + object variables
                                          878   #       $30...$30+n-1   Target location
                                          879
                                          880   label('SYS_LoadBytes_DEVROM_XXX')
SYS_LoadBytes_DEVROM_XXX:
              00ec 1412  ld   $12,y       881   ld(hi('sys_LoadBytes'),Y)       #15
              00ed e0e9  jmp  y,$e9       882   jmp(Y,'sys_LoadBytes')          #16
              00ee 151b  ld   [$1b],y     883   ld([vLR+1],Y)                   #17
                                          884
                                          885   #-----------------------------------------------------------------------
                                          886   # Extension SYS_ReadRomDir_DEVROM_80
                                          887   #-----------------------------------------------------------------------
                                          888
                                          889   # Get next entry from ROM file system. Use vAC=0 to get the first entry.
                                          890
                                          891   # Variables:
                                          892   #       vAC             Start address of current entry (inout)
                                          893   #       sysArgs[0:7]    File name, padded with zeroes (out)
                                          894
                                          895   label('SYS_ReadRomDir_DEVROM_80')
SYS_ReadRomDir_DEVROM_80:
              00ef 1428  ld   $28,y       896   ld(hi('sys_ReadRomDir'),Y)      #15
              00f0 e0d9  jmp  y,$d9       897   jmp(Y,'sys_ReadRomDir')         #16
              00f1 0119  ld   [$19]       898   ld([vAC+1])                     #17
                                          899
              00f2 0200  nop              900   fillers(until=symbol('SYS_Out_22') & 255)
              00f3 0200  nop
                                          901
                                          902   #-----------------------------------------------------------------------
                                          903   # Extension SYS_Out_22
                                          904   #-----------------------------------------------------------------------
                                          905
                                          906   # Send byte to output port
                                          907   #
                                          908   # Variables:
                                          909   #       vAC
                                          910
                                          911   label('SYS_Out_22')
SYS_Out_22:   00f4 1924  ld   [$24],out   912   ld([sysArgs+0],OUT)             #15
              00f5 0200  nop              913   nop()                           #16
              00f6 1403  ld   $03,y       914   ld(hi('REENTER'),Y)             #17
              00f7 e0cb  jmp  y,$cb       915   jmp(Y,'REENTER')                #18
              00f8 00f5  ld   $f5         916   ld(-22/2)                       #19
                                          917
                                          918   #-----------------------------------------------------------------------
                                          919   # Extension SYS_In_24
                                          920   #-----------------------------------------------------------------------
                                          921
                                          922   # Read a byte from the input port
                                          923   #
                                          924   # Variables:
                                          925   #       vAC
                                          926
                                          927   label('SYS_In_24')
SYS_In_24:    00f9 c318  st   in,[$18]    928   st(IN, [vAC])                   #15
              00fa 0000  ld   $00         929   ld(0)                           #16
              00fb c219  st   [$19]       930   st([vAC+1])                     #17
              00fc 0200  nop              931   nop()                           #18
              00fd 1403  ld   $03,y       932   ld(hi('REENTER'),Y)             #19
              00fe e0cb  jmp  y,$cb       933   jmp(Y,'REENTER')                #20
              00ff 00f4  ld   $f4         934   ld(-24/2)                       #21
                                          935
                                          936   assert pc()&255 == 0
                                          937
                                          938   #-----------------------------------------------------------------------
                                          939   #
                                          940   #  $0100 ROM page 1: Video loop vertical blank
                                          941   #
                                          942   #-----------------------------------------------------------------------
                                          943   align(0x100, size=0x100)
                                          944
                                          945   # Video off mode (also no sound, serial, timer, blinkenlights, ...).
                                          946   # For benchmarking purposes. This still has the overhead for the vTicks
                                          947   # administration, time slice granularity etc.
                                          948   label('videoZ')
                                          949   videoZ = pc()
videoZ:       0100 1505  ld   [$05],y     950   runVcpu(None, '---- novideo', returnTo=videoZ)
              0101 e0ff  jmp  y,$ff
              0102 007f  ld   $7f
                                          951
                                          952   label('startVideo')             # (Re)start of video signal from idle state
startVideo:   0103 00c0  ld   $c0         953   ld(syncBits)
                                          954
                                          955   # Start of vertical blank interval
                                          956   label('vBlankStart')
vBlankStart:  0104 c21f  st   [$1f]       957   st([videoSync0])                #32 Start of vertical blank interval
              0105 0080  ld   $80         958   ld(syncBits^hSync)              #33
              0106 c220  st   [$20]       959   st([videoSync1])                #34
                                          960
                                          961   # Reset line counter before vCPU can see it
              0107 00b3  ld   $b3         962   ld(videoYline0)                 #35
              0108 c209  st   [$09]       963   st([videoY])                    #36
                                          964
                                          965   # Update frame count and [0x80] (4 cycles)
              0109 0001  ld   $01         966   ld(1)                           #37 Reinitialize carry lookup, for robustness
              010a c280  st   [$80]       967   st([0x80])                      #38
              010b 810e  adda [$0e]       968   adda([frameCount])              #39 Frame counter
              010c c20e  st   [$0e]       969   st([frameCount])                #40
                                          970
                                          971   # Mix entropy (11 cycles)
              010d 6107  xora [$07]       972   xora([entropy+1])               #41 Mix entropy
              010e 610f  xora [$0f]       973   xora([serialRaw])               #42 Mix in serial input
              010f 8106  adda [$06]       974   adda([entropy+0])               #43
              0110 c206  st   [$06]       975   st([entropy+0])                 #44
              0111 8108  adda [$08]       976   adda([entropy+2])               #45 Some hidden state
              0112 c208  st   [$08]       977   st([entropy+2])                 #46
              0113 e816  blt  $0116       978   bmi(pc()+3)                     #47
              0114 fc17  bra  $0117       979   bra(pc()+3)                     #48
              0115 6053  xora $53         980   xora(64+16+2+1)                 #49
              0116 606c  xora $6c         981   xora(64+32+8+4)                 #49(!)
              0117 8107  adda [$07]       982   adda([entropy+1])               #50
              0118 c207  st   [$07]       983   st([entropy+1])                 #51
                                          984
                                          985   # LED sequencer (18 cycles)
              0119 012d  ld   [$2d]       986   ld([ledTimer])                  #52 Blinkenlight sequencer
              011a f01d  beq  $011d       987   beq(pc()+3)                     #53
              011b fc1e  bra  $011e       988   bra(pc()+3)                     #54
              011c a001  suba $01         989   suba(1)                         #55
              011d 012f  ld   [$2f]       990   ld([ledTempo])                  #55(!)
              011e c22d  st   [$2d]       991   st([ledTimer])                  #56
              011f f022  beq  $0122       992   beq(pc()+3)                     #57
              0120 fc23  bra  $0123       993   bra(pc()+3)                     #58
              0121 0000  ld   $00         994   ld(0)                           #59 Don't advance state
              0122 0001  ld   $01         995   ld(1)                           #59(!) Advance state when timer passes through 0
              0123 812e  adda [$2e]       996   adda([ledState_v2])             #60
              0124 ec27  bne  $0127       997   bne(pc()+3)                     #61
              0125 fc28  bra  $0128       998   bra(pc()+3)                     #62
              0126 00e8  ld   $e8         999   ld(-24)                         #63 State 0 becomes -24, start of sequence
              0127 e42c  bgt  .leds#65    1000  bgt('.leds#65')                 #63(!) Catch the stopped state (>0)
              0128 c22e  st   [$2e]       1001  st([ledState_v2])               #64
              0129 8048  adda $48         1002  adda('.leds#69')                #65
              012a fe00  bra  ac          1003  bra(AC)                         #66 Jump to lookup table
              012b fc48  bra  .leds#69    1004  bra('.leds#69')                 #67 Single-instruction subroutine
                                          1005
                                          1006  label('.leds#65')
.leds#65:     012c 000f  ld   $0f         1007  ld(0x0f)                        #65 Maintain stopped state
              012d c22e  st   [$2e]       1008  st([ledState_v2])               #66
              012e fc48  bra  .leds#69    1009  bra('.leds#69')                 #67
              012f 2114  anda [$14]       1010  anda([xoutMask])                #68 Always clear sound bits (this is why AC=0x0f)
                                          1011
              0130 000f  ld   $0f         1012  ld(0b1111)                      #68 LEDs |****| offset -24 Low 4 bits are the LED output
              0131 0007  ld   $07         1013  ld(0b0111)                      #68 LEDs |***O|
              0132 0003  ld   $03         1014  ld(0b0011)                      #68 LEDs |**OO|
              0133 0001  ld   $01         1015  ld(0b0001)                      #68 LEDs |*OOO|
              0134 0002  ld   $02         1016  ld(0b0010)                      #68 LEDs |O*OO|
              0135 0004  ld   $04         1017  ld(0b0100)                      #68 LEDs |OO*O|
              0136 0008  ld   $08         1018  ld(0b1000)                      #68 LEDs |OOO*|
              0137 0004  ld   $04         1019  ld(0b0100)                      #68 LEDs |OO*O|
              0138 0002  ld   $02         1020  ld(0b0010)                      #68 LEDs |O*OO|
              0139 0001  ld   $01         1021  ld(0b0001)                      #68 LEDs |*OOO|
              013a 0003  ld   $03         1022  ld(0b0011)                      #68 LEDs |**OO|
              013b 0007  ld   $07         1023  ld(0b0111)                      #68 LEDs |***O|
              013c 000f  ld   $0f         1024  ld(0b1111)                      #68 LEDs |****|
              013d 000e  ld   $0e         1025  ld(0b1110)                      #68 LEDs |O***|
              013e 000c  ld   $0c         1026  ld(0b1100)                      #68 LEDs |OO**|
              013f 0008  ld   $08         1027  ld(0b1000)                      #68 LEDs |OOO*|
              0140 0004  ld   $04         1028  ld(0b0100)                      #68 LEDs |OO*O|
              0141 0002  ld   $02         1029  ld(0b0010)                      #68 LEDs |O*OO|
              0142 0001  ld   $01         1030  ld(0b0001)                      #68 LEDs |*OOO|
              0143 0002  ld   $02         1031  ld(0b0010)                      #68 LEDs |O*OO|
              0144 0004  ld   $04         1032  ld(0b0100)                      #68 LEDs |OO*O|
              0145 0008  ld   $08         1033  ld(0b1000)                      #68 LEDs |OOO*|
              0146 000c  ld   $0c         1034  ld(0b1100)                      #68 LEDs |OO**|
              0147 000e  ld   $0e         1035  ld(0b1110)                      #68 LEDs |O***| offset -1
                                          1036  label('.leds#69')
.leds#69:     0148 c214  st   [$14]       1037  st([xoutMask])                  #69 Sound bits will be re-enabled below
              0149 0010  ld   $10         1038  ld(vPulse*2)                    #70 vPulse default length when not modulated
              014a c20d  st   [$0d]       1039  st([videoPulse])                #71
                                          1040
                                          1041  # When the total number of scan lines per frame is not an exact multiple of the
                                          1042  # (4) channels, there will be an audible discontinuity if no measure is taken.
                                          1043  # This static noise can be suppressed by swallowing the first `lines mod 4'
                                          1044  # partial samples after transitioning into vertical blank. This is easiest if
                                          1045  # the modulo is 0 (do nothing), 1 (reset sample when entering the last visible
                                          1046  # scan line), or 2 (reset sample while in the first blank scan line). For the
                                          1047  # last case there is no solution yet: give a warning.
                                          1048  extra = 0
                                          1049  if soundDiscontinuity == 2:
                                          1050    st(sample, [sample])          # Sound continuity
                                          1051    extra += 1
                                          1052  if soundDiscontinuity > 2:
                                          1053    print('Warning: sound discontinuity not suppressed')
                                          1054
                                          1055  # vCPU interrupt
              014b 010e  ld   [$0e]       1056  ld([frameCount])                #72
                                          1057  beq('vBlankFirst#75')           #73
              014c f052  beq  vBlankFirst#75
                                          1058
                                          1059  runVcpu(186-74-extra,           #74 Application cycles (scan line 0)
                                          1060      '---D line 0 no timeout',
              014d 0055  ld   $55         1061      returnTo='vBlankFirst#186')
              014e c21e  st   [$1e]
              014f 1505  ld   [$05],y
              0150 e0ff  jmp  y,$ff
              0151 0023  ld   $23
                                          1062
                                          1063  label('vBlankFirst#75')
vBlankFirst#75:
              0152 1412  ld   $12,y       1064  ld(hi('vBlankFirst#78'),Y)      #75
              0153 e000  jmp  y,$00       1065  jmp(Y,'vBlankFirst#78')         #76
              0154 1401  ld   $01,y       1066  ld(hi(vIRQ_DEVROM),Y)           #77
                                          1067  label('vBlankFirst#186')
                                          1068
                                          1069  # Mitigation for rogue channelMask (3 cycles)
vBlankFirst#186:
              0155 0121  ld   [$21]       1070  ld([channelMask])               #186 Normalize channelMask, for robustness
              0156 20fb  anda $fb         1071  anda(0b11111011)                #187
              0157 c221  st   [$21]       1072  st([channelMask])               #188
                                          1073
                                          1074  # Sound on/off (6 cycles)
              0158 012c  ld   [$2c]       1075  ld([soundTimer])                #189 Sound on/off
              0159 ec5c  bne  $015c       1076  bne(pc()+3)                     #190
              015a fc5d  bra  $015d       1077  bra(pc()+3)                     #191
              015b 0000  ld   $00         1078  ld(0)                           #192 Keeps sound unchanged (should be off here)
              015c 00f0  ld   $f0         1079  ld(0xf0)                        #192(!) Turns sound back on
              015d 4114  ora  [$14]       1080  ora([xoutMask])                 #193
              015e c214  st   [$14]       1081  st([xoutMask])                  #194
                                          1082
                                          1083  # Sound timer count down (5 cycles)
              015f 012c  ld   [$2c]       1084  ld([soundTimer])                #195 Sound timer
              0160 f063  beq  $0163       1085  beq(pc()+3)                     #196
              0161 fc64  bra  $0164       1086  bra(pc()+3)                     #197
              0162 a001  suba $01         1087  suba(1)                         #198
              0163 0000  ld   $00         1088  ld(0)                           #198
              0164 c22c  st   [$2c]       1089  st([soundTimer])                #199
                                          1090
              0165 191f  ld   [$1f],out   1091  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1092  label('sound1')
sound1:       0166 0102  ld   [$02]       1093  ld([channel])                   #1 Advance to next sound channel
              0167 2121  anda [$21]       1094  anda([channelMask])             #2
              0168 8001  adda $01         1095  adda(1)                         #3
              0169 1920  ld   [$20],out   1096  ld([videoSync1],OUT)            #4 Start horizontal pulse
              016a d602  st   [$02],y     1097  st([channel],Y)                 #5
              016b 007f  ld   $7f         1098  ld(0x7f)                        #6 Update sound channel
              016c 29fe  anda [y,$fe]     1099  anda([Y,oscL])                  #7
              016d 89fc  adda [y,$fc]     1100  adda([Y,keyL])                  #8
              016e cafe  st   [y,$fe]     1101  st([Y,oscL])                    #9
              016f 3080  anda $80,x       1102  anda(0x80,X)                    #10
              0170 0500  ld   [x]         1103  ld([X])                         #11
              0171 89ff  adda [y,$ff]     1104  adda([Y,oscH])                  #12
              0172 89fd  adda [y,$fd]     1105  adda([Y,keyH])                  #13
              0173 caff  st   [y,$ff]     1106  st([Y,oscH])                    #14
              0174 20fc  anda $fc         1107  anda(0xfc)                      #15
              0175 69fb  xora [y,$fb]     1108  xora([Y,wavX])                  #16
              0176 1200  ld   ac,x        1109  ld(AC,X)                        #17
              0177 09fa  ld   [y,$fa]     1110  ld([Y,wavA])                    #18
              0178 1407  ld   $07,y       1111  ld(soundTable>>8,Y)             #19
              0179 8d00  adda [y,x]       1112  adda([Y,X])                     #20
              017a e87d  blt  $017d       1113  bmi(pc()+3)                     #21
              017b fc7e  bra  $017e       1114  bra(pc()+3)                     #22
              017c 203f  anda $3f         1115  anda(63)                        #23
              017d 003f  ld   $3f         1116  ld(63)                          #23(!)
              017e 8103  adda [$03]       1117  adda([sample])                  #24
              017f c203  st   [$03]       1118  st([sample])                    #25
                                          1119
              0180 0113  ld   [$13]       1120  ld([xout])                      #26 Gets copied to XOUT
              0181 1412  ld   $12,y       1121  ld(hi('vBlankLast#34'),Y)       #27 Prepare jumping out of page in last line
              0182 191f  ld   [$1f],out   1122  ld([videoSync0],OUT)            #28 End horizontal pulse
                                          1123
                                          1124  # Count through the vertical blank interval until its last scan line
              0183 0109  ld   [$09]       1125  ld([videoY])                    #29
                                          1126  bpl('.vBlankLast#32')           #30
              0184 f4b1  bge  .vBlankLast#32
              0185 8002  adda $02         1127  adda(2)                         #31
              0186 c209  st   [$09]       1128  st([videoY])                    #32
                                          1129
                                          1130  # Determine if we're in the vertical sync pulse
              0187 a0bd  suba $bd         1131  suba(1-2*(vBack+vPulse-1))      #33 Prepare sync values
              0188 ec8d  bne  .prepSync36 1132  bne('.prepSync36')              #34 Tests for start of vPulse
              0189 a10d  suba [$0d]       1133  suba([videoPulse])              #35
              018a 0040  ld   $40         1134  ld(syncBits^vSync)              #36 Entering vertical sync pulse
              018b fc92  bra  .prepSync39 1135  bra('.prepSync39')              #37
              018c c21f  st   [$1f]       1136  st([videoSync0])                #38
                                          1137  label('.prepSync36')
.prepSync36:  018d ec91  bne  .prepSync38 1138  bne('.prepSync38')              #36 Tests for end of vPulse
              018e 00c0  ld   $c0         1139  ld(syncBits)                    #37
              018f fc93  bra  .prepSync40 1140  bra('.prepSync40')              #38 Entering vertical back porch
              0190 c21f  st   [$1f]       1141  st([videoSync0])                #39
                                          1142  label('.prepSync38')
.prepSync38:  0191 011f  ld   [$1f]       1143  ld([videoSync0])                #38 Load current value
                                          1144  label('.prepSync39')
.prepSync39:  0192 0200  nop              1145  nop()                           #39
                                          1146  label('.prepSync40')
.prepSync40:  0193 6040  xora $40         1147  xora(hSync)                     #40 Precompute, as during the pulse there is no time
              0194 c220  st   [$20]       1148  st([videoSync1])                #41
                                          1149
                                          1150  # Capture the serial input before the '595 shifts it out
              0195 0109  ld   [$09]       1151  ld([videoY])                    #42 Capture serial input
              0196 60cf  xora $cf         1152  xora(1-2*(vBack-1-1))           #43 Exactly when the 74HC595 has captured all 8 controller bits
              0197 ec9a  bne  $019a       1153  bne(pc()+3)                     #44
              0198 fc9b  bra  $019b       1154  bra(pc()+3)                     #45
              0199 c30f  st   in,[$0f]    1155  st(IN, [serialRaw])             #46
              019a c000  st   $00,[$00]   1156  st(0,[0])                       #46(!) Reinitialize carry lookup, for robustness
                                          1157
                                          1158  # Update [xout] with the next sound sample every 4 scan lines.
                                          1159  # Keep doing this on 'videoC equivalent' scan lines in vertical blank.
              019b 0109  ld   [$09]       1160  ld([videoY])                    #47
              019c 2006  anda $06         1161  anda(6)                         #48
                                          1162  beq('vBlankSample')             #49
              019d f0a6  beq  vBlankSample
              019e 0103  ld   [$03]       1163  ld([sample])                    #50
                                          1164
                                          1165  label('vBlankNormal')
vBlankNormal: 019f 00a4  ld   $a4         1166  runVcpu(199-51, 'AB-D line 1-36')#51 Application cycles (vBlank scan lines without sound sample update)
              01a0 c21e  st   [$1e]
              01a1 1505  ld   [$05],y
              01a2 e0ff  jmp  y,$ff
              01a3 0035  ld   $35
              01a4 fc66  bra  sound1      1167  bra('sound1')                   #199
              01a5 191f  ld   [$1f],out   1168  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1169
                                          1170  label('vBlankSample')
vBlankSample: 01a6 400f  ora  $0f         1171  ora(0x0f)                       #51 New sound sample is ready
              01a7 2114  anda [$14]       1172  anda([xoutMask])                #52
              01a8 c213  st   [$13]       1173  st([xout])                      #53
              01a9 c003  st   $03,[$03]   1174  st(sample, [sample])            #54 Reset for next sample
                                          1175
              01aa 00af  ld   $af         1176  runVcpu(199-55, '--C- line 3-39')#55 Application cycles (vBlank scan lines with sound sample update)
              01ab c21e  st   [$1e]
              01ac 1505  ld   [$05],y
              01ad e0ff  jmp  y,$ff
              01ae 0033  ld   $33
              01af fc66  bra  sound1      1177  bra('sound1')                   #199
              01b0 191f  ld   [$1f],out   1178  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1179
                                          1180  #-----------------------------------------------------------------------
                                          1181
                                          1182  label('.vBlankLast#32')
.vBlankLast#32:
              01b1 e02e  jmp  y,$2e       1183  jmp(Y,'vBlankLast#34')          #32 Jump out of page for space reasons
                                          1184  #assert hi(controllerType) == hi(pc()) # Assume these share the high address
              01b2 1401  ld   $01,y       1185  ld(hi(pc()),Y)                  #33
                                          1186
                                          1187  label('vBlankLast#52')
                                          1188
                                          1189  # Respond to reset button (14 cycles)
                                          1190  # - ResetTimer decrements as long as just [Start] is pressed down
                                          1191  # - Reaching 0 (normal) or 128 (extended) triggers the soft reset sequence
                                          1192  # - Initial value is 128 (or 255 at boot), first decrement, then check
                                          1193  # - This starts vReset -> SYS_Reset_88 -> SYS_Exec_88 -> Reset.gcl -> Main.gcl
                                          1194  # - Main.gcl then recognizes extended presses if resetTimer is 0..127 ("paasei")
                                          1195  # - This requires a full cycle (4s) in the warm boot scenario
                                          1196  # - Or a half cycle (2s) when pressing [Select] down during hard reset
                                          1197  # - This furthermore requires >=1 frame (and <=128) to have passed between
                                          1198  #   reaching 128 and getting through Reset and the start of Main, while [Start]
                                          1199  #   was still pressed so the count reaches <128. Two reasonable expectations.
                                          1200  # - The unintended power-up scenarios of ROMv1 (pulling SER_DATA low, or
                                          1201  #   pressing [Select] together with another button) now don't trigger anymore.
                                          1202
vBlankLast#52:
              01b3 0111  ld   [$11]       1203  ld([buttonState])               #52 Check [Start] for soft reset
              01b4 60ef  xora $ef         1204  xora(~buttonStart)              #53
              01b5 ecbe  bne  .restart#56 1205  bne('.restart#56')              #54
              01b6 0112  ld   [$12]       1206  ld([resetTimer])                #55 As long as button pressed
              01b7 a001  suba $01         1207  suba(1)                         #56 ... count down the timer
              01b8 c212  st   [$12]       1208  st([resetTimer])                #57
              01b9 207f  anda $7f         1209  anda(127)                       #58
              01ba f0c6  beq  .restart#61 1210  beq('.restart#61')              #59 Reset at 0 (normal 2s) or 128 (extended 4s)
              01bb 00ee  ld   $ee         1211  ld((vReset&255)-2)              #60 Start force reset when hitting 0
              01bc fcc5  bra  .restart#63 1212  bra('.restart#63')              #61 ... otherwise do nothing yet
              01bd fcc4  bra  .restart#64 1213  bra('.restart#64')              #62
                                          1214  label('.restart#56')
.restart#56:  01be 0001  ld   $01         1215  wait(62-56)                     #56
              01bf ecbf  bne  $01bf
              01c0 a001  suba $01
              01c1 0200  nop
              01c2 0080  ld   $80         1216  ld(128)                         #62 Not pressed, reset the timer
              01c3 c212  st   [$12]       1217  st([resetTimer])                #63
                                          1218  label('.restart#64')
.restart#64:  01c4 fccb  bra  .restart#66 1219  bra('.restart#66')              #64
                                          1220  label('.restart#63')
.restart#63:  01c5 0200  nop              1221  nop()                           #63,65
                                          1222  label('.restart#61')
.restart#61:  01c6 c216  st   [$16]       1223  st([vPC])                       #61 Point vPC at vReset
              01c7 0001  ld   $01         1224  ld(vReset>>8)                   #62
              01c8 c217  st   [$17]       1225  st([vPC+1])                     #63
              01c9 0002  ld   $02         1226  ld(hi('ENTER'))                 #64 Set active interpreter to vCPU
              01ca c205  st   [$05]       1227  st([vCpuSelect])                #65
                                          1228  label('.restart#66')
                                          1229
                                          1230  # Switch video mode when (only) select is pressed (16 cycles)
                                          1231  # XXX We could make this a vCPU interrupt
.restart#66:  01cb 0111  ld   [$11]       1232  ld([buttonState])               #66 Check [Select] to switch modes
              01cc 60df  xora $df         1233  xora(~buttonSelect)             #67 Only trigger when just [Select] is pressed
              01cd ece2  bne  .select#70  1234  bne('.select#70')               #68
              01ce 010b  ld   [$0b]       1235  ld([videoModeC])                #69
              01cf e8d5  blt  .select#72  1236  bmi('.select#72')               #70 Branch when line C is off
              01d0 010a  ld   [$0a]       1237  ld([videoModeB])                #71 Rotate: Off->D->B->C
              01d1 c20b  st   [$0b]       1238  st([videoModeC])                #72
              01d2 010c  ld   [$0c]       1239  ld([videoModeD])                #73
              01d3 c20a  st   [$0a]       1240  st([videoModeB])                #74
              01d4 fcda  bra  .select#77  1241  bra('.select#77')               #75
                                          1242  label('.select#72')
.select#72:   01d5 00f6  ld   $f6         1243  ld('nopixels')                  #72,76
              01d6 000a  ld   $0a         1244  ld('pixels')                    #73 Reset: On->D->B->C
              01d7 c20b  st   [$0b]       1245  st([videoModeC])                #74
              01d8 c20a  st   [$0a]       1246  st([videoModeB])                #75
              01d9 0200  nop              1247  nop()                           #76
                                          1248  label('.select#77')
.select#77:   01da c20c  st   [$0c]       1249  st([videoModeD])                #77
              01db 0035  ld   $35         1250  wait(188-78)                    #78 Don't waste code space expanding runVcpu here
              01dc ecdc  bne  $01dc
              01dd a001  suba $01
              01de 0200  nop
                                          1251  # AC==255 now
              01df c211  st   [$11]       1252  st([buttonState])               #188
                                          1253  bra('vBlankEnd#191')            #189
              01e0 fcea  bra  vBlankEnd#191
              01e1 0000  ld   $00         1254  ld(0)                           #190
                                          1255  label('.select#70')
                                          1256
                                          1257  # Mitigation of runaway channel variable
.select#70:   01e2 0102  ld   [$02]       1258  ld([channel])                   #70 Normalize channel, for robustness
              01e3 2003  anda $03         1259  anda(0b00000011)                #71
              01e4 c202  st   [$02]       1260  st([channel])                   #72 Stop wild channel updates
                                          1261
              01e5 00ea  ld   $ea         1262  runVcpu(191-73, '---D line 40') #73 Application cycles (scan line 40)
              01e6 c21e  st   [$1e]
              01e7 1505  ld   [$05],y
              01e8 e0ff  jmp  y,$ff
              01e9 0026  ld   $26
                                          1263
                                          1264  # AC==0 now
                                          1265  label('vBlankEnd#191')
vBlankEnd#191:
              01ea 1401  ld   $01,y       1266  ld(videoTop_DEVROM>>8,Y)        #191
              01eb 09f9  ld   [y,$f9]     1267  ld([Y,videoTop_DEVROM])         #192
              01ec c209  st   [$09]       1268  st([videoY])                    #193
              01ed c21f  st   [$1f]       1269  st([frameX])                    #194
              01ee ecf1  bne  $01f1       1270  bne(pc()+3)                     #195
              01ef fcf2  bra  $01f2       1271  bra(pc()+3)                     #196
              01f0 0001  ld   $01         1272  ld('videoA')                    #197
              01f1 00ec  ld   $ec         1273  ld('videoF')                    #197(!)
              01f2 c20d  st   [$0d]       1274  st([nextVideo])                 #198
              01f3 0102  ld   [$02]       1275  ld([channel])                   #199 Advance to next sound channel
              01f4 2121  anda [$21]       1276  anda([channelMask])             #0 <New scan line start>
              01f5 8001  adda $01         1277  adda(1)                         #1
              01f6 1402  ld   $02,y       1278  ld(hi('sound2'),Y)              #2
              01f7 e0b1  jmp  y,$b1       1279  jmp(Y,'sound2')                 #3
              01f8 1880  ld   $80,out     1280  ld(syncBits^hSync,OUT)          #4 Start horizontal pulse
                                          1281
              01f9 0200  nop              1282  fillers(until=0xff)
              01fa 0200  nop
              01fb 0200  nop
              * 6 times
                                          1283
                                          1284  #-----------------------------------------------------------------------
                                          1285  # Return point for vCPU slices during visible screen area
                                          1286  #-----------------------------------------------------------------------
                                          1287
                                          1288  assert pc() == 0x1ff            # Enables runVcpu() to re-enter into the next page
              01ff fcae  bra  sound3      1289  bra('sound3')                   #200,0 <New scan line start>
                                          1290
                                          1291  #-----------------------------------------------------------------------
                                          1292  #
                                          1293  #  $0200 ROM page 2: Video loop visible scanlines
                                          1294  #
                                          1295  #-----------------------------------------------------------------------
                                          1296  align(0x100, size=0x100)
              0200 0102  ld   [$02]       1297  ld([channel])                   #1 Advance to next sound channel
                                          1298
                                          1299  # Back porch A: first of 4 repeated scan lines
                                          1300  # - Fetch next Yi and store it for retrieval in the next scan lines
                                          1301  # - Calculate Xi from dXi, but there is no cycle time left to store it as well
                                          1302  label('videoA')
videoA:       0201 00ca  ld   $ca         1303  ld('videoB')                    #29 1st scanline of 4 (always visible)
              0202 c20d  st   [$0d]       1304  st([nextVideo])                 #30
              0203 1401  ld   $01,y       1305  ld(videoTable>>8,Y)             #31
              0204 1109  ld   [$09],x     1306  ld([videoY],X)                  #32
              0205 0d00  ld   [y,x]       1307  ld([Y,X])                       #33
              0206 de00  st   [y,x++]     1308  st([Y,Xpp])                     #34 Just X++
              0207 c220  st   [$20]       1309  st([frameY])                    #35
              0208 0d00  ld   [y,x]       1310  ld([Y,X])                       #36
              0209 911f  adda [$1f],x     1311  adda([frameX],X)                #37
                                          1312  label('pixels')
pixels:       020a 1520  ld   [$20],y     1313  ld([frameY],Y)                  #38
              020b 00c0  ld   $c0         1314  ld(syncBits)                    #39
                                          1315
                                          1316  # Stream 160 pixels from memory location <Yi,Xi> onwards
                                          1317  # Superimpose the sync signal bits to be robust against misprogramming
                                          1318  for i in range(160):
              020c 5d00  ora  [y,x++],out 1319    ora([Y,Xpp],OUT)              #40-199 Pixel burst
              020d 5d00  ora  [y,x++],out
              020e 5d00  ora  [y,x++],out
              * 160 times
              02ac 18c0  ld   $c0,out     1320  ld(syncBits,OUT)                #0 <New scan line start> Back to black
                                          1321
                                          1322  # Front porch
              02ad 0102  ld   [$02]       1323  ld([channel])                   #1 Advance to next sound channel
                                          1324  label('sound3')                 # Return from vCPU interpreter
sound3:       02ae 2121  anda [$21]       1325  anda([channelMask])             #2
              02af 8001  adda $01         1326  adda(1)                         #3
              02b0 1880  ld   $80,out     1327  ld(syncBits^hSync,OUT)          #4 Start horizontal pulse
                                          1328
                                          1329  # Horizontal sync and sound channel update for scanlines outside vBlank
                                          1330  label('sound2')
sound2:       02b1 d602  st   [$02],y     1331  st([channel],Y)                 #5
              02b2 007f  ld   $7f         1332  ld(0x7f)                        #6
              02b3 29fe  anda [y,$fe]     1333  anda([Y,oscL])                  #7
              02b4 89fc  adda [y,$fc]     1334  adda([Y,keyL])                  #8
              02b5 cafe  st   [y,$fe]     1335  st([Y,oscL])                    #9
              02b6 3080  anda $80,x       1336  anda(0x80,X)                    #10
              02b7 0500  ld   [x]         1337  ld([X])                         #11
              02b8 89ff  adda [y,$ff]     1338  adda([Y,oscH])                  #12
              02b9 89fd  adda [y,$fd]     1339  adda([Y,keyH])                  #13
              02ba caff  st   [y,$ff]     1340  st([Y,oscH] )                   #14
              02bb 20fc  anda $fc         1341  anda(0xfc)                      #15
              02bc 69fb  xora [y,$fb]     1342  xora([Y,wavX])                  #16
              02bd 1200  ld   ac,x        1343  ld(AC,X)                        #17
              02be 09fa  ld   [y,$fa]     1344  ld([Y,wavA])                    #18
              02bf 1407  ld   $07,y       1345  ld(soundTable>>8,Y)             #19
              02c0 8d00  adda [y,x]       1346  adda([Y,X])                     #20
              02c1 e8c4  blt  $02c4       1347  bmi(pc()+3)                     #21
              02c2 fcc5  bra  $02c5       1348  bra(pc()+3)                     #22
              02c3 203f  anda $3f         1349  anda(63)                        #23
              02c4 003f  ld   $3f         1350  ld(63)                          #23(!)
              02c5 8103  adda [$03]       1351  adda([sample])                  #24
              02c6 c203  st   [$03]       1352  st([sample])                    #25
                                          1353
              02c7 0113  ld   [$13]       1354  ld([xout])                      #26 Gets copied to XOUT
              02c8 fd0d  bra  [$0d]       1355  bra([nextVideo])                #27
              02c9 18c0  ld   $c0,out     1356  ld(syncBits,OUT)                #28 End horizontal pulse
                                          1357
                                          1358  # Back porch B: second of 4 repeated scan lines
                                          1359  # - Recompute Xi from dXi and store for retrieval in the next scan lines
                                          1360  label('videoB')
videoB:       02ca 00d3  ld   $d3         1361  ld('videoC')                    #29 2nd scanline of 4
              02cb c20d  st   [$0d]       1362  st([nextVideo])                 #30
              02cc 1401  ld   $01,y       1363  ld(videoTable>>8,Y)             #31
              02cd 0109  ld   [$09]       1364  ld([videoY])                    #32
              02ce 9001  adda $01,x       1365  adda(1,X)                       #33
              02cf 011f  ld   [$1f]       1366  ld([frameX])                    #34
              02d0 8d00  adda [y,x]       1367  adda([Y,X])                     #35
              02d1 fd0a  bra  [$0a]       1368  bra([videoModeB])               #36
              02d2 d21f  st   [$1f],x     1369  st([frameX],X)                  #37 Store in RAM and X
                                          1370
                                          1371  # Back porch C: third of 4 repeated scan lines
                                          1372  # - Nothing new to for video do as Yi and Xi are known,
                                          1373  # - This is the time to emit and reset the next sound sample
                                          1374  label('videoC')
videoC:       02d3 00dc  ld   $dc         1375  ld('videoD')                    #29 3rd scanline of 4
              02d4 c20d  st   [$0d]       1376  st([nextVideo])                 #30
              02d5 0103  ld   [$03]       1377  ld([sample])                    #31 New sound sample is ready (didn't fit in the audio loop)
              02d6 400f  ora  $0f         1378  ora(0x0f)                       #32
              02d7 2114  anda [$14]       1379  anda([xoutMask])                #33
              02d8 c213  st   [$13]       1380  st([xout])                      #34 Update [xout] with new sample (4 channels just updated)
              02d9 c003  st   $03,[$03]   1381  st(sample, [sample])            #35 Reset for next sample
              02da fd0b  bra  [$0b]       1382  bra([videoModeC])               #36
              02db 111f  ld   [$1f],x     1383  ld([frameX],X)                  #37
                                          1384
                                          1385  # Back porch D: last of 4 repeated scan lines
                                          1386  # - Calculate the next frame index
                                          1387  # - Decide if this is the last line or not
                                          1388  label('videoD')                 # Default video mode
videoD:       02dc 111f  ld   [$1f],x     1389  ld([frameX], X)                 #29 4th scanline of 4
              02dd 0109  ld   [$09]       1390  ld([videoY])                    #30
              02de a0ee  suba $ee         1391  suba((120-1)*2)                 #31
                                          1392  beq('.lastpixels#34')           #32
              02df f0e5  beq  .lastpixels#34
              02e0 80f0  adda $f0         1393  adda(120*2)                     #33 More pixel lines to go
              02e1 c209  st   [$09]       1394  st([videoY])                    #34
              02e2 0001  ld   $01         1395  ld('videoA')                    #35
              02e3 fd0c  bra  [$0c]       1396  bra([videoModeD])               #36
              02e4 c20d  st   [$0d]       1397  st([nextVideo])                 #37
                                          1398
                                          1399  label('.lastpixels#34')
                                          1400  if soundDiscontinuity == 1:
.lastpixels#34:
              02e5 c003  st   $03,[$03]   1401    st(sample, [sample])          #34 Sound continuity
                                          1402  else:
                                          1403    nop()                         #34
              02e6 00e9  ld   $e9         1404  ld('videoE')                    #35 No more pixel lines to go
              02e7 fd0c  bra  [$0c]       1405  bra([videoModeD])               #36
              02e8 c20d  st   [$0d]       1406  st([nextVideo])                 #37
                                          1407
                                          1408  # Back porch "E": after the last line
                                          1409  # - Go back and and enter vertical blank (program page 2)
                                          1410  label('videoE') # Exit visible area
videoE:       02e9 1401  ld   $01,y       1411  ld(hi('vBlankStart'),Y)         #29 Return to vertical blank interval
              02ea e004  jmp  y,$04       1412  jmp(Y,'vBlankStart')            #30
              02eb 00c0  ld   $c0         1413  ld(syncBits)                    #31
                                          1414
                                          1415  # Video mode that blacks out one or more pixel lines from the top of screen.
                                          1416  # This yields some speed, but also frees up screen memory for other purposes.
                                          1417  # Note: Sound output becomes choppier the more pixel lines are skipped
                                          1418  # Note: The vertical blank driver leaves 0x80 behind in [videoSync1]
                                          1419  label('videoF')
videoF:       02ec 0120  ld   [$20]       1420  ld([videoSync1])                #29 Completely black pixel line
              02ed 8080  adda $80         1421  adda(0x80)                      #30
              02ee d220  st   [$20],x     1422  st([videoSync1],X)              #31
              02ef 011f  ld   [$1f]       1423  ld([frameX])                    #32
              02f0 a500  suba [x]         1424  suba([X])                       #33 Decrements every two VGA scanlines
              02f1 f0f4  beq  .videoF#36  1425  beq('.videoF#36')               #34
              02f2 c21f  st   [$1f]       1426  st([frameX])                    #35
              02f3 fcf6  bra  nopixels    1427  bra('nopixels')                 #36
                                          1428  label('.videoF#36')
.videoF#36:   02f4 0001  ld   $01         1429  ld('videoA')                    #36,37 Transfer to visible screen area
              02f5 c20d  st   [$0d]       1430  st([nextVideo])                 #37
                                          1431  #
                                          1432  # Alternative for pixel burst: faster application mode
                                          1433  label('nopixels')
                                          1434  runVcpu(200-38, 'ABCD line 40-520',
nopixels:     02f6 00ff  ld   $ff         1435    returnTo=0x1ff)               #38 Application interpreter (black scanlines)
              02f7 c21e  st   [$1e]
              02f8 1505  ld   [$05],y
              02f9 e0ff  jmp  y,$ff
              02fa 003c  ld   $3c
                                          1436
                                          1437  #-----------------------------------------------------------------------
                                          1438  #
                                          1439  #  $0300 ROM page 3: Application interpreter primary page
                                          1440  #
                                          1441  #-----------------------------------------------------------------------
                                          1442
                                          1443  # Enter the timing-aware application interpreter (aka virtual CPU, vCPU)
                                          1444  #
                                          1445  # This routine will execute as many as possible instructions in the
                                          1446  # allotted time. When time runs out, it synchronizes such that the total
                                          1447  # duration matches the caller's request. Durations are counted in `ticks',
                                          1448  # which are multiples of 2 clock cycles.
                                          1449  #
                                          1450  # Synopsis: Use the runVcpu() macro as entry point
                                          1451
                                          1452  # We let 'ENTER' begin one word before the page boundary, for a bit extra
                                          1453  # precious space in the packed interpreter code page. Although ENTER's
                                          1454  # first instruction is bra() which normally doesn't cross page boundaries,
                                          1455  # in this case it will still jump into the right space, because branches
                                          1456  # from $xxFF land in the next page anyway.
                                          1457  while pc()&255 < 255:
              02fb 0200  nop              1458    nop()
              02fc 0200  nop
              02fd 0200  nop
              02fe 0200  nop
                                          1459  label('ENTER')
ENTER:        02ff fc03  bra  .next2      1460  bra('.next2')                   #0 Enter at '.next2' (so no startup overhead)
                                          1461  # --- Page boundary ---
                                          1462  align(0x100,size=0x100)
                                          1463  label('NEXTY')                  # Alternative for REENTER
NEXTY:        0300 1517  ld   [$17],y     1464  ld([vPC+1],Y)                   #1
                                          1465
                                          1466  # Fetch next instruction and execute it, but only if there are sufficient
                                          1467  # ticks left for the slowest instruction.
                                          1468  label('NEXT')
NEXT:         0301 8115  adda [$15]       1469  adda([vTicks])                  #0 Track elapsed ticks (actually counting down: AC<0)
              0302 e80b  blt  EXIT        1470  blt('EXIT')                     #1 Escape near time out
                                          1471  label('.next2')
.next2:       0303 c215  st   [$15]       1472  st([vTicks])                    #2
              0304 0116  ld   [$16]       1473  ld([vPC])                       #3 Advance vPC
              0305 8002  adda $02         1474  adda(2)                         #4
              0306 d216  st   [$16],x     1475  st([vPC],X)                     #5
              0307 0d00  ld   [y,x]       1476  ld([Y,X])                       #6 Fetch opcode (actually a branch target)
              0308 de00  st   [y,x++]     1477  st([Y,Xpp])                     #7 Just X++
              0309 fe00  bra  ac          1478  bra(AC)                         #8 Dispatch
              030a 0d00  ld   [y,x]       1479  ld([Y,X])                       #9 Prefetch operand
                                          1480
                                          1481  # Resync with video driver and transfer control
                                          1482  label('EXIT')
EXIT:         030b 800e  adda $0e         1483  adda(maxTicks)                  #3
                                          1484  label('RESYNC')
RESYNC:       030c e40c  bgt  RESYNC      1485  bgt(pc()&255)                   #4 Resync
              030d a001  suba $01         1486  suba(1)                         #5
              030e 1401  ld   $01,y       1487  ld(hi('vBlankStart'),Y)         #6
              030f e11e  jmp  y,[$1e]     1488  jmp(Y,[vReturn])                #7 To video driver
              0310 0000  ld   $00         1489  ld(0)                           #8 AC should be 0 already. Still..
                                          1490  assert vCPU_overhead ==          9
                                          1491
                                          1492  # Instruction LDWI: Load immediate word constant (vAC=D), 20 cycles
                                          1493  label('LDWI')
LDWI:         0311 c218  st   [$18]       1494  st([vAC])                       #10
              0312 de00  st   [y,x++]     1495  st([Y,Xpp])                     #11 Just X++
              0313 0d00  ld   [y,x]       1496  ld([Y,X])                       #12 Fetch second operand
              0314 c219  st   [$19]       1497  st([vAC+1])                     #13
              0315 0116  ld   [$16]       1498  ld([vPC])                       #14 Advance vPC one more
              0316 8001  adda $01         1499  adda(1)                         #15
              0317 c216  st   [$16]       1500  st([vPC])                       #16
              0318 00f6  ld   $f6         1501  ld(-20/2)                       #17
              0319 fc01  bra  NEXT        1502  bra('NEXT')                     #18
                                          1503  #dummy()                        #19 Overlap
                                          1504  #
                                          1505  # Instruction LD: Load byte from zero page (vAC=[D]), 22 cycles
                                          1506  label('LD')
LD:           031a 1200  ld   ac,x        1507  ld(AC,X)                        #10,19
              031b 0500  ld   [x]         1508  ld([X])                         #11
              031c 1404  ld   $04,y       1509  ld(hi('ld#15'),Y)               #12
              031d e013  jmp  y,$13       1510  jmp(Y,'ld#15')                  #13
              031e c218  st   [$18]       1511  st([vAC])                       #14
                                          1512
                                          1513  # Instruction CMPHS: Adjust high byte for signed compare (vACH=XXX), 28 cycles
                                          1514  label('CMPHS_DEVROM')
CMPHS_DEVROM: 031f 140b  ld   $0b,y       1515  ld(hi('cmphs#13'),Y)            #10
              0320 e0bc  jmp  y,$bc       1516  jmp(Y,'cmphs#13')               #11
                                          1517  #ld(AC,X)                       #12 Overlap
                                          1518  #
                                          1519  # Instruction LDW: Load word from zero page (vAC=[D]+256*[D+1]), 20 cycles
                                          1520  label('LDW')
LDW:          0321 1200  ld   ac,x        1521  ld(AC,X)                        #10,12
              0322 8001  adda $01         1522  adda(1)                         #11
              0323 c21d  st   [$1d]       1523  st([vTmp])                      #12 Address of high byte
              0324 0500  ld   [x]         1524  ld([X])                         #13
              0325 c218  st   [$18]       1525  st([vAC])                       #14
              0326 111d  ld   [$1d],x     1526  ld([vTmp],X)                    #15
              0327 0500  ld   [x]         1527  ld([X])                         #16
              0328 c219  st   [$19]       1528  st([vAC+1])                     #17
              0329 fc01  bra  NEXT        1529  bra('NEXT')                     #18
              032a 00f6  ld   $f6         1530  ld(-20/2)                       #19
                                          1531
                                          1532  # Instruction STW: Store word in zero page ([D],[D+1]=vAC&255,vAC>>8), 20 cycles
                                          1533  label('STW')
STW:          032b 1200  ld   ac,x        1534  ld(AC,X)                        #10,20
              032c 8001  adda $01         1535  adda(1)                         #11
              032d c21d  st   [$1d]       1536  st([vTmp])                      #12 Address of high byte
              032e 0118  ld   [$18]       1537  ld([vAC])                       #13
              032f c600  st   [x]         1538  st([X])                         #14
              0330 111d  ld   [$1d],x     1539  ld([vTmp],X)                    #15
              0331 0119  ld   [$19]       1540  ld([vAC+1])                     #16
              0332 c600  st   [x]         1541  st([X])                         #17
              0333 fc01  bra  NEXT        1542  bra('NEXT')                     #18
              0334 00f6  ld   $f6         1543  ld(-20/2)                       #19
                                          1544
                                          1545  # Instruction BCC: Test AC sign and branch conditionally, 28 cycles
                                          1546  label('BCC')
BCC:          0335 0119  ld   [$19]       1547  ld([vAC+1])                     #10 First inspect high byte of vAC
              0336 ec40  bne  .bcc#13     1548  bne('.bcc#13')                  #11
              0337 c21d  st   [$1d]       1549  st([vTmp])                      #12
              0338 0118  ld   [$18]       1550  ld([vAC])                       #13 Additionally inspect low byte of vAC
              0339 f043  beq  .bcc#16     1551  beq('.bcc#16')                  #14
              033a 0001  ld   $01         1552  ld(1)                           #15
              033b c21d  st   [$1d]       1553  st([vTmp])                      #16
              033c 0d00  ld   [y,x]       1554  ld([Y,X])                       #17 Operand is the conditional
                                          1555  label('.bcc#18')
.bcc#18:      033d fe00  bra  ac          1556  bra(AC)                         #18
              033e 011d  ld   [$1d]       1557  ld([vTmp])                      #19
                                          1558
                                          1559  # Conditional EQ: Branch if zero (if(vACL==0)vPCL=D)
                                          1560  label('EQ')
EQ:           033f ec45  bne  .bcc#22     1561  bne('.bcc#22')                  #20
                                          1562  label('.bcc#13')
.bcc#13:      0340 f048  beq  .bcc#23     1563  beq('.bcc#23')                  #21,13 AC=0 in EQ, AC!=0 from BCC... Overlap with BCC
              0341 0d00  ld   [y,x]       1564  ld([Y,X])                       #22,14 Overlap with BCC
                                          1565  #
                                          1566  # (continue BCC)
                                          1567  #label('.bcc#13')
                                          1568  #dummy()                        #13
                                          1569  #dummy()                        #14
              0342 0200  nop              1570  nop()                           #15
                                          1571  label('.bcc#16')
.bcc#16:      0343 fc3d  bra  .bcc#18     1572  bra('.bcc#18')                  #16
              0344 0d00  ld   [y,x]       1573  ld([Y,X])                       #17 Operand is the conditional
                                          1574  label('.bcc#22')
.bcc#22:      0345 0116  ld   [$16]       1575  ld([vPC])                       #22 False condition
              0346 fc4a  bra  .bcc#25     1576  bra('.bcc#25')                  #23
              0347 8001  adda $01         1577  adda(1)                         #24
                                          1578  label('.bcc#23')
.bcc#23:      0348 de00  st   [y,x++]     1579  st([Y,Xpp])                     #23 Just X++ True condition
              0349 0d00  ld   [y,x]       1580  ld([Y,X])                       #24
                                          1581  label('.bcc#25')
.bcc#25:      034a c216  st   [$16]       1582  st([vPC])                       #25
              034b fc01  bra  NEXT        1583  bra('NEXT')                     #26
              034c 00f2  ld   $f2         1584  ld(-28/2)                       #27
                                          1585
                                          1586  # Conditional GT: Branch if positive (if(vACL>0)vPCL=D)
                                          1587  label('GT')
GT:           034d f845  ble  .bcc#22     1588  ble('.bcc#22')                  #20
              034e e448  bgt  .bcc#23     1589  bgt('.bcc#23')                  #21
              034f 0d00  ld   [y,x]       1590  ld([Y,X])                       #22
                                          1591
                                          1592  # Conditional LT: Branch if negative (if(vACL<0)vPCL=D)
                                          1593  label('LT')
LT:           0350 f445  bge  .bcc#22     1594  bge('.bcc#22')                  #20
              0351 e848  blt  .bcc#23     1595  blt('.bcc#23')                  #21
              0352 0d00  ld   [y,x]       1596  ld([Y,X])                       #22
                                          1597
                                          1598  # Conditional GE: Branch if positive or zero (if(vACL>=0)vPCL=D)
                                          1599  label('GE')
GE:           0353 e845  blt  .bcc#22     1600  blt('.bcc#22')                  #20
              0354 f448  bge  .bcc#23     1601  bge('.bcc#23')                  #21
              0355 0d00  ld   [y,x]       1602  ld([Y,X])                       #22
                                          1603
                                          1604  # Conditional LE: Branch if negative or zero (if(vACL<=0)vPCL=D)
                                          1605  label('LE')
LE:           0356 e445  bgt  .bcc#22     1606  bgt('.bcc#22')                  #20
              0357 f848  ble  .bcc#23     1607  ble('.bcc#23')                  #21
              0358 0d00  ld   [y,x]       1608  ld([Y,X])                       #22
                                          1609
                                          1610  # Instruction LDI: Load immediate small positive constant (vAC=D), 16 cycles
                                          1611  label('LDI')
LDI:          0359 c218  st   [$18]       1612  st([vAC])                       #10
              035a 0000  ld   $00         1613  ld(0)                           #11
              035b c219  st   [$19]       1614  st([vAC+1])                     #12
              035c fc00  bra  NEXTY       1615  bra('NEXTY')                    #13
              035d 00f8  ld   $f8         1616  ld(-16/2)                       #14
                                          1617
                                          1618  # Instruction ST: Store byte in zero page ([D]=vAC&255), 16 cycles
                                          1619  label('ST')
ST:           035e 1200  ld   ac,x        1620  ld(AC,X)                        #10,15
              035f 0118  ld   [$18]       1621  ld([vAC])                       #11
              0360 c600  st   [x]         1622  st([X])                         #12
              0361 fc00  bra  NEXTY       1623  bra('NEXTY')                    #13
              0362 00f8  ld   $f8         1624  ld(-16/2)                       #14
                                          1625
                                          1626  # Instruction POP: Pop address from stack (vLR,vSP==[vSP]+256*[vSP+1],vSP+2), 26 cycles
                                          1627  label('POP')
POP:          0363 111c  ld   [$1c],x     1628  ld([vSP],X)                     #10,15
              0364 0500  ld   [x]         1629  ld([X])                         #11
              0365 c21a  st   [$1a]       1630  st([vLR])                       #12
              0366 011c  ld   [$1c]       1631  ld([vSP])                       #13
              0367 9001  adda $01,x       1632  adda(1,X)                       #14
              0368 0500  ld   [x]         1633  ld([X])                         #15
              0369 c21b  st   [$1b]       1634  st([vLR+1])                     #16
              036a 011c  ld   [$1c]       1635  ld([vSP])                       #17
              036b 8002  adda $02         1636  adda(2)                         #18
              036c c21c  st   [$1c]       1637  st([vSP])                       #19
                                          1638  label('.pop#20')
.pop#20:      036d 0116  ld   [$16]       1639  ld([vPC])                       #20
              036e a001  suba $01         1640  suba(1)                         #21
              036f c216  st   [$16]       1641  st([vPC])                       #22
              0370 fc00  bra  NEXTY       1642  bra('NEXTY')                    #23
              0371 00f3  ld   $f3         1643  ld(-26/2)                       #24
                                          1644
                                          1645  # Conditional NE: Branch if not zero (if(vACL!=0)vPCL=D)
                                          1646  label('NE')
NE:           0372 f045  beq  .bcc#22     1647  beq('.bcc#22')                  #20,25
              0373 ec48  bne  .bcc#23     1648  bne('.bcc#23')                  #21
              0374 0d00  ld   [y,x]       1649  ld([Y,X])                       #22
                                          1650
                                          1651  # Instruction PUSH: Push vLR on stack ([vSP-2],v[vSP-1],vSP=vLR&255,vLR>>8,vLR-2), 26 cycles
                                          1652  label('PUSH')
PUSH:         0375 011c  ld   [$1c]       1653  ld([vSP])                       #10
              0376 b001  suba $01,x       1654  suba(1,X)                       #11
              0377 011b  ld   [$1b]       1655  ld([vLR+1])                     #12
              0378 c600  st   [x]         1656  st([X])                         #13
              0379 011c  ld   [$1c]       1657  ld([vSP])                       #14
              037a a002  suba $02         1658  suba(2)                         #15
              037b d21c  st   [$1c],x     1659  st([vSP],X)                     #16
              037c 011a  ld   [$1a]       1660  ld([vLR])                       #17
              037d fc6d  bra  .pop#20     1661  bra('.pop#20')                  #18
              037e c600  st   [x]         1662  st([X])                         #19
                                          1663
                                          1664  # Instruction LUP: ROM lookup (vAC=ROM[vAC+D]), 26 cycles
                                          1665  label('LUP')
LUP:          037f 1519  ld   [$19],y     1666  ld([vAC+1],Y)                   #10
              0380 e0fb  jmp  y,$fb       1667  jmp(Y,251)                      #11 Trampoline offset
              0381 8118  adda [$18]       1668  adda([vAC])                     #12
                                          1669
                                          1670  # Instruction ANDI: Logical-AND with small constant (vAC&=D), 22 cycles
                                          1671  label('ANDI')
ANDI:         0382 1404  ld   $04,y       1672  ld(hi('andi#13'),Y)             #10
              0383 e011  jmp  y,$11       1673  jmp(Y,'andi#13')                #11
              0384 2118  anda [$18]       1674  anda([vAC])                     #12
                                          1675
                                          1676  # Instruction CALLI: Goto immediate address and remember vPC (vLR,vPC=vPC+3,$HHLL-2), 28 cycles
                                          1677  label('CALLI_DEVROM')
CALLI_DEVROM: 0385 140b  ld   $0b,y       1678  ld(hi('calli#13'),Y)            #10
              0386 e0b0  jmp  y,$b0       1679  jmp(Y,'calli#13')               #11
              0387 0116  ld   [$16]       1680  ld([vPC])                       #12
                                          1681
                                          1682  # Instruction ORI: Logical-OR with small constant (vAC|=D), 14 cycles
                                          1683  label('ORI')
ORI:          0388 4118  ora  [$18]       1684  ora([vAC])                      #10
              0389 c218  st   [$18]       1685  st([vAC])                       #11
              038a fc01  bra  NEXT        1686  bra('NEXT')                     #12
              038b 00f9  ld   $f9         1687  ld(-14/2)                       #13
                                          1688
                                          1689  # Instruction XORI: Logical-XOR with small constant (vAC^=D), 14 cycles
                                          1690  label('XORI')
XORI:         038c 6118  xora [$18]       1691  xora([vAC])                     #10
              038d c218  st   [$18]       1692  st([vAC])                       #11
              038e fc01  bra  NEXT        1693  bra('NEXT')                     #12
              038f 00f9  ld   $f9         1694  ld(-14/2)                       #13
                                          1695
                                          1696  # Instruction BRA: Branch unconditionally (vPC=(vPC&0xff00)+D), 14 cycles
                                          1697  label('BRA')
BRA:          0390 c216  st   [$16]       1698  st([vPC])                       #10
              0391 fc00  bra  NEXTY       1699  bra('NEXTY')                    #11
              0392 00f9  ld   $f9         1700  ld(-14/2)                       #12
                                          1701
                                          1702  # Instruction INC: Increment zero page byte ([D]++), 20 cycles
                                          1703  label('INC')
INC:          0393 1200  ld   ac,x        1704  ld(AC,X)                        #10,13
              0394 1404  ld   $04,y       1705  ld(hi('inc#14'),Y)              #11
              0395 e0e4  jmp  y,$e4       1706  jmp(Y,'inc#14')                 #12
              0396 0001  ld   $01         1707  ld(1)                           #13
                                          1708
                                          1709  # Instruction CMPHU: Adjust high byte for unsigned compare (vACH=XXX), 28 cycles
                                          1710  label('CMPHU_DEVROM')
CMPHU_DEVROM: 0397 140b  ld   $0b,y       1711  ld(hi('cmphu#13'),Y)            #10
              0398 e0c8  jmp  y,$c8       1712  jmp(Y,'cmphu#13')               #11
                                          1713  #ld(AC,X)                       #12 Overlap
                                          1714  #
                                          1715  # Instruction ADDW: Word addition with zero page (vAC+=[D]+256*[D+1]), 28 cycles
                                          1716  label('ADDW')
                                          1717  # The non-carry paths could be 26 cycles at the expense of (much) more code.
                                          1718  # But a smaller size is better so more instructions fit in this code page.
                                          1719  # 28 cycles is still 4.5 usec. The 6502 equivalent takes 20 cycles or 20 usec.
ADDW:         0399 1200  ld   ac,x        1720  ld(AC,X)                        #10,12 Address of low byte to be added
              039a 8001  adda $01         1721  adda(1)                         #11
              039b c21d  st   [$1d]       1722  st([vTmp])                      #12 Address of high byte to be added
              039c 0118  ld   [$18]       1723  ld([vAC])                       #13 Add the low bytes
              039d 8500  adda [x]         1724  adda([X])                       #14
              039e c218  st   [$18]       1725  st([vAC])                       #15 Store low result
              039f e8a3  blt  .addw#18    1726  bmi('.addw#18')                 #16 Now figure out if there was a carry
              03a0 a500  suba [x]         1727  suba([X])                       #17 Gets back the initial value of vAC
              03a1 fca5  bra  .addw#20    1728  bra('.addw#20')                 #18
              03a2 4500  ora  [x]         1729  ora([X])                        #19 Carry in bit 7
                                          1730  label('.addw#18')
.addw#18:     03a3 2500  anda [x]         1731  anda([X])                       #18 Carry in bit 7
              03a4 0200  nop              1732  nop()                           #19
                                          1733  label('.addw#20')
.addw#20:     03a5 3080  anda $80,x       1734  anda(0x80,X)                    #20 Move carry to bit 0
              03a6 0500  ld   [x]         1735  ld([X])                         #21
              03a7 8119  adda [$19]       1736  adda([vAC+1])                   #22 Add the high bytes with carry
              03a8 111d  ld   [$1d],x     1737  ld([vTmp],X)                    #23
              03a9 8500  adda [x]         1738  adda([X])                       #24
              03aa c219  st   [$19]       1739  st([vAC+1])                     #25 Store high result
              03ab fc01  bra  NEXT        1740  bra('NEXT')                     #26
              03ac 00f2  ld   $f2         1741  ld(-28/2)                       #27
                                          1742
                                          1743  # Instruction PEEK: Read byte from memory (vAC=[vAC]), 26 cycles
                                          1744  label('PEEK')
PEEK:         03ad 1404  ld   $04,y       1745  ld(hi('peek'),Y)                #10
              03ae e062  jmp  y,$62       1746  jmp(Y,'peek')                   #11
                                          1747  #ld([vPC])                      #12 Overlap
                                          1748  #
                                          1749  # Instruction SYS: Native call, <=256 cycles (<=128 ticks, in reality less)
                                          1750  #
                                          1751  # The 'SYS' vCPU instruction first checks the number of desired ticks given by
                                          1752  # the operand. As long as there are insufficient ticks available in the current
                                          1753  # time slice, the instruction will be retried. This will effectively wait for
                                          1754  # the next scan line if the current slice is almost out of time. Then a jump to
                                          1755  # native code is made. This code can do whatever it wants, but it must return
                                          1756  # to the 'REENTER' label when done. When returning, AC must hold (the negative
                                          1757  # of) the actual consumed number of whole ticks for the entire virtual
                                          1758  # instruction cycle (from NEXT to NEXT). This duration may not exceed the prior
                                          1759  # declared duration in the operand + 28 (or maxTicks). The operand specifies the
                                          1760  # (negative) of the maximum number of *extra* ticks that the native call will
                                          1761  # need. The GCL compiler automatically makes this calculation from gross number
                                          1762  # of cycles to excess number of ticks.
                                          1763  # SYS functions can modify vPC to implement repetition. For example to split
                                          1764  # up work into multiple chucks.
                                          1765  label('.sys#13')
.sys#13:      03af 0116  ld   [$16]       1766  ld([vPC])                       #13,12 Retry until sufficient time
              03b0 a002  suba $02         1767  suba(2)                         #14
              03b1 c216  st   [$16]       1768  st([vPC])                       #15
              03b2 fccb  bra  REENTER     1769  bra('REENTER')                  #16
              03b3 00f6  ld   $f6         1770  ld(-20/2)                       #17
                                          1771  label('SYS')
SYS:          03b4 8115  adda [$15]       1772  adda([vTicks])                  #10
              03b5 e8af  blt  .sys#13     1773  blt('.sys#13')                  #11
              03b6 1523  ld   [$23],y     1774  ld([sysFn+1],Y)                 #12
              03b7 e122  jmp  y,[$22]     1775  jmp(Y,[sysFn])                  #13
                                          1776  #dummy()                        #14 Overlap
                                          1777  #
                                          1778  # Instruction SUBW: Word subtract with zero page (AC-=[D]+256*[D+1]), 28 cycles
                                          1779  # All cases can be done in 26 cycles, but the code will become much larger
                                          1780  label('SUBW')
SUBW:         03b8 1200  ld   ac,x        1781  ld(AC,X)                        #10,14 Address of low byte to be subtracted
              03b9 8001  adda $01         1782  adda(1)                         #11
              03ba c21d  st   [$1d]       1783  st([vTmp])                      #12 Address of high byte to be subtracted
              03bb 0118  ld   [$18]       1784  ld([vAC])                       #13
              03bc e8c1  blt  .subw#16    1785  bmi('.subw#16')                 #14
              03bd a500  suba [x]         1786  suba([X])                       #15
              03be c218  st   [$18]       1787  st([vAC])                       #16 Store low result
              03bf fcc4  bra  .subw#19    1788  bra('.subw#19')                 #17
              03c0 4500  ora  [x]         1789  ora([X])                        #18 Carry in bit 7
                                          1790  label('.subw#16')
.subw#16:     03c1 c218  st   [$18]       1791  st([vAC])                       #16 Store low result
              03c2 2500  anda [x]         1792  anda([X])                       #17 Carry in bit 7
              03c3 0200  nop              1793  nop()                           #18
                                          1794  label('.subw#19')
.subw#19:     03c4 3080  anda $80,x       1795  anda(0x80,X)                    #19 Move carry to bit 0
              03c5 0119  ld   [$19]       1796  ld([vAC+1])                     #20
              03c6 a500  suba [x]         1797  suba([X])                       #21
              03c7 111d  ld   [$1d],x     1798  ld([vTmp],X)                    #22
              03c8 a500  suba [x]         1799  suba([X])                       #23
              03c9 c219  st   [$19]       1800  st([vAC+1])                     #24
                                          1801  label('REENTER_28')
REENTER_28:   03ca 00f2  ld   $f2         1802  ld(-28/2)                       #25
                                          1803  label('REENTER')
REENTER:      03cb fc01  bra  NEXT        1804  bra('NEXT')                     #26 Return from SYS calls
              03cc 1517  ld   [$17],y     1805  ld([vPC+1],Y)                   #27
                                          1806
                                          1807  # Instruction DEF: Define data or code (vAC,vPC=vPC+2,(vPC&0xff00)+D), 24 cycles
                                          1808  label('DEF')
DEF:          03cd 1404  ld   $04,y       1809  ld(hi('def#13'),Y)              #10
              03ce e007  jmp  y,$07       1810  jmp(Y,'def#13')                 #11
                                          1811  #st([vTmp])                     #12 Overlap
                                          1812  #
                                          1813  # Instruction CALL: Goto address and remember vPC (vLR,vPC=vPC+2,[D]+256*[D+1]-2), 26 cycles
                                          1814  label('CALL')
CALL:         03cf c21d  st   [$1d]       1815  st([vTmp])                      #10,12
              03d0 0116  ld   [$16]       1816  ld([vPC])                       #11
              03d1 8002  adda $02         1817  adda(2)                         #12 Point to instruction after CALL
              03d2 c21a  st   [$1a]       1818  st([vLR])                       #13
              03d3 0117  ld   [$17]       1819  ld([vPC+1])                     #14
              03d4 c21b  st   [$1b]       1820  st([vLR+1])                     #15
              03d5 111d  ld   [$1d],x     1821  ld([vTmp],X)                    #16
              03d6 0500  ld   [x]         1822  ld([X])                         #17
              03d7 a002  suba $02         1823  suba(2)                         #18 Because NEXT will add 2
              03d8 c216  st   [$16]       1824  st([vPC])                       #19
              03d9 011d  ld   [$1d]       1825  ld([vTmp])                      #20
              03da 9001  adda $01,x       1826  adda(1,X)                       #21
              03db 0500  ld   [x]         1827  ld([X])                         #22
              03dc d617  st   [$17],y     1828  st([vPC+1],Y)                   #23
              03dd fc01  bra  NEXT        1829  bra('NEXT')                     #24
              03de 00f3  ld   $f3         1830  ld(-26/2)                       #25
                                          1831
                                          1832  # Instruction ALLOC: Create or destroy stack frame (vSP+=D), 14 cycles
                                          1833  label('ALLOC')
ALLOC:        03df 811c  adda [$1c]       1834  adda([vSP])                     #10
              03e0 c21c  st   [$1c]       1835  st([vSP])                       #11
              03e1 fc01  bra  NEXT        1836  bra('NEXT')                     #12
              03e2 00f9  ld   $f9         1837  ld(-14/2)                       #13
                                          1838
                                          1839  # The instructions below are all implemented in the second code page. Jumping
                                          1840  # back and forth makes each 6 cycles slower, but it also saves space in the
                                          1841  # primary page for the instructions above. Most of them are in fact not very
                                          1842  # critical, as evidenced by the fact that they weren't needed for the first
                                          1843  # Gigatron applications (Snake, Racer, Mandelbrot, Loader). By providing them
                                          1844  # in this way, at least they don't need to be implemented as a SYS extension.
                                          1845
                                          1846  # Instruction ADDI: Add small positive constant (vAC+=D), 28 cycles
                                          1847  label('ADDI')
ADDI:         03e3 1404  ld   $04,y       1848  ld(hi('addi'),Y)                #10
              03e4 e018  jmp  y,$18       1849  jmp(Y,'addi')                   #11
              03e5 c21d  st   [$1d]       1850  st([vTmp])                      #12
                                          1851
                                          1852  # Instruction SUBI: Subtract small positive constant (vAC+=D), 28 cycles
                                          1853  label('SUBI')
SUBI:         03e6 1404  ld   $04,y       1854  ld(hi('subi'),Y)                #10
              03e7 e026  jmp  y,$26       1855  jmp(Y,'subi')                   #11
              03e8 c21d  st   [$1d]       1856  st([vTmp])                      #12
                                          1857
                                          1858  # Instruction LSLW: Logical shift left (vAC<<=1), 28 cycles
                                          1859  # Useful, because ADDW can't add vAC to itself. Also more compact.
                                          1860  label('LSLW')
LSLW:         03e9 1404  ld   $04,y       1861  ld(hi('lslw'),Y)                #10
              03ea e035  jmp  y,$35       1862  jmp(Y,'lslw')                   #11
              03eb 0118  ld   [$18]       1863  ld([vAC])                       #12
                                          1864
                                          1865  # Instruction STLW: Store word in stack frame ([vSP+D],[vSP+D+1]=vAC&255,vAC>>8), 26 cycles
                                          1866  label('STLW')
STLW:         03ec 1404  ld   $04,y       1867  ld(hi('stlw'),Y)                #10
              03ed e041  jmp  y,$41       1868  jmp(Y,'stlw')                   #11
                                          1869  #dummy()                        #12 Overlap
                                          1870  #
                                          1871  # Instruction LDLW: Load word from stack frame (vAC=[vSP+D]+256*[vSP+D+1]), 26 cycles
                                          1872  label('LDLW')
LDLW:         03ee 1404  ld   $04,y       1873  ld(hi('ldlw'),Y)                #10,12
              03ef e04c  jmp  y,$4c       1874  jmp(Y,'ldlw')                   #11
                                          1875  #dummy()                        #12 Overlap
                                          1876  #
                                          1877  # Instruction POKE: Write byte in memory ([[D+1],[D]]=vAC&255), 28 cycles
                                          1878  label('POKE')
POKE:         03f0 1404  ld   $04,y       1879  ld(hi('poke'),Y)                #10,12
              03f1 e057  jmp  y,$57       1880  jmp(Y,'poke')                   #11
              03f2 c21d  st   [$1d]       1881  st([vTmp])                      #12
                                          1882
                                          1883  # Instruction DOKE: Write word in memory ([[D+1],[D]],[[D+1],[D]+1]=vAC&255,vAC>>8), 28 cycles
                                          1884  label('DOKE')
DOKE:         03f3 1404  ld   $04,y       1885  ld(hi('doke'),Y)                #10
              03f4 e06d  jmp  y,$6d       1886  jmp(Y,'doke')                   #11
              03f5 c21d  st   [$1d]       1887  st([vTmp])                      #12
                                          1888
                                          1889  # Instruction DEEK: Read word from memory (vAC=[vAC]+256*[vAC+1]), 28 cycles
                                          1890  label('DEEK')
DEEK:         03f6 1404  ld   $04,y       1891  ld(hi('deek'),Y)                #10
              03f7 e07a  jmp  y,$7a       1892  jmp(Y,'deek')                   #11
                                          1893  #dummy()                        #12 Overlap
                                          1894  #
                                          1895  # Instruction ANDW: Word logical-AND with zero page (vAC&=[D]+256*[D+1]), 28 cycles
                                          1896  label('ANDW')
ANDW:         03f8 1404  ld   $04,y       1897  ld(hi('andw'),Y)                #10,12
              03f9 e086  jmp  y,$86       1898  jmp(Y,'andw')                   #11
                                          1899  #dummy()                        #12 Overlap
                                          1900  #
                                          1901  # Instruction ORW: Word logical-OR with zero page (vAC|=[D]+256*[D+1]), 28 cycles
                                          1902  label('ORW')
ORW:          03fa 1404  ld   $04,y       1903  ld(hi('orw'),Y)                 #10,12
              03fb e091  jmp  y,$91       1904  jmp(Y,'orw')                    #11
                                          1905  #dummy()                        #12 Overlap
                                          1906  #
                                          1907  # Instruction XORW: Word logical-XOR with zero page (vAC^=[D]+256*[D+1]), 26 cycles
                                          1908  label('XORW')
XORW:         03fc 1404  ld   $04,y       1909  ld(hi('xorw'),Y)                #10,12
              03fd e09c  jmp  y,$9c       1910  jmp(Y,'xorw')                   #11
              03fe c21d  st   [$1d]       1911  st([vTmp])                      #12
                                          1912  # We keep XORW 2 cycles faster than ANDW/ORW, because that
                                          1913  # can be useful for comparing numbers for equality a tiny
                                          1914  # bit faster than with SUBW
                                          1915
                                          1916  # Instruction RET: Function return (vPC=vLR-2), 16 cycles
                                          1917  label('RET')
RET:          03ff 011a  ld   [$1a]       1918  ld([vLR])                       #10
                                          1919  assert pc()&255 == 0
                                          1920
                                          1921  #-----------------------------------------------------------------------
                                          1922  #
                                          1923  #  $0400 ROM page 4: Application interpreter extension
                                          1924  #
                                          1925  #-----------------------------------------------------------------------
                                          1926  align(0x100, size=0x100)
                                          1927
                                          1928  # (Continue RET)
              0400 a002  suba $02         1929  suba(2)                         #11
              0401 c216  st   [$16]       1930  st([vPC])                       #12
              0402 011b  ld   [$1b]       1931  ld([vLR+1])                     #13
              0403 c217  st   [$17]       1932  st([vPC+1])                     #14
              0404 1403  ld   $03,y       1933  ld(hi('REENTER'),Y)             #15
              0405 e0cb  jmp  y,$cb       1934  jmp(Y,'REENTER')                #16
              0406 00f6  ld   $f6         1935  ld(-20/2)                       #17
                                          1936
                                          1937  # DEF implementation
                                          1938  label('def#13')
def#13:       0407 0116  ld   [$16]       1939  ld([vPC])                       #13
              0408 8002  adda $02         1940  adda(2)                         #14
              0409 c218  st   [$18]       1941  st([vAC])                       #15
              040a 0117  ld   [$17]       1942  ld([vPC+1])                     #16
              040b c219  st   [$19]       1943  st([vAC+1])                     #17
              040c 011d  ld   [$1d]       1944  ld([vTmp])                      #18
              040d c216  st   [$16]       1945  st([vPC])                       #19
              040e 1403  ld   $03,y       1946  ld(hi('NEXTY'),Y)               #20
              040f e000  jmp  y,$00       1947  jmp(Y,'NEXTY')                  #21
              0410 00f4  ld   $f4         1948  ld(-24/2)                       #22
                                          1949
                                          1950  # Clear vACH (continuation of ANDI and LD instructions)
                                          1951  label('andi#13')
andi#13:      0411 0200  nop              1952  nop()                           #13
              0412 c218  st   [$18]       1953  st([vAC])                       #14
                                          1954  #
                                          1955  label('ld#15')
ld#15:        0413 0000  ld   $00         1956  ld(0)                           #15 Clear high byte
              0414 c219  st   [$19]       1957  st([vAC+1])                     #16
              0415 1403  ld   $03,y       1958  ld(hi('REENTER'),Y)             #17
              0416 e0cb  jmp  y,$cb       1959  jmp(Y,'REENTER')                #18
              0417 00f5  ld   $f5         1960  ld(-22/2)                       #19
                                          1961
                                          1962  # ADDI implementation
                                          1963  label('addi')
addi:         0418 8118  adda [$18]       1964  adda([vAC])                     #13
              0419 c218  st   [$18]       1965  st([vAC])                       #14 Store low result
              041a e81e  blt  .addi#17    1966  bmi('.addi#17')                 #15 Now figure out if there was a carry
              041b a11d  suba [$1d]       1967  suba([vTmp])                    #16 Gets back the initial value of vAC
              041c fc20  bra  .addi#19    1968  bra('.addi#19')                 #17
              041d 411d  ora  [$1d]       1969  ora([vTmp])                     #18 Carry in bit 7
                                          1970  label('.addi#17')
.addi#17:     041e 211d  anda [$1d]       1971  anda([vTmp])                    #17 Carry in bit 7
              041f 0200  nop              1972  nop()                           #18
                                          1973  label('.addi#19')
.addi#19:     0420 3080  anda $80,x       1974  anda(0x80,X)                    #19 Move carry to bit 0
              0421 0500  ld   [x]         1975  ld([X])                         #20
              0422 8119  adda [$19]       1976  adda([vAC+1])                   #21 Add the high bytes with carry
              0423 1403  ld   $03,y       1977  ld(hi('REENTER_28'),Y)          #22
              0424 e0ca  jmp  y,$ca       1978  jmp(Y,'REENTER_28')             #23
              0425 c219  st   [$19]       1979  st([vAC+1])                     #24 Store high result
                                          1980
                                          1981  # SUBI implementation
                                          1982  label('subi')
subi:         0426 0118  ld   [$18]       1983  ld([vAC])                       #13
              0427 e82c  blt  .subi#16    1984  bmi('.subi#16')                 #14
              0428 a11d  suba [$1d]       1985  suba([vTmp])                    #15
              0429 c218  st   [$18]       1986  st([vAC])                       #16 Store low result
              042a fc2f  bra  .subi#19    1987  bra('.subi#19')                 #17
              042b 411d  ora  [$1d]       1988  ora([vTmp])                     #18 Carry in bit 7
                                          1989  label('.subi#16')
.subi#16:     042c c218  st   [$18]       1990  st([vAC])                       #16 Store low result
              042d 211d  anda [$1d]       1991  anda([vTmp])                    #17 Carry in bit 7
              042e 0200  nop              1992  nop()                           #18
                                          1993  label('.subi#19')
.subi#19:     042f 3080  anda $80,x       1994  anda(0x80,X)                    #19 Move carry to bit 0
              0430 0119  ld   [$19]       1995  ld([vAC+1])                     #20
              0431 a500  suba [x]         1996  suba([X])                       #21
              0432 1403  ld   $03,y       1997  ld(hi('REENTER_28'),Y)          #22
              0433 e0ca  jmp  y,$ca       1998  jmp(Y,'REENTER_28')             #23
              0434 c219  st   [$19]       1999  st([vAC+1])                     #24
                                          2000
                                          2001  # LSLW implementation
                                          2002  label('lslw')
lslw:         0435 3080  anda $80,x       2003  anda(128,X)                     #13
              0436 8118  adda [$18]       2004  adda([vAC])                     #14
              0437 c218  st   [$18]       2005  st([vAC])                       #15
              0438 0500  ld   [x]         2006  ld([X])                         #16
              0439 8119  adda [$19]       2007  adda([vAC+1])                   #17
              043a 8119  adda [$19]       2008  adda([vAC+1])                   #18
              043b c219  st   [$19]       2009  st([vAC+1])                     #19
              043c 0116  ld   [$16]       2010  ld([vPC])                       #20
              043d a001  suba $01         2011  suba(1)                         #21
              043e 1403  ld   $03,y       2012  ld(hi('REENTER_28'),Y)          #22
              043f e0ca  jmp  y,$ca       2013  jmp(Y,'REENTER_28')             #23
              0440 c216  st   [$16]       2014  st([vPC])                       #24
                                          2015
                                          2016  # STLW implementation
                                          2017  label('stlw')
stlw:         0441 811c  adda [$1c]       2018  adda([vSP])                     #13
              0442 c21d  st   [$1d]       2019  st([vTmp])                      #14
              0443 9001  adda $01,x       2020  adda(1,X)                       #15
              0444 0119  ld   [$19]       2021  ld([vAC+1])                     #16
              0445 c600  st   [x]         2022  st([X])                         #17
              0446 111d  ld   [$1d],x     2023  ld([vTmp],X)                    #18
              0447 0118  ld   [$18]       2024  ld([vAC])                       #19
              0448 c600  st   [x]         2025  st([X])                         #20
              0449 1403  ld   $03,y       2026  ld(hi('REENTER'),Y)             #21
              044a e0cb  jmp  y,$cb       2027  jmp(Y,'REENTER')                #22
              044b 00f3  ld   $f3         2028  ld(-26/2)                       #23
                                          2029
                                          2030  # LDLW implementation
                                          2031  label('ldlw')
ldlw:         044c 811c  adda [$1c]       2032  adda([vSP])                     #13
              044d c21d  st   [$1d]       2033  st([vTmp])                      #14
              044e 9001  adda $01,x       2034  adda(1,X)                       #15
              044f 0500  ld   [x]         2035  ld([X])                         #16
              0450 c219  st   [$19]       2036  st([vAC+1])                     #17
              0451 111d  ld   [$1d],x     2037  ld([vTmp],X)                    #18
              0452 0500  ld   [x]         2038  ld([X])                         #19
              0453 c218  st   [$18]       2039  st([vAC])                       #20
              0454 1403  ld   $03,y       2040  ld(hi('REENTER'),Y)             #21
              0455 e0cb  jmp  y,$cb       2041  jmp(Y,'REENTER')                #22
              0456 00f3  ld   $f3         2042  ld(-26/2)                       #23
                                          2043
                                          2044  # POKE implementation
                                          2045  label('poke')
poke:         0457 9001  adda $01,x       2046  adda(1,X)                       #13
              0458 0500  ld   [x]         2047  ld([X])                         #14
              0459 1600  ld   ac,y        2048  ld(AC,Y)                        #15
              045a 111d  ld   [$1d],x     2049  ld([vTmp],X)                    #16
              045b 0500  ld   [x]         2050  ld([X])                         #17
              045c 1200  ld   ac,x        2051  ld(AC,X)                        #18
              045d 0118  ld   [$18]       2052  ld([vAC])                       #19
              045e ce00  st   [y,x]       2053  st([Y,X])                       #20
              045f 1403  ld   $03,y       2054  ld(hi('REENTER'),Y)             #21
              0460 e0cb  jmp  y,$cb       2055  jmp(Y,'REENTER')                #22
              0461 00f3  ld   $f3         2056  ld(-26/2)                       #23
                                          2057
                                          2058  # PEEK implementation
                                          2059  label('peek')
peek:         0462 a001  suba $01         2060  suba(1)                         #13
              0463 c216  st   [$16]       2061  st([vPC])                       #14
              0464 1118  ld   [$18],x     2062  ld([vAC],X)                     #15
              0465 1519  ld   [$19],y     2063  ld([vAC+1],Y)                   #16
              0466 0d00  ld   [y,x]       2064  ld([Y,X])                       #17
              0467 c218  st   [$18]       2065  st([vAC])                       #18
                                          2066  label('lupReturn#19')           #Nice coincidence that lupReturn can be here
lupReturn#19: 0468 0000  ld   $00         2067  ld(0)                           #19
              0469 c219  st   [$19]       2068  st([vAC+1])                     #20
              046a 1403  ld   $03,y       2069  ld(hi('REENTER'),Y)             #21
              046b e0cb  jmp  y,$cb       2070  jmp(Y,'REENTER')                #22
              046c 00f3  ld   $f3         2071  ld(-26/2)                       #23
                                          2072
                                          2073  # DOKE implementation
                                          2074  label('doke')
doke:         046d 9001  adda $01,x       2075  adda(1,X)                       #13
              046e 0500  ld   [x]         2076  ld([X])                         #14
              046f 1600  ld   ac,y        2077  ld(AC,Y)                        #15
              0470 111d  ld   [$1d],x     2078  ld([vTmp],X)                    #16
              0471 0500  ld   [x]         2079  ld([X])                         #17
              0472 1200  ld   ac,x        2080  ld(AC,X)                        #18
              0473 0118  ld   [$18]       2081  ld([vAC])                       #19
              0474 de00  st   [y,x++]     2082  st([Y,Xpp])                     #20
              0475 0119  ld   [$19]       2083  ld([vAC+1])                     #21
              0476 ce00  st   [y,x]       2084  st([Y,X])                       #22 Incompatible with REENTER_28
              0477 1403  ld   $03,y       2085  ld(hi('REENTER'),Y)             #23
              0478 e0cb  jmp  y,$cb       2086  jmp(Y,'REENTER')                #24
              0479 00f2  ld   $f2         2087  ld(-28/2)                       #25
                                          2088
                                          2089  # DEEK implementation
                                          2090  label('deek')
deek:         047a 0116  ld   [$16]       2091  ld([vPC])                       #13
              047b a001  suba $01         2092  suba(1)                         #14
              047c c216  st   [$16]       2093  st([vPC])                       #15
              047d 1118  ld   [$18],x     2094  ld([vAC],X)                     #16
              047e 1519  ld   [$19],y     2095  ld([vAC+1],Y)                   #17
              047f 0d00  ld   [y,x]       2096  ld([Y,X])                       #18
              0480 de00  st   [y,x++]     2097  st([Y,Xpp])                     #19 Just X++
              0481 c218  st   [$18]       2098  st([vAC])                       #20
              0482 0d00  ld   [y,x]       2099  ld([Y,X])                       #21
              0483 1403  ld   $03,y       2100  ld(hi('REENTER_28'),Y)          #22
              0484 e0ca  jmp  y,$ca       2101  jmp(Y,'REENTER_28')             #23
              0485 c219  st   [$19]       2102  st([vAC+1])                     #24
                                          2103
                                          2104  # ANDW implementation
                                          2105  label('andw')
andw:         0486 c21d  st   [$1d]       2106  st([vTmp])                      #13
              0487 9001  adda $01,x       2107  adda(1,X)                       #14
              0488 0500  ld   [x]         2108  ld([X])                         #15
              0489 2119  anda [$19]       2109  anda([vAC+1])                   #16
              048a c219  st   [$19]       2110  st([vAC+1])                     #17
              048b 111d  ld   [$1d],x     2111  ld([vTmp],X)                    #18
              048c 0500  ld   [x]         2112  ld([X])                         #19
              048d 2118  anda [$18]       2113  anda([vAC])                     #20
              048e c218  st   [$18]       2114  st([vAC])                       #21
              048f 1403  ld   $03,y       2115  ld(hi('REENTER_28'),Y)          #22
              0490 e0ca  jmp  y,$ca       2116  jmp(Y,'REENTER_28')             #23
                                          2117  #dummy()                        #24 Overlap
                                          2118  #
                                          2119  # ORW implementation
                                          2120  label('orw')
orw:          0491 c21d  st   [$1d]       2121  st([vTmp])                      #13,24
              0492 9001  adda $01,x       2122  adda(1,X)                       #14
              0493 0500  ld   [x]         2123  ld([X])                         #15
              0494 4119  ora  [$19]       2124  ora([vAC+1])                    #16
              0495 c219  st   [$19]       2125  st([vAC+1])                     #17
              0496 111d  ld   [$1d],x     2126  ld([vTmp],X)                    #18
              0497 0500  ld   [x]         2127  ld([X])                         #19
              0498 4118  ora  [$18]       2128  ora([vAC])                      #20
              0499 c218  st   [$18]       2129  st([vAC])                       #21
              049a 1403  ld   $03,y       2130  ld(hi('REENTER_28'),Y)          #22
              049b e0ca  jmp  y,$ca       2131  jmp(Y,'REENTER_28')             #23
                                          2132  #dummy()                        #24 Overlap
                                          2133  #
                                          2134  # XORW implementation
                                          2135  label('xorw')
xorw:         049c 9001  adda $01,x       2136  adda(1,X)                       #13,24
              049d 0500  ld   [x]         2137  ld([X])                         #14
              049e 6119  xora [$19]       2138  xora([vAC+1])                   #15
              049f c219  st   [$19]       2139  st([vAC+1])                     #16
              04a0 111d  ld   [$1d],x     2140  ld([vTmp],X)                    #17
              04a1 0500  ld   [x]         2141  ld([X])                         #18
              04a2 6118  xora [$18]       2142  xora([vAC])                     #19
              04a3 c218  st   [$18]       2143  st([vAC])                       #20
              04a4 1403  ld   $03,y       2144  ld(hi('REENTER'),Y)             #21
              04a5 e0cb  jmp  y,$cb       2145  jmp(Y,'REENTER')                #22
              04a6 00f3  ld   $f3         2146  ld(-26/2)                       #23
                                          2147
                                          2148  #-----------------------------------------------------------------------
                                          2149  #
                                          2150  #  vCPU extension functions (for acceleration and compaction) follow below.
                                          2151  #
                                          2152  #  The naming convention is: SYS_<CamelCase>[_v<V>]_<N>
                                          2153  #
                                          2154  #  With <N> the maximum number of cycles the function will run
                                          2155  #  (counted from NEXT to NEXT). This is the same number that must
                                          2156  #  be passed to the 'SYS' vCPU instruction as operand, and it will
                                          2157  #  appear in the GCL code upon use.
                                          2158  #
                                          2159  #  If a SYS extension got introduced after ROM v1, the version number of
                                          2160  #  introduction is included in the name. This helps the programmer to be
                                          2161  #  reminded to verify the acutal ROM version and fail gracefully on older
                                          2162  #  ROMs than required. See also Docs/GT1-files.txt on using [romType].
                                          2163  #
                                          2164  #-----------------------------------------------------------------------
                                          2165
                                          2166  #-----------------------------------------------------------------------
                                          2167  # Extension SYS_Random_34: Update entropy and copy to vAC
                                          2168  #-----------------------------------------------------------------------
                                          2169
                                          2170  # This same algorithm runs automatically once per vertical blank.
                                          2171  # Use this function to get numbers at a higher rate.
                                          2172  #
                                          2173  # Variables:
                                          2174  #       vAC
                                          2175
                                          2176  label('SYS_Random_34')
SYS_Random_34:
              04a7 010e  ld   [$0e]       2177  ld([frameCount])                #15
              04a8 6107  xora [$07]       2178  xora([entropy+1])               #16
              04a9 610f  xora [$0f]       2179  xora([serialRaw])               #17
              04aa 8106  adda [$06]       2180  adda([entropy+0])               #18
              04ab c206  st   [$06]       2181  st([entropy+0])                 #19
              04ac c218  st   [$18]       2182  st([vAC+0])                     #20
              04ad 8108  adda [$08]       2183  adda([entropy+2])               #21
              04ae c208  st   [$08]       2184  st([entropy+2])                 #22
              04af e8b2  blt  .sysRnd0    2185  bmi('.sysRnd0')                 #23
              04b0 fcb3  bra  .sysRnd1    2186  bra('.sysRnd1')                 #24
              04b1 6053  xora $53         2187  xora(64+16+2+1)                 #25
                                          2188  label('.sysRnd0')
.sysRnd0:     04b2 606c  xora $6c         2189  xora(64+32+8+4)                 #25
                                          2190  label('.sysRnd1')
.sysRnd1:     04b3 8107  adda [$07]       2191  adda([entropy+1])               #26
              04b4 c207  st   [$07]       2192  st([entropy+1])                 #27
              04b5 c219  st   [$19]       2193  st([vAC+1])                     #28
              04b6 1403  ld   $03,y       2194  ld(hi('REENTER'),Y)             #29
              04b7 e0cb  jmp  y,$cb       2195  jmp(Y,'REENTER')                #30
              04b8 00ef  ld   $ef         2196  ld(-34/2)                       #31
                                          2197
                                          2198  label('SYS_LSRW7_30')
SYS_LSRW7_30: 04b9 0118  ld   [$18]       2199  ld([vAC])                       #15
              04ba 3080  anda $80,x       2200  anda(128,X)                     #16
              04bb 0119  ld   [$19]       2201  ld([vAC+1])                     #17
              04bc 8200  adda ac          2202  adda(AC)                        #18
              04bd 4500  ora  [x]         2203  ora([X])                        #19
              04be c218  st   [$18]       2204  st([vAC])                       #20
              04bf 0119  ld   [$19]       2205  ld([vAC+1])                     #21
              04c0 3080  anda $80,x       2206  anda(128,X)                     #22
              04c1 0500  ld   [x]         2207  ld([X])                         #23
              04c2 c219  st   [$19]       2208  st([vAC+1])                     #24
              04c3 1403  ld   $03,y       2209  ld(hi('REENTER'),Y)             #25
              04c4 e0cb  jmp  y,$cb       2210  jmp(Y,'REENTER')                #26
              04c5 00f1  ld   $f1         2211  ld(-30/2)                       #27
                                          2212
                                          2213  label('SYS_LSRW8_24')
SYS_LSRW8_24: 04c6 0119  ld   [$19]       2214  ld([vAC+1])                     #15
              04c7 c218  st   [$18]       2215  st([vAC])                       #16
              04c8 0000  ld   $00         2216  ld(0)                           #17
              04c9 c219  st   [$19]       2217  st([vAC+1])                     #18
              04ca 1403  ld   $03,y       2218  ld(hi('REENTER'),Y)             #19
              04cb e0cb  jmp  y,$cb       2219  jmp(Y,'REENTER')                #20
              04cc 00f4  ld   $f4         2220  ld(-24/2)                       #21
                                          2221
                                          2222  label('SYS_LSLW8_24')
SYS_LSLW8_24: 04cd 0118  ld   [$18]       2223  ld([vAC])                       #15
              04ce c219  st   [$19]       2224  st([vAC+1])                     #16
              04cf 0000  ld   $00         2225  ld(0)                           #17
              04d0 c218  st   [$18]       2226  st([vAC])                       #18
              04d1 1403  ld   $03,y       2227  ld(hi('REENTER'),Y)             #19
              04d2 e0cb  jmp  y,$cb       2228  jmp(Y,'REENTER')                #20
              04d3 00f4  ld   $f4         2229  ld(-24/2)                       #21
                                          2230
                                          2231  #-----------------------------------------------------------------------
                                          2232  # Extension SYS_Draw4_30
                                          2233  #-----------------------------------------------------------------------
                                          2234
                                          2235  # Draw 4 pixels on screen, horizontally next to each other
                                          2236  #
                                          2237  # Variables:
                                          2238  #       sysArgs[0:3]    Pixels (in)
                                          2239  #       sysArgs[4:5]    Position on screen (in)
                                          2240
                                          2241  label('SYS_Draw4_30')
SYS_Draw4_30: 04d4 1128  ld   [$28],x     2242  ld([sysArgs+4],X)               #15
              04d5 1529  ld   [$29],y     2243  ld([sysArgs+5],Y)               #16
              04d6 0124  ld   [$24]       2244  ld([sysArgs+0])                 #17
              04d7 de00  st   [y,x++]     2245  st([Y,Xpp])                     #18
              04d8 0125  ld   [$25]       2246  ld([sysArgs+1])                 #19
              04d9 de00  st   [y,x++]     2247  st([Y,Xpp])                     #20
              04da 0126  ld   [$26]       2248  ld([sysArgs+2])                 #21
              04db de00  st   [y,x++]     2249  st([Y,Xpp])                     #22
              04dc 0127  ld   [$27]       2250  ld([sysArgs+3])                 #23
              04dd de00  st   [y,x++]     2251  st([Y,Xpp])                     #24
              04de 1403  ld   $03,y       2252  ld(hi('REENTER'),Y)             #25
              04df e0cb  jmp  y,$cb       2253  jmp(Y,'REENTER')                #26
              04e0 00f1  ld   $f1         2254  ld(-30/2)                       #27
                                          2255
                                          2256  #-----------------------------------------------------------------------
                                          2257  # Extension SYS_VDrawBits_134:
                                          2258  #-----------------------------------------------------------------------
                                          2259
                                          2260  # Draw slice of a character, 8 pixels vertical
                                          2261  #
                                          2262  # Variables:
                                          2263  #       sysArgs[0]      Color 0 "background" (in)
                                          2264  #       sysArgs[1]      Color 1 "pen" (in)
                                          2265  #       sysArgs[2]      8 bits, highest bit first (in, changed)
                                          2266  #       sysArgs[4:5]    Position on screen (in)
                                          2267
                                          2268  label('SYS_VDrawBits_134')
SYS_VDrawBits_134:
              04e1 1412  ld   $12,y       2269  ld(hi('sys_VDrawBits'),Y)       #15
              04e2 e08f  jmp  y,$8f       2270  jmp(Y,'sys_VDrawBits')          #16
              04e3 1128  ld   [$28],x     2271  ld([sysArgs+4],X)               #17
                                          2272
                                          2273  #-----------------------------------------------------------------------
                                          2274
                                          2275  # INC implementation
                                          2276  label('inc#14')
inc#14:       04e4 8500  adda [x]         2277  adda([X])                       #14
              04e5 c600  st   [x]         2278  st([X])                         #15
              04e6 1403  ld   $03,y       2279  ld(hi('NEXTY'),Y)               #16
              04e7 e000  jmp  y,$00       2280  jmp(Y,'NEXTY')                  #17
              04e8 00f6  ld   $f6         2281  ld(-20/2)                       #18
                                          2282
                                          2283  # Interrupt handler:
                                          2284  #       ST   $xx        -> optionally store vCpuSelect
                                          2285  #       ... IRQ payload ...
                                          2286  # either:
                                          2287  #       LDWI $400
                                          2288  #       LUP  0          -> vRTI and don't switch interpreter (immediate resume)
                                          2289  # or:
                                          2290  #       LDWI $400
                                          2291  #       LUP  $xx        -> vRTI and switch interpreter type as stored in [$xx]
              04e9 0200  nop              2292  fillers(until=251-11)
              04ea 0200  nop
              04eb 0200  nop
              * 7 times
                                          2293  label('vRTI#15')
vRTI#15:      04f0 01fc  ld   [$fc]       2294  ld([0xfc])                      #15 Continue with vCPU in the same timeslice (faster)
              04f1 c216  st   [$16]       2295  st([vPC])                       #16
              04f2 01fd  ld   [$fd]       2296  ld([0xfd])                      #17
              04f3 c217  st   [$17]       2297  st([vPC+1])                     #18
              04f4 01fe  ld   [$fe]       2298  ld([0xfe])                      #19
              04f5 c218  st   [$18]       2299  st([vAC])                       #20
              04f6 01ff  ld   [$ff]       2300  ld([0xff])                      #21
              04f7 c219  st   [$19]       2301  st([vAC+1])                     #22
              04f8 1403  ld   $03,y       2302  ld(hi('REENTER'),Y)             #23
              04f9 e0cb  jmp  y,$cb       2303  jmp(Y,'REENTER')                #24
              04fa 00f2  ld   $f2         2304  ld(-28/2)                       #25
                                          2305  # vRTI entry point
                                          2306  assert(pc()&255 == 251)         # The landing offset 251 for LUP trampoline is fixed
              04fb f0f0  beq  vRTI#15     2307  beq('vRTI#15')                  #13 vRTI sequence
              04fc 9001  adda $01,x       2308  adda(1,X)                       #14
              04fd 1412  ld   $12,y       2309  ld(hi('vRTI#18'),Y)             #15 Switch and wait for end of timeslice (slower)
              04fe e020  jmp  y,$20       2310  jmp(Y,'vRTI#18')                #16
              04ff c21d  st   [$1d]       2311  st([vTmp])                      #17
                                          2312
                                          2313  #-----------------------------------------------------------------------
                                          2314  #
                                          2315  #  $0500 ROM page 5-6: Shift table and code
                                          2316  #
                                          2317  #-----------------------------------------------------------------------
                                          2318
                                          2319  align(0x100, size=0x200)
                                          2320
                                          2321  # Lookup table for i>>n, with n in 1..6
                                          2322  # Indexing ix = i & ~b | (b-1), where b = 1<<(n-1)
                                          2323  #       ...
                                          2324  #       ld   <.ret
                                          2325  #       st   [vTmp]
                                          2326  #       ld   >shiftTable,y
                                          2327  #       <calculate ix>
                                          2328  #       jmp  y,ac
                                          2329  #       bra  $ff
                                          2330  # .ret: ...
                                          2331  #
                                          2332  # i >> 7 can be always be done with RAM: [i&128]
                                          2333  #       ...
                                          2334  #       anda $80,x
                                          2335  #       ld   [x]
                                          2336  #       ...
                                          2337
                                          2338  label('shiftTable')
                                          2339  shiftTable = pc()
                                          2340
                                          2341  for ix in range(255):
                                          2342    for n in range(1,9): # Find first zero
                                          2343      if ~ix & (1 << (n-1)):
                                          2344        break
                                          2345    pattern = ['x' if i<n else '1' if ix&(1<<i) else '0' for i in range(8)]
                                          2346    ld(ix>>n); C('0b%s >> %d' % (''.join(reversed(pattern)), n))
shiftTable:   0500 0000  ld   $00         ;0b0000000x >> 1
              0501 0000  ld   $00         ;0b000000xx >> 2
              0502 0001  ld   $01         ;0b0000001x >> 1
              0503 0000  ld   $00         ;0b00000xxx >> 3
              0504 0002  ld   $02         ;0b0000010x >> 1
              0505 0001  ld   $01         ;0b000001xx >> 2
              0506 0003  ld   $03         ;0b0000011x >> 1
              0507 0000  ld   $00         ;0b0000xxxx >> 4
              0508 0004  ld   $04         ;0b0000100x >> 1
              0509 0002  ld   $02         ;0b000010xx >> 2
              050a 0005  ld   $05         ;0b0000101x >> 1
              050b 0001  ld   $01         ;0b00001xxx >> 3
              050c 0006  ld   $06         ;0b0000110x >> 1
              050d 0003  ld   $03         ;0b000011xx >> 2
              050e 0007  ld   $07         ;0b0000111x >> 1
              050f 0000  ld   $00         ;0b000xxxxx >> 5
              0510 0008  ld   $08         ;0b0001000x >> 1
              0511 0004  ld   $04         ;0b000100xx >> 2
              0512 0009  ld   $09         ;0b0001001x >> 1
              0513 0002  ld   $02         ;0b00010xxx >> 3
              0514 000a  ld   $0a         ;0b0001010x >> 1
              0515 0005  ld   $05         ;0b000101xx >> 2
              0516 000b  ld   $0b         ;0b0001011x >> 1
              0517 0001  ld   $01         ;0b0001xxxx >> 4
              0518 000c  ld   $0c         ;0b0001100x >> 1
              0519 0006  ld   $06         ;0b000110xx >> 2
              051a 000d  ld   $0d         ;0b0001101x >> 1
              051b 0003  ld   $03         ;0b00011xxx >> 3
              051c 000e  ld   $0e         ;0b0001110x >> 1
              051d 0007  ld   $07         ;0b000111xx >> 2
              051e 000f  ld   $0f         ;0b0001111x >> 1
              051f 0000  ld   $00         ;0b00xxxxxx >> 6
              0520 0010  ld   $10         ;0b0010000x >> 1
              0521 0008  ld   $08         ;0b001000xx >> 2
              0522 0011  ld   $11         ;0b0010001x >> 1
              0523 0004  ld   $04         ;0b00100xxx >> 3
              0524 0012  ld   $12         ;0b0010010x >> 1
              0525 0009  ld   $09         ;0b001001xx >> 2
              0526 0013  ld   $13         ;0b0010011x >> 1
              0527 0002  ld   $02         ;0b0010xxxx >> 4
              0528 0014  ld   $14         ;0b0010100x >> 1
              0529 000a  ld   $0a         ;0b001010xx >> 2
              052a 0015  ld   $15         ;0b0010101x >> 1
              052b 0005  ld   $05         ;0b00101xxx >> 3
              052c 0016  ld   $16         ;0b0010110x >> 1
              052d 000b  ld   $0b         ;0b001011xx >> 2
              052e 0017  ld   $17         ;0b0010111x >> 1
              052f 0001  ld   $01         ;0b001xxxxx >> 5
              0530 0018  ld   $18         ;0b0011000x >> 1
              0531 000c  ld   $0c         ;0b001100xx >> 2
              0532 0019  ld   $19         ;0b0011001x >> 1
              0533 0006  ld   $06         ;0b00110xxx >> 3
              0534 001a  ld   $1a         ;0b0011010x >> 1
              0535 000d  ld   $0d         ;0b001101xx >> 2
              0536 001b  ld   $1b         ;0b0011011x >> 1
              0537 0003  ld   $03         ;0b0011xxxx >> 4
              0538 001c  ld   $1c         ;0b0011100x >> 1
              0539 000e  ld   $0e         ;0b001110xx >> 2
              053a 001d  ld   $1d         ;0b0011101x >> 1
              053b 0007  ld   $07         ;0b00111xxx >> 3
              053c 001e  ld   $1e         ;0b0011110x >> 1
              053d 000f  ld   $0f         ;0b001111xx >> 2
              053e 001f  ld   $1f         ;0b0011111x >> 1
              053f 0000  ld   $00         ;0b0xxxxxxx >> 7
              0540 0020  ld   $20         ;0b0100000x >> 1
              0541 0010  ld   $10         ;0b010000xx >> 2
              0542 0021  ld   $21         ;0b0100001x >> 1
              0543 0008  ld   $08         ;0b01000xxx >> 3
              0544 0022  ld   $22         ;0b0100010x >> 1
              0545 0011  ld   $11         ;0b010001xx >> 2
              0546 0023  ld   $23         ;0b0100011x >> 1
              0547 0004  ld   $04         ;0b0100xxxx >> 4
              0548 0024  ld   $24         ;0b0100100x >> 1
              0549 0012  ld   $12         ;0b010010xx >> 2
              054a 0025  ld   $25         ;0b0100101x >> 1
              054b 0009  ld   $09         ;0b01001xxx >> 3
              054c 0026  ld   $26         ;0b0100110x >> 1
              054d 0013  ld   $13         ;0b010011xx >> 2
              054e 0027  ld   $27         ;0b0100111x >> 1
              054f 0002  ld   $02         ;0b010xxxxx >> 5
              0550 0028  ld   $28         ;0b0101000x >> 1
              0551 0014  ld   $14         ;0b010100xx >> 2
              0552 0029  ld   $29         ;0b0101001x >> 1
              0553 000a  ld   $0a         ;0b01010xxx >> 3
              0554 002a  ld   $2a         ;0b0101010x >> 1
              0555 0015  ld   $15         ;0b010101xx >> 2
              0556 002b  ld   $2b         ;0b0101011x >> 1
              0557 0005  ld   $05         ;0b0101xxxx >> 4
              0558 002c  ld   $2c         ;0b0101100x >> 1
              0559 0016  ld   $16         ;0b010110xx >> 2
              055a 002d  ld   $2d         ;0b0101101x >> 1
              055b 000b  ld   $0b         ;0b01011xxx >> 3
              055c 002e  ld   $2e         ;0b0101110x >> 1
              055d 0017  ld   $17         ;0b010111xx >> 2
              055e 002f  ld   $2f         ;0b0101111x >> 1
              055f 0001  ld   $01         ;0b01xxxxxx >> 6
              0560 0030  ld   $30         ;0b0110000x >> 1
              0561 0018  ld   $18         ;0b011000xx >> 2
              0562 0031  ld   $31         ;0b0110001x >> 1
              0563 000c  ld   $0c         ;0b01100xxx >> 3
              0564 0032  ld   $32         ;0b0110010x >> 1
              0565 0019  ld   $19         ;0b011001xx >> 2
              0566 0033  ld   $33         ;0b0110011x >> 1
              0567 0006  ld   $06         ;0b0110xxxx >> 4
              0568 0034  ld   $34         ;0b0110100x >> 1
              0569 001a  ld   $1a         ;0b011010xx >> 2
              056a 0035  ld   $35         ;0b0110101x >> 1
              056b 000d  ld   $0d         ;0b01101xxx >> 3
              056c 0036  ld   $36         ;0b0110110x >> 1
              056d 001b  ld   $1b         ;0b011011xx >> 2
              056e 0037  ld   $37         ;0b0110111x >> 1
              056f 0003  ld   $03         ;0b011xxxxx >> 5
              0570 0038  ld   $38         ;0b0111000x >> 1
              0571 001c  ld   $1c         ;0b011100xx >> 2
              0572 0039  ld   $39         ;0b0111001x >> 1
              0573 000e  ld   $0e         ;0b01110xxx >> 3
              0574 003a  ld   $3a         ;0b0111010x >> 1
              0575 001d  ld   $1d         ;0b011101xx >> 2
              0576 003b  ld   $3b         ;0b0111011x >> 1
              0577 0007  ld   $07         ;0b0111xxxx >> 4
              0578 003c  ld   $3c         ;0b0111100x >> 1
              0579 001e  ld   $1e         ;0b011110xx >> 2
              057a 003d  ld   $3d         ;0b0111101x >> 1
              057b 000f  ld   $0f         ;0b01111xxx >> 3
              057c 003e  ld   $3e         ;0b0111110x >> 1
              057d 001f  ld   $1f         ;0b011111xx >> 2
              057e 003f  ld   $3f         ;0b0111111x >> 1
              057f 0000  ld   $00         ;0bxxxxxxxx >> 8
              0580 0040  ld   $40         ;0b1000000x >> 1
              0581 0020  ld   $20         ;0b100000xx >> 2
              0582 0041  ld   $41         ;0b1000001x >> 1
              0583 0010  ld   $10         ;0b10000xxx >> 3
              0584 0042  ld   $42         ;0b1000010x >> 1
              0585 0021  ld   $21         ;0b100001xx >> 2
              0586 0043  ld   $43         ;0b1000011x >> 1
              0587 0008  ld   $08         ;0b1000xxxx >> 4
              0588 0044  ld   $44         ;0b1000100x >> 1
              0589 0022  ld   $22         ;0b100010xx >> 2
              058a 0045  ld   $45         ;0b1000101x >> 1
              058b 0011  ld   $11         ;0b10001xxx >> 3
              058c 0046  ld   $46         ;0b1000110x >> 1
              058d 0023  ld   $23         ;0b100011xx >> 2
              058e 0047  ld   $47         ;0b1000111x >> 1
              058f 0004  ld   $04         ;0b100xxxxx >> 5
              0590 0048  ld   $48         ;0b1001000x >> 1
              0591 0024  ld   $24         ;0b100100xx >> 2
              0592 0049  ld   $49         ;0b1001001x >> 1
              0593 0012  ld   $12         ;0b10010xxx >> 3
              0594 004a  ld   $4a         ;0b1001010x >> 1
              0595 0025  ld   $25         ;0b100101xx >> 2
              0596 004b  ld   $4b         ;0b1001011x >> 1
              0597 0009  ld   $09         ;0b1001xxxx >> 4
              0598 004c  ld   $4c         ;0b1001100x >> 1
              0599 0026  ld   $26         ;0b100110xx >> 2
              059a 004d  ld   $4d         ;0b1001101x >> 1
              059b 0013  ld   $13         ;0b10011xxx >> 3
              059c 004e  ld   $4e         ;0b1001110x >> 1
              059d 0027  ld   $27         ;0b100111xx >> 2
              059e 004f  ld   $4f         ;0b1001111x >> 1
              059f 0002  ld   $02         ;0b10xxxxxx >> 6
              05a0 0050  ld   $50         ;0b1010000x >> 1
              05a1 0028  ld   $28         ;0b101000xx >> 2
              05a2 0051  ld   $51         ;0b1010001x >> 1
              05a3 0014  ld   $14         ;0b10100xxx >> 3
              05a4 0052  ld   $52         ;0b1010010x >> 1
              05a5 0029  ld   $29         ;0b101001xx >> 2
              05a6 0053  ld   $53         ;0b1010011x >> 1
              05a7 000a  ld   $0a         ;0b1010xxxx >> 4
              05a8 0054  ld   $54         ;0b1010100x >> 1
              05a9 002a  ld   $2a         ;0b101010xx >> 2
              05aa 0055  ld   $55         ;0b1010101x >> 1
              05ab 0015  ld   $15         ;0b10101xxx >> 3
              05ac 0056  ld   $56         ;0b1010110x >> 1
              05ad 002b  ld   $2b         ;0b101011xx >> 2
              05ae 0057  ld   $57         ;0b1010111x >> 1
              05af 0005  ld   $05         ;0b101xxxxx >> 5
              05b0 0058  ld   $58         ;0b1011000x >> 1
              05b1 002c  ld   $2c         ;0b101100xx >> 2
              05b2 0059  ld   $59         ;0b1011001x >> 1
              05b3 0016  ld   $16         ;0b10110xxx >> 3
              05b4 005a  ld   $5a         ;0b1011010x >> 1
              05b5 002d  ld   $2d         ;0b101101xx >> 2
              05b6 005b  ld   $5b         ;0b1011011x >> 1
              05b7 000b  ld   $0b         ;0b1011xxxx >> 4
              05b8 005c  ld   $5c         ;0b1011100x >> 1
              05b9 002e  ld   $2e         ;0b101110xx >> 2
              05ba 005d  ld   $5d         ;0b1011101x >> 1
              05bb 0017  ld   $17         ;0b10111xxx >> 3
              05bc 005e  ld   $5e         ;0b1011110x >> 1
              05bd 002f  ld   $2f         ;0b101111xx >> 2
              05be 005f  ld   $5f         ;0b1011111x >> 1
              05bf 0001  ld   $01         ;0b1xxxxxxx >> 7
              05c0 0060  ld   $60         ;0b1100000x >> 1
              05c1 0030  ld   $30         ;0b110000xx >> 2
              05c2 0061  ld   $61         ;0b1100001x >> 1
              05c3 0018  ld   $18         ;0b11000xxx >> 3
              05c4 0062  ld   $62         ;0b1100010x >> 1
              05c5 0031  ld   $31         ;0b110001xx >> 2
              05c6 0063  ld   $63         ;0b1100011x >> 1
              05c7 000c  ld   $0c         ;0b1100xxxx >> 4
              05c8 0064  ld   $64         ;0b1100100x >> 1
              05c9 0032  ld   $32         ;0b110010xx >> 2
              05ca 0065  ld   $65         ;0b1100101x >> 1
              05cb 0019  ld   $19         ;0b11001xxx >> 3
              05cc 0066  ld   $66         ;0b1100110x >> 1
              05cd 0033  ld   $33         ;0b110011xx >> 2
              05ce 0067  ld   $67         ;0b1100111x >> 1
              05cf 0006  ld   $06         ;0b110xxxxx >> 5
              05d0 0068  ld   $68         ;0b1101000x >> 1
              05d1 0034  ld   $34         ;0b110100xx >> 2
              05d2 0069  ld   $69         ;0b1101001x >> 1
              05d3 001a  ld   $1a         ;0b11010xxx >> 3
              05d4 006a  ld   $6a         ;0b1101010x >> 1
              05d5 0035  ld   $35         ;0b110101xx >> 2
              05d6 006b  ld   $6b         ;0b1101011x >> 1
              05d7 000d  ld   $0d         ;0b1101xxxx >> 4
              05d8 006c  ld   $6c         ;0b1101100x >> 1
              05d9 0036  ld   $36         ;0b110110xx >> 2
              05da 006d  ld   $6d         ;0b1101101x >> 1
              05db 001b  ld   $1b         ;0b11011xxx >> 3
              05dc 006e  ld   $6e         ;0b1101110x >> 1
              05dd 0037  ld   $37         ;0b110111xx >> 2
              05de 006f  ld   $6f         ;0b1101111x >> 1
              05df 0003  ld   $03         ;0b11xxxxxx >> 6
              05e0 0070  ld   $70         ;0b1110000x >> 1
              05e1 0038  ld   $38         ;0b111000xx >> 2
              05e2 0071  ld   $71         ;0b1110001x >> 1
              05e3 001c  ld   $1c         ;0b11100xxx >> 3
              05e4 0072  ld   $72         ;0b1110010x >> 1
              05e5 0039  ld   $39         ;0b111001xx >> 2
              05e6 0073  ld   $73         ;0b1110011x >> 1
              05e7 000e  ld   $0e         ;0b1110xxxx >> 4
              05e8 0074  ld   $74         ;0b1110100x >> 1
              05e9 003a  ld   $3a         ;0b111010xx >> 2
              05ea 0075  ld   $75         ;0b1110101x >> 1
              05eb 001d  ld   $1d         ;0b11101xxx >> 3
              05ec 0076  ld   $76         ;0b1110110x >> 1
              05ed 003b  ld   $3b         ;0b111011xx >> 2
              05ee 0077  ld   $77         ;0b1110111x >> 1
              05ef 0007  ld   $07         ;0b111xxxxx >> 5
              05f0 0078  ld   $78         ;0b1111000x >> 1
              05f1 003c  ld   $3c         ;0b111100xx >> 2
              05f2 0079  ld   $79         ;0b1111001x >> 1
              05f3 001e  ld   $1e         ;0b11110xxx >> 3
              05f4 007a  ld   $7a         ;0b1111010x >> 1
              05f5 003d  ld   $3d         ;0b111101xx >> 2
              05f6 007b  ld   $7b         ;0b1111011x >> 1
              05f7 000f  ld   $0f         ;0b1111xxxx >> 4
              05f8 007c  ld   $7c         ;0b1111100x >> 1
              05f9 003e  ld   $3e         ;0b111110xx >> 2
              05fa 007d  ld   $7d         ;0b1111101x >> 1
              05fb 001f  ld   $1f         ;0b11111xxx >> 3
              05fc 007e  ld   $7e         ;0b1111110x >> 1
              05fd 003f  ld   $3f         ;0b111111xx >> 2
              05fe 007f  ld   $7f         ;0b1111111x >> 1
                                          2347
                                          2348  assert pc()&255 == 255
              05ff fd1d  bra  [$1d]       2349  bra([vTmp])                     # Jumps back into next page
                                          2350
                                          2351  label('SYS_LSRW1_48')
                                          2352  assert pc()&255 == 0            # First instruction on this page *must* be a nop
SYS_LSRW1_48: 0600 0200  nop              2353  nop()                           #15
              0601 1405  ld   $05,y       2354  ld(hi('shiftTable'),Y)          #16 Logical shift right 1 bit (X >> 1)
              0602 0008  ld   $08         2355  ld('.sysLsrw1a')                #17 Shift low byte
              0603 c21d  st   [$1d]       2356  st([vTmp])                      #18
              0604 0118  ld   [$18]       2357  ld([vAC])                       #19
              0605 20fe  anda $fe         2358  anda(0b11111110)                #20
              0606 e200  jmp  y,ac        2359  jmp(Y,AC)                       #21
              0607 fcff  bra  $ff         2360  bra(255)                        #22 bra shiftTable+255
                                          2361  label('.sysLsrw1a')
.sysLsrw1a:   0608 c218  st   [$18]       2362  st([vAC])                       #26
              0609 0119  ld   [$19]       2363  ld([vAC+1])                     #27 Transfer bit 8
              060a 2001  anda $01         2364  anda(1)                         #28
              060b 807f  adda $7f         2365  adda(127)                       #29
              060c 2080  anda $80         2366  anda(128)                       #30
              060d 4118  ora  [$18]       2367  ora([vAC])                      #31
              060e c218  st   [$18]       2368  st([vAC])                       #32
              060f 0015  ld   $15         2369  ld('.sysLsrw1b')                #33 Shift high byte
              0610 c21d  st   [$1d]       2370  st([vTmp])                      #34
              0611 0119  ld   [$19]       2371  ld([vAC+1])                     #35
              0612 20fe  anda $fe         2372  anda(0b11111110)                #36
              0613 e200  jmp  y,ac        2373  jmp(Y,AC)                       #37
              0614 fcff  bra  $ff         2374  bra(255)                        #38 bra shiftTable+255
                                          2375  label('.sysLsrw1b')
.sysLsrw1b:   0615 c219  st   [$19]       2376  st([vAC+1])                     #42
              0616 1403  ld   $03,y       2377  ld(hi('REENTER'),Y)             #43
              0617 e0cb  jmp  y,$cb       2378  jmp(Y,'REENTER')                #44
              0618 00e8  ld   $e8         2379  ld(-48/2)                       #45
                                          2380
                                          2381  label('SYS_LSRW2_52')
SYS_LSRW2_52: 0619 1405  ld   $05,y       2382  ld(hi('shiftTable'),Y)          #15 Logical shift right 2 bit (X >> 2)
              061a 0021  ld   $21         2383  ld('.sysLsrw2a')                #16 Shift low byte
              061b c21d  st   [$1d]       2384  st([vTmp])                      #17
              061c 0118  ld   [$18]       2385  ld([vAC])                       #18
              061d 20fc  anda $fc         2386  anda(0b11111100)                #19
              061e 4001  ora  $01         2387  ora( 0b00000001)                #20
              061f e200  jmp  y,ac        2388  jmp(Y,AC)                       #21
              0620 fcff  bra  $ff         2389  bra(255)                        #22 bra shiftTable+255
                                          2390  label('.sysLsrw2a')
.sysLsrw2a:   0621 c218  st   [$18]       2391  st([vAC])                       #26
              0622 0119  ld   [$19]       2392  ld([vAC+1])                     #27 Transfer bit 8:9
              0623 8200  adda ac          2393  adda(AC)                        #28
              0624 8200  adda ac          2394  adda(AC)                        #29
              0625 8200  adda ac          2395  adda(AC)                        #30
              0626 8200  adda ac          2396  adda(AC)                        #31
              0627 8200  adda ac          2397  adda(AC)                        #32
              0628 8200  adda ac          2398  adda(AC)                        #33
              0629 4118  ora  [$18]       2399  ora([vAC])                      #34
              062a c218  st   [$18]       2400  st([vAC])                       #35
              062b 0032  ld   $32         2401  ld('.sysLsrw2b')                #36 Shift high byte
              062c c21d  st   [$1d]       2402  st([vTmp])                      #37
              062d 0119  ld   [$19]       2403  ld([vAC+1])                     #38
              062e 20fc  anda $fc         2404  anda(0b11111100)                #39
              062f 4001  ora  $01         2405  ora( 0b00000001)                #40
              0630 e200  jmp  y,ac        2406  jmp(Y,AC)                       #41
              0631 fcff  bra  $ff         2407  bra(255)                        #42 bra shiftTable+255
                                          2408  label('.sysLsrw2b')
.sysLsrw2b:   0632 c219  st   [$19]       2409  st([vAC+1])                     #46
              0633 1403  ld   $03,y       2410  ld(hi('REENTER'),Y)             #47
              0634 e0cb  jmp  y,$cb       2411  jmp(Y,'REENTER')                #48
              0635 00e6  ld   $e6         2412  ld(-52/2)                       #49
                                          2413
                                          2414  label('SYS_LSRW3_52')
SYS_LSRW3_52: 0636 1405  ld   $05,y       2415  ld(hi('shiftTable'),Y)          #15 Logical shift right 3 bit (X >> 3)
              0637 003e  ld   $3e         2416  ld('.sysLsrw3a')                #16 Shift low byte
              0638 c21d  st   [$1d]       2417  st([vTmp])                      #17
              0639 0118  ld   [$18]       2418  ld([vAC])                       #18
              063a 20f8  anda $f8         2419  anda(0b11111000)                #19
              063b 4003  ora  $03         2420  ora( 0b00000011)                #20
              063c e200  jmp  y,ac        2421  jmp(Y,AC)                       #21
              063d fcff  bra  $ff         2422  bra(255)                        #22 bra shiftTable+255
                                          2423  label('.sysLsrw3a')
.sysLsrw3a:   063e c218  st   [$18]       2424  st([vAC])                       #26
              063f 0119  ld   [$19]       2425  ld([vAC+1])                     #27 Transfer bit 8:10
              0640 8200  adda ac          2426  adda(AC)                        #28
              0641 8200  adda ac          2427  adda(AC)                        #29
              0642 8200  adda ac          2428  adda(AC)                        #30
              0643 8200  adda ac          2429  adda(AC)                        #31
              0644 8200  adda ac          2430  adda(AC)                        #32
              0645 4118  ora  [$18]       2431  ora([vAC])                      #33
              0646 c218  st   [$18]       2432  st([vAC])                       #34
              0647 004e  ld   $4e         2433  ld('.sysLsrw3b')                #35 Shift high byte
              0648 c21d  st   [$1d]       2434  st([vTmp])                      #36
              0649 0119  ld   [$19]       2435  ld([vAC+1])                     #37
              064a 20f8  anda $f8         2436  anda(0b11111000)                #38
              064b 4003  ora  $03         2437  ora( 0b00000011)                #39
              064c e200  jmp  y,ac        2438  jmp(Y,AC)                       #40
              064d fcff  bra  $ff         2439  bra(255)                        #41 bra shiftTable+255
                                          2440  label('.sysLsrw3b')
.sysLsrw3b:   064e c219  st   [$19]       2441  st([vAC+1])                     #45
              064f 00e6  ld   $e6         2442  ld(-52/2)                       #46
              0650 1403  ld   $03,y       2443  ld(hi('REENTER'),Y)             #47
              0651 e0cb  jmp  y,$cb       2444  jmp(Y,'REENTER')                #48
                                          2445  #nop()                          #49
                                          2446
                                          2447  label('SYS_LSRW4_50')
SYS_LSRW4_50: 0652 1405  ld   $05,y       2448  ld(hi('shiftTable'),Y)          #15,49 Logical shift right 4 bit (X >> 4)
              0653 005a  ld   $5a         2449  ld('.sysLsrw4a')                #16 Shift low byte
              0654 c21d  st   [$1d]       2450  st([vTmp])                      #17
              0655 0118  ld   [$18]       2451  ld([vAC])                       #18
              0656 20f0  anda $f0         2452  anda(0b11110000)                #19
              0657 4007  ora  $07         2453  ora( 0b00000111)                #20
              0658 e200  jmp  y,ac        2454  jmp(Y,AC)                       #21
              0659 fcff  bra  $ff         2455  bra(255)                        #22 bra shiftTable+255
                                          2456  label('.sysLsrw4a')
.sysLsrw4a:   065a c218  st   [$18]       2457  st([vAC])                       #26
              065b 0119  ld   [$19]       2458  ld([vAC+1])                     #27 Transfer bit 8:11
              065c 8200  adda ac          2459  adda(AC)                        #28
              065d 8200  adda ac          2460  adda(AC)                        #29
              065e 8200  adda ac          2461  adda(AC)                        #30
              065f 8200  adda ac          2462  adda(AC)                        #31
              0660 4118  ora  [$18]       2463  ora([vAC])                      #32
              0661 c218  st   [$18]       2464  st([vAC])                       #33
              0662 0069  ld   $69         2465  ld('.sysLsrw4b')                #34 Shift high byte'
              0663 c21d  st   [$1d]       2466  st([vTmp])                      #35
              0664 0119  ld   [$19]       2467  ld([vAC+1])                     #36
              0665 20f0  anda $f0         2468  anda(0b11110000)                #37
              0666 4007  ora  $07         2469  ora( 0b00000111)                #38
              0667 e200  jmp  y,ac        2470  jmp(Y,AC)                       #39
              0668 fcff  bra  $ff         2471  bra(255)                        #40 bra shiftTable+255
                                          2472  label('.sysLsrw4b')
.sysLsrw4b:   0669 c219  st   [$19]       2473  st([vAC+1])                     #44
              066a 1403  ld   $03,y       2474  ld(hi('REENTER'),Y)             #45
              066b e0cb  jmp  y,$cb       2475  jmp(Y,'REENTER')                #46
              066c 00e7  ld   $e7         2476  ld(-50/2)                       #47
                                          2477
                                          2478  label('SYS_LSRW5_50')
SYS_LSRW5_50: 066d 1405  ld   $05,y       2479  ld(hi('shiftTable'),Y)          #15 Logical shift right 5 bit (X >> 5)
              066e 0075  ld   $75         2480  ld('.sysLsrw5a')                #16 Shift low byte
              066f c21d  st   [$1d]       2481  st([vTmp])                      #17
              0670 0118  ld   [$18]       2482  ld([vAC])                       #18
              0671 20e0  anda $e0         2483  anda(0b11100000)                #19
              0672 400f  ora  $0f         2484  ora( 0b00001111)                #20
              0673 e200  jmp  y,ac        2485  jmp(Y,AC)                       #21
              0674 fcff  bra  $ff         2486  bra(255)                        #22 bra shiftTable+255
                                          2487  label('.sysLsrw5a')
.sysLsrw5a:   0675 c218  st   [$18]       2488  st([vAC])                       #26
              0676 0119  ld   [$19]       2489  ld([vAC+1])                     #27 Transfer bit 8:13
              0677 8200  adda ac          2490  adda(AC)                        #28
              0678 8200  adda ac          2491  adda(AC)                        #29
              0679 8200  adda ac          2492  adda(AC)                        #30
              067a 4118  ora  [$18]       2493  ora([vAC])                      #31
              067b c218  st   [$18]       2494  st([vAC])                       #32
              067c 0083  ld   $83         2495  ld('.sysLsrw5b')                #33 Shift high byte
              067d c21d  st   [$1d]       2496  st([vTmp])                      #34
              067e 0119  ld   [$19]       2497  ld([vAC+1])                     #35
              067f 20e0  anda $e0         2498  anda(0b11100000)                #36
              0680 400f  ora  $0f         2499  ora( 0b00001111)                #37
              0681 e200  jmp  y,ac        2500  jmp(Y,AC)                       #38
              0682 fcff  bra  $ff         2501  bra(255)                        #39 bra shiftTable+255
                                          2502  label('.sysLsrw5b')
.sysLsrw5b:   0683 c219  st   [$19]       2503  st([vAC+1])                     #44
              0684 00e7  ld   $e7         2504  ld(-50/2)                       #45
              0685 1403  ld   $03,y       2505  ld(hi('REENTER'),Y)             #46
              0686 e0cb  jmp  y,$cb       2506  jmp(Y,'REENTER')                #47
                                          2507  #nop()                          #48
                                          2508
                                          2509  label('SYS_LSRW6_48')
SYS_LSRW6_48: 0687 1405  ld   $05,y       2510  ld(hi('shiftTable'),Y)          #15,44 Logical shift right 6 bit (X >> 6)
              0688 008f  ld   $8f         2511  ld('.sysLsrw6a')                #16 Shift low byte
              0689 c21d  st   [$1d]       2512  st([vTmp])                      #17
              068a 0118  ld   [$18]       2513  ld([vAC])                       #18
              068b 20c0  anda $c0         2514  anda(0b11000000)                #19
              068c 401f  ora  $1f         2515  ora( 0b00011111)                #20
              068d e200  jmp  y,ac        2516  jmp(Y,AC)                       #21
              068e fcff  bra  $ff         2517  bra(255)                        #22 bra shiftTable+255
                                          2518  label('.sysLsrw6a')
.sysLsrw6a:   068f c218  st   [$18]       2519  st([vAC])                       #26
              0690 0119  ld   [$19]       2520  ld([vAC+1])                     #27 Transfer bit 8:13
              0691 8200  adda ac          2521  adda(AC)                        #28
              0692 8200  adda ac          2522  adda(AC)                        #29
              0693 4118  ora  [$18]       2523  ora([vAC])                      #30
              0694 c218  st   [$18]       2524  st([vAC])                       #31
              0695 009c  ld   $9c         2525  ld('.sysLsrw6b')                #32 Shift high byte
              0696 c21d  st   [$1d]       2526  st([vTmp])                      #33
              0697 0119  ld   [$19]       2527  ld([vAC+1])                     #34
              0698 20c0  anda $c0         2528  anda(0b11000000)                #35
              0699 401f  ora  $1f         2529  ora( 0b00011111)                #36
              069a e200  jmp  y,ac        2530  jmp(Y,AC)                       #37
              069b fcff  bra  $ff         2531  bra(255)                        #38 bra shiftTable+255
                                          2532  label('.sysLsrw6b')
.sysLsrw6b:   069c c219  st   [$19]       2533  st([vAC+1])                     #42
              069d 1403  ld   $03,y       2534  ld(hi('REENTER'),Y)             #43
              069e e0cb  jmp  y,$cb       2535  jmp(Y,'REENTER')                #44
              069f 00e8  ld   $e8         2536  ld(-48/2)                       #45
                                          2537
                                          2538  label('SYS_LSLW4_46')
SYS_LSLW4_46: 06a0 1405  ld   $05,y       2539  ld(hi('shiftTable'),Y)          #15 Logical shift left 4 bit (X << 4)
              06a1 00ae  ld   $ae         2540  ld('.sysLsrl4')                 #16
              06a2 c21d  st   [$1d]       2541  st([vTmp])                      #17
              06a3 0119  ld   [$19]       2542  ld([vAC+1])                     #18
              06a4 8200  adda ac          2543  adda(AC)                        #19
              06a5 8200  adda ac          2544  adda(AC)                        #20
              06a6 8200  adda ac          2545  adda(AC)                        #21
              06a7 8200  adda ac          2546  adda(AC)                        #22
              06a8 c219  st   [$19]       2547  st([vAC+1])                     #23
              06a9 0118  ld   [$18]       2548  ld([vAC])                       #24
              06aa 20f0  anda $f0         2549  anda(0b11110000)                #25
              06ab 4007  ora  $07         2550  ora( 0b00000111)                #26
              06ac e200  jmp  y,ac        2551  jmp(Y,AC)                       #27
              06ad fcff  bra  $ff         2552  bra(255)                        #28 bra shiftTable+255
                                          2553  label('.sysLsrl4')
.sysLsrl4:    06ae 4119  ora  [$19]       2554  ora([vAC+1])                    #32
              06af c219  st   [$19]       2555  st([vAC+1])                     #33
              06b0 0118  ld   [$18]       2556  ld([vAC])                       #34
              06b1 8200  adda ac          2557  adda(AC)                        #35
              06b2 8200  adda ac          2558  adda(AC)                        #36
              06b3 8200  adda ac          2559  adda(AC)                        #37
              06b4 8200  adda ac          2560  adda(AC)                        #38
              06b5 c218  st   [$18]       2561  st([vAC])                       #39
              06b6 00e9  ld   $e9         2562  ld(-46/2)                       #40
              06b7 1403  ld   $03,y       2563  ld(hi('REENTER'),Y)             #41
              06b8 e0cb  jmp  y,$cb       2564  jmp(Y,'REENTER')                #42
                                          2565  #nop()                          #43
                                          2566
                                          2567  #-----------------------------------------------------------------------
                                          2568  # Extension SYS_Read3_40
                                          2569  #-----------------------------------------------------------------------
                                          2570
                                          2571  # Read 3 consecutive bytes from ROM
                                          2572  #
                                          2573  # Note: This function a bit obsolete, as it has very limited use. It's
                                          2574  #       effectively an application-specific SYS function for the Pictures
                                          2575  #       application from ROM v1. It requires the ROM data be organized
                                          2576  #       with trampoline3a and trampoline3b fragments, and their address
                                          2577  #       in ROM to be known. Better avoid using this.
                                          2578  #
                                          2579  # Variables:
                                          2580  #       sysArgs[0:2]    Bytes (out)
                                          2581  #       sysArgs[6:7]    ROM pointer (in)
                                          2582
                                          2583  label('SYS_Read3_40')
SYS_Read3_40: 06b9 152b  ld   [$2b],y     2584  ld([sysArgs+7],Y)               #15,32
              06ba e079  jmp  y,$79       2585  jmp(Y,128-7)                    #16 trampoline3a
              06bb 012a  ld   [$2a]       2586  ld([sysArgs+6])                 #17
                                          2587  label('txReturn')
txReturn:     06bc c226  st   [$26]       2588  st([sysArgs+2])                 #34
              06bd 1403  ld   $03,y       2589  ld(hi('REENTER'),Y)             #35
              06be e0cb  jmp  y,$cb       2590  jmp(Y,'REENTER')                #36
              06bf 00ec  ld   $ec         2591  ld(-40/2)                       #37
                                          2592
                                          2593  def trampoline3a():
                                          2594    """Read 3 bytes from ROM page"""
                                          2595    while pc()&255 < 128-7:
                                          2596      nop()
                                          2597    bra(AC)                       #18
                                          2598    C('Trampoline for page $%02x00 reading (entry)' % (pc()>>8))
                                          2599    bra(123)                      #19
                                          2600    st([sysArgs+0])               #21
                                          2601    ld([sysArgs+6])               #22
                                          2602    adda(1)                       #23
                                          2603    bra(AC)                       #24
                                          2604    bra(250)                      #25 trampoline3b
                                          2605    align(1, size=0x80)
                                          2606
                                          2607  def trampoline3b():
                                          2608    """Read 3 bytes from ROM page (continue)"""
                                          2609    while pc()&255 < 256-6:
                                          2610      nop()
                                          2611    st([sysArgs+1])               #27
                                          2612    C('Trampoline for page $%02x00 reading (continue)' % (pc()>>8))
                                          2613    ld([sysArgs+6])               #28
                                          2614    adda(2)                       #29
                                          2615    ld(hi('txReturn'),Y)          #30
                                          2616    bra(AC)                       #31
                                          2617    jmp(Y,'txReturn')             #32
                                          2618    align(1, size=0x100)
                                          2619
                                          2620  #-----------------------------------------------------------------------
                                          2621  # Extension SYS_Unpack_56
                                          2622  #-----------------------------------------------------------------------
                                          2623
                                          2624  # Unpack 3 bytes into 4 pixels
                                          2625  #
                                          2626  # Variables:
                                          2627  #       sysArgs[0:2]    Packed bytes (in)
                                          2628  #       sysArgs[0:3]    Pixels (out)
                                          2629
                                          2630  label('SYS_Unpack_56')
SYS_Unpack_56:
              06c0 1407  ld   $07,y       2631  ld(soundTable>>8,Y)             #15
              06c1 0126  ld   [$26]       2632  ld([sysArgs+2])                 #16 a[2]>>2
              06c2 5003  ora  $03,x       2633  ora(0x03,X)                     #17
              06c3 0d00  ld   [y,x]       2634  ld([Y,X])                       #18
              06c4 c227  st   [$27]       2635  st([sysArgs+3])                 #19 -> Pixel 3
                                          2636
              06c5 0126  ld   [$26]       2637  ld([sysArgs+2])                 #20 (a[2]&3)<<4
              06c6 2003  anda $03         2638  anda(0x03)                      #21
              06c7 8200  adda ac          2639  adda(AC)                        #22
              06c8 8200  adda ac          2640  adda(AC)                        #23
              06c9 8200  adda ac          2641  adda(AC)                        #24
              06ca 8200  adda ac          2642  adda(AC)                        #25
              06cb c226  st   [$26]       2643  st([sysArgs+2])                 #26
              06cc 0125  ld   [$25]       2644  ld([sysArgs+1])                 #27 | a[1]>>4
              06cd 5003  ora  $03,x       2645  ora(0x03,X)                     #28
              06ce 0d00  ld   [y,x]       2646  ld([Y,X])                       #29
              06cf 5003  ora  $03,x       2647  ora(0x03,X)                     #30
              06d0 0d00  ld   [y,x]       2648  ld([Y,X])                       #31
              06d1 4126  ora  [$26]       2649  ora([sysArgs+2])                #32
              06d2 c226  st   [$26]       2650  st([sysArgs+2])                 #33 -> Pixel 2
                                          2651
              06d3 0125  ld   [$25]       2652  ld([sysArgs+1])                 #34 (a[1]&15)<<2
              06d4 200f  anda $0f         2653  anda(0x0f)                      #35
              06d5 8200  adda ac          2654  adda(AC)                        #36
              06d6 8200  adda ac          2655  adda(AC)                        #37
              06d7 c225  st   [$25]       2656  st([sysArgs+1])                 #38
                                          2657
              06d8 0124  ld   [$24]       2658  ld([sysArgs+0])                 #39 | a[0]>>6
              06d9 5003  ora  $03,x       2659  ora(0x03,X)                     #40
              06da 0d00  ld   [y,x]       2660  ld([Y,X])                       #41
              06db 5003  ora  $03,x       2661  ora(0x03,X)                     #42
              06dc 0d00  ld   [y,x]       2662  ld([Y,X])                       #43
              06dd 5003  ora  $03,x       2663  ora(0x03,X)                     #44
              06de 0d00  ld   [y,x]       2664  ld([Y,X])                       #45
              06df 4125  ora  [$25]       2665  ora([sysArgs+1])                #46
              06e0 c225  st   [$25]       2666  st([sysArgs+1])                 #47 -> Pixel 1
                                          2667
              06e1 0124  ld   [$24]       2668  ld([sysArgs+0])                 #48 a[1]&63
              06e2 203f  anda $3f         2669  anda(0x3f)                      #49
              06e3 c224  st   [$24]       2670  st([sysArgs+0])                 #50 -> Pixel 0
                                          2671
              06e4 1403  ld   $03,y       2672  ld(hi('REENTER'),Y)             #51
              06e5 e0cb  jmp  y,$cb       2673  jmp(Y,'REENTER')                #52
              06e6 00e4  ld   $e4         2674  ld(-56/2)                       #53
                                          2675
                                          2676  #-----------------------------------------------------------------------
                                          2677  #       v6502 right shift instruction
                                          2678  #-----------------------------------------------------------------------
                                          2679
                                          2680  label('v6502_lsr#30')
v6502_lsr#30: 06e7 1525  ld   [$25],y     2681  ld([v6502_ADH],Y)               #30 Result
              06e8 ce00  st   [y,x]       2682  st([Y,X])                       #31
              06e9 c228  st   [$28]       2683  st([v6502_Qz])                  #32 Z flag
              06ea c229  st   [$29]       2684  st([v6502_Qn])                  #33 N flag
              06eb 140e  ld   $0e,y       2685  ld(hi('v6502_next'),Y)          #34
              06ec 00ed  ld   $ed         2686  ld(-38/2)                       #35
              06ed e020  jmp  y,$20       2687  jmp(Y,'v6502_next')             #36
                                          2688  #nop()                          #37 Overlap
                                          2689  #
                                          2690  label('v6502_ror#38')
v6502_ror#38: 06ee 1525  ld   [$25],y     2691  ld([v6502_ADH],Y)               #38,38 Result
              06ef 4119  ora  [$19]       2692  ora([v6502_BI])                 #39 Transfer bit 8
              06f0 ce00  st   [y,x]       2693  st([Y,X])                       #40
              06f1 c228  st   [$28]       2694  st([v6502_Qz])                  #41 Z flag
              06f2 c229  st   [$29]       2695  st([v6502_Qn])                  #42 N flag
              06f3 140e  ld   $0e,y       2696  ld(hi('v6502_next'),Y)          #43
              06f4 e020  jmp  y,$20       2697  jmp(Y,'v6502_next')             #44
              06f5 00e9  ld   $e9         2698  ld(-46/2)                       #45
                                          2699
                                          2700  #-----------------------------------------------------------------------
                                          2701  #       Reserved
                                          2702  #-----------------------------------------------------------------------
                                          2703
                                          2704  # XXX Reserve space for LSRW?
                                          2705
                                          2706  #-----------------------------------------------------------------------
                                          2707  #
                                          2708  #  $0700 ROM page 7-8: Gigatron font data
                                          2709  #
                                          2710  #-----------------------------------------------------------------------
                                          2711
              06f6 0200  nop              2712  align(0x100, size=0x100)
              06f7 0200  nop
              06f8 0200  nop
              * 10 times
                                          2713
                                          2714  label('font32up')
                                          2715  for ch in range(32, 32+50):
                                          2716    comment = 'Char %s' % repr(chr(ch))
                                          2717    for byte in font.font[ch-32]:
                                          2718      ld(byte)
font32up:     0700 0000  ld   $00         ;Char ' '
              0701 0000  ld   $00
              0702 0000  ld   $00
              * 5 times
              0705 0000  ld   $00         ;Char '!'
              0706 0000  ld   $00
              0707 00fa  ld   $fa
              0708 0000  ld   $00
              0709 0000  ld   $00
              070a 00a0  ld   $a0         ;Char '"'
              070b 00c0  ld   $c0
              070c 0000  ld   $00
              070d 00a0  ld   $a0
              070e 00c0  ld   $c0
              070f 0028  ld   $28         ;Char '#'
              0710 00fe  ld   $fe
              0711 0028  ld   $28
              0712 00fe  ld   $fe
              0713 0028  ld   $28
              0714 0024  ld   $24         ;Char '$'
              0715 0054  ld   $54
              0716 00fe  ld   $fe
              0717 0054  ld   $54
              0718 0048  ld   $48
              0719 00c4  ld   $c4         ;Char '%'
              071a 00c8  ld   $c8
              071b 0010  ld   $10
              071c 0026  ld   $26
              071d 0046  ld   $46
              071e 006c  ld   $6c         ;Char '&'
              071f 0092  ld   $92
              0720 006a  ld   $6a
              0721 0004  ld   $04
              0722 000a  ld   $0a
              0723 0000  ld   $00         ;Char "'"
              0724 00a0  ld   $a0
              0725 00c0  ld   $c0
              0726 0000  ld   $00
              0727 0000  ld   $00
              0728 0000  ld   $00         ;Char '('
              0729 0038  ld   $38
              072a 0044  ld   $44
              072b 0082  ld   $82
              072c 0000  ld   $00
              072d 0000  ld   $00         ;Char ')'
              072e 0082  ld   $82
              072f 0044  ld   $44
              0730 0038  ld   $38
              0731 0000  ld   $00
              0732 0028  ld   $28         ;Char '*'
              0733 0010  ld   $10
              0734 007c  ld   $7c
              0735 0010  ld   $10
              0736 0028  ld   $28
              0737 0010  ld   $10         ;Char '+'
              0738 0010  ld   $10
              0739 007c  ld   $7c
              073a 0010  ld   $10
              073b 0010  ld   $10
              073c 0000  ld   $00         ;Char ','
              073d 0005  ld   $05
              073e 0006  ld   $06
              073f 0000  ld   $00
              0740 0000  ld   $00
              0741 0010  ld   $10         ;Char '-'
              0742 0010  ld   $10
              0743 0010  ld   $10
              * 5 times
              0746 0000  ld   $00         ;Char '.'
              0747 0002  ld   $02
              0748 0002  ld   $02
              0749 0000  ld   $00
              074a 0000  ld   $00
              074b 0000  ld   $00         ;Char '/'
              074c 0006  ld   $06
              074d 0018  ld   $18
              074e 0060  ld   $60
              074f 0000  ld   $00
              0750 007c  ld   $7c         ;Char '0'
              0751 008a  ld   $8a
              0752 0092  ld   $92
              0753 00a2  ld   $a2
              0754 007c  ld   $7c
              0755 0022  ld   $22         ;Char '1'
              0756 0042  ld   $42
              0757 00fe  ld   $fe
              0758 0002  ld   $02
              0759 0002  ld   $02
              075a 0046  ld   $46         ;Char '2'
              075b 008a  ld   $8a
              075c 0092  ld   $92
              075d 0092  ld   $92
              075e 0062  ld   $62
              075f 0044  ld   $44         ;Char '3'
              0760 0082  ld   $82
              0761 0092  ld   $92
              0762 0092  ld   $92
              0763 006c  ld   $6c
              0764 0018  ld   $18         ;Char '4'
              0765 0028  ld   $28
              0766 0048  ld   $48
              0767 00fe  ld   $fe
              0768 0008  ld   $08
              0769 00e4  ld   $e4         ;Char '5'
              076a 00a2  ld   $a2
              076b 00a2  ld   $a2
              076c 00a2  ld   $a2
              076d 009c  ld   $9c
              076e 003c  ld   $3c         ;Char '6'
              076f 0052  ld   $52
              0770 0092  ld   $92
              0771 0092  ld   $92
              0772 000c  ld   $0c
              0773 0080  ld   $80         ;Char '7'
              0774 008e  ld   $8e
              0775 0090  ld   $90
              0776 00a0  ld   $a0
              0777 00c0  ld   $c0
              0778 006c  ld   $6c         ;Char '8'
              0779 0092  ld   $92
              077a 0092  ld   $92
              077b 0092  ld   $92
              077c 006c  ld   $6c
              077d 0060  ld   $60         ;Char '9'
              077e 0092  ld   $92
              077f 0092  ld   $92
              0780 0094  ld   $94
              0781 0078  ld   $78
              0782 0000  ld   $00         ;Char ':'
              0783 0024  ld   $24
              0784 0024  ld   $24
              0785 0000  ld   $00
              0786 0000  ld   $00
              0787 0000  ld   $00         ;Char ';'
              0788 0025  ld   $25
              0789 0026  ld   $26
              078a 0000  ld   $00
              078b 0000  ld   $00
              078c 0010  ld   $10         ;Char '<'
              078d 0028  ld   $28
              078e 0044  ld   $44
              078f 0082  ld   $82
              0790 0000  ld   $00
              0791 0028  ld   $28         ;Char '='
              0792 0028  ld   $28
              0793 0028  ld   $28
              * 5 times
              0796 0000  ld   $00         ;Char '>'
              0797 0082  ld   $82
              0798 0044  ld   $44
              0799 0028  ld   $28
              079a 0010  ld   $10
              079b 0040  ld   $40         ;Char '?'
              079c 0080  ld   $80
              079d 008a  ld   $8a
              079e 0090  ld   $90
              079f 0060  ld   $60
              07a0 007c  ld   $7c         ;Char '@'
              07a1 0082  ld   $82
              07a2 00ba  ld   $ba
              07a3 00aa  ld   $aa
              07a4 0078  ld   $78
              07a5 003e  ld   $3e         ;Char 'A'
              07a6 0048  ld   $48
              07a7 0088  ld   $88
              07a8 0048  ld   $48
              07a9 003e  ld   $3e
              07aa 00fe  ld   $fe         ;Char 'B'
              07ab 0092  ld   $92
              07ac 0092  ld   $92
              07ad 0092  ld   $92
              07ae 006c  ld   $6c
              07af 007c  ld   $7c         ;Char 'C'
              07b0 0082  ld   $82
              07b1 0082  ld   $82
              07b2 0082  ld   $82
              07b3 0044  ld   $44
              07b4 00fe  ld   $fe         ;Char 'D'
              07b5 0082  ld   $82
              07b6 0082  ld   $82
              07b7 0044  ld   $44
              07b8 0038  ld   $38
              07b9 00fe  ld   $fe         ;Char 'E'
              07ba 0092  ld   $92
              07bb 0092  ld   $92
              07bc 0092  ld   $92
              07bd 0082  ld   $82
              07be 00fe  ld   $fe         ;Char 'F'
              07bf 0090  ld   $90
              07c0 0090  ld   $90
              07c1 0090  ld   $90
              07c2 0080  ld   $80
              07c3 007c  ld   $7c         ;Char 'G'
              07c4 0082  ld   $82
              07c5 0082  ld   $82
              07c6 0092  ld   $92
              07c7 005c  ld   $5c
              07c8 00fe  ld   $fe         ;Char 'H'
              07c9 0010  ld   $10
              07ca 0010  ld   $10
              07cb 0010  ld   $10
              07cc 00fe  ld   $fe
              07cd 0000  ld   $00         ;Char 'I'
              07ce 0082  ld   $82
              07cf 00fe  ld   $fe
              07d0 0082  ld   $82
              07d1 0000  ld   $00
              07d2 0004  ld   $04         ;Char 'J'
              07d3 0002  ld   $02
              07d4 0082  ld   $82
              07d5 00fc  ld   $fc
              07d6 0080  ld   $80
              07d7 00fe  ld   $fe         ;Char 'K'
              07d8 0010  ld   $10
              07d9 0028  ld   $28
              07da 0044  ld   $44
              07db 0082  ld   $82
              07dc 00fe  ld   $fe         ;Char 'L'
              07dd 0002  ld   $02
              07de 0002  ld   $02
              07df 0002  ld   $02
              07e0 0002  ld   $02
              07e1 00fe  ld   $fe         ;Char 'M'
              07e2 0040  ld   $40
              07e3 0030  ld   $30
              07e4 0040  ld   $40
              07e5 00fe  ld   $fe
              07e6 00fe  ld   $fe         ;Char 'N'
              07e7 0020  ld   $20
              07e8 0010  ld   $10
              07e9 0008  ld   $08
              07ea 00fe  ld   $fe
              07eb 007c  ld   $7c         ;Char 'O'
              07ec 0082  ld   $82
              07ed 0082  ld   $82
              07ee 0082  ld   $82
              07ef 007c  ld   $7c
              07f0 00fe  ld   $fe         ;Char 'P'
              07f1 0090  ld   $90
              07f2 0090  ld   $90
              07f3 0090  ld   $90
              07f4 0060  ld   $60
              07f5 007c  ld   $7c         ;Char 'Q'
              07f6 0082  ld   $82
              07f7 008a  ld   $8a
              07f8 0084  ld   $84
              07f9 007a  ld   $7a
                                          2719      comment = C(comment)
                                          2720
              07fa 0200  nop              2721  trampoline()
              07fb fe00  bra  ac          ;+-----------------------------------+
              07fc fcfd  bra  $07fd       ;|                                   |
              07fd 1404  ld   $04,y       ;| Trampoline for page $0700 lookups |
              07fe e068  jmp  y,$68       ;|                                   |
              07ff c218  st   [$18]       ;+-----------------------------------+
                                          2722
                                          2723  #-----------------------------------------------------------------------
                                          2724
                                          2725  align(0x100, size=0x100)
                                          2726
                                          2727  label('font82up')
                                          2728  for ch in range(32+50, 132):
                                          2729    comment = 'Char %s' % repr(chr(ch))
                                          2730    for byte in font.font[ch-32]:
                                          2731      ld(byte)
font82up:     0800 00fe  ld   $fe         ;Char 'R'
              0801 0090  ld   $90
              0802 0098  ld   $98
              0803 0094  ld   $94
              0804 0062  ld   $62
              0805 0062  ld   $62         ;Char 'S'
              0806 0092  ld   $92
              0807 0092  ld   $92
              0808 0092  ld   $92
              0809 000c  ld   $0c
              080a 0080  ld   $80         ;Char 'T'
              080b 0080  ld   $80
              080c 00fe  ld   $fe
              080d 0080  ld   $80
              080e 0080  ld   $80
              080f 00fc  ld   $fc         ;Char 'U'
              0810 0002  ld   $02
              0811 0002  ld   $02
              0812 0002  ld   $02
              0813 00fc  ld   $fc
              0814 00f0  ld   $f0         ;Char 'V'
              0815 000c  ld   $0c
              0816 0002  ld   $02
              0817 000c  ld   $0c
              0818 00f0  ld   $f0
              0819 00fe  ld   $fe         ;Char 'W'
              081a 0004  ld   $04
              081b 0018  ld   $18
              081c 0004  ld   $04
              081d 00fe  ld   $fe
              081e 00c6  ld   $c6         ;Char 'X'
              081f 0028  ld   $28
              0820 0010  ld   $10
              0821 0028  ld   $28
              0822 00c6  ld   $c6
              0823 00e0  ld   $e0         ;Char 'Y'
              0824 0010  ld   $10
              0825 000e  ld   $0e
              0826 0010  ld   $10
              0827 00e0  ld   $e0
              0828 0086  ld   $86         ;Char 'Z'
              0829 008a  ld   $8a
              082a 0092  ld   $92
              082b 00a2  ld   $a2
              082c 00c2  ld   $c2
              082d 0000  ld   $00         ;Char '['
              082e 00fe  ld   $fe
              082f 0082  ld   $82
              0830 0082  ld   $82
              0831 0000  ld   $00
              0832 0000  ld   $00         ;Char '\\'
              0833 0060  ld   $60
              0834 0018  ld   $18
              0835 0006  ld   $06
              0836 0000  ld   $00
              0837 0000  ld   $00         ;Char ']'
              0838 0082  ld   $82
              0839 0082  ld   $82
              083a 00fe  ld   $fe
              083b 0000  ld   $00
              083c 0020  ld   $20         ;Char '^'
              083d 0040  ld   $40
              083e 0080  ld   $80
              083f 0040  ld   $40
              0840 0020  ld   $20
              0841 0002  ld   $02         ;Char '_'
              0842 0002  ld   $02
              0843 0002  ld   $02
              * 5 times
              0846 0000  ld   $00         ;Char '`'
              0847 0000  ld   $00
              0848 00c0  ld   $c0
              0849 00a0  ld   $a0
              084a 0000  ld   $00
              084b 0004  ld   $04         ;Char 'a'
              084c 002a  ld   $2a
              084d 002a  ld   $2a
              084e 002a  ld   $2a
              084f 001e  ld   $1e
              0850 00fe  ld   $fe         ;Char 'b'
              0851 0022  ld   $22
              0852 0022  ld   $22
              0853 0022  ld   $22
              0854 001c  ld   $1c
              0855 001c  ld   $1c         ;Char 'c'
              0856 0022  ld   $22
              0857 0022  ld   $22
              0858 0022  ld   $22
              0859 0002  ld   $02
              085a 001c  ld   $1c         ;Char 'd'
              085b 0022  ld   $22
              085c 0022  ld   $22
              085d 0022  ld   $22
              085e 00fe  ld   $fe
              085f 001c  ld   $1c         ;Char 'e'
              0860 002a  ld   $2a
              0861 002a  ld   $2a
              0862 002a  ld   $2a
              0863 0018  ld   $18
              0864 0010  ld   $10         ;Char 'f'
              0865 007e  ld   $7e
              0866 0090  ld   $90
              0867 0080  ld   $80
              0868 0040  ld   $40
              0869 0018  ld   $18         ;Char 'g'
              086a 0025  ld   $25
              086b 0025  ld   $25
              086c 0025  ld   $25
              086d 001e  ld   $1e
              086e 00fe  ld   $fe         ;Char 'h'
              086f 0020  ld   $20
              0870 0020  ld   $20
              0871 0020  ld   $20
              0872 001e  ld   $1e
              0873 0000  ld   $00         ;Char 'i'
              0874 0022  ld   $22
              0875 00be  ld   $be
              0876 0002  ld   $02
              0877 0000  ld   $00
              0878 0002  ld   $02         ;Char 'j'
              0879 0001  ld   $01
              087a 0021  ld   $21
              087b 00be  ld   $be
              087c 0000  ld   $00
              087d 00fe  ld   $fe         ;Char 'k'
              087e 0008  ld   $08
              087f 0018  ld   $18
              0880 0024  ld   $24
              0881 0002  ld   $02
              0882 0000  ld   $00         ;Char 'l'
              0883 0082  ld   $82
              0884 00fe  ld   $fe
              0885 0002  ld   $02
              0886 0000  ld   $00
              0887 003e  ld   $3e         ;Char 'm'
              0888 0020  ld   $20
              0889 001c  ld   $1c
              088a 0020  ld   $20
              088b 001e  ld   $1e
              088c 003e  ld   $3e         ;Char 'n'
              088d 0010  ld   $10
              088e 0020  ld   $20
              088f 0020  ld   $20
              0890 001e  ld   $1e
              0891 001c  ld   $1c         ;Char 'o'
              0892 0022  ld   $22
              0893 0022  ld   $22
              0894 0022  ld   $22
              0895 001c  ld   $1c
              0896 003f  ld   $3f         ;Char 'p'
              0897 0024  ld   $24
              0898 0024  ld   $24
              0899 0024  ld   $24
              089a 0018  ld   $18
              089b 0018  ld   $18         ;Char 'q'
              089c 0024  ld   $24
              089d 0024  ld   $24
              089e 0024  ld   $24
              089f 003f  ld   $3f
              08a0 003e  ld   $3e         ;Char 'r'
              08a1 0010  ld   $10
              08a2 0020  ld   $20
              08a3 0020  ld   $20
              08a4 0010  ld   $10
              08a5 0012  ld   $12         ;Char 's'
              08a6 002a  ld   $2a
              08a7 002a  ld   $2a
              08a8 002a  ld   $2a
              08a9 0004  ld   $04
              08aa 0020  ld   $20         ;Char 't'
              08ab 00fc  ld   $fc
              08ac 0022  ld   $22
              08ad 0002  ld   $02
              08ae 0004  ld   $04
              08af 003c  ld   $3c         ;Char 'u'
              08b0 0002  ld   $02
              08b1 0002  ld   $02
              08b2 0004  ld   $04
              08b3 003e  ld   $3e
              08b4 0038  ld   $38         ;Char 'v'
              08b5 0004  ld   $04
              08b6 0002  ld   $02
              08b7 0004  ld   $04
              08b8 0038  ld   $38
              08b9 003c  ld   $3c         ;Char 'w'
              08ba 0002  ld   $02
              08bb 000c  ld   $0c
              08bc 0002  ld   $02
              08bd 003c  ld   $3c
              08be 0022  ld   $22         ;Char 'x'
              08bf 0014  ld   $14
              08c0 0008  ld   $08
              08c1 0014  ld   $14
              08c2 0022  ld   $22
              08c3 0038  ld   $38         ;Char 'y'
              08c4 0005  ld   $05
              08c5 0005  ld   $05
              08c6 0005  ld   $05
              08c7 003e  ld   $3e
              08c8 0022  ld   $22         ;Char 'z'
              08c9 0026  ld   $26
              08ca 002a  ld   $2a
              08cb 0032  ld   $32
              08cc 0022  ld   $22
              08cd 0010  ld   $10         ;Char '{'
              08ce 006c  ld   $6c
              08cf 0082  ld   $82
              08d0 0082  ld   $82
              08d1 0000  ld   $00
              08d2 0000  ld   $00         ;Char '|'
              08d3 0000  ld   $00
              08d4 00fe  ld   $fe
              08d5 0000  ld   $00
              08d6 0000  ld   $00
              08d7 0000  ld   $00         ;Char '}'
              08d8 0082  ld   $82
              08d9 0082  ld   $82
              08da 006c  ld   $6c
              08db 0010  ld   $10
              08dc 0040  ld   $40         ;Char '~'
              08dd 0080  ld   $80
              08de 0040  ld   $40
              08df 0020  ld   $20
              08e0 0040  ld   $40
              08e1 00fe  ld   $fe         ;Char '\x7f'
              08e2 00fe  ld   $fe
              08e3 00fe  ld   $fe
              * 5 times
              08e6 0010  ld   $10         ;Char '\x80'
              08e7 0038  ld   $38
              08e8 0054  ld   $54
              08e9 0010  ld   $10
              08ea 0010  ld   $10
              08eb 0010  ld   $10         ;Char '\x81'
              08ec 0020  ld   $20
              08ed 007c  ld   $7c
              08ee 0020  ld   $20
              08ef 0010  ld   $10
              08f0 0010  ld   $10         ;Char '\x82'
              08f1 0010  ld   $10
              08f2 0054  ld   $54
              08f3 0038  ld   $38
              08f4 0010  ld   $10
              08f5 0010  ld   $10         ;Char '\x83'
              08f6 0008  ld   $08
              08f7 007c  ld   $7c
              08f8 0008  ld   $08
              08f9 0010  ld   $10
                                          2732      comment = C(comment)
                                          2733
              08fa 0200  nop              2734  trampoline()
              08fb fe00  bra  ac          ;+-----------------------------------+
              08fc fcfd  bra  $08fd       ;|                                   |
              08fd 1404  ld   $04,y       ;| Trampoline for page $0800 lookups |
              08fe e068  jmp  y,$68       ;|                                   |
              08ff c218  st   [$18]       ;+-----------------------------------+
                                          2735
                                          2736  #-----------------------------------------------------------------------
                                          2737  #
                                          2738  #  $0900 ROM page 9: Key table for music
                                          2739  #
                                          2740  #-----------------------------------------------------------------------
                                          2741
                                          2742  align(0x100, size=0x100)
                                          2743  notes = 'CCDDEFFGGAAB'
                                          2744  sampleRate = cpuClock / 200.0 / 4
                                          2745  label('notesTable')
notesTable:   0900 0000  ld   $00         2746  ld(0)
              0901 0000  ld   $00         2747  ld(0)
                                          2748  for i in range(0, 250, 2):
                                          2749    j = i//2-1
                                          2750    freq = 440.0*2.0**((j-57)/12.0)
                                          2751    if j>=0 and freq <= sampleRate/2.0:
                                          2752      key = int(round(32768 * freq / sampleRate))
                                          2753      octave, note = j//12, notes[j%12]
                                          2754      sharp = '-' if notes[j%12-1] != note else '#'
                                          2755      comment = '%s%s%s (%0.1f Hz)' % (note, sharp, octave, freq)
                                          2756      ld(key&127); C(comment); ld(key>>7)
              0902 0045  ld   $45         ;C-0 (16.4 Hz)
              0903 0000  ld   $00
              0904 0049  ld   $49         ;C#0 (17.3 Hz)
              0905 0000  ld   $00
              0906 004d  ld   $4d         ;D-0 (18.4 Hz)
              0907 0000  ld   $00
              0908 0052  ld   $52         ;D#0 (19.4 Hz)
              0909 0000  ld   $00
              090a 0056  ld   $56         ;E-0 (20.6 Hz)
              090b 0000  ld   $00
              090c 005c  ld   $5c         ;F-0 (21.8 Hz)
              090d 0000  ld   $00
              090e 0061  ld   $61         ;F#0 (23.1 Hz)
              090f 0000  ld   $00
              0910 0067  ld   $67         ;G-0 (24.5 Hz)
              0911 0000  ld   $00
              0912 006d  ld   $6d         ;G#0 (26.0 Hz)
              0913 0000  ld   $00
              0914 0073  ld   $73         ;A-0 (27.5 Hz)
              0915 0000  ld   $00
              0916 007a  ld   $7a         ;A#0 (29.1 Hz)
              0917 0000  ld   $00
              0918 0001  ld   $01         ;B-0 (30.9 Hz)
              0919 0001  ld   $01
              091a 0009  ld   $09         ;C-1 (32.7 Hz)
              091b 0001  ld   $01
              091c 0011  ld   $11         ;C#1 (34.6 Hz)
              091d 0001  ld   $01
              091e 001a  ld   $1a         ;D-1 (36.7 Hz)
              091f 0001  ld   $01
              0920 0023  ld   $23         ;D#1 (38.9 Hz)
              0921 0001  ld   $01
              0922 002d  ld   $2d         ;E-1 (41.2 Hz)
              0923 0001  ld   $01
              0924 0037  ld   $37         ;F-1 (43.7 Hz)
              0925 0001  ld   $01
              0926 0042  ld   $42         ;F#1 (46.2 Hz)
              0927 0001  ld   $01
              0928 004e  ld   $4e         ;G-1 (49.0 Hz)
              0929 0001  ld   $01
              092a 005a  ld   $5a         ;G#1 (51.9 Hz)
              092b 0001  ld   $01
              092c 0067  ld   $67         ;A-1 (55.0 Hz)
              092d 0001  ld   $01
              092e 0074  ld   $74         ;A#1 (58.3 Hz)
              092f 0001  ld   $01
              0930 0003  ld   $03         ;B-1 (61.7 Hz)
              0931 0002  ld   $02
              0932 0012  ld   $12         ;C-2 (65.4 Hz)
              0933 0002  ld   $02
              0934 0023  ld   $23         ;C#2 (69.3 Hz)
              0935 0002  ld   $02
              0936 0034  ld   $34         ;D-2 (73.4 Hz)
              0937 0002  ld   $02
              0938 0046  ld   $46         ;D#2 (77.8 Hz)
              0939 0002  ld   $02
              093a 005a  ld   $5a         ;E-2 (82.4 Hz)
              093b 0002  ld   $02
              093c 006e  ld   $6e         ;F-2 (87.3 Hz)
              093d 0002  ld   $02
              093e 0004  ld   $04         ;F#2 (92.5 Hz)
              093f 0003  ld   $03
              0940 001b  ld   $1b         ;G-2 (98.0 Hz)
              0941 0003  ld   $03
              0942 0033  ld   $33         ;G#2 (103.8 Hz)
              0943 0003  ld   $03
              0944 004d  ld   $4d         ;A-2 (110.0 Hz)
              0945 0003  ld   $03
              0946 0069  ld   $69         ;A#2 (116.5 Hz)
              0947 0003  ld   $03
              0948 0006  ld   $06         ;B-2 (123.5 Hz)
              0949 0004  ld   $04
              094a 0025  ld   $25         ;C-3 (130.8 Hz)
              094b 0004  ld   $04
              094c 0045  ld   $45         ;C#3 (138.6 Hz)
              094d 0004  ld   $04
              094e 0068  ld   $68         ;D-3 (146.8 Hz)
              094f 0004  ld   $04
              0950 000c  ld   $0c         ;D#3 (155.6 Hz)
              0951 0005  ld   $05
              0952 0033  ld   $33         ;E-3 (164.8 Hz)
              0953 0005  ld   $05
              0954 005c  ld   $5c         ;F-3 (174.6 Hz)
              0955 0005  ld   $05
              0956 0008  ld   $08         ;F#3 (185.0 Hz)
              0957 0006  ld   $06
              0958 0036  ld   $36         ;G-3 (196.0 Hz)
              0959 0006  ld   $06
              095a 0067  ld   $67         ;G#3 (207.7 Hz)
              095b 0006  ld   $06
              095c 001b  ld   $1b         ;A-3 (220.0 Hz)
              095d 0007  ld   $07
              095e 0052  ld   $52         ;A#3 (233.1 Hz)
              095f 0007  ld   $07
              0960 000c  ld   $0c         ;B-3 (246.9 Hz)
              0961 0008  ld   $08
              0962 0049  ld   $49         ;C-4 (261.6 Hz)
              0963 0008  ld   $08
              0964 000b  ld   $0b         ;C#4 (277.2 Hz)
              0965 0009  ld   $09
              0966 0050  ld   $50         ;D-4 (293.7 Hz)
              0967 0009  ld   $09
              0968 0019  ld   $19         ;D#4 (311.1 Hz)
              0969 000a  ld   $0a
              096a 0067  ld   $67         ;E-4 (329.6 Hz)
              096b 000a  ld   $0a
              096c 0039  ld   $39         ;F-4 (349.2 Hz)
              096d 000b  ld   $0b
              096e 0010  ld   $10         ;F#4 (370.0 Hz)
              096f 000c  ld   $0c
              0970 006c  ld   $6c         ;G-4 (392.0 Hz)
              0971 000c  ld   $0c
              0972 004e  ld   $4e         ;G#4 (415.3 Hz)
              0973 000d  ld   $0d
              0974 0035  ld   $35         ;A-4 (440.0 Hz)
              0975 000e  ld   $0e
              0976 0023  ld   $23         ;A#4 (466.2 Hz)
              0977 000f  ld   $0f
              0978 0017  ld   $17         ;B-4 (493.9 Hz)
              0979 0010  ld   $10
              097a 0013  ld   $13         ;C-5 (523.3 Hz)
              097b 0011  ld   $11
              097c 0015  ld   $15         ;C#5 (554.4 Hz)
              097d 0012  ld   $12
              097e 001f  ld   $1f         ;D-5 (587.3 Hz)
              097f 0013  ld   $13
              0980 0032  ld   $32         ;D#5 (622.3 Hz)
              0981 0014  ld   $14
              0982 004d  ld   $4d         ;E-5 (659.3 Hz)
              0983 0015  ld   $15
              0984 0072  ld   $72         ;F-5 (698.5 Hz)
              0985 0016  ld   $16
              0986 0020  ld   $20         ;F#5 (740.0 Hz)
              0987 0018  ld   $18
              0988 0058  ld   $58         ;G-5 (784.0 Hz)
              0989 0019  ld   $19
              098a 001c  ld   $1c         ;G#5 (830.6 Hz)
              098b 001b  ld   $1b
              098c 006b  ld   $6b         ;A-5 (880.0 Hz)
              098d 001c  ld   $1c
              098e 0046  ld   $46         ;A#5 (932.3 Hz)
              098f 001e  ld   $1e
              0990 002f  ld   $2f         ;B-5 (987.8 Hz)
              0991 0020  ld   $20
              0992 0025  ld   $25         ;C-6 (1046.5 Hz)
              0993 0022  ld   $22
              0994 002a  ld   $2a         ;C#6 (1108.7 Hz)
              0995 0024  ld   $24
              0996 003f  ld   $3f         ;D-6 (1174.7 Hz)
              0997 0026  ld   $26
              0998 0064  ld   $64         ;D#6 (1244.5 Hz)
              0999 0028  ld   $28
              099a 001a  ld   $1a         ;E-6 (1318.5 Hz)
              099b 002b  ld   $2b
              099c 0063  ld   $63         ;F-6 (1396.9 Hz)
              099d 002d  ld   $2d
              099e 003f  ld   $3f         ;F#6 (1480.0 Hz)
              099f 0030  ld   $30
              09a0 0031  ld   $31         ;G-6 (1568.0 Hz)
              09a1 0033  ld   $33
              09a2 0038  ld   $38         ;G#6 (1661.2 Hz)
              09a3 0036  ld   $36
              09a4 0056  ld   $56         ;A-6 (1760.0 Hz)
              09a5 0039  ld   $39
              09a6 000d  ld   $0d         ;A#6 (1864.7 Hz)
              09a7 003d  ld   $3d
              09a8 005e  ld   $5e         ;B-6 (1975.5 Hz)
              09a9 0040  ld   $40
              09aa 004b  ld   $4b         ;C-7 (2093.0 Hz)
              09ab 0044  ld   $44
              09ac 0055  ld   $55         ;C#7 (2217.5 Hz)
              09ad 0048  ld   $48
              09ae 007e  ld   $7e         ;D-7 (2349.3 Hz)
              09af 004c  ld   $4c
              09b0 0048  ld   $48         ;D#7 (2489.0 Hz)
              09b1 0051  ld   $51
              09b2 0034  ld   $34         ;E-7 (2637.0 Hz)
              09b3 0056  ld   $56
              09b4 0046  ld   $46         ;F-7 (2793.8 Hz)
              09b5 005b  ld   $5b
              09b6 007f  ld   $7f         ;F#7 (2960.0 Hz)
              09b7 0060  ld   $60
              09b8 0061  ld   $61         ;G-7 (3136.0 Hz)
              09b9 0066  ld   $66
              09ba 006f  ld   $6f         ;G#7 (3322.4 Hz)
              09bb 006c  ld   $6c
              09bc 002c  ld   $2c         ;A-7 (3520.0 Hz)
              09bd 0073  ld   $73
              09be 001a  ld   $1a         ;A#7 (3729.3 Hz)
              09bf 007a  ld   $7a
                                          2757
              09c0 0200  nop              2758  trampoline()
              09c1 0200  nop
              09c2 0200  nop
              * 59 times
              09fb fe00  bra  ac          ;+-----------------------------------+
              09fc fcfd  bra  $09fd       ;|                                   |
              09fd 1404  ld   $04,y       ;| Trampoline for page $0900 lookups |
              09fe e068  jmp  y,$68       ;|                                   |
              09ff c218  st   [$18]       ;+-----------------------------------+
                                          2759
                                          2760  #-----------------------------------------------------------------------
                                          2761  #
                                          2762  #  $0a00 ROM page 10: Inversion table
                                          2763  #
                                          2764  #-----------------------------------------------------------------------
                                          2765
                                          2766  align(0x100, size=0x100)
                                          2767  label('invTable')
                                          2768
                                          2769  # Unit 64, table offset 16 (=1/4), value offset 1: (x+16)*(y+1) == 64*64 - e
                                          2770  for i in range(251):
invTable:     0a00 00ff  ld   $ff         2771    ld(4096//(i+16)-1)
              0a01 00ef  ld   $ef
              0a02 00e2  ld   $e2
              0a03 00d6  ld   $d6
              0a04 00cb  ld   $cb
              0a05 00c2  ld   $c2
              0a06 00b9  ld   $b9
              0a07 00b1  ld   $b1
              0a08 00a9  ld   $a9
              0a09 00a2  ld   $a2
              0a0a 009c  ld   $9c
              0a0b 0096  ld   $96
              0a0c 0091  ld   $91
              0a0d 008c  ld   $8c
              0a0e 0087  ld   $87
              0a0f 0083  ld   $83
              0a10 007f  ld   $7f
              0a11 007b  ld   $7b
              0a12 0077  ld   $77
              0a13 0074  ld   $74
              0a14 0070  ld   $70
              0a15 006d  ld   $6d
              0a16 006a  ld   $6a
              0a17 0068  ld   $68
              0a18 0065  ld   $65
              0a19 0062  ld   $62
              0a1a 0060  ld   $60
              0a1b 005e  ld   $5e
              0a1c 005c  ld   $5c
              0a1d 005a  ld   $5a
              0a1e 0058  ld   $58
              0a1f 0056  ld   $56
              0a20 0054  ld   $54
              0a21 0052  ld   $52
              0a22 0050  ld   $50
              0a23 004f  ld   $4f
              0a24 004d  ld   $4d
              0a25 004c  ld   $4c
              0a26 004a  ld   $4a
              0a27 0049  ld   $49
              0a28 0048  ld   $48
              0a29 0046  ld   $46
              0a2a 0045  ld   $45
              0a2b 0044  ld   $44
              0a2c 0043  ld   $43
              0a2d 0042  ld   $42
              0a2e 0041  ld   $41
              0a2f 0040  ld   $40
              0a30 003f  ld   $3f
              0a31 003e  ld   $3e
              0a32 003d  ld   $3d
              0a33 003c  ld   $3c
              0a34 003b  ld   $3b
              0a35 003a  ld   $3a
              0a36 0039  ld   $39
              0a37 0038  ld   $38
              0a38 0037  ld   $37
              0a39 0037  ld   $37
              0a3a 0036  ld   $36
              0a3b 0035  ld   $35
              0a3c 0034  ld   $34
              0a3d 0034  ld   $34
              0a3e 0033  ld   $33
              0a3f 0032  ld   $32
              0a40 0032  ld   $32
              0a41 0031  ld   $31
              0a42 0030  ld   $30
              0a43 0030  ld   $30
              0a44 002f  ld   $2f
              0a45 002f  ld   $2f
              0a46 002e  ld   $2e
              0a47 002e  ld   $2e
              0a48 002d  ld   $2d
              0a49 002d  ld   $2d
              0a4a 002c  ld   $2c
              0a4b 002c  ld   $2c
              0a4c 002b  ld   $2b
              0a4d 002b  ld   $2b
              0a4e 002a  ld   $2a
              0a4f 002a  ld   $2a
              0a50 0029  ld   $29
              0a51 0029  ld   $29
              0a52 0028  ld   $28
              0a53 0028  ld   $28
              0a54 0027  ld   $27
              0a55 0027  ld   $27
              0a56 0027  ld   $27
              0a57 0026  ld   $26
              0a58 0026  ld   $26
              0a59 0026  ld   $26
              0a5a 0025  ld   $25
              0a5b 0025  ld   $25
              0a5c 0024  ld   $24
              0a5d 0024  ld   $24
              0a5e 0024  ld   $24
              0a5f 0023  ld   $23
              0a60 0023  ld   $23
              0a61 0023  ld   $23
              0a62 0022  ld   $22
              0a63 0022  ld   $22
              0a64 0022  ld   $22
              0a65 0022  ld   $22
              0a66 0021  ld   $21
              0a67 0021  ld   $21
              0a68 0021  ld   $21
              0a69 0020  ld   $20
              0a6a 0020  ld   $20
              0a6b 0020  ld   $20
              0a6c 0020  ld   $20
              0a6d 001f  ld   $1f
              0a6e 001f  ld   $1f
              0a6f 001f  ld   $1f
              0a70 001f  ld   $1f
              0a71 001e  ld   $1e
              0a72 001e  ld   $1e
              0a73 001e  ld   $1e
              0a74 001e  ld   $1e
              0a75 001d  ld   $1d
              0a76 001d  ld   $1d
              0a77 001d  ld   $1d
              0a78 001d  ld   $1d
              0a79 001c  ld   $1c
              0a7a 001c  ld   $1c
              0a7b 001c  ld   $1c
              * 5 times
              0a7e 001b  ld   $1b
              0a7f 001b  ld   $1b
              0a80 001b  ld   $1b
              * 5 times
              0a83 001a  ld   $1a
              0a84 001a  ld   $1a
              0a85 001a  ld   $1a
              * 5 times
              0a88 0019  ld   $19
              0a89 0019  ld   $19
              0a8a 0019  ld   $19
              * 6 times
              0a8e 0018  ld   $18
              0a8f 0018  ld   $18
              0a90 0018  ld   $18
              * 6 times
              0a94 0017  ld   $17
              0a95 0017  ld   $17
              0a96 0017  ld   $17
              * 7 times
              0a9b 0016  ld   $16
              0a9c 0016  ld   $16
              0a9d 0016  ld   $16
              * 8 times
              0aa3 0015  ld   $15
              0aa4 0015  ld   $15
              0aa5 0015  ld   $15
              * 8 times
              0aab 0014  ld   $14
              0aac 0014  ld   $14
              0aad 0014  ld   $14
              * 9 times
              0ab4 0013  ld   $13
              0ab5 0013  ld   $13
              0ab6 0013  ld   $13
              * 9 times
              0abd 0012  ld   $12
              0abe 0012  ld   $12
              0abf 0012  ld   $12
              * 11 times
              0ac8 0011  ld   $11
              0ac9 0011  ld   $11
              0aca 0011  ld   $11
              * 12 times
              0ad4 0010  ld   $10
              0ad5 0010  ld   $10
              0ad6 0010  ld   $10
              * 13 times
              0ae1 000f  ld   $0f
              0ae2 000f  ld   $0f
              0ae3 000f  ld   $0f
              * 16 times
              0af1 000e  ld   $0e
              0af2 000e  ld   $0e
              0af3 000e  ld   $0e
              * 10 times
                                          2772
                                          2773  trampoline()
              0afb fe00  bra  ac          ;+-----------------------------------+
              0afc fcfd  bra  $0afd       ;|                                   |
              0afd 1404  ld   $04,y       ;| Trampoline for page $0a00 lookups |
              0afe e068  jmp  y,$68       ;|                                   |
              0aff c218  st   [$18]       ;+-----------------------------------+
                                          2774
                                          2775  #-----------------------------------------------------------------------
                                          2776  #
                                          2777  #  $0d00 ROM page 11: More SYS functions
                                          2778  #
                                          2779  #-----------------------------------------------------------------------
                                          2780
                                          2781  align(0x100, size=0x100)
                                          2782
                                          2783  #-----------------------------------------------------------------------
                                          2784  # Extension SYS_SetMode_v2_80
                                          2785  #-----------------------------------------------------------------------
                                          2786
                                          2787  # Set video mode to 0 to 3 black scanlines per pixel line.
                                          2788  #
                                          2789  # Mainly for making the MODE command available in Tiny BASIC, so that
                                          2790  # the user can experiment. It's adviced to refrain from using
                                          2791  # SYS_SetMode_v2_80 in regular applications. Video mode is a deeply
                                          2792  # personal preference, and the programmer shouldn't overrule the user
                                          2793  # in that choice. The Gigatron philisophy is that the end user has
                                          2794  # the final say on what happens on the system, not the application,
                                          2795  # even if that implies a degraded performance. This doesn't mean that
                                          2796  # all applications must work well in all video modes: mode 1 is still
                                          2797  # the default. If an application really doesn't work at all in that
                                          2798  # mode, it's acceptable to change mode once after loading.
                                          2799  #
                                          2800  # There's no "SYS_GetMode" function.
                                          2801  #
                                          2802  # Variables:
                                          2803  #       vAC bit 0:1     Mode:
                                          2804  #                         0      "ABCD" -> Full mode (slowest)
                                          2805  #                         1      "ABC-" -> Default mode after reset
                                          2806  #                         2      "A-C-" -> at67's mode
                                          2807  #                         3      "A---" -> HGM's mode
                                          2808  #       vAC bit 2:15    Ignored bits and should be 0
                                          2809  #
                                          2810  # Special values (ROM v4):
                                          2811  #       vAC = 1975      Zombie mode (no video signals, no input,
                                          2812  #                        no blinkenlights).
                                          2813  #       vAC = -1        Leave zombie mode and restore previous mode.
                                          2814
                                          2815  # Actual duration is <80 cycles, but keep some room for future extensions
                                          2816  label('SYS_SetMode_v2_80')
SYS_SetMode_v2_80:
              0b00 140b  ld   $0b,y       2817  ld(hi('sys_SetMode'),Y)         #15
              0b01 e054  jmp  y,$54       2818  jmp(Y,'sys_SetMode')            #16
              0b02 011e  ld   [$1e]       2819  ld([vReturn])                   #17
                                          2820
                                          2821  #-----------------------------------------------------------------------
                                          2822  # Extension SYS_SetMemory_v2_54
                                          2823  #-----------------------------------------------------------------------
                                          2824
                                          2825  # SYS function for setting 1..256 bytes
                                          2826  #
                                          2827  # sysArgs[0]   Copy count (in, changed)
                                          2828  # sysArgs[1]   Copy value (in)
                                          2829  # sysArgs[2:3] Destination address (in, changed)
                                          2830  #
                                          2831  # Sets up to 8 bytes per invocation before restarting itself through vCPU.
                                          2832  # Doesn't wrap around page boundary. Can run 3 times per 148-cycle time slice.
                                          2833  # All combined that gives a 300% speedup over ROMv4 and before.
                                          2834
                                          2835  label('SYS_SetMemory_v2_54')
SYS_SetMemory_v2_54:
              0b03 0124  ld   [$24]       2836  ld([sysArgs+0])                 #15
                                          2837  bra('sys_SetMemory#18')         #16
              0b04 fc18  bra  sys_SetMemory#18
              0b05 1126  ld   [$26],x     2838  ld([sysArgs+2],X)               #17
                                          2839
                                          2840  #-----------------------------------------------------------------------
                                          2841  # Extension SYS_SendSerial1_v3_80
                                          2842  #-----------------------------------------------------------------------
                                          2843
                                          2844  # SYS function for sending data over serial controller port using
                                          2845  # pulse width modulation of the vertical sync signal.
                                          2846  #
                                          2847  # Variables:
                                          2848  #       sysArgs[0:1]    Source address               (in, changed)
                                          2849  #       sysArgs[2]      Start bit mask (typically 1) (in, changed)
                                          2850  #       sysArgs[3]      Number of send frames X      (in, changed)
                                          2851  #
                                          2852  # The sending will abort if input data is detected on the serial port.
                                          2853  # Returns 0 in case of all bits sent, or <>0 in case of abort
                                          2854  #
                                          2855  # This modulates the next upcoming X vertical pulses with the supplied
                                          2856  # data. A zero becomes a 7 line vPulse, a one will be 9 lines.
                                          2857  # After that, the vPulse width falls back to 8 lines (idle).
                                          2858
                                          2859  label('SYS_SendSerial1_v3_80')
SYS_SendSerial1_v3_80:
              0b06 0109  ld   [$09]       2860  ld([videoY])                    #15
                                          2861  bra('sys_SendSerial1')          #16
              0b07 fc83  bra  sys_SendSerial1
              0b08 60b3  xora $b3         2862  xora(videoYline0)               #17 First line of vertical blank
                                          2863
                                          2864  #-----------------------------------------------------------------------
                                          2865  # Extension SYS_ExpanderControl_v4_40
                                          2866  #-----------------------------------------------------------------------
                                          2867
                                          2868  # Sets the I/O and RAM expander's control register
                                          2869  #
                                          2870  # Variables:
                                          2871  #       vAC bit 2       Device enable /SS0
                                          2872  #           bit 3       Device enable /SS1
                                          2873  #           bit 4       Device enable /SS2
                                          2874  #           bit 5       Device enable /SS3
                                          2875  #           bit 6       Banking B0
                                          2876  #           bit 7       Banking B1
                                          2877  #           bit 15      Data out MOSI
                                          2878  #       sysArgs[7]      Cache for control state (written to)
                                          2879  #
                                          2880  # Intended for prototyping, and probably too low-level for most applications
                                          2881  # Still there's a safeguard: it's not possible to disable RAM using this
                                          2882
                                          2883  label('SYS_ExpanderControl_v4_40')
SYS_ExpanderControl_v4_40:
              0b09 140c  ld   $0c,y       2884  ld(hi('sys_ExpanderControl'),Y) #15
              0b0a e0fb  jmp  y,$fb       2885  jmp(Y,'sys_ExpanderControl')    #16
              0b0b 00fc  ld   $fc         2886  ld(0b11111100)                  #17 Safety (SCLK=0)
                                          2887  #    ^^^^^^^^
                                          2888  #    |||||||`-- SCLK
                                          2889  #    ||||||`--- Not connected
                                          2890  #    |||||`---- /SS0
                                          2891  #    ||||`----- /SS1
                                          2892  #    |||`------ /SS2
                                          2893  #    ||`------- /SS3
                                          2894  #    |`-------- B0
                                          2895  #    `--------- B1
                                          2896
                                          2897  #-----------------------------------------------------------------------
                                          2898  # Extension SYS_Run6502_v4_80
                                          2899  #-----------------------------------------------------------------------
                                          2900
                                          2901  # Transfer control to v6502
                                          2902  #
                                          2903  # Calling 6502 code from vCPU goes (only) through this SYS function.
                                          2904  # Directly modifying the vCpuSelect variable is unreliable. The
                                          2905  # control transfer is immediate, without waiting for the current
                                          2906  # time slice to end or first returning to vCPU.
                                          2907  #
                                          2908  # vCPU code and v6502 code can interoperate without much hassle:
                                          2909  # - The v6502 program counter is vLR, and v6502 doesn't touch vPC
                                          2910  # - Returning to vCPU is with the BRK instruction
                                          2911  # - BRK doesn't dump process state on the stack
                                          2912  # - vCPU can save/restore the vLR with PUSH/POP
                                          2913  # - Stacks are shared, vAC is shared
                                          2914  # - vAC can indicate what the v6502 code wants. vAC+1 will be cleared
                                          2915  # - Alternative is to leave a word in sysArgs[6:7] (v6502 X and Y registers)
                                          2916  # - Another way is to set vPC before BRK, and vCPU will continue there(+2)
                                          2917  #
                                          2918  # Calling v6502 code from vCPU looks like this:
                                          2919  #       LDWI  SYS_Run6502_v4_80
                                          2920  #       STW   sysFn
                                          2921  #       LDWI  $6502_start_address
                                          2922  #       STW   vLR
                                          2923  #       SYS   80
                                          2924  #
                                          2925  # Variables:
                                          2926  #       vAC             Accumulator
                                          2927  #       vLR             Program Counter
                                          2928  #       vSP             Stack Pointer (+1)
                                          2929  #       sysArgs[6]      Index Register X
                                          2930  #       sysArgs[7]      Index Register Y
                                          2931  # For info:
                                          2932  #       sysArgs[0:1]    Address Register, free to clobber
                                          2933  #       sysArgs[2]      Instruction Register, free to clobber
                                          2934  #       sysArgs[3:5]    Flags, don't touch
                                          2935  #
                                          2936  # Implementation details::
                                          2937  #
                                          2938  #  The time to reserve for this transition is the maximum time
                                          2939  #  between NEXT and v6502_check. This is
                                          2940  #       SYS call duration + 2*v6502_maxTicks + (v6502_overhead - vCPU_overhead)
                                          2941  #     = 22 + 28 + (11 - 9) = 62 cycles.
                                          2942  #  So reserving 80 cycles is future proof. This isn't overhead, as it includes
                                          2943  #  the fetching of the first 6502 opcode and its operands..
                                          2944  #
                                          2945  #                      0            10                 28=0         9
                                          2946  #    ---+----+---------+------------+------------------+-----------+---
                                          2947  # video | nop| runVcpu |   ENTER    | At least one ins |   EXIT    | video
                                          2948  #    ---+----+---------+------------+------------------+-----------+---
                                          2949  #        sync  prelude  ENTER-to-ins    ins-to-NEXT     NEXT-to-video
                                          2950  #       |<-->|
                                          2951  #        0/1 |<------->|
                                          2952  #                 5    |<----------------------------->|
                                          2953  #          runVCpu_overhead           28               |<--------->|
                                          2954  #                                 2*maxTicks                 9
                                          2955  #                                                      vCPU_overhead
                                          2956  #
                                          2957  #                      0                21                    38=0       11
                                          2958  #    ---+----+---------+----------------+--------------------+-----------+---
                                          2959  # video | nop| runVcpu |   v6502_ENTER  | At least one fetch |v6502_exitB| video
                                          2960  #    ---+----+---------+----------------+--------------------+-----------+---
                                          2961  #        sync  prelude   enter-to-fetch     fetch-to-check    check-to-video
                                          2962  #       |<-->|
                                          2963  #        0/1 |<------->|
                                          2964  #                 5    |<----------------------------------->|
                                          2965  #          runVcpu_overhead           38                     |<--------->|
                                          2966  #                              2*v6520_maxTicks                    11
                                          2967  #                                                            v6502_overhead
                                          2968
                                          2969  label('SYS_Run6502_v4_80')
SYS_Run6502_v4_80:
              0b0c 140d  ld   $0d,y       2970  ld(hi('sys_v6502'),Y)           #15
              0b0d e07f  jmp  y,$7f       2971  jmp(Y,'sys_v6502')              #16
              0b0e 000d  ld   $0d         2972  ld(hi('v6502_ENTER'))           #17 Activate v6502
                                          2973
                                          2974  #-----------------------------------------------------------------------
                                          2975  # Extension SYS_ResetWaveforms_v4_50
                                          2976  #-----------------------------------------------------------------------
                                          2977
                                          2978  # soundTable[4x+0] = sawtooth, to be modified into metallic/noise
                                          2979  # soundTable[4x+1] = pulse
                                          2980  # soundTable[4x+2] = triangle
                                          2981  # soundTable[4x+3] = sawtooth, also useful to right shift 2 bits
                                          2982
                                          2983  label('SYS_ResetWaveforms_v4_50')
SYS_ResetWaveforms_v4_50:
              0b0f 1412  ld   $12,y       2984  ld(hi('sys_ResetWaveforms'),Y)  #15 Initial setup of waveforms. [vAC+0]=i
              0b10 e0ae  jmp  y,$ae       2985  jmp(Y,'sys_ResetWaveforms')     #16
              0b11 1407  ld   $07,y       2986  ld(soundTable>>8,Y)             #17
                                          2987
                                          2988  #-----------------------------------------------------------------------
                                          2989  # Extension SYS_ShuffleNoise_v4_46
                                          2990  #-----------------------------------------------------------------------
                                          2991
                                          2992  # Use simple 6-bits variation of RC4 to permutate waveform 0 in soundTable
                                          2993
                                          2994  label('SYS_ShuffleNoise_v4_46')
SYS_ShuffleNoise_v4_46:
              0b12 1412  ld   $12,y       2995  ld(hi('sys_ShuffleNoise'),Y)    #15 Shuffle soundTable[4i+0]. [vAC+0]=4j, [vAC+1]=4i
              0b13 e0cf  jmp  y,$cf       2996  jmp(Y,'sys_ShuffleNoise')       #16
              0b14 1407  ld   $07,y       2997  ld(soundTable>>8,Y)             #17
                                          2998
                                          2999  #-----------------------------------------------------------------------
                                          3000  # Extension SYS_SpiExchangeBytes_v4_134
                                          3001  #-----------------------------------------------------------------------
                                          3002
                                          3003  # Send AND receive 1..256 bytes over SPI interface
                                          3004
                                          3005  # Variables:
                                          3006  #       sysArgs[0]      Page index start, for both send/receive (in, changed)
                                          3007  #       sysArgs[1]      Memory page for send data (in)
                                          3008  #       sysArgs[2]      Page index stop (in)
                                          3009  #       sysArgs[3]      Memory page for receive data (in)
                                          3010  #       sysArgs[4]      Scratch (changed)
                                          3011
                                          3012  label('SYS_SpiExchangeBytes_v4_134')
SYS_SpiExchangeBytes_v4_134:
              0b15 140d  ld   $0d,y       3013  ld(hi('sys_SpiExchangeBytes'),Y)#15
              0b16 e009  jmp  y,$09       3014  jmp(Y,'sys_SpiExchangeBytes')   #16
              0b17 1401  ld   $01,y       3015  ld(hi(ctrlBits),Y)              #17 Control state as saved by SYS_ExpanderControl
                                          3016
                                          3017  #-----------------------------------------------------------------------
                                          3018  #  Implementations
                                          3019  #-----------------------------------------------------------------------
                                          3020
                                          3021  # SYS_SetMemory_54 implementation
                                          3022  label('sys_SetMemory#18')
sys_SetMemory#18:
              0b18 1527  ld   [$27],y     3023  ld([sysArgs+3],Y)               #18
              0b19 f83c  ble  .sysSb#21   3024  ble('.sysSb#21')                #19 Enter fast lane if >=128 or at 0 (-> 256)
              0b1a a008  suba $08         3025  suba(8)                         #20
              0b1b f43e  bge  .sysSb#23   3026  bge('.sysSb#23')                #21 Or when >=8
              0b1c c224  st   [$24]       3027  st([sysArgs+0])                 #22
              0b1d 2004  anda $04         3028  anda(4)                         #23
              0b1e f025  beq  .sysSb#26   3029  beq('.sysSb#26')                #24
              0b1f 0125  ld   [$25]       3030  ld([sysArgs+1])                 #25 Set 4 pixels
              0b20 de00  st   [y,x++]     3031  st([Y,Xpp])                     #26
              0b21 de00  st   [y,x++]     3032  st([Y,Xpp])                     #27
              0b22 de00  st   [y,x++]     3033  st([Y,Xpp])                     #28
              0b23 fc28  bra  .sysSb#31   3034  bra('.sysSb#31')                #29
              0b24 de00  st   [y,x++]     3035  st([Y,Xpp])                     #30
                                          3036  label('.sysSb#26')
.sysSb#26:    0b25 0001  ld   $01         3037  wait(31-26)                     #26
              0b26 ec26  bne  $0b26
              0b27 a001  suba $01
                                          3038  label('.sysSb#31')
.sysSb#31:    0b28 0124  ld   [$24]       3039  ld([sysArgs+0])                 #31
              0b29 2002  anda $02         3040  anda(2)                         #32
              0b2a f02f  beq  .sysSb#35   3041  beq('.sysSb#35')                #33
              0b2b 0125  ld   [$25]       3042  ld([sysArgs+1])                 #34 Set 2 pixels
              0b2c de00  st   [y,x++]     3043  st([Y,Xpp])                     #35
              0b2d fc32  bra  .sysSb#38   3044  bra('.sysSb#38')                #36
              0b2e de00  st   [y,x++]     3045  st([Y,Xpp])                     #37
                                          3046  label('.sysSb#35')
.sysSb#35:    0b2f 0200  nop              3047  wait(38-35)                     #35
              0b30 0200  nop
              0b31 0200  nop
                                          3048  label('.sysSb#38')
.sysSb#38:    0b32 0124  ld   [$24]       3049  ld([sysArgs+0])                 #38
              0b33 2001  anda $01         3050  anda(1)                         #39
              0b34 f037  beq  $0b37       3051  beq(pc()+3)                     #40
              0b35 fc38  bra  $0b38       3052  bra(pc()+3)                     #41
              0b36 0125  ld   [$25]       3053  ld([sysArgs+1])                 #42 Set 1 pixel
              0b37 0d00  ld   [y,x]       3054  ld([Y,X])                       #42(!) No change
              0b38 ce00  st   [y,x]       3055  st([Y,X])                       #43
              0b39 1403  ld   $03,y       3056  ld(hi('NEXTY'),Y)               #44 Return
              0b3a e000  jmp  y,$00       3057  jmp(Y,'NEXTY')                  #45 All done
              0b3b 00e8  ld   $e8         3058  ld(-48/2)                       #46
                                          3059  label('.sysSb#21')
.sysSb#21:    0b3c 0200  nop              3060  nop()                           #21
              0b3d c224  st   [$24]       3061  st([sysArgs+0])                 #22
                                          3062  label('.sysSb#23')
.sysSb#23:    0b3e 0125  ld   [$25]       3063  ld([sysArgs+1])                 #23 Set 8 pixels
              0b3f de00  st   [y,x++]     3064  st([Y,Xpp])                     #24
              0b40 de00  st   [y,x++]     3065  st([Y,Xpp])                     #25
              0b41 de00  st   [y,x++]     3066  st([Y,Xpp])                     #26
              0b42 de00  st   [y,x++]     3067  st([Y,Xpp])                     #27
              0b43 de00  st   [y,x++]     3068  st([Y,Xpp])                     #28
              0b44 de00  st   [y,x++]     3069  st([Y,Xpp])                     #29
              0b45 de00  st   [y,x++]     3070  st([Y,Xpp])                     #30
              0b46 de00  st   [y,x++]     3071  st([Y,Xpp])                     #31
              0b47 0126  ld   [$26]       3072  ld([sysArgs+2])                 #32 Advance write pointer
              0b48 8008  adda $08         3073  adda(8)                         #33
              0b49 c226  st   [$26]       3074  st([sysArgs+2])                 #34
              0b4a 0124  ld   [$24]       3075  ld([sysArgs+0])                 #35
              0b4b f04e  beq  $0b4e       3076  beq(pc()+3)                     #36
              0b4c fc4f  bra  $0b4f       3077  bra(pc()+3)                     #37
              0b4d 00fe  ld   $fe         3078  ld(-2)                          #38 Self-restart when more to do
              0b4e 0000  ld   $00         3079  ld(0)                           #38(!)
              0b4f 8116  adda [$16]       3080  adda([vPC])                     #39
              0b50 c216  st   [$16]       3081  st([vPC])                       #40
              0b51 1403  ld   $03,y       3082  ld(hi('REENTER'),Y)             #41
              0b52 e0cb  jmp  y,$cb       3083  jmp(Y,'REENTER')                #42
              0b53 00e9  ld   $e9         3084  ld(-46/2)                       #43
                                          3085
                                          3086  # SYS_SetMode_80 implementation
                                          3087  label('sys_SetMode')
sys_SetMode:  0b54 ec57  bne  $0b57       3088  bne(pc()+3)                     #18
              0b55 fc57  bra  $0b57       3089  bra(pc()+2)                     #19
              0b56 0003  ld   $03         3090  ld('startVideo')                #20 First enable video if disabled
              0b57 c21e  st   [$1e]       3091  st([vReturn])                   #20,21
              0b58 0119  ld   [$19]       3092  ld([vAC+1])                     #22
              0b59 f063  beq  .sysSm#25   3093  beq('.sysSm#25')                #23
              0b5a 1403  ld   $03,y       3094  ld(hi('REENTER'),Y)             #24
              0b5b 6118  xora [$18]       3095  xora([vAC])                     #25
              0b5c 60b0  xora $b0         3096  xora((1975>>8)^(1975&255))      #26 Poor man\'s 1975 detection
              0b5d ec60  bne  $0b60       3097  bne(pc()+3)                     #27
              0b5e fc61  bra  $0b61       3098  bra(pc()+3)                     #28
                                          3099  assert videoZ == 0x0100
              0b5f c21e  st   [$1e]       3100  st([vReturn])                   #29 DISABLE video/audio/serial/etc
              0b60 0200  nop              3101  nop()                           #29(!) Ignore and return
              0b61 e0cb  jmp  y,$cb       3102  jmp(Y,'REENTER')                #30
              0b62 00ef  ld   $ef         3103  ld(-34/2)                       #31
                                          3104  label('.sysSm#25')
.sysSm#25:    0b63 0118  ld   [$18]       3105  ld([vAC])                       #25 Mode 0,1,2,3
              0b64 2003  anda $03         3106  anda(3)                         #26
              0b65 8068  adda $68         3107  adda('.sysSm#30')               #27
              0b66 fe00  bra  ac          3108  bra(AC)                         #28
              0b67 fc6c  bra  .sysSm#31   3109  bra('.sysSm#31')                #29
                                          3110  label('.sysSm#30')
.sysSm#30:    0b68 000a  ld   $0a         3111  ld('pixels')                    #30 videoB lines
              0b69 000a  ld   $0a         3112  ld('pixels')                    #30
              0b6a 00f6  ld   $f6         3113  ld('nopixels')                  #30
              0b6b 00f6  ld   $f6         3114  ld('nopixels')                  #30
                                          3115  label('.sysSm#31')
.sysSm#31:    0b6c c20a  st   [$0a]       3116  st([videoModeB])                #31
              0b6d 0118  ld   [$18]       3117  ld([vAC])                       #32
              0b6e 2003  anda $03         3118  anda(3)                         #33
              0b6f 8072  adda $72         3119  adda('.sysSm#37')               #34
              0b70 fe00  bra  ac          3120  bra(AC)                         #35
              0b71 fc76  bra  .sysSm#38   3121  bra('.sysSm#38')                #36
                                          3122  label('.sysSm#37')
.sysSm#37:    0b72 000a  ld   $0a         3123  ld('pixels')                    #37 videoC lines
              0b73 000a  ld   $0a         3124  ld('pixels')                    #37
              0b74 000a  ld   $0a         3125  ld('pixels')                    #37
              0b75 00f6  ld   $f6         3126  ld('nopixels')                  #37
                                          3127  label('.sysSm#38')
.sysSm#38:    0b76 c20b  st   [$0b]       3128  st([videoModeC])                #38
              0b77 0118  ld   [$18]       3129  ld([vAC])                       #39
              0b78 2003  anda $03         3130  anda(3)                         #40
              0b79 807c  adda $7c         3131  adda('.sysSm#44')               #41
              0b7a fe00  bra  ac          3132  bra(AC)                         #42
              0b7b fc80  bra  .sysSm#45   3133  bra('.sysSm#45')                #43
                                          3134  label('.sysSm#44')
.sysSm#44:    0b7c 000a  ld   $0a         3135  ld('pixels')                    #44 videoD lines
              0b7d 00f6  ld   $f6         3136  ld('nopixels')                  #44
              0b7e 00f6  ld   $f6         3137  ld('nopixels')                  #44
              0b7f 00f6  ld   $f6         3138  ld('nopixels')                  #44
                                          3139  label('.sysSm#45')
.sysSm#45:    0b80 c20c  st   [$0c]       3140  st([videoModeD])                #45
              0b81 e0cb  jmp  y,$cb       3141  jmp(Y,'REENTER')                #46
              0b82 00e7  ld   $e7         3142  ld(-50/2)                       #47
                                          3143
                                          3144  # SYS_SendSerial1_v3_80 implementation
                                          3145  label('sys_SendSerial1')
sys_SendSerial1:
              0b83 f08a  beq  .sysSs#20   3146  beq('.sysSs#20')                #18
              0b84 1124  ld   [$24],x     3147  ld([sysArgs+0],X)               #19
              0b85 0116  ld   [$16]       3148  ld([vPC])                       #20 Wait for vBlank
              0b86 a002  suba $02         3149  suba(2)                         #21
              0b87 1403  ld   $03,y       3150  ld(hi('REENTER_28'),Y)          #22
              0b88 e0ca  jmp  y,$ca       3151  jmp(Y,'REENTER_28')             #23
              0b89 c216  st   [$16]       3152  st([vPC])                       #24
                                          3153  label('.sysSs#20')
.sysSs#20:    0b8a 1525  ld   [$25],y     3154  ld([sysArgs+1],Y)               #20 Synchronized with vBlank
              0b8b 0d00  ld   [y,x]       3155  ld([Y,X])                       #21 Copy next bit
              0b8c 2126  anda [$26]       3156  anda([sysArgs+2])               #22
              0b8d ec90  bne  $0b90       3157  bne(pc()+3)                     #23
              0b8e fc91  bra  $0b91       3158  bra(pc()+3)                     #24
              0b8f 000e  ld   $0e         3159  ld(7*2)                         #25
              0b90 0012  ld   $12         3160  ld(9*2)                         #25
              0b91 c20d  st   [$0d]       3161  st([videoPulse])                #26
              0b92 0126  ld   [$26]       3162  ld([sysArgs+2])                 #27 Rotate input bit
              0b93 8200  adda ac          3163  adda(AC)                        #28
              0b94 ec97  bne  $0b97       3164  bne(pc()+3)                     #29
              0b95 fc97  bra  $0b97       3165  bra(pc()+2)                     #30
              0b96 0001  ld   $01         3166  ld(1)                           #31
              0b97 c226  st   [$26]       3167  st([sysArgs+2])                 #31,32 (must be idempotent)
              0b98 2001  anda $01         3168  anda(1)                         #33 Optionally increment pointer
              0b99 8124  adda [$24]       3169  adda([sysArgs+0])               #34
              0b9a d224  st   [$24],x     3170  st([sysArgs+0],X)               #35
              0b9b 0127  ld   [$27]       3171  ld([sysArgs+3])                 #36 Frame counter
              0b9c a001  suba $01         3172  suba(1)                         #37
              0b9d f0ac  beq  .sysSs#40   3173  beq('.sysSs#40')                #38
              0b9e 1403  ld   $03,y       3174  ld(hi('REENTER'),Y)             #39
              0b9f c227  st   [$27]       3175  st([sysArgs+3])                 #40
              0ba0 010f  ld   [$0f]       3176  ld([serialRaw])                 #41 Test for anything being sent back
              0ba1 60ff  xora $ff         3177  xora(255)                       #42
              0ba2 f0a7  beq  .sysSs#45   3178  beq('.sysSs#45')                #43
              0ba3 c218  st   [$18]       3179  st([vAC])                       #44 Abort after key press with non-zero error
              0ba4 c219  st   [$19]       3180  st([vAC+1])                     #45
              0ba5 e0cb  jmp  y,$cb       3181  jmp(Y,'REENTER')                #46
              0ba6 00e7  ld   $e7         3182  ld(-50/2)                       #47
                                          3183  label('.sysSs#45')
.sysSs#45:    0ba7 0116  ld   [$16]       3184  ld([vPC])                       #45 Continue sending bits
              0ba8 a002  suba $02         3185  suba(2)                         #46
              0ba9 c216  st   [$16]       3186  st([vPC])                       #47
              0baa e0cb  jmp  y,$cb       3187  jmp(Y,'REENTER')                #48
              0bab 00e6  ld   $e6         3188  ld(-52/2)                       #49
                                          3189  label('.sysSs#40')
.sysSs#40:    0bac c218  st   [$18]       3190  st([vAC])                       #40 Stop sending bits, no error
              0bad c219  st   [$19]       3191  st([vAC+1])                     #41
              0bae e0cb  jmp  y,$cb       3192  jmp(Y,'REENTER')                #42
              0baf 00e9  ld   $e9         3193  ld(-46/2)                       #43
                                          3194
                                          3195  # CALLI implementation (vCPU instruction)
                                          3196  label('calli#13')
calli#13:     0bb0 8003  adda $03         3197  adda(3)                         #13,43
              0bb1 c21a  st   [$1a]       3198  st([vLR])                       #14
              0bb2 0117  ld   [$17]       3199  ld([vPC+1])                     #15
              0bb3 d61b  st   [$1b],y     3200  st([vLR+1],Y)                   #16
              0bb4 0d00  ld   [y,x]       3201  ld([Y,X])                       #17
              0bb5 de00  st   [y,x++]     3202  st([Y,Xpp])                     #18 Just X++
              0bb6 a002  suba $02         3203  suba(2)                         #19
              0bb7 c216  st   [$16]       3204  st([vPC])                       #20
              0bb8 0d00  ld   [y,x]       3205  ld([Y,X])                       #21
              0bb9 1403  ld   $03,y       3206  ld(hi('REENTER_28'),Y)          #22
              0bba e0ca  jmp  y,$ca       3207  jmp(Y,'REENTER_28')             #23
              0bbb c217  st   [$17]       3208  st([vPC+1])                     #24
                                          3209
                                          3210  # -------------------------------------------------------------
                                          3211  # vCPU instructions for comparisons between two 16-bit operands
                                          3212  # -------------------------------------------------------------
                                          3213  #
                                          3214  # vCPU's conditional branching (BCC) always compares vAC against 0,
                                          3215  # treating vAC as a two's complement 16-bit number. When we need to
                                          3216  # compare two arbitrary numnbers we normally first take their difference
                                          3217  # with SUBW.  However, when this difference is too large, the subtraction
                                          3218  # overflows and we get the wrong outcome. To get it right over the
                                          3219  # entire range, an elaborate sequence is needed. TinyBASIC uses this
                                          3220  # blurp for its relational operators. (It compares stack variable $02
                                          3221  # with zero page variable $3a.)
                                          3222  #
                                          3223  #       0461  ee 02            LDLW  $02
                                          3224  #       0463  fc 3a            XORW  $3a
                                          3225  #       0465  35 53 6a         BGE   $046c
                                          3226  #       0468  ee 02            LDLW  $02
                                          3227  #       046a  90 6e            BRA   $0470
                                          3228  #       046c  ee 02            LDLW  $02
                                          3229  #       046e  b8 3a            SUBW  $3a
                                          3230  #       0470  35 56 73         BLE   $0475
                                          3231  #
                                          3232  # The CMPHS and CMPHU instructions were introduced to simplify this.
                                          3233  # They inspect both operands to see if there is an overflow risk. If
                                          3234  # so, they modify vAC such that their difference gets smaller, while
                                          3235  # preserving the relation between the two operands. After that, the
                                          3236  # SUBW instruction can't overflow and we achieve a correct comparison.
                                          3237  # Use CMPHS for signed comparisons and CMPHU for unsigned. With these,
                                          3238  # the sequence above becomes:
                                          3239  #
                                          3240  #       0461  ee 02            LDLW  $02
                                          3241  #       0463  1f 3b            CMPHS $3b        Note: high byte of operand
                                          3242  #       0465  b8 3a            SUBW  $3a
                                          3243  #       0467  35 56 73         BLE   $0475
                                          3244  #
                                          3245  # CMPHS/CMPHU don't make much sense other than in combination with
                                          3246  # SUBW. These modify vACH, if needed, as given in the following table:
                                          3247  #
                                          3248  #       vACH  varH  |     vACH
                                          3249  #       bit7  bit7  | CMPHS  CMPHU
                                          3250  #       ---------------------------
                                          3251  #         0     0   |  vACH   vACH      no change needed
                                          3252  #         0     1   | varH+1 varH-1     narrowing the range
                                          3253  #         1     0   | varH-1 varH+1     narrowing the range
                                          3254  #         1     1   |  vACH   vACH      no change needed
                                          3255  #       ---------------------------
                                          3256
                                          3257  # CMPHS implementation (vCPU instruction)
                                          3258  label('cmphs#13')
cmphs#13:     0bbc 1403  ld   $03,y       3259  ld(hi('REENTER'),Y)             #13
              0bbd 0500  ld   [x]         3260  ld([X])                         #14
              0bbe 6119  xora [$19]       3261  xora([vAC+1])                   #15
              0bbf f4d0  bge  .cmphu#18   3262  bpl('.cmphu#18')                #16 Skip if same sign
              0bc0 0119  ld   [$19]       3263  ld([vAC+1])                     #17
              0bc1 e8c4  blt  $0bc4       3264  bmi(pc()+3)                     #18
              0bc2 fcc5  bra  .cmphs#21   3265  bra(pc()+3)                     #19
                                          3266  label('.cmphs#20')
.cmphs#20:    0bc3 0001  ld   $01         3267  ld(+1)                          #20    vAC < variable
              0bc4 00ff  ld   $ff         3268  ld(-1)                          #20(!) vAC > variable
                                          3269  label('.cmphs#21')
.cmphs#21:    0bc5 8500  adda [x]         3270  adda([X])                       #21
              0bc6 c219  st   [$19]       3271  st([vAC+1])                     #22
              0bc7 e0ca  jmp  y,$ca       3272  jmp(Y,'REENTER_28')             #23
                                          3273  #dummy()                        #24 Overlap
                                          3274  #
                                          3275  # CMPHS implementation (vCPU instruction)
                                          3276  label('cmphu#13')
cmphu#13:     0bc8 1403  ld   $03,y       3277  ld(hi('REENTER'),Y)             #13,24
              0bc9 0500  ld   [x]         3278  ld([X])                         #14
              0bca 6119  xora [$19]       3279  xora([vAC+1])                   #15
              0bcb f4d0  bge  .cmphu#18   3280  bpl('.cmphu#18')                #16 Skip if same sign
              0bcc 0119  ld   [$19]       3281  ld([vAC+1])                     #17
              0bcd e8c3  blt  .cmphs#20   3282  bmi('.cmphs#20')                #18
              0bce fcc5  bra  .cmphs#21   3283  bra('.cmphs#21')                #19
              0bcf 00ff  ld   $ff         3284  ld(-1)                          #20    vAC > variable
                                          3285
                                          3286  # No-operation for CMPHS/CMPHU when high bits are equal
                                          3287  label('.cmphu#18')
.cmphu#18:    0bd0 e0cb  jmp  y,$cb       3288  jmp(Y,'REENTER')                #18
              0bd1 00f5  ld   $f5         3289  ld(-22/2)                       #19
                                          3290
                                          3291  #-----------------------------------------------------------------------
                                          3292  #
                                          3293  #  $0c00 ROM page 12: More SYS functions (sprites)
                                          3294  #
                                          3295  #       Page 1: vertical blank interval
                                          3296  #       Page 2: visible scanlines
                                          3297  #
                                          3298  #-----------------------------------------------------------------------
                                          3299
              0bd2 0200  nop              3300  align(0x100, size=0x100)
              0bd3 0200  nop
              0bd4 0200  nop
              * 46 times
                                          3301
                                          3302  #-----------------------------------------------------------------------
                                          3303  # Extension SYS_Sprite6_v3_64
                                          3304  # Extension SYS_Sprite6x_v3_64
                                          3305  # Extension SYS_Sprite6y_v3_64
                                          3306  # Extension SYS_Sprite6xy_v3_64
                                          3307  #-----------------------------------------------------------------------
                                          3308
                                          3309  # Blit sprite in screen memory
                                          3310  #
                                          3311  # Variables
                                          3312  #       vAC             Destination address in screen
                                          3313  #       sysArgs[0:1]    Source address of 6xY pixels (colors 0..63) terminated
                                          3314  #                       by negative byte value N (typically N = -Y)
                                          3315  #       sysArgs[2:7]    Scratch (user as copy buffer)
                                          3316  #
                                          3317  # This SYS function draws a sprite of 6 pixels wide and Y pixels high.
                                          3318  # The pixel data is read sequentually from RAM, in horizontal chunks
                                          3319  # of 6 pixels at a time, and then written to the screen through the
                                          3320  # destination pointer (each chunk underneath the previous), thus
                                          3321  # drawing a 6xY stripe. Pixel values should be non-negative. The first
                                          3322  # negative byte N after a chunk signals the end of the sprite data.
                                          3323  # So the sprite's height Y is determined by the source data and is
                                          3324  # therefore flexible. This negative byte value, typically N == -Y,
                                          3325  # is then used to adjust the destination pointer's high byte, to make
                                          3326  # it easier to draw sprites wider than 6 pixels: just repeat the SYS
                                          3327  # call for as many 6-pixel wide stripes you need. All arguments are
                                          3328  # already left in place to facilitate this. After one call, the source
                                          3329  # pointer will point past that source data, effectively:
                                          3330  #       src += Y * 6 + 1
                                          3331  # The destination pointer will have been adjusted as:
                                          3332  #       dst += (Y + N) * 256 + 6
                                          3333  # (With arithmetic wrapping around on the same memory page)
                                          3334  #
                                          3335  # Y is only limited by source memory, not by CPU cycles. The
                                          3336  # implementation is such that the SYS function self-repeats, each
                                          3337  # time drawing the next 6-pixel chunk. It can typically draw 12
                                          3338  # pixels per scanline this way.
                                          3339
                                          3340  label('SYS_Sprite6_v3_64')
                                          3341
SYS_Sprite6_v3_64:
              0c00 1124  ld   [$24],x     3342  ld([sysArgs+0],X)               #15 Pixel data source address
              0c01 1525  ld   [$25],y     3343  ld([sysArgs+1],Y)               #16
              0c02 0d00  ld   [y,x]       3344  ld([Y,X])                       #17 Next pixel or stop
              0c03 f411  bge  .sysDpx0    3345  bpl('.sysDpx0')                 #18
              0c04 de00  st   [y,x++]     3346  st([Y,Xpp])                     #19 Just X++
                                          3347
              0c05 8119  adda [$19]       3348  adda([vAC+1])                   #20 Adjust dst for convenience
              0c06 c219  st   [$19]       3349  st([vAC+1])                     #21
              0c07 0118  ld   [$18]       3350  ld([vAC])                       #22
              0c08 8006  adda $06         3351  adda(6)                         #23
              0c09 c218  st   [$18]       3352  st([vAC])                       #24
              0c0a 0124  ld   [$24]       3353  ld([sysArgs+0])                 #25 Adjust src for convenience
              0c0b 8001  adda $01         3354  adda(1)                         #26
              0c0c c224  st   [$24]       3355  st([sysArgs+0])                 #27
              0c0d 0200  nop              3356  nop()                           #28
              0c0e 1403  ld   $03,y       3357  ld(hi('REENTER'),Y)             #29 Normal exit (no self-repeat)
              0c0f e0cb  jmp  y,$cb       3358  jmp(Y,'REENTER')                #30
              0c10 00ef  ld   $ef         3359  ld(-34/2)                       #31
                                          3360
                                          3361  label('.sysDpx0')
.sysDpx0:     0c11 c226  st   [$26]       3362  st([sysArgs+2])                 #20 Gobble 6 pixels into buffer
              0c12 0d00  ld   [y,x]       3363  ld([Y,X])                       #21
              0c13 de00  st   [y,x++]     3364  st([Y,Xpp])                     #22 Just X++
              0c14 c227  st   [$27]       3365  st([sysArgs+3])                 #23
              0c15 0d00  ld   [y,x]       3366  ld([Y,X])                       #24
              0c16 de00  st   [y,x++]     3367  st([Y,Xpp])                     #25 Just X++
              0c17 c228  st   [$28]       3368  st([sysArgs+4])                 #26
              0c18 0d00  ld   [y,x]       3369  ld([Y,X])                       #27
              0c19 de00  st   [y,x++]     3370  st([Y,Xpp])                     #28 Just X++
              0c1a c229  st   [$29]       3371  st([sysArgs+5])                 #29
              0c1b 0d00  ld   [y,x]       3372  ld([Y,X])                       #30
              0c1c de00  st   [y,x++]     3373  st([Y,Xpp])                     #31 Just X++
              0c1d c22a  st   [$2a]       3374  st([sysArgs+6])                 #32
              0c1e 0d00  ld   [y,x]       3375  ld([Y,X])                       #33
              0c1f de00  st   [y,x++]     3376  st([Y,Xpp])                     #34 Just X++
              0c20 c22b  st   [$2b]       3377  st([sysArgs+7])                 #35
                                          3378
              0c21 1118  ld   [$18],x     3379  ld([vAC],X)                     #36 Screen memory destination address
              0c22 1519  ld   [$19],y     3380  ld([vAC+1],Y)                   #37
              0c23 0126  ld   [$26]       3381  ld([sysArgs+2])                 #38 Write 6 pixels
              0c24 de00  st   [y,x++]     3382  st([Y,Xpp])                     #39
              0c25 0127  ld   [$27]       3383  ld([sysArgs+3])                 #40
              0c26 de00  st   [y,x++]     3384  st([Y,Xpp])                     #41
              0c27 0128  ld   [$28]       3385  ld([sysArgs+4])                 #42
              0c28 de00  st   [y,x++]     3386  st([Y,Xpp])                     #43
              0c29 0129  ld   [$29]       3387  ld([sysArgs+5])                 #44
              0c2a de00  st   [y,x++]     3388  st([Y,Xpp])                     #45
              0c2b 012a  ld   [$2a]       3389  ld([sysArgs+6])                 #46
              0c2c de00  st   [y,x++]     3390  st([Y,Xpp])                     #47
              0c2d 012b  ld   [$2b]       3391  ld([sysArgs+7])                 #48
              0c2e de00  st   [y,x++]     3392  st([Y,Xpp])                     #49
                                          3393
              0c2f 0124  ld   [$24]       3394  ld([sysArgs+0])                 #50 src += 6
              0c30 8006  adda $06         3395  adda(6)                         #51
              0c31 c224  st   [$24]       3396  st([sysArgs+0])                 #52
              0c32 0119  ld   [$19]       3397  ld([vAC+1])                     #53 dst += 256
              0c33 8001  adda $01         3398  adda(1)                         #54
              0c34 c219  st   [$19]       3399  st([vAC+1])                     #55
                                          3400
              0c35 0116  ld   [$16]       3401  ld([vPC])                       #56 Self-repeating SYS call
              0c36 a002  suba $02         3402  suba(2)                         #57
              0c37 c216  st   [$16]       3403  st([vPC])                       #58
              0c38 1403  ld   $03,y       3404  ld(hi('REENTER'),Y)             #59
              0c39 e0cb  jmp  y,$cb       3405  jmp(Y,'REENTER')                #60
              0c3a 00e0  ld   $e0         3406  ld(-64/2)                       #61
                                          3407
              0c3b 0200  nop              3408  align(64)
              0c3c 0200  nop
              0c3d 0200  nop
              * 5 times
                                          3409  label('SYS_Sprite6x_v3_64')
                                          3410
SYS_Sprite6x_v3_64:
              0c40 1124  ld   [$24],x     3411  ld([sysArgs+0],X)               #15 Pixel data source address
              0c41 1525  ld   [$25],y     3412  ld([sysArgs+1],Y)               #16
              0c42 0d00  ld   [y,x]       3413  ld([Y,X])                       #17 Next pixel or stop
              0c43 f451  bge  .sysDpx1    3414  bpl('.sysDpx1')                 #18
              0c44 de00  st   [y,x++]     3415  st([Y,Xpp])                     #19 Just X++
                                          3416
              0c45 8119  adda [$19]       3417  adda([vAC+1])                   #20 Adjust dst for convenience
              0c46 c219  st   [$19]       3418  st([vAC+1])                     #21
              0c47 0118  ld   [$18]       3419  ld([vAC])                       #22
              0c48 a006  suba $06         3420  suba(6)                         #23
              0c49 c218  st   [$18]       3421  st([vAC])                       #24
              0c4a 0124  ld   [$24]       3422  ld([sysArgs+0])                 #25 Adjust src for convenience
              0c4b 8001  adda $01         3423  adda(1)                         #26
              0c4c c224  st   [$24]       3424  st([sysArgs+0])                 #27
              0c4d 0200  nop              3425  nop()                           #28
              0c4e 1403  ld   $03,y       3426  ld(hi('REENTER'),Y)             #29 Normal exit (no self-repeat)
              0c4f e0cb  jmp  y,$cb       3427  jmp(Y,'REENTER')                #30
              0c50 00ef  ld   $ef         3428  ld(-34/2)                       #31
                                          3429
                                          3430  label('.sysDpx1')
.sysDpx1:     0c51 c22b  st   [$2b]       3431  st([sysArgs+7])                 #20 Gobble 6 pixels into buffer (backwards)
              0c52 0d00  ld   [y,x]       3432  ld([Y,X])                       #21
              0c53 de00  st   [y,x++]     3433  st([Y,Xpp])                     #22 Just X++
              0c54 c22a  st   [$2a]       3434  st([sysArgs+6])                 #23
              0c55 0d00  ld   [y,x]       3435  ld([Y,X])                       #24
              0c56 de00  st   [y,x++]     3436  st([Y,Xpp])                     #25 Just X++
              0c57 c229  st   [$29]       3437  st([sysArgs+5])                 #26
              0c58 0d00  ld   [y,x]       3438  ld([Y,X])                       #27
              0c59 de00  st   [y,x++]     3439  st([Y,Xpp])                     #28 Just X++
              0c5a c228  st   [$28]       3440  st([sysArgs+4])                 #29
              0c5b 0d00  ld   [y,x]       3441  ld([Y,X])                       #30
              0c5c de00  st   [y,x++]     3442  st([Y,Xpp])                     #31 Just X++
              0c5d c227  st   [$27]       3443  st([sysArgs+3])                 #32
              0c5e 0d00  ld   [y,x]       3444  ld([Y,X])                       #33
              0c5f de00  st   [y,x++]     3445  st([Y,Xpp])                     #34 Just X++
                                          3446
              0c60 1118  ld   [$18],x     3447  ld([vAC],X)                     #35 Screen memory destination address
              0c61 1519  ld   [$19],y     3448  ld([vAC+1],Y)                   #36
              0c62 de00  st   [y,x++]     3449  st([Y,Xpp])                     #37 Write 6 pixels
              0c63 0127  ld   [$27]       3450  ld([sysArgs+3])                 #38
              0c64 de00  st   [y,x++]     3451  st([Y,Xpp])                     #39
              0c65 0128  ld   [$28]       3452  ld([sysArgs+4])                 #40
              0c66 de00  st   [y,x++]     3453  st([Y,Xpp])                     #41
              0c67 0129  ld   [$29]       3454  ld([sysArgs+5])                 #42
              0c68 de00  st   [y,x++]     3455  st([Y,Xpp])                     #43
              0c69 012a  ld   [$2a]       3456  ld([sysArgs+6])                 #44
              0c6a de00  st   [y,x++]     3457  st([Y,Xpp])                     #45
              0c6b 012b  ld   [$2b]       3458  ld([sysArgs+7])                 #46
              0c6c de00  st   [y,x++]     3459  st([Y,Xpp])                     #47
                                          3460
              0c6d 0124  ld   [$24]       3461  ld([sysArgs+0])                 #48 src += 6
              0c6e 8006  adda $06         3462  adda(6)                         #49
              0c6f c224  st   [$24]       3463  st([sysArgs+0])                 #50
              0c70 0119  ld   [$19]       3464  ld([vAC+1])                     #51 dst += 256
              0c71 8001  adda $01         3465  adda(1)                         #52
              0c72 c219  st   [$19]       3466  st([vAC+1])                     #53
                                          3467
              0c73 0116  ld   [$16]       3468  ld([vPC])                       #54 Self-repeating SYS call
              0c74 a002  suba $02         3469  suba(2)                         #55
              0c75 c216  st   [$16]       3470  st([vPC])                       #56
              0c76 1403  ld   $03,y       3471  ld(hi('REENTER'),Y)             #57
              0c77 e0cb  jmp  y,$cb       3472  jmp(Y,'REENTER')                #58
              0c78 00e1  ld   $e1         3473  ld(-62/2)                       #59
                                          3474
              0c79 0200  nop              3475  align(64)
              0c7a 0200  nop
              0c7b 0200  nop
              * 7 times
                                          3476  label('SYS_Sprite6y_v3_64')
                                          3477
SYS_Sprite6y_v3_64:
              0c80 1124  ld   [$24],x     3478  ld([sysArgs+0],X)               #15 Pixel data source address
              0c81 1525  ld   [$25],y     3479  ld([sysArgs+1],Y)               #16
              0c82 0d00  ld   [y,x]       3480  ld([Y,X])                       #17 Next pixel or stop
              0c83 f493  bge  .sysDpx2    3481  bpl('.sysDpx2')                 #18
              0c84 de00  st   [y,x++]     3482  st([Y,Xpp])                     #19 Just X++
                                          3483
              0c85 60ff  xora $ff         3484  xora(255)                       #20 Adjust dst for convenience
              0c86 8001  adda $01         3485  adda(1)                         #21
              0c87 8119  adda [$19]       3486  adda([vAC+1])                   #22
              0c88 c219  st   [$19]       3487  st([vAC+1])                     #23
              0c89 0118  ld   [$18]       3488  ld([vAC])                       #24
              0c8a 8006  adda $06         3489  adda(6)                         #25
              0c8b c218  st   [$18]       3490  st([vAC])                       #26
              0c8c 0124  ld   [$24]       3491  ld([sysArgs+0])                 #27 Adjust src for convenience
              0c8d 8001  adda $01         3492  adda(1)                         #28
              0c8e c224  st   [$24]       3493  st([sysArgs+0])                 #29
              0c8f 0200  nop              3494  nop()                           #30
              0c90 1403  ld   $03,y       3495  ld(hi('REENTER'),Y)             #31 Normal exit (no self-repeat)
              0c91 e0cb  jmp  y,$cb       3496  jmp(Y,'REENTER')                #32
              0c92 00ee  ld   $ee         3497  ld(-36/2)                       #33
                                          3498
                                          3499  label('.sysDpx2')
.sysDpx2:     0c93 c226  st   [$26]       3500  st([sysArgs+2])                 #20 Gobble 6 pixels into buffer
              0c94 0d00  ld   [y,x]       3501  ld([Y,X])                       #21
              0c95 de00  st   [y,x++]     3502  st([Y,Xpp])                     #22 Just X++
              0c96 c227  st   [$27]       3503  st([sysArgs+3])                 #23
              0c97 0d00  ld   [y,x]       3504  ld([Y,X])                       #24
              0c98 de00  st   [y,x++]     3505  st([Y,Xpp])                     #25 Just X++
              0c99 c228  st   [$28]       3506  st([sysArgs+4])                 #26
              0c9a 0d00  ld   [y,x]       3507  ld([Y,X])                       #27
              0c9b de00  st   [y,x++]     3508  st([Y,Xpp])                     #28 Just X++
              0c9c c229  st   [$29]       3509  st([sysArgs+5])                 #29
              0c9d 0d00  ld   [y,x]       3510  ld([Y,X])                       #30
              0c9e de00  st   [y,x++]     3511  st([Y,Xpp])                     #31 Just X++
              0c9f c22a  st   [$2a]       3512  st([sysArgs+6])                 #32
              0ca0 0d00  ld   [y,x]       3513  ld([Y,X])                       #33
              0ca1 de00  st   [y,x++]     3514  st([Y,Xpp])                     #34 Just X++
              0ca2 c22b  st   [$2b]       3515  st([sysArgs+7])                 #35
                                          3516
              0ca3 1118  ld   [$18],x     3517  ld([vAC],X)                     #36 Screen memory destination address
              0ca4 1519  ld   [$19],y     3518  ld([vAC+1],Y)                   #37
              0ca5 0126  ld   [$26]       3519  ld([sysArgs+2])                 #38 Write 6 pixels
              0ca6 de00  st   [y,x++]     3520  st([Y,Xpp])                     #39
              0ca7 0127  ld   [$27]       3521  ld([sysArgs+3])                 #40
              0ca8 de00  st   [y,x++]     3522  st([Y,Xpp])                     #41
              0ca9 0128  ld   [$28]       3523  ld([sysArgs+4])                 #42
              0caa de00  st   [y,x++]     3524  st([Y,Xpp])                     #43
              0cab 0129  ld   [$29]       3525  ld([sysArgs+5])                 #44
              0cac de00  st   [y,x++]     3526  st([Y,Xpp])                     #45
              0cad 012a  ld   [$2a]       3527  ld([sysArgs+6])                 #46
              0cae de00  st   [y,x++]     3528  st([Y,Xpp])                     #47
              0caf 012b  ld   [$2b]       3529  ld([sysArgs+7])                 #48
              0cb0 de00  st   [y,x++]     3530  st([Y,Xpp])                     #49
                                          3531
              0cb1 0124  ld   [$24]       3532  ld([sysArgs+0])                 #50 src += 6
              0cb2 8006  adda $06         3533  adda(6)                         #51
              0cb3 c224  st   [$24]       3534  st([sysArgs+0])                 #52
              0cb4 0119  ld   [$19]       3535  ld([vAC+1])                     #53 dst -= 256
              0cb5 a001  suba $01         3536  suba(1)                         #54
              0cb6 c219  st   [$19]       3537  st([vAC+1])                     #55
                                          3538
              0cb7 0116  ld   [$16]       3539  ld([vPC])                       #56 Self-repeating SYS call
              0cb8 a002  suba $02         3540  suba(2)                         #57
              0cb9 c216  st   [$16]       3541  st([vPC])                       #58
              0cba 1403  ld   $03,y       3542  ld(hi('REENTER'),Y)             #59
              0cbb e0cb  jmp  y,$cb       3543  jmp(Y,'REENTER')                #60
              0cbc 00e0  ld   $e0         3544  ld(-64/2)                       #61
                                          3545
              0cbd 0200  nop              3546  align(64)
              0cbe 0200  nop
              0cbf 0200  nop
                                          3547  label('SYS_Sprite6xy_v3_64')
                                          3548
SYS_Sprite6xy_v3_64:
              0cc0 1124  ld   [$24],x     3549  ld([sysArgs+0],X)               #15 Pixel data source address
              0cc1 1525  ld   [$25],y     3550  ld([sysArgs+1],Y)               #16
              0cc2 0d00  ld   [y,x]       3551  ld([Y,X])                       #17 Next pixel or stop
              0cc3 f4d3  bge  .sysDpx3    3552  bpl('.sysDpx3')                 #18
              0cc4 de00  st   [y,x++]     3553  st([Y,Xpp])                     #19 Just X++
                                          3554
              0cc5 60ff  xora $ff         3555  xora(255)                       #20 Adjust dst for convenience
              0cc6 8001  adda $01         3556  adda(1)                         #21
              0cc7 8119  adda [$19]       3557  adda([vAC+1])                   #22
              0cc8 c219  st   [$19]       3558  st([vAC+1])                     #23
              0cc9 0118  ld   [$18]       3559  ld([vAC])                       #24
              0cca a006  suba $06         3560  suba(6)                         #25
              0ccb c218  st   [$18]       3561  st([vAC])                       #26
              0ccc 0124  ld   [$24]       3562  ld([sysArgs+0])                 #27 Adjust src for convenience
              0ccd 8001  adda $01         3563  adda(1)                         #28
              0cce c224  st   [$24]       3564  st([sysArgs+0])                 #29
              0ccf 0200  nop              3565  nop()                           #30
              0cd0 1403  ld   $03,y       3566  ld(hi('REENTER'),Y)             #31 Normal exit (no self-repeat)
              0cd1 e0cb  jmp  y,$cb       3567  jmp(Y,'REENTER')                #32
              0cd2 00ee  ld   $ee         3568  ld(-36/2)                       #33
                                          3569
                                          3570  label('.sysDpx3')
.sysDpx3:     0cd3 c22b  st   [$2b]       3571  st([sysArgs+7])                 #20 Gobble 6 pixels into buffer (backwards)
              0cd4 0d00  ld   [y,x]       3572  ld([Y,X])                       #21
              0cd5 de00  st   [y,x++]     3573  st([Y,Xpp])                     #22 Just X++
              0cd6 c22a  st   [$2a]       3574  st([sysArgs+6])                 #23
              0cd7 0d00  ld   [y,x]       3575  ld([Y,X])                       #24
              0cd8 de00  st   [y,x++]     3576  st([Y,Xpp])                     #25 Just X++
              0cd9 c229  st   [$29]       3577  st([sysArgs+5])                 #26
              0cda 0d00  ld   [y,x]       3578  ld([Y,X])                       #27
              0cdb de00  st   [y,x++]     3579  st([Y,Xpp])                     #28 Just X++
              0cdc c228  st   [$28]       3580  st([sysArgs+4])                 #29
              0cdd 0d00  ld   [y,x]       3581  ld([Y,X])                       #30
              0cde de00  st   [y,x++]     3582  st([Y,Xpp])                     #31 Just X++
              0cdf c227  st   [$27]       3583  st([sysArgs+3])                 #32
              0ce0 0d00  ld   [y,x]       3584  ld([Y,X])                       #33
              0ce1 de00  st   [y,x++]     3585  st([Y,Xpp])                     #34 Just X++
                                          3586
              0ce2 1118  ld   [$18],x     3587  ld([vAC],X)                     #35 Screen memory destination address
              0ce3 1519  ld   [$19],y     3588  ld([vAC+1],Y)                   #36
              0ce4 de00  st   [y,x++]     3589  st([Y,Xpp])                     #37 Write 6 pixels
              0ce5 0127  ld   [$27]       3590  ld([sysArgs+3])                 #38
              0ce6 de00  st   [y,x++]     3591  st([Y,Xpp])                     #39
              0ce7 0128  ld   [$28]       3592  ld([sysArgs+4])                 #40
              0ce8 de00  st   [y,x++]     3593  st([Y,Xpp])                     #41
              0ce9 0129  ld   [$29]       3594  ld([sysArgs+5])                 #42
              0cea de00  st   [y,x++]     3595  st([Y,Xpp])                     #43
              0ceb 012a  ld   [$2a]       3596  ld([sysArgs+6])                 #44
              0cec de00  st   [y,x++]     3597  st([Y,Xpp])                     #45
              0ced 012b  ld   [$2b]       3598  ld([sysArgs+7])                 #46
              0cee de00  st   [y,x++]     3599  st([Y,Xpp])                     #47
                                          3600
              0cef 0124  ld   [$24]       3601  ld([sysArgs+0])                 #48 src += 6
              0cf0 8006  adda $06         3602  adda(6)                         #49
              0cf1 c224  st   [$24]       3603  st([sysArgs+0])                 #50
              0cf2 0119  ld   [$19]       3604  ld([vAC+1])                     #51 dst -= 256
              0cf3 a001  suba $01         3605  suba(1)                         #52
              0cf4 c219  st   [$19]       3606  st([vAC+1])                     #53
                                          3607
              0cf5 0116  ld   [$16]       3608  ld([vPC])                       #54 Self-repeating SYS call
              0cf6 a002  suba $02         3609  suba(2)                         #55
              0cf7 c216  st   [$16]       3610  st([vPC])                       #56
              0cf8 1403  ld   $03,y       3611  ld(hi('REENTER'),Y)             #57
              0cf9 e0cb  jmp  y,$cb       3612  jmp(Y,'REENTER')                #58
              0cfa 00e1  ld   $e1         3613  ld(-62/2)                       #59
                                          3614
                                          3615  #-----------------------------------------------------------------------
                                          3616
                                          3617  label('sys_ExpanderControl')
                                          3618
sys_ExpanderControl:
              0cfb 2118  anda [$18]       3619  anda([vAC])                     #18
              0cfc d218  st   [$18],x     3620  st([vAC],X)                     #19
              0cfd 1401  ld   $01,y       3621  ld(hi(ctrlBits),Y)              #20
              0cfe caf8  st   [y,$f8]     3622  st([Y,ctrlBits])                #21 Set control variable
              0cff 1519  ld   [$19],y     3623  ld([vAC+1],Y)                   #22 MOSI (A15)
              0d00 cd00  ctrl y,x         3624  ctrl(Y,X)                       #23 Try set the expander control register
                                          3625
              0d01 0127  ld   [$27]       3626  ld([sysArgs+3])                 #24 Prepare for SYS_SpiExchangeBytes
                                          3627  assert pc()&255 < 255-3         # Beware of page crossing: asm.py won't warn
              0d02 ec05  bne  $0d05       3628  bne(pc()+3)                     #25
              0d03 fc05  bra  $0d05       3629  bra(pc()+2)                     #26
              0d04 0125  ld   [$25]       3630  ld([sysArgs+1])                 #27
              0d05 c227  st   [$27]       3631  st([sysArgs+3])                 #27,28 (must be idempotent)
                                          3632
              0d06 1403  ld   $03,y       3633  ld(hi('REENTER'),Y)             #29
              0d07 e0cb  jmp  y,$cb       3634  jmp(Y,'REENTER')                #30
              0d08 00ef  ld   $ef         3635  ld(-34/2)                       #31
                                          3636
                                          3637  #-----------------------------------------------------------------------
                                          3638
                                          3639  label('sys_SpiExchangeBytes')
                                          3640
sys_SpiExchangeBytes:
              0d09 09f8  ld   [y,$f8]     3641  ld([Y,ctrlBits])                #18
              0d0a c228  st   [$28]       3642  st([sysArgs+4])                 #19
                                          3643
              0d0b 1124  ld   [$24],x     3644  ld([sysArgs+0],X)               #20 Fetch byte to send
              0d0c 1525  ld   [$25],y     3645  ld([sysArgs+1],Y)               #21
              0d0d 0d00  ld   [y,x]       3646  ld([Y,X])                       #22
                                          3647
                                          3648  for i in range(8):
                                          3649    st([vTmp],Y);C('Bit %d'%(7-i))#23+i*12
              0d0e d61d  st   [$1d],y     ;Bit 7
              0d0f 1128  ld   [$28],x     3650    ld([sysArgs+4],X)             #24+i*12
              0d10 dd00  ctrl y,x++       3651    ctrl(Y,Xpp)                   #25+i*12 Set MOSI
              0d11 dd00  ctrl y,x++       3652    ctrl(Y,Xpp)                   #26+i*12 Raise SCLK, disable RAM!
              0d12 0100  ld   [$00]       3653    ld([0])                       #27+i*12 Get MISO
              0d13 200f  anda $0f         3654    anda(0b00001111)              #28+i*12 This is why R1 as pull-DOWN is simpler
              0d14 f017  beq  $0d17       3655    beq(pc()+3)                   #29+i*12
              0d15 fc17  bra  $0d17       3656    bra(pc()+2)                   #30+i*12
              0d16 0001  ld   $01         3657    ld(1)                         #31+i*12
              0d17 cd00  ctrl y,x         3658    ctrl(Y,X)                     #32+i*12,29+i*12 (Must be idempotent) Lower SCLK
              0d18 811d  adda [$1d]       3659    adda([vTmp])                  #33+i*12 Shift
              0d19 811d  adda [$1d]       3660    adda([vTmp])                  #34+i*12
              0d1a d61d  st   [$1d],y     ;Bit 6
              0d1b 1128  ld   [$28],x
              0d1c dd00  ctrl y,x++
              0d1d dd00  ctrl y,x++
              0d1e 0100  ld   [$00]
              0d1f 200f  anda $0f
              0d20 f023  beq  $0d23
              0d21 fc23  bra  $0d23
              0d22 0001  ld   $01
              0d23 cd00  ctrl y,x
              0d24 811d  adda [$1d]
              0d25 811d  adda [$1d]
              0d26 d61d  st   [$1d],y     ;Bit 5
              0d27 1128  ld   [$28],x
              0d28 dd00  ctrl y,x++
              0d29 dd00  ctrl y,x++
              0d2a 0100  ld   [$00]
              0d2b 200f  anda $0f
              0d2c f02f  beq  $0d2f
              0d2d fc2f  bra  $0d2f
              0d2e 0001  ld   $01
              0d2f cd00  ctrl y,x
              0d30 811d  adda [$1d]
              0d31 811d  adda [$1d]
              0d32 d61d  st   [$1d],y     ;Bit 4
              0d33 1128  ld   [$28],x
              0d34 dd00  ctrl y,x++
              0d35 dd00  ctrl y,x++
              0d36 0100  ld   [$00]
              0d37 200f  anda $0f
              0d38 f03b  beq  $0d3b
              0d39 fc3b  bra  $0d3b
              0d3a 0001  ld   $01
              0d3b cd00  ctrl y,x
              0d3c 811d  adda [$1d]
              0d3d 811d  adda [$1d]
              0d3e d61d  st   [$1d],y     ;Bit 3
              0d3f 1128  ld   [$28],x
              0d40 dd00  ctrl y,x++
              0d41 dd00  ctrl y,x++
              0d42 0100  ld   [$00]
              0d43 200f  anda $0f
              0d44 f047  beq  $0d47
              0d45 fc47  bra  $0d47
              0d46 0001  ld   $01
              0d47 cd00  ctrl y,x
              0d48 811d  adda [$1d]
              0d49 811d  adda [$1d]
              0d4a d61d  st   [$1d],y     ;Bit 2
              0d4b 1128  ld   [$28],x
              0d4c dd00  ctrl y,x++
              0d4d dd00  ctrl y,x++
              0d4e 0100  ld   [$00]
              0d4f 200f  anda $0f
              0d50 f053  beq  $0d53
              0d51 fc53  bra  $0d53
              0d52 0001  ld   $01
              0d53 cd00  ctrl y,x
              0d54 811d  adda [$1d]
              0d55 811d  adda [$1d]
              0d56 d61d  st   [$1d],y     ;Bit 1
              0d57 1128  ld   [$28],x
              0d58 dd00  ctrl y,x++
              0d59 dd00  ctrl y,x++
              0d5a 0100  ld   [$00]
              0d5b 200f  anda $0f
              0d5c f05f  beq  $0d5f
              0d5d fc5f  bra  $0d5f
              0d5e 0001  ld   $01
              0d5f cd00  ctrl y,x
              0d60 811d  adda [$1d]
              0d61 811d  adda [$1d]
              0d62 d61d  st   [$1d],y     ;Bit 0
              0d63 1128  ld   [$28],x
              0d64 dd00  ctrl y,x++
              0d65 dd00  ctrl y,x++
              0d66 0100  ld   [$00]
              0d67 200f  anda $0f
              0d68 f06b  beq  $0d6b
              0d69 fc6b  bra  $0d6b
              0d6a 0001  ld   $01
              0d6b cd00  ctrl y,x
              0d6c 811d  adda [$1d]
              0d6d 811d  adda [$1d]
                                          3661
              0d6e 1124  ld   [$24],x     3662  ld([sysArgs+0],X)               #119 Store received byte
              0d6f 1527  ld   [$27],y     3663  ld([sysArgs+3],Y)               #120
              0d70 ce00  st   [y,x]       3664  st([Y,X])                       #121
                                          3665
              0d71 0124  ld   [$24]       3666  ld([sysArgs+0])                 #122 Advance pointer
              0d72 8001  adda $01         3667  adda(1)                         #123
              0d73 c224  st   [$24]       3668  st([sysArgs+0])                 #124
                                          3669
              0d74 6126  xora [$26]       3670  xora([sysArgs+2])               #125 Reached end?
              0d75 f07c  beq  .sysSpi#128 3671  beq('.sysSpi#128')              #126
                                          3672
              0d76 0116  ld   [$16]       3673  ld([vPC])                       #127 Self-repeating SYS call
              0d77 a002  suba $02         3674  suba(2)                         #128
              0d78 c216  st   [$16]       3675  st([vPC])                       #129
              0d79 1403  ld   $03,y       3676  ld(hi('NEXTY'),Y)               #130
              0d7a e000  jmp  y,$00       3677  jmp(Y,'NEXTY')                  #131
              0d7b 00bd  ld   $bd         3678  ld(-134/2)                      #132
                                          3679
                                          3680  label('.sysSpi#128')
.sysSpi#128:  0d7c 1403  ld   $03,y       3681  ld(hi('NEXTY'),Y)               #128 Continue program
              0d7d e000  jmp  y,$00       3682  jmp(Y,'NEXTY')                  #129
              0d7e 00be  ld   $be         3683  ld(-132/2)                      #130
                                          3684
                                          3685  #-----------------------------------------------------------------------
                                          3686
                                          3687  label('sys_v6502')
                                          3688
sys_v6502:    0d7f d605  st   [$05],y     3689  st([vCpuSelect],Y)              #18 Activate v6502
              0d80 00f5  ld   $f5         3690  ld(-22/2)                       #19
              0d81 e0ff  jmp  y,$ff       3691  jmp(Y,'v6502_ENTER')            #20 Transfer control in the same time slice
              0d82 8115  adda [$15]       3692  adda([vTicks])                  #21
                                          3693  assert (38 - 22)//2 >= v6502_adjust
                                          3694
                                          3695  #-----------------------------------------------------------------------
                                          3696  #       MOS 6502 emulator
                                          3697  #-----------------------------------------------------------------------
                                          3698
                                          3699  # Some quirks:
                                          3700  # - Stack in zero page instead of page 1
                                          3701  # - No interrupts
                                          3702  # - No decimal mode (may never be added). D flag is emulated but ignored.
                                          3703  # - BRK switches back to running 16-bits vCPU
                                          3704  # - Illegal opcodes map to BRK, but can read ghost operands before trapping
                                          3705  # - Illegal opcode $ff won't be trapped and cause havoc instead
                                          3706
                                          3707  # Big things TODO:
                                          3708  # XXX Tuning, put most frequent instructions in the primary page
                                          3709
                                          3710  label('v6502_ror')
                                          3711  assert v6502_Cflag == 1
v6502_ror:    0d83 1525  ld   [$25],y     3712  ld([v6502_ADH],Y)               #12
              0d84 00fc  ld   $fc         3713  ld(-46//2+v6502_maxTicks)       #13 Is there enough time for the excess ticks?
              0d85 8115  adda [$15]       3714  adda([vTicks])                  #14
              0d86 e89a  blt  .recheck17  3715  blt('.recheck17')               #15
              0d87 0127  ld   [$27]       3716  ld([v6502_P])                   #16 Transfer C to "bit 8"
              0d88 2001  anda $01         3717  anda(1)                         #17
              0d89 807f  adda $7f         3718  adda(127)                       #18
              0d8a 2080  anda $80         3719  anda(128)                       #19
              0d8b c219  st   [$19]       3720  st([v6502_BI])                  #20 The real 6502 wouldn't use BI for this
              0d8c 0127  ld   [$27]       3721  ld([v6502_P])                   #21 Transfer bit 0 to C
              0d8d 20fe  anda $fe         3722  anda(~1)                        #22
              0d8e c227  st   [$27]       3723  st([v6502_P])                   #23
              0d8f 0d00  ld   [y,x]       3724  ld([Y,X])                       #24
              0d90 2001  anda $01         3725  anda(1)                         #25
              0d91 4127  ora  [$27]       3726  ora([v6502_P])                  #26
              0d92 c227  st   [$27]       3727  st([v6502_P])                   #27
              0d93 00ee  ld   $ee         3728  ld('v6502_ror#38')              #28 Shift table lookup
              0d94 c21d  st   [$1d]       3729  st([vTmp])                      #29
              0d95 0d00  ld   [y,x]       3730  ld([Y,X])                       #30
              0d96 20fe  anda $fe         3731  anda(~1)                        #31
              0d97 1405  ld   $05,y       3732  ld(hi('shiftTable'),Y)          #32
              0d98 e200  jmp  y,ac        3733  jmp(Y,AC)                       #33
              0d99 fcff  bra  $ff         3734  bra(255)                        #34 bra shiftTable+255
                                          3735  label('.recheck17')
.recheck17:   0d9a 140e  ld   $0e,y       3736  ld(hi('v6502_check'),Y)         #17 Go back to time check before dispatch
              0d9b e0f2  jmp  y,$f2       3737  jmp(Y,'v6502_check')            #18
              0d9c 00f6  ld   $f6         3738  ld(-20/2)                       #19
                                          3739
                                          3740  label('v6502_lsr')
                                          3741  assert v6502_Cflag == 1
v6502_lsr:    0d9d 1525  ld   [$25],y     3742  ld([v6502_ADH],Y)               #12
              0d9e 0127  ld   [$27]       3743  ld([v6502_P])                   #13 Transfer bit 0 to C
              0d9f 20fe  anda $fe         3744  anda(~1)                        #14
              0da0 c227  st   [$27]       3745  st([v6502_P])                   #15
              0da1 0d00  ld   [y,x]       3746  ld([Y,X])                       #16
              0da2 2001  anda $01         3747  anda(1)                         #17
              0da3 4127  ora  [$27]       3748  ora([v6502_P])                  #18
              0da4 c227  st   [$27]       3749  st([v6502_P])                   #19
              0da5 00e7  ld   $e7         3750  ld('v6502_lsr#30')              #20 Shift table lookup
              0da6 c21d  st   [$1d]       3751  st([vTmp])                      #21
              0da7 0d00  ld   [y,x]       3752  ld([Y,X])                       #22
              0da8 20fe  anda $fe         3753  anda(~1)                        #23
              0da9 1405  ld   $05,y       3754  ld(hi('shiftTable'),Y)          #24
              0daa e200  jmp  y,ac        3755  jmp(Y,AC)                       #25
              0dab fcff  bra  $ff         3756  bra(255)                        #26 bra shiftTable+255
                                          3757
                                          3758  label('v6502_rol')
                                          3759  assert v6502_Cflag == 1
v6502_rol:    0dac 1525  ld   [$25],y     3760  ld([v6502_ADH],Y)               #12
              0dad 0d00  ld   [y,x]       3761  ld([Y,X])                       #13
              0dae 2080  anda $80         3762  anda(0x80)                      #14
              0daf c21d  st   [$1d]       3763  st([v6502_Tmp])                 #15
              0db0 0127  ld   [$27]       3764  ld([v6502_P])                   #16
              0db1 2001  anda $01         3765  anda(1)                         #17
                                          3766  label('.rol#18')
.rol#18:      0db2 8d00  adda [y,x]       3767  adda([Y,X])                     #18
              0db3 8d00  adda [y,x]       3768  adda([Y,X])                     #19
              0db4 ce00  st   [y,x]       3769  st([Y,X])                       #20
              0db5 c228  st   [$28]       3770  st([v6502_Qz])                  #21 Z flag
              0db6 c229  st   [$29]       3771  st([v6502_Qn])                  #22 N flag
              0db7 0127  ld   [$27]       3772  ld([v6502_P])                   #23 C Flag
              0db8 20fe  anda $fe         3773  anda(~1)                        #24
              0db9 111d  ld   [$1d],x     3774  ld([v6502_Tmp],X)               #25
              0dba 4500  ora  [x]         3775  ora([X])                        #26
              0dbb c227  st   [$27]       3776  st([v6502_P])                   #27
              0dbc 140e  ld   $0e,y       3777  ld(hi('v6502_next'),Y)          #28
              0dbd 00f0  ld   $f0         3778  ld(-32/2)                       #29
              0dbe e020  jmp  y,$20       3779  jmp(Y,'v6502_next')             #30
                                          3780  #nop()                          #31 Overlap
                                          3781  #
                                          3782  label('v6502_asl')
v6502_asl:    0dbf 1525  ld   [$25],y     3783  ld([v6502_ADH],Y)               #12,32
              0dc0 0d00  ld   [y,x]       3784  ld([Y,X])                       #13
              0dc1 2080  anda $80         3785  anda(0x80)                      #14
              0dc2 c21d  st   [$1d]       3786  st([v6502_Tmp])                 #15
              0dc3 fcb2  bra  .rol#18     3787  bra('.rol#18')                  #16
              0dc4 0000  ld   $00         3788  ld(0)                           #17
                                          3789
                                          3790  label('v6502_jmp1')
v6502_jmp1:   0dc5 0200  nop              3791  nop()                           #12
              0dc6 0124  ld   [$24]       3792  ld([v6502_ADL])                 #13
              0dc7 c21a  st   [$1a]       3793  st([v6502_PCL])                 #14
              0dc8 0125  ld   [$25]       3794  ld([v6502_ADH])                 #15
              0dc9 c21b  st   [$1b]       3795  st([v6502_PCH])                 #16
              0dca 140e  ld   $0e,y       3796  ld(hi('v6502_next'),Y)          #17
              0dcb e020  jmp  y,$20       3797  jmp(Y,'v6502_next')             #18
              0dcc 00f6  ld   $f6         3798  ld(-20/2)                       #19
                                          3799
                                          3800  label('v6502_jmp2')
v6502_jmp2:   0dcd 0200  nop              3801  nop()                           #12
              0dce 1525  ld   [$25],y     3802  ld([v6502_ADH],Y)               #13
              0dcf 0d00  ld   [y,x]       3803  ld([Y,X])                       #14
              0dd0 de00  st   [y,x++]     3804  st([Y,Xpp])                     #15 (Just X++) Wrap around: bug compatible with NMOS
              0dd1 c21a  st   [$1a]       3805  st([v6502_PCL])                 #16
              0dd2 0d00  ld   [y,x]       3806  ld([Y,X])                       #17
              0dd3 c21b  st   [$1b]       3807  st([v6502_PCH])                 #18
              0dd4 140e  ld   $0e,y       3808  ld(hi('v6502_next'),Y)          #19
              0dd5 e020  jmp  y,$20       3809  jmp(Y,'v6502_next')             #20
              0dd6 00f5  ld   $f5         3810  ld(-22/2)                       #21
                                          3811
                                          3812  label('v6502_pla')
v6502_pla:    0dd7 011c  ld   [$1c]       3813  ld([v6502_S])                   #12
              0dd8 1200  ld   ac,x        3814  ld(AC,X)                        #13
              0dd9 8001  adda $01         3815  adda(1)                         #14
              0dda c21c  st   [$1c]       3816  st([v6502_S])                   #15
              0ddb 0500  ld   [x]         3817  ld([X])                         #16
              0ddc c218  st   [$18]       3818  st([v6502_A])                   #17
              0ddd c228  st   [$28]       3819  st([v6502_Qz])                  #18 Z flag
              0dde c229  st   [$29]       3820  st([v6502_Qn])                  #19 N flag
              0ddf 140e  ld   $0e,y       3821  ld(hi('v6502_next'),Y)          #20
              0de0 00f4  ld   $f4         3822  ld(-24/2)                       #21
              0de1 e020  jmp  y,$20       3823  jmp(Y,'v6502_next')             #22
                                          3824  #nop()                          #23 Overlap
                                          3825  #
                                          3826  label('v6502_pha')
v6502_pha:    0de2 140e  ld   $0e,y       3827  ld(hi('v6502_next'),Y)          #12,24
              0de3 011c  ld   [$1c]       3828  ld([v6502_S])                   #13
              0de4 a001  suba $01         3829  suba(1)                         #14
              0de5 d21c  st   [$1c],x     3830  st([v6502_S],X)                 #15
              0de6 0118  ld   [$18]       3831  ld([v6502_A])                   #16
              0de7 c600  st   [x]         3832  st([X])                         #17
              0de8 e020  jmp  y,$20       3833  jmp(Y,'v6502_next')             #18
              0de9 00f6  ld   $f6         3834  ld(-20/2)                       #19
                                          3835
                                          3836  label('v6502_brk')
v6502_brk:    0dea 0002  ld   $02         3837  ld(hi('ENTER'))                 #12 Switch to vCPU
              0deb c205  st   [$05]       3838  st([vCpuSelect])                #13
                                          3839  assert v6502_A == vAC
              0dec 0000  ld   $00         3840  ld(0)                           #14
              0ded c219  st   [$19]       3841  st([vAC+1])                     #15
              0dee 1403  ld   $03,y       3842  ld(hi('REENTER'),Y)             #16 Switch in the current time slice
              0def 00fb  ld   $fb         3843  ld(-22//2+v6502_adjust)         #17
              0df0 e0cb  jmp  y,$cb       3844  jmp(Y,'REENTER')                #18
              0df1 0200  nop              3845  nop()                           #19
                                          3846
                                          3847  # All interpreter entry points must share the same page offset, because
                                          3848  # this offset is hard-coded as immediate operand in the video driver.
                                          3849  # The Gigatron's original vCPU's 'ENTER' label is already at $2ff, so we
                                          3850  # just use $dff for 'v6502_ENTER'. v6502 actually has two entry points.
                                          3851  # The other is 'v6502_RESUME' at $10ff. It is used for instructions
                                          3852  # that were fetched but not yet executed. Allowing the split gives finer
                                          3853  # granulariy, and hopefully more throughput for the simpler instructions.
                                          3854  # (There is no "overhead" for allowing instruction splitting, because
                                          3855  #  both emulation phases must administer [vTicks] anyway.)
                                          3856  while pc()&255 < 255:
              0df2 0200  nop              3857    nop()
              0df3 0200  nop
              0df4 0200  nop
              * 13 times
                                          3858  label('v6502_ENTER')
v6502_ENTER:  0dff fc22  bra  v6502_next2 3859  bra('v6502_next2')              #0 v6502 primary entry point
                                          3860  # --- Page boundary ---
              0e00 a006  suba $06         3861  suba(v6502_adjust)              #1,19 Adjust for vCPU/v6520 timing differences
                                          3862
                                          3863  #19 Addressing modes
                                          3864  (   'v6502_mode0'  ); bra('v6502_modeIZX'); bra('v6502_modeIMM'); bra('v6502_modeILL') # $00 xxx000xx
              0e01 fce0  bra  v6502_modeIZX
              0e02 fc42  bra  v6502_modeIMM
              0e03 fc58  bra  v6502_modeIMP
                                          3865  bra('v6502_modeZP');  bra('v6502_modeZP');  bra('v6502_modeZP');  bra('v6502_modeILL') # $04 xxx001xx
              0e04 fc5d  bra  v6502_modeZP
              0e05 fc5d  bra  v6502_modeZP
              0e06 fc5d  bra  v6502_modeZP
              0e07 fc58  bra  v6502_modeIMP
                                          3866  bra('v6502_modeIMP'); bra('v6502_modeIMM'); bra('v6502_modeACC'); bra('v6502_modeILL') # $08 xxx010xx
              0e08 fc58  bra  v6502_modeIMP
              0e09 fc42  bra  v6502_modeIMM
              0e0a fc52  bra  v6502_modeACC
              0e0b fc58  bra  v6502_modeIMP
                                          3867  bra('v6502_modeABS'); bra('v6502_modeABS'); bra('v6502_modeABS'); bra('v6502_modeILL') # $0c xxx011xx
              0e0c fc78  bra  v6502_modeABS
              0e0d fc78  bra  v6502_modeABS
              0e0e fc78  bra  v6502_modeABS
              0e0f fc58  bra  v6502_modeIMP
                                          3868  bra('v6502_modeREL'); bra('v6502_modeIZY'); bra('v6502_modeIMM'); bra('v6502_modeILL') # $10 xxx100xx
              0e10 fccf  bra  v6502_modeREL
              0e11 fcab  bra  v6502_modeIZY
              0e12 fc42  bra  v6502_modeIMM
              0e13 fc58  bra  v6502_modeIMP
                                          3869  bra('v6502_modeZPX'); bra('v6502_modeZPX'); bra('v6502_modeZPX'); bra('v6502_modeILL') # $14 xxx101xx
              0e14 fc5b  bra  v6502_modeZPX
              0e15 fc5b  bra  v6502_modeZPX
              0e16 fc5b  bra  v6502_modeZPX
              0e17 fc58  bra  v6502_modeIMP
                                          3870  bra('v6502_modeIMP'); bra('v6502_modeABY'); bra('v6502_modeIMP'); bra('v6502_modeILL') # $18 xxx110xx
              0e18 fc58  bra  v6502_modeIMP
              0e19 fc7b  bra  v6502_modeABY
              0e1a fc58  bra  v6502_modeIMP
              0e1b fc58  bra  v6502_modeIMP
                                          3871  bra('v6502_modeABX'); bra('v6502_modeABX'); bra('v6502_modeABX'); bra('v6502_modeILL') # $1c xxx111xx
              0e1c fc7a  bra  v6502_modeABX
              0e1d fc7a  bra  v6502_modeABX
              0e1e fc7a  bra  v6502_modeABX
              0e1f fc58  bra  v6502_modeIMP
                                          3872
                                          3873  # Special encoding cases for emulator:
                                          3874  #     $00 BRK -         but gets mapped to #$DD      handled in v6502_mode0
                                          3875  #     $20 JSR $DDDD     but gets mapped to #$DD      handled in v6502_mode0 and v6502_JSR
                                          3876  #     $40 RTI -         but gets mapped to #$DD      handled in v6502_mode0
                                          3877  #     $60 RTS -         but gets mapped to #$DD      handled in v6502_mode0
                                          3878  #     $6C JMP ($DDDD)   but gets mapped to $DDDD     handled in v6502_JMP2
                                          3879  #     $96 STX $DD,Y     but gets mapped to $DD,X     handled in v6502_STX2
                                          3880  #     $B6 LDX $DD,Y     but gets mapped to $DD,X     handled in v6502_LDX2
                                          3881  #     $BE LDX $DDDD,Y   but gets mapped to $DDDD,X   handled in v6502_modeABX
                                          3882
                                          3883  label('v6502_next')
v6502_next:   0e20 8115  adda [$15]       3884  adda([vTicks])                  #0
                                          3885  blt('v6502_exitBefore')         #1 No more ticks
              0e21 e83a  blt  v6502_exitBefore
                                          3886  label('v6502_next2')
v6502_next2:  0e22 c215  st   [$15]       3887  st([vTicks])                    #2
                                          3888  #
                                          3889  # Fetch opcode
              0e23 111a  ld   [$1a],x     3890  ld([v6502_PCL],X)               #3
              0e24 151b  ld   [$1b],y     3891  ld([v6502_PCH],Y)               #4
              0e25 0d00  ld   [y,x]       3892  ld([Y,X])                       #5 Fetch IR
              0e26 c226  st   [$26]       3893  st([v6502_IR])                  #6
              0e27 011a  ld   [$1a]       3894  ld([v6502_PCL])                 #7 PC++
              0e28 8001  adda $01         3895  adda(1)                         #8
              0e29 d21a  st   [$1a],x     3896  st([v6502_PCL],X)               #9
              0e2a f02d  beq  $0e2d       3897  beq(pc()+3)                     #10
              0e2b fc2e  bra  $0e2e       3898  bra(pc()+3)                     #11
              0e2c 0000  ld   $00         3899  ld(0)                           #12
              0e2d 0001  ld   $01         3900  ld(1)                           #12(!)
              0e2e 811b  adda [$1b]       3901  adda([v6502_PCH])               #13
              0e2f d61b  st   [$1b],y     3902  st([v6502_PCH],Y)               #14
                                          3903  #
                                          3904  # Get addressing mode and fetch operands
              0e30 0126  ld   [$26]       3905  ld([v6502_IR])                  #15 Get addressing mode
              0e31 201f  anda $1f         3906  anda(31)                        #16
              0e32 fe00  bra  ac          3907  bra(AC)                         #17
              0e33 fc34  bra  .next20     3908  bra('.next20')                  #18
                                          3909  # (jump table)                  #19
                                          3910  label('.next20')
.next20:      0e34 0d00  ld   [y,x]       3911  ld([Y,X])                       #20 Fetch L
                                          3912  # Most opcodes branch away at this point, but IR & 31 == 0 falls through
                                          3913  #
                                          3914  # Implicit Mode for  BRK JSR RTI RTS (<  0x80) -- 26 cycles
                                          3915  # Immediate Mode for LDY CPY CPX     (>= 0x80) -- 36 cycles
                                          3916  label('v6502_mode0')
v6502_mode0:  0e35 0126  ld   [$26]       3917  ld([v6502_IR])                  #21 'xxx0000'
              0e36 e845  blt  .imm24      3918  bmi('.imm24')                   #22
              0e37 011b  ld   [$1b]       3919  ld([v6502_PCH])                 #23
              0e38 fcf2  bra  v6502_check 3920  bra('v6502_check')              #24
              0e39 00f3  ld   $f3         3921  ld(-26/2)                       #25
                                          3922
                                          3923  # Resync with video driver. At this point we're returning BEFORE
                                          3924  # fetching and executing the next instruction.
                                          3925  label('v6502_exitBefore')
v6502_exitBefore:
              0e3a 8013  adda $13         3926  adda(v6502_maxTicks)            #3 Exit BEFORE fetch
              0e3b e43b  bgt  $0e3b       3927  bgt(pc()&255)                   #4 Resync
              0e3c a001  suba $01         3928  suba(1)                         #5
              0e3d 000d  ld   $0d         3929  ld(hi('v6502_ENTER'))           #6 Set entry point to before 'fetch'
              0e3e c205  st   [$05]       3930  st([vCpuSelect])                #7
              0e3f 1401  ld   $01,y       3931  ld(hi('vBlankStart'),Y)         #8
              0e40 e11e  jmp  y,[$1e]     3932  jmp(Y,[vReturn])                #9 To video driver
              0e41 0000  ld   $00         3933  ld(0)                           #10
                                          3934  assert v6502_overhead ==         11
                                          3935
                                          3936  # Immediate Mode: #$FF -- 36 cycles
                                          3937  label('v6502_modeIMM')
v6502_modeIMM:
              0e42 0200  nop              3938  nop()                           #21 Wait for v6502_mode0 to join
              0e43 0200  nop              3939  nop()                           #22
              0e44 011b  ld   [$1b]       3940  ld([v6502_PCH])                 #23 Copy PC
                                          3941  label('.imm24')
.imm24:       0e45 c225  st   [$25]       3942  st([v6502_ADH])                 #24
              0e46 011a  ld   [$1a]       3943  ld([v6502_PCL])                 #25
              0e47 d224  st   [$24],x     3944  st([v6502_ADL],X)               #26
              0e48 8001  adda $01         3945  adda(1)                         #27 PC++
              0e49 c21a  st   [$1a]       3946  st([v6502_PCL])                 #28
              0e4a f04d  beq  $0e4d       3947  beq(pc()+3)                     #29
              0e4b fc4e  bra  $0e4e       3948  bra(pc()+3)                     #30
              0e4c 0000  ld   $00         3949  ld(0)                           #31
              0e4d 0001  ld   $01         3950  ld(1)                           #31(!)
              0e4e 811b  adda [$1b]       3951  adda([v6502_PCH])               #32
              0e4f c21b  st   [$1b]       3952  st([v6502_PCH])                 #33
              0e50 fcf2  bra  v6502_check 3953  bra('v6502_check')              #34
              0e51 00ee  ld   $ee         3954  ld(-36/2)                       #35
                                          3955
                                          3956  # Accumulator Mode: ROL ROR LSL ASR -- 28 cycles
                                          3957  label('v6502_modeACC')
v6502_modeACC:
              0e52 0018  ld   $18         3958  ld(v6502_A&255)                 #21 Address of AC
              0e53 d224  st   [$24],x     3959  st([v6502_ADL],X)               #22
              0e54 0000  ld   $00         3960  ld(v6502_A>>8)                  #23
              0e55 c225  st   [$25]       3961  st([v6502_ADH])                 #24
              0e56 00f2  ld   $f2         3962  ld(-28/2)                       #25
              0e57 fcf2  bra  v6502_check 3963  bra('v6502_check')              #26
                                          3964  #nop()                          #27 Overlap
                                          3965  #
                                          3966  # Implied Mode: no operand -- 24 cycles
                                          3967  label('v6502_modeILL')
                                          3968  label('v6502_modeIMP')
v6502_modeILL:
v6502_modeIMP:
              0e58 0200  nop              3969  nop()                           #21,27
              0e59 fcf2  bra  v6502_check 3970  bra('v6502_check')              #22
              0e5a 00f4  ld   $f4         3971  ld(-24/2)                       #23
                                          3972
                                          3973  # Zero Page Modes: $DD $DD,X $DD,Y -- 36 cycles
                                          3974  label('v6502_modeZPX')
v6502_modeZPX:
              0e5b fc5f  bra  .zp23       3975  bra('.zp23')                    #21
              0e5c 812a  adda [$2a]       3976  adda([v6502_X])                 #22
                                          3977  label('v6502_modeZP')
v6502_modeZP: 0e5d fc5f  bra  .zp23       3978  bra('.zp23')                    #21
              0e5e 0200  nop              3979  nop()                           #22
                                          3980  label('.zp23')
.zp23:        0e5f d224  st   [$24],x     3981  st([v6502_ADL],X)               #23
              0e60 0000  ld   $00         3982  ld(0)                           #24 H=0
              0e61 c225  st   [$25]       3983  st([v6502_ADH])                 #25
              0e62 0001  ld   $01         3984  ld(1)                           #26 PC++
              0e63 811a  adda [$1a]       3985  adda([v6502_PCL])               #27
              0e64 c21a  st   [$1a]       3986  st([v6502_PCL])                 #28
              0e65 f068  beq  $0e68       3987  beq(pc()+3)                     #29
              0e66 fc69  bra  $0e69       3988  bra(pc()+3)                     #30
              0e67 0000  ld   $00         3989  ld(0)                           #31
              0e68 0001  ld   $01         3990  ld(1)                           #31(!)
              0e69 811b  adda [$1b]       3991  adda([v6502_PCH])               #32
              0e6a c21b  st   [$1b]       3992  st([v6502_PCH])                 #33
              0e6b fcf2  bra  v6502_check 3993  bra('v6502_check')              #34
              0e6c 00ee  ld   $ee         3994  ld(-36/2)                       #35
                                          3995
                                          3996  # Possible retry loop for modeABS and modeIZY. Because these need
                                          3997  # more time than the v6502_maxTicks of 38 Gigatron cycles, we may
                                          3998  # have to restart them after the next horizontal pulse.
                                          3999  label('.retry28')
.retry28:     0e6d f070  beq  $0e70       4000  beq(pc()+3)                     #28,37 PC--
              0e6e fc71  bra  $0e71       4001  bra(pc()+3)                     #29
              0e6f 0000  ld   $00         4002  ld(0)                           #30
              0e70 00ff  ld   $ff         4003  ld(-1)                          #30(!)
              0e71 811b  adda [$1b]       4004  adda([v6502_PCH])               #31
              0e72 c21b  st   [$1b]       4005  st([v6502_PCH])                 #32
              0e73 011a  ld   [$1a]       4006  ld([v6502_PCL])                 #33
              0e74 a001  suba $01         4007  suba(1)                         #34
              0e75 c21a  st   [$1a]       4008  st([v6502_PCL])                 #35
              0e76 fc20  bra  v6502_next  4009  bra('v6502_next')               #36 Retry until sufficient time
              0e77 00ed  ld   $ed         4010  ld(-38/2)                       #37
                                          4011
                                          4012  # Absolute Modes: $DDDD $DDDD,X $DDDD,Y -- 64 cycles
                                          4013  label('v6502_modeABS')
v6502_modeABS:
              0e78 fc7d  bra  .abs23      4014  bra('.abs23')                   #21
              0e79 0000  ld   $00         4015  ld(0)                           #22
                                          4016  label('v6502_modeABX')
v6502_modeABX:
              0e7a fc7d  bra  .abs23      4017  bra('.abs23')                   #21
                                          4018  label('v6502_modeABY')
v6502_modeABY:
              0e7b 012a  ld   [$2a]       4019  ld([v6502_X])                   #21,22
              0e7c 012b  ld   [$2b]       4020  ld([v6502_Y])                   #22
                                          4021  label('.abs23')
.abs23:       0e7d c224  st   [$24]       4022  st([v6502_ADL])                 #23
              0e7e 00f3  ld   $f3         4023  ld(-64//2+v6502_maxTicks)       #24 Is there enough time for the excess ticks?
              0e7f 8115  adda [$15]       4024  adda([vTicks])                  #25
              0e80 e86d  blt  .retry28    4025  blt('.retry28')                 #26
              0e81 011a  ld   [$1a]       4026  ld([v6502_PCL])                 #27
              0e82 0126  ld   [$26]       4027  ld([v6502_IR])                  #28 Special case $BE: LDX $DDDD,Y (we got X in ADL)
              0e83 60be  xora $be         4028  xora(0xbe)                      #29
              0e84 f087  beq  $0e87       4029  beq(pc()+3)                     #30
              0e85 fc88  bra  $0e88       4030  bra(pc()+3)                     #31
              0e86 0124  ld   [$24]       4031  ld([v6502_ADL])                 #32
              0e87 012b  ld   [$2b]       4032  ld([v6502_Y])                   #32(!)
              0e88 8d00  adda [y,x]       4033  adda([Y,X])                     #33 Fetch and add L
              0e89 c224  st   [$24]       4034  st([v6502_ADL])                 #34
              0e8a e88e  blt  .abs37      4035  bmi('.abs37')                   #35 Carry?
              0e8b ad00  suba [y,x]       4036  suba([Y,X])                     #36 Gets back original operand
              0e8c fc90  bra  .abs39      4037  bra('.abs39')                   #37
              0e8d 4d00  ora  [y,x]       4038  ora([Y,X])                      #38 Carry in bit 7
                                          4039  label('.abs37')
.abs37:       0e8e 2d00  anda [y,x]       4040  anda([Y,X])                     #37 Carry in bit 7
              0e8f 0200  nop              4041  nop()                           #38
                                          4042  label('.abs39')
.abs39:       0e90 3080  anda $80,x       4043  anda(0x80,X)                    #39 Move carry to bit 0
              0e91 0500  ld   [x]         4044  ld([X])                         #40
              0e92 c225  st   [$25]       4045  st([v6502_ADH])                 #41
              0e93 011a  ld   [$1a]       4046  ld([v6502_PCL])                 #42 PC++
              0e94 8001  adda $01         4047  adda(1)                         #43
              0e95 d21a  st   [$1a],x     4048  st([v6502_PCL],X)               #44
              0e96 f099  beq  $0e99       4049  beq(pc()+3)                     #45
              0e97 fc9a  bra  $0e9a       4050  bra(pc()+3)                     #46
              0e98 0000  ld   $00         4051  ld(0)                           #47
              0e99 0001  ld   $01         4052  ld(1)                           #47(!)
              0e9a 811b  adda [$1b]       4053  adda([v6502_PCH])               #48
              0e9b d61b  st   [$1b],y     4054  st([v6502_PCH],Y)               #49
              0e9c 0d00  ld   [y,x]       4055  ld([Y,X])                       #50 Fetch H
              0e9d 8125  adda [$25]       4056  adda([v6502_ADH])               #51
              0e9e c225  st   [$25]       4057  st([v6502_ADH])                 #52
              0e9f 011a  ld   [$1a]       4058  ld([v6502_PCL])                 #53 PC++
              0ea0 8001  adda $01         4059  adda(1)                         #54
              0ea1 c21a  st   [$1a]       4060  st([v6502_PCL])                 #55
              0ea2 f0a5  beq  $0ea5       4061  beq(pc()+3)                     #56
              0ea3 fca6  bra  $0ea6       4062  bra(pc()+3)                     #57
              0ea4 0000  ld   $00         4063  ld(0)                           #58
              0ea5 0001  ld   $01         4064  ld(1)                           #58(!)
              0ea6 811b  adda [$1b]       4065  adda([v6502_PCH])               #59
              0ea7 c21b  st   [$1b]       4066  st([v6502_PCH])                 #60
              0ea8 1124  ld   [$24],x     4067  ld([v6502_ADL],X)               #61
              0ea9 fcf2  bra  v6502_check 4068  bra('v6502_check')              #62
              0eaa 00e0  ld   $e0         4069  ld(-64/2)                       #63
                                          4070
                                          4071  # Indirect Indexed Mode: ($DD),Y -- 54 cycles
                                          4072  label('v6502_modeIZY')
v6502_modeIZY:
              0eab 1200  ld   ac,x        4073  ld(AC,X)                        #21 $DD
              0eac 1400  ld   $00,y       4074  ld(0,Y)                         #22 $00DD
              0ead 00f8  ld   $f8         4075  ld(-54//2+v6502_maxTicks)       #23 Is there enough time for the excess ticks?
              0eae 8115  adda [$15]       4076  adda([vTicks])                  #24
              0eaf 0200  nop              4077  nop()                           #25
              0eb0 e86d  blt  .retry28    4078  blt('.retry28')                 #26
              0eb1 011a  ld   [$1a]       4079  ld([v6502_PCL])                 #27
              0eb2 8001  adda $01         4080  adda(1)                         #28 PC++
              0eb3 c21a  st   [$1a]       4081  st([v6502_PCL])                 #29
              0eb4 f0b7  beq  $0eb7       4082  beq(pc()+3)                     #30
              0eb5 fcb8  bra  $0eb8       4083  bra(pc()+3)                     #31
              0eb6 0000  ld   $00         4084  ld(0)                           #32
              0eb7 0001  ld   $01         4085  ld(1)                           #32(!)
              0eb8 811b  adda [$1b]       4086  adda([v6502_PCH])               #33
              0eb9 c21b  st   [$1b]       4087  st([v6502_PCH])                 #34
              0eba 0d00  ld   [y,x]       4088  ld([Y,X])                       #35 Read word from zero-page
              0ebb de00  st   [y,x++]     4089  st([Y,Xpp])                     #36 (Just X++) Wrap-around is correct
              0ebc c224  st   [$24]       4090  st([v6502_ADL])                 #37
              0ebd 0d00  ld   [y,x]       4091  ld([Y,X])                       #38
              0ebe c225  st   [$25]       4092  st([v6502_ADH])                 #39
              0ebf 012b  ld   [$2b]       4093  ld([v6502_Y])                   #40 Add Y
              0ec0 8124  adda [$24]       4094  adda([v6502_ADL])               #41
              0ec1 c224  st   [$24]       4095  st([v6502_ADL])                 #42
              0ec2 e8c6  blt  .izy45      4096  bmi('.izy45')                   #43 Carry?
              0ec3 a12b  suba [$2b]       4097  suba([v6502_Y])                 #44 Gets back original operand
              0ec4 fcc8  bra  .izy47      4098  bra('.izy47')                   #45
              0ec5 412b  ora  [$2b]       4099  ora([v6502_Y])                  #46 Carry in bit 7
                                          4100  label('.izy45')
.izy45:       0ec6 212b  anda [$2b]       4101  anda([v6502_Y])                 #45 Carry in bit 7
              0ec7 0200  nop              4102  nop()                           #46
                                          4103  label('.izy47')
.izy47:       0ec8 3080  anda $80,x       4104  anda(0x80,X)                    #47 Move carry to bit 0
              0ec9 0500  ld   [x]         4105  ld([X])                         #48
              0eca 8125  adda [$25]       4106  adda([v6502_ADH])               #49
              0ecb c225  st   [$25]       4107  st([v6502_ADH])                 #50
              0ecc 1124  ld   [$24],x     4108  ld([v6502_ADL],X)               #51
              0ecd fcf2  bra  v6502_check 4109  bra('v6502_check')              #52
              0ece 00e5  ld   $e5         4110  ld(-54/2)                       #53
                                          4111
                                          4112  # Relative Mode: BEQ BNE BPL BMI BCC BCS BVC BVS -- 36 cycles
                                          4113  label('v6502_modeREL')
v6502_modeREL:
              0ecf d224  st   [$24],x     4114  st([v6502_ADL],X)               #21 Offset (Only needed for branch)
              0ed0 e8d3  blt  $0ed3       4115  bmi(pc()+3)                     #22 Sign extend
              0ed1 fcd4  bra  $0ed4       4116  bra(pc()+3)                     #23
              0ed2 0000  ld   $00         4117  ld(0)                           #24
              0ed3 00ff  ld   $ff         4118  ld(255)                         #24(!)
              0ed4 c225  st   [$25]       4119  st([v6502_ADH])                 #25
              0ed5 011a  ld   [$1a]       4120  ld([v6502_PCL])                 #26 PC++ (Needed for both cases)
              0ed6 8001  adda $01         4121  adda(1)                         #27
              0ed7 c21a  st   [$1a]       4122  st([v6502_PCL])                 #28
              0ed8 f0db  beq  $0edb       4123  beq(pc()+3)                     #29
              0ed9 fcdc  bra  $0edc       4124  bra(pc()+3)                     #30
              0eda 0000  ld   $00         4125  ld(0)                           #31
              0edb 0001  ld   $01         4126  ld(1)                           #31(!)
              0edc 811b  adda [$1b]       4127  adda([v6502_PCH])               #32
              0edd c21b  st   [$1b]       4128  st([v6502_PCH])                 #33
              0ede fcf2  bra  v6502_check 4129  bra('v6502_check')              #34
              0edf 00ee  ld   $ee         4130  ld(-36/2)                       #53
                                          4131
                                          4132  # Indexed Indirect Mode: ($DD,X) -- 38 cycles
                                          4133  label('v6502_modeIZX')
v6502_modeIZX:
              0ee0 812a  adda [$2a]       4134  adda([v6502_X])                 #21 Add X
              0ee1 c21d  st   [$1d]       4135  st([v6502_Tmp])                 #22
              0ee2 9001  adda $01,x       4136  adda(1,X)                       #23 Read word from zero-page
              0ee3 0500  ld   [x]         4137  ld([X])                         #24
              0ee4 c225  st   [$25]       4138  st([v6502_ADH])                 #25
              0ee5 111d  ld   [$1d],x     4139  ld([v6502_Tmp],X)               #26
              0ee6 0500  ld   [x]         4140  ld([X])                         #27
              0ee7 d224  st   [$24],x     4141  st([v6502_ADL],X)               #28
              0ee8 011a  ld   [$1a]       4142  ld([v6502_PCL])                 #29 PC++
              0ee9 8001  adda $01         4143  adda(1)                         #30
              0eea c21a  st   [$1a]       4144  st([v6502_PCL])                 #31
              0eeb f0ee  beq  $0eee       4145  beq(pc()+3)                     #32
              0eec fcef  bra  $0eef       4146  bra(pc()+3)                     #33
              0eed 0000  ld   $00         4147  ld(0)                           #34
              0eee 0001  ld   $01         4148  ld(1)                           #34(!)
              0eef 811b  adda [$1b]       4149  adda([v6502_PCH])               #35
              0ef0 c21b  st   [$1b]       4150  st([v6502_PCH])                 #36
              0ef1 00ed  ld   $ed         4151  ld(-38/2)                       #37 !!! Fall through to v6502_check !!!
                                          4152  #
                                          4153  # Update elapsed time for the addressing mode processing.
                                          4154  # Then check if we can immediately execute this instruction.
                                          4155  # Otherwise transfer control to the video driver.
                                          4156  label('v6502_check')
v6502_check:  0ef2 8115  adda [$15]       4157  adda([vTicks])                  #0
                                          4158  blt('v6502_exitAfter')          #1 No more ticks
              0ef3 e8f8  blt  v6502_exitAfter
              0ef4 c215  st   [$15]       4159  st([vTicks])                    #2
              0ef5 140f  ld   $0f,y       4160  ld(hi('v6502_execute'),Y)       #3
              0ef6 e126  jmp  y,[$26]     4161  jmp(Y,[v6502_IR])               #4
              0ef7 fcff  bra  $ff         4162  bra(255)                        #5
                                          4163
                                          4164  # Otherwise resync with video driver. At this point we're returning AFTER
                                          4165  # addressing mode decoding, but before executing the instruction.
                                          4166  label('v6502_exitAfter')
v6502_exitAfter:
              0ef8 8013  adda $13         4167  adda(v6502_maxTicks)            #3 Exit AFTER fetch
              0ef9 e4f9  bgt  $0ef9       4168  bgt(pc()&255)                   #4 Resync
              0efa a001  suba $01         4169  suba(1)                         #5
              0efb 0010  ld   $10         4170  ld(hi('v6502_RESUME'))          #6 Set entry point to before 'execute'
              0efc c205  st   [$05]       4171  st([vCpuSelect])                #7
              0efd 1401  ld   $01,y       4172  ld(hi('vBlankStart'),Y)         #8
              0efe e11e  jmp  y,[$1e]     4173  jmp(Y,[vReturn])                #9 To video driver
              0eff 0000  ld   $00         4174  ld(0)                           #10
                                          4175  assert v6502_overhead ==         11
                                          4176
                                          4177  align(0x100,size=0x100)
                                          4178  label('v6502_execute')
                                          4179  # This page works as a 255-entry (0..254) jump table for 6502 opcodes.
                                          4180  # Jumping into this page must have 'bra 255' in the branch delay slot
                                          4181  # in order to get out again and dispatch to the right continuation.
                                          4182  # X must hold [v6502_ADL],
                                          4183  # Y will hold hi('v6502_execute'),
                                          4184  # A will be loaded with the code offset (this is skipped at offset $ff)
v6502_execute:
              0f00 00fd  ld   $fd         4185  ld('v6502_BRK'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $00
              0f01 0089  ld   $89
              0f02 00fd  ld   $fd
              0f03 00fd  ld   $fd
              0f04 00fd  ld   $fd         4186  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f05 0089  ld   $89
              0f06 00f1  ld   $f1
              0f07 00fd  ld   $fd
              0f08 00f3  ld   $f3         4187  ld('v6502_PHP'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f09 0089  ld   $89
              0f0a 00f1  ld   $f1
              0f0b 00fd  ld   $fd
              0f0c 00fd  ld   $fd         4188  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f0d 0089  ld   $89
              0f0e 00f1  ld   $f1
              0f0f 00fd  ld   $fd
              0f10 003f  ld   $3f         4189  ld('v6502_BPL'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $10
              0f11 0089  ld   $89
              0f12 00fd  ld   $fd
              0f13 00fd  ld   $fd
              0f14 00fd  ld   $fd         4190  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f15 0089  ld   $89
              0f16 00f1  ld   $f1
              0f17 00fd  ld   $fd
              0f18 0036  ld   $36         4191  ld('v6502_CLC'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f19 0089  ld   $89
              0f1a 00fd  ld   $fd
              0f1b 00fd  ld   $fd
              0f1c 00fd  ld   $fd         4192  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f1d 0089  ld   $89
              0f1e 00f1  ld   $f1
              0f1f 00fd  ld   $fd
              0f20 009a  ld   $9a         4193  ld('v6502_JSR'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6 $20
              0f21 0085  ld   $85
              0f22 00fd  ld   $fd
              0f23 00fd  ld   $fd
              0f24 00f5  ld   $f5         4194  ld('v6502_BIT'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f25 0085  ld   $85
              0f26 00f7  ld   $f7
              0f27 00fd  ld   $fd
              0f28 00f9  ld   $f9         4195  ld('v6502_PLP'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f29 0085  ld   $85
              0f2a 00f7  ld   $f7
              0f2b 00fd  ld   $fd
              0f2c 00f5  ld   $f5         4196  ld('v6502_BIT'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f2d 0085  ld   $85
              0f2e 00f7  ld   $f7
              0f2f 00fd  ld   $fd
              0f30 0042  ld   $42         4197  ld('v6502_BMI'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6 $30
              0f31 0085  ld   $85
              0f32 00fd  ld   $fd
              0f33 00fd  ld   $fd
              0f34 00fd  ld   $fd         4198  ld('v6502_ILL'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f35 0085  ld   $85
              0f36 00f7  ld   $f7
              0f37 00fd  ld   $fd
              0f38 0038  ld   $38         4199  ld('v6502_SEC'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f39 0085  ld   $85
              0f3a 00fd  ld   $fd
              0f3b 00fd  ld   $fd
              0f3c 00fd  ld   $fd         4200  ld('v6502_ILL'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f3d 0085  ld   $85
              0f3e 00f7  ld   $f7
              0f3f 00fd  ld   $fd
              0f40 00d3  ld   $d3         4201  ld('v6502_RTI'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6 $40
              0f41 008c  ld   $8c
              0f42 00fd  ld   $fd
              0f43 00fd  ld   $fd
              0f44 00fd  ld   $fd         4202  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f45 008c  ld   $8c
              0f46 00d7  ld   $d7
              0f47 00fd  ld   $fd
              0f48 00d9  ld   $d9         4203  ld('v6502_PHA'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f49 008c  ld   $8c
              0f4a 00d7  ld   $d7
              0f4b 00fd  ld   $fd
              0f4c 0096  ld   $96         4204  ld('v6502_JMP1');ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f4d 008c  ld   $8c
              0f4e 00d7  ld   $d7
              0f4f 00fd  ld   $fd
              0f50 0045  ld   $45         4205  ld('v6502_BVC'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6 $50
              0f51 008c  ld   $8c
              0f52 00fd  ld   $fd
              0f53 00fd  ld   $fd
              0f54 00fd  ld   $fd         4206  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f55 008c  ld   $8c
              0f56 00d7  ld   $d7
              0f57 00fd  ld   $fd
              0f58 00db  ld   $db         4207  ld('v6502_CLI'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f59 008c  ld   $8c
              0f5a 00fd  ld   $fd
              0f5b 00fd  ld   $fd
              0f5c 00fd  ld   $fd         4208  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f5d 008c  ld   $8c
              0f5e 00d7  ld   $d7
              0f5f 00fd  ld   $fd
              0f60 00dd  ld   $dd         4209  ld('v6502_RTS'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $60
              0f61 0001  ld   $01
              0f62 00fd  ld   $fd
              0f63 00fd  ld   $fd
              0f64 00fd  ld   $fd         4210  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f65 0001  ld   $01
              0f66 00d5  ld   $d5
              0f67 00fd  ld   $fd
              0f68 00df  ld   $df         4211  ld('v6502_PLA'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f69 0001  ld   $01
              0f6a 00d5  ld   $d5
              0f6b 00fd  ld   $fd
              0f6c 0098  ld   $98         4212  ld('v6502_JMP2');ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f6d 0001  ld   $01
              0f6e 00d5  ld   $d5
              0f6f 00fd  ld   $fd
              0f70 0049  ld   $49         4213  ld('v6502_BVS'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $70
              0f71 0001  ld   $01
              0f72 00fd  ld   $fd
              0f73 00fd  ld   $fd
              0f74 00fd  ld   $fd         4214  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f75 0001  ld   $01
              0f76 00d5  ld   $d5
              0f77 00fd  ld   $fd
              0f78 00e1  ld   $e1         4215  ld('v6502_SEI'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f79 0001  ld   $01
              0f7a 00fd  ld   $fd
              0f7b 00fd  ld   $fd
              0f7c 00fd  ld   $fd         4216  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f7d 0001  ld   $01
              0f7e 00d5  ld   $d5
              0f7f 00fd  ld   $fd
              0f80 00fd  ld   $fd         4217  ld('v6502_ILL'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $80
              0f81 00c1  ld   $c1
              0f82 00fd  ld   $fd
              0f83 00fd  ld   $fd
              0f84 00c7  ld   $c7         4218  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX'); ld('v6502_ILL') #6
              0f85 00c1  ld   $c1
              0f86 00c3  ld   $c3
              0f87 00fd  ld   $fd
              0f88 007f  ld   $7f         4219  ld('v6502_DEY'); ld('v6502_ILL'); ld('v6502_TXA'); ld('v6502_ILL') #6
              0f89 00fd  ld   $fd
              0f8a 00cd  ld   $cd
              0f8b 00fd  ld   $fd
              0f8c 00c7  ld   $c7         4220  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX'); ld('v6502_ILL') #6
              0f8d 00c1  ld   $c1
              0f8e 00c3  ld   $c3
              0f8f 00fd  ld   $fd
              0f90 004d  ld   $4d         4221  ld('v6502_BCC'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $90
              0f91 00c1  ld   $c1
              0f92 00fd  ld   $fd
              0f93 00fd  ld   $fd
              0f94 00c7  ld   $c7         4222  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX2');ld('v6502_ILL') #6
              0f95 00c1  ld   $c1
              0f96 00c5  ld   $c5
              0f97 00fd  ld   $fd
              0f98 00cf  ld   $cf         4223  ld('v6502_TYA'); ld('v6502_STA'); ld('v6502_TXS'); ld('v6502_ILL') #6
              0f99 00c1  ld   $c1
              0f9a 00e3  ld   $e3
              0f9b 00fd  ld   $fd
              0f9c 00fd  ld   $fd         4224  ld('v6502_ILL'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f9d 00c1  ld   $c1
              0f9e 00fd  ld   $fd
              0f9f 00fd  ld   $fd
              0fa0 00bf  ld   $bf         4225  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6 $A0
              0fa1 00b9  ld   $b9
              0fa2 00bb  ld   $bb
              0fa3 00fd  ld   $fd
              0fa4 00bf  ld   $bf         4226  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fa5 00b9  ld   $b9
              0fa6 00bb  ld   $bb
              0fa7 00fd  ld   $fd
              0fa8 00cb  ld   $cb         4227  ld('v6502_TAY'); ld('v6502_LDA'); ld('v6502_TAX'); ld('v6502_ILL') #6
              0fa9 00b9  ld   $b9
              0faa 00c9  ld   $c9
              0fab 00fd  ld   $fd
              0fac 00bf  ld   $bf         4228  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fad 00b9  ld   $b9
              0fae 00bb  ld   $bb
              0faf 00fd  ld   $fd
              0fb0 0051  ld   $51         4229  ld('v6502_BCS'); ld('v6502_LDA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $B0
              0fb1 00b9  ld   $b9
              0fb2 00fd  ld   $fd
              0fb3 00fd  ld   $fd
              0fb4 00bf  ld   $bf         4230  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX2');ld('v6502_ILL') #6
              0fb5 00b9  ld   $b9
              0fb6 00bd  ld   $bd
              0fb7 00fd  ld   $fd
              0fb8 00d1  ld   $d1         4231  ld('v6502_CLV'); ld('v6502_LDA'); ld('v6502_TSX'); ld('v6502_ILL') #6
              0fb9 00b9  ld   $b9
              0fba 00e5  ld   $e5
              0fbb 00fd  ld   $fd
              0fbc 00bf  ld   $bf         4232  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fbd 00b9  ld   $b9
              0fbe 00bb  ld   $bb
              0fbf 00fd  ld   $fd
              0fc0 00e7  ld   $e7         4233  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6 $C0
              0fc1 00e9  ld   $e9
              0fc2 00fd  ld   $fd
              0fc3 00fd  ld   $fd
              0fc4 00e7  ld   $e7         4234  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fc5 00e9  ld   $e9
              0fc6 00eb  ld   $eb
              0fc7 00fd  ld   $fd
              0fc8 007b  ld   $7b         4235  ld('v6502_INY'); ld('v6502_CMP'); ld('v6502_DEX'); ld('v6502_ILL') #6
              0fc9 00e9  ld   $e9
              0fca 0077  ld   $77
              0fcb 00fd  ld   $fd
              0fcc 00e7  ld   $e7         4236  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fcd 00e9  ld   $e9
              0fce 00eb  ld   $eb
              0fcf 00fd  ld   $fd
              0fd0 0055  ld   $55         4237  ld('v6502_BNE'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6 $D0
              0fd1 00e9  ld   $e9
              0fd2 00fd  ld   $fd
              0fd3 00fd  ld   $fd
              0fd4 00fd  ld   $fd         4238  ld('v6502_ILL'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fd5 00e9  ld   $e9
              0fd6 00eb  ld   $eb
              0fd7 00fd  ld   $fd
              0fd8 00ed  ld   $ed         4239  ld('v6502_CLD'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0fd9 00e9  ld   $e9
              0fda 00fd  ld   $fd
              0fdb 00fd  ld   $fd
              0fdc 00fd  ld   $fd         4240  ld('v6502_ILL'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fdd 00e9  ld   $e9
              0fde 00eb  ld   $eb
              0fdf 00fd  ld   $fd
              0fe0 00ef  ld   $ef         4241  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $E0
              0fe1 0029  ld   $29
              0fe2 00fd  ld   $fd
              0fe3 00fd  ld   $fd
              0fe4 00ef  ld   $ef         4242  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0fe5 0029  ld   $29
              0fe6 00b7  ld   $b7
              0fe7 00fd  ld   $fd
              0fe8 006c  ld   $6c         4243  ld('v6502_INX'); ld('v6502_SBC'); ld('v6502_NOP'); ld('v6502_ILL') #6
              0fe9 0029  ld   $29
              0fea 0083  ld   $83
              0feb 00fd  ld   $fd
              0fec 00ef  ld   $ef         4244  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0fed 0029  ld   $29
              0fee 00b7  ld   $b7
              0fef 00fd  ld   $fd
              0ff0 0058  ld   $58         4245  ld('v6502_BEQ'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $F0
              0ff1 0029  ld   $29
              0ff2 00fd  ld   $fd
              0ff3 00fd  ld   $fd
              0ff4 00fd  ld   $fd         4246  ld('v6502_ILL'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0ff5 0029  ld   $29
              0ff6 00b7  ld   $b7
              0ff7 00fd  ld   $fd
              0ff8 00fb  ld   $fb         4247  ld('v6502_SED'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0ff9 0029  ld   $29
              0ffa 00fd  ld   $fd
              0ffb 00fd  ld   $fd
              0ffc 00fd  ld   $fd         4248  ld('v6502_ILL'); ld('v6502_SBC'); ld('v6502_INC')                  #6
              0ffd 0029  ld   $29
              0ffe 00b7  ld   $b7
              0fff fe00  bra  ac          4249  bra(AC)                         #6,7 Dispatch into next page
                                          4250  # --- Page boundary ---
                                          4251  align(0x100,size=0x100)
              1000 140e  ld   $0e,y       4252  ld(hi('v6502_next'),Y)          #8 Handy for instructions that don't clobber Y
                                          4253
                                          4254  label('v6502_ADC')
                                          4255  assert pc()&255 == 1
                                          4256  assert v6502_Cflag == 1
                                          4257  assert v6502_Vemu == 128
v6502_ADC:    1001 1525  ld   [$25],y     4258  ld([v6502_ADH],Y)               #9 Must be at page offset 1, so A=1
              1002 2127  anda [$27]       4259  anda([v6502_P])                 #10 Carry in (AC=1 because lo('v6502_ADC')=1)
              1003 8118  adda [$18]       4260  adda([v6502_A])                 #11 Sum
              1004 f020  beq  .adc14      4261  beq('.adc14')                   #12 Danger zone for dropping a carry
              1005 8d00  adda [y,x]       4262  adda([Y,X])                     #13
              1006 c228  st   [$28]       4263  st([v6502_Qz])                  #14 Z flag, don't overwrite left-hand side (A) yet
              1007 c229  st   [$29]       4264  st([v6502_Qn])                  #15 N flag
              1008 6118  xora [$18]       4265  xora([v6502_A])                 #16 V flag, (Q^A) & (B^Q) & 0x80
              1009 c218  st   [$18]       4266  st([v6502_A])                   #17
              100a 0d00  ld   [y,x]       4267  ld([Y,X])                       #18
              100b 6128  xora [$28]       4268  xora([v6502_Qz])                #19
              100c 2118  anda [$18]       4269  anda([v6502_A])                 #20
              100d 2080  anda $80         4270  anda(0x80)                      #21
              100e c21d  st   [$1d]       4271  st([v6502_Tmp])                 #22
              100f 0128  ld   [$28]       4272  ld([v6502_Qz])                  #23 Update A
              1010 c218  st   [$18]       4273  st([v6502_A])                   #24
              1011 e815  blt  .adc27      4274  bmi('.adc27')                   #25 C flag
              1012 ad00  suba [y,x]       4275  suba([Y,X])                     #26
              1013 fc17  bra  .adc29      4276  bra('.adc29')                   #27
              1014 4d00  ora  [y,x]       4277  ora([Y,X])                      #28
                                          4278  label('.adc27')
.adc27:       1015 2d00  anda [y,x]       4279  anda([Y,X])                     #27
              1016 0200  nop              4280  nop()                           #28
                                          4281  label('.adc29')
.adc29:       1017 3080  anda $80,x       4282  anda(0x80,X)                    #29
              1018 0127  ld   [$27]       4283  ld([v6502_P])                   #30 Update P
              1019 207e  anda $7e         4284  anda(~v6502_Vemu&~v6502_Cflag)  #31
              101a 4500  ora  [x]         4285  ora([X])                        #32
              101b 411d  ora  [$1d]       4286  ora([v6502_Tmp])                #33
              101c c227  st   [$27]       4287  st([v6502_P])                   #34
              101d 140e  ld   $0e,y       4288  ld(hi('v6502_next'),Y)          #35
              101e e020  jmp  y,$20       4289  jmp(Y,'v6502_next')             #36
              101f 00ed  ld   $ed         4290  ld(-38/2)                       #37
                                          4291  # Cin=1, A=$FF, B=$DD --> Result=$DD, Cout=1, V=0
                                          4292  # Cin=0, A=$00, B=$DD --> Result=$DD, Cout=0, V=0
                                          4293  label('.adc14')
.adc14:       1020 c218  st   [$18]       4294  st([v6502_A])                   #14 Special case
              1021 c228  st   [$28]       4295  st([v6502_Qz])                  #15 Z flag
              1022 c229  st   [$29]       4296  st([v6502_Qn])                  #16 N flag
              1023 0127  ld   [$27]       4297  ld([v6502_P])                   #17
              1024 207f  anda $7f         4298  anda(0x7f)                      #18 V=0, keep C
              1025 c227  st   [$27]       4299  st([v6502_P])                   #19
              1026 140e  ld   $0e,y       4300  ld(hi('v6502_next'),Y)          #20
              1027 00f4  ld   $f4         4301  ld(-24/2)                       #21
              1028 e020  jmp  y,$20       4302  jmp(Y,'v6502_next')             #22
                                          4303  #nop()                          #23 Overlap
                                          4304  #
                                          4305  label('v6502_SBC')
                                          4306  # No matter how hard we try, v6502_SBC always comes out a lot clumsier
                                          4307  # than v6502_ADC. And that one already barely fits in 38 cycles and is
                                          4308  # hard to follow. So we use a hack: transmorph our SBC into an ADC with
                                          4309  # inverted operand, and then dispatch again. Simple and effective.
v6502_SBC:    1029 1525  ld   [$25],y     4310  ld([v6502_ADH],Y)               #9,24
              102a 0d00  ld   [y,x]       4311  ld([Y,X])                       #10
              102b 60ff  xora $ff         4312  xora(255)                       #11 Invert right-hand side operand
              102c c219  st   [$19]       4313  st([v6502_BI])                  #12 Park modified operand for v6502_ADC
              102d 0019  ld   $19         4314  ld(v6502_BI&255)                #13 Address of BI
              102e d224  st   [$24],x     4315  st([v6502_ADL],X)               #14
              102f 0000  ld   $00         4316  ld(v6502_BI>>8)                 #15
              1030 c225  st   [$25]       4317  st([v6502_ADH])                 #16
              1031 0069  ld   $69         4318  ld(0x69)                        #17 ADC #$xx (Any ADC opcode will do)
              1032 c226  st   [$26]       4319  st([v6502_IR])                  #18
              1033 140e  ld   $0e,y       4320  ld(hi('v6502_check'),Y)         #20 Go back to time check before dispatch
              1034 e0f2  jmp  y,$f2       4321  jmp(Y,'v6502_check')            #20
              1035 00f5  ld   $f5         4322  ld(-22/2)                       #21
                                          4323
                                          4324  # Carry calculation table
                                          4325  #   L7 R7 C7   RX UC SC
                                          4326  #   -- -- -- | -- -- --
                                          4327  #    0  0  0 |  0  0  0
                                          4328  #    0  0  1 |  0  0  0
                                          4329  #    1  0  0 |  0  1 +1
                                          4330  #    1  0  1 |  0  0  0
                                          4331  #    0  1  0 | -1  1  0
                                          4332  #    0  1  1 | -1  0 -1
                                          4333  #    1  1  0 | -1  1  0
                                          4334  #    1  1  1 | -1  1  0
                                          4335  #   -- -- -- | -- -- --
                                          4336  #    ^  ^  ^    ^  ^  ^
                                          4337  #    |  |  |    |  |  `--- Carry of unsigned L + signed R: SC = RX + UC
                                          4338  #    |  |  |    |  `----- Carry of unsigned L + unsigned R: UC = C7 ? L7&R7 : L7|R7
                                          4339  #    |  |  |    `------- Sign extension of signed R
                                          4340  #    |  |  `--------- MSB of unextended L + R
                                          4341  #    |  `----------- MSB of right operand R
                                          4342  #    `------------- MSB of left operand L
                                          4343
                                          4344  label('v6502_CLC')
v6502_CLC:    1036 0127  ld   [$27]       4345  ld([v6502_P])                   #9
              1037 fc3b  bra  .sec12      4346  bra('.sec12')                   #10
                                          4347  label('v6502_SEC')
v6502_SEC:    1038 20fe  anda $fe         4348  anda(~v6502_Cflag)              #9,11 Overlap
              1039 0127  ld   [$27]       4349  ld([v6502_P])                   #10
              103a 4001  ora  $01         4350  ora(v6502_Cflag)                #11
                                          4351  label('.sec12')
.sec12:       103b c227  st   [$27]       4352  st([v6502_P])                   #12
              103c 0200  nop              4353  nop()                           #13
                                          4354  label('.next14')
.next14:      103d e020  jmp  y,$20       4355  jmp(Y,'v6502_next')             #14
              103e 00f8  ld   $f8         4356  ld(-16/2)                       #15
                                          4357
                                          4358  label('v6502_BPL')
v6502_BPL:    103f 0129  ld   [$29]       4359  ld([v6502_Qn])                  #9
              1040 e875  blt  .next12     4360  bmi('.next12')                  #10
              1041 f45b  bge  .branch13   4361  bpl('.branch13')                #11
                                          4362  #nop()                          #12 Overlap
                                          4363  label('v6502_BMI')
v6502_BMI:    1042 0129  ld   [$29]       4364  ld([v6502_Qn])                  #9,12
              1043 f475  bge  .next12     4365  bpl('.next12')                  #10
              1044 e85b  blt  .branch13   4366  bmi('.branch13')                #11
                                          4367  #nop()                          #12 Overlap
                                          4368  label('v6502_BVC')
v6502_BVC:    1045 0127  ld   [$27]       4369  ld([v6502_P])                   #9,12
              1046 2080  anda $80         4370  anda(v6502_Vemu)                #10
              1047 f05b  beq  .branch13   4371  beq('.branch13')                #11
              1048 ec3d  bne  .next14     4372  bne('.next14')                  #12
                                          4373  #nop()                          #13 Overlap
                                          4374  label('v6502_BVS')
v6502_BVS:    1049 0127  ld   [$27]       4375  ld([v6502_P])                   #9,13
              104a 2080  anda $80         4376  anda(v6502_Vemu)                #10
              104b ec5b  bne  .branch13   4377  bne('.branch13')                #11
              104c f03d  beq  .next14     4378  beq('.next14')                  #12
                                          4379  #nop()                          #13 Overlap
                                          4380  label('v6502_BCC')
v6502_BCC:    104d 0127  ld   [$27]       4381  ld([v6502_P])                   #9,13
              104e 2001  anda $01         4382  anda(v6502_Cflag)               #10
              104f f05b  beq  .branch13   4383  beq('.branch13')                #11
              1050 ec3d  bne  .next14     4384  bne('.next14')                  #12
                                          4385  #nop()                          #13 Overlap
                                          4386  label('v6502_BCS')
v6502_BCS:    1051 0127  ld   [$27]       4387  ld([v6502_P])                   #9,13
              1052 2001  anda $01         4388  anda(v6502_Cflag)               #10
              1053 ec5b  bne  .branch13   4389  bne('.branch13')                #11
              1054 f03d  beq  .next14     4390  beq('.next14')                  #12
                                          4391  #nop()                          #13 Overlap
                                          4392  label('v6502_BNE')
v6502_BNE:    1055 0128  ld   [$28]       4393  ld([v6502_Qz])                  #9,13
              1056 f075  beq  .next12     4394  beq('.next12')                  #10
              1057 ec5b  bne  .branch13   4395  bne('.branch13')                #11
                                          4396  #nop()                          #12 Overlap
                                          4397  label('v6502_BEQ')
v6502_BEQ:    1058 0128  ld   [$28]       4398  ld([v6502_Qz])                  #9,12
              1059 ec75  bne  .next12     4399  bne('.next12')                  #10
              105a f05b  beq  .branch13   4400  beq('.branch13')                #11
                                          4401  #nop()                          #12 Overlap
                                          4402  label('.branch13')
.branch13:    105b 0124  ld   [$24]       4403  ld([v6502_ADL])                 #13,12 PC + offset
              105c 811a  adda [$1a]       4404  adda([v6502_PCL])               #14
              105d c21a  st   [$1a]       4405  st([v6502_PCL])                 #15
              105e e862  blt  .bra0       4406  bmi('.bra0')                    #16 Carry
              105f a124  suba [$24]       4407  suba([v6502_ADL])               #17
              1060 fc64  bra  .bra1       4408  bra('.bra1')                    #18
              1061 4124  ora  [$24]       4409  ora([v6502_ADL])                #19
                                          4410  label('.bra0')
.bra0:        1062 2124  anda [$24]       4411  anda([v6502_ADL])               #18
              1063 0200  nop              4412  nop()                           #19
                                          4413  label('.bra1')
.bra1:        1064 3080  anda $80,x       4414  anda(0x80,X)                    #20
              1065 0500  ld   [x]         4415  ld([X])                         #21
              1066 8125  adda [$25]       4416  adda([v6502_ADH])               #22
              1067 811b  adda [$1b]       4417  adda([v6502_PCH])               #23
              1068 c21b  st   [$1b]       4418  st([v6502_PCH])                 #24
              1069 0200  nop              4419  nop()                           #25
              106a e020  jmp  y,$20       4420  jmp(Y,'v6502_next')             #26
              106b 00f2  ld   $f2         4421  ld(-28/2)                       #27
                                          4422
                                          4423  label('v6502_INX')
v6502_INX:    106c 0200  nop              4424  nop()                           #9
              106d 012a  ld   [$2a]       4425  ld([v6502_X])                   #10
              106e 8001  adda $01         4426  adda(1)                         #11
              106f c22a  st   [$2a]       4427  st([v6502_X])                   #12
                                          4428  label('.inx13')
.inx13:       1070 c228  st   [$28]       4429  st([v6502_Qz])                  #13 Z flag
              1071 c229  st   [$29]       4430  st([v6502_Qn])                  #14 N flag
              1072 00f7  ld   $f7         4431  ld(-18/2)                       #15
              1073 e020  jmp  y,$20       4432  jmp(Y,'v6502_next')             #16
              1074 0200  nop              4433  nop()                           #17
                                          4434
                                          4435  label('.next12')
.next12:      1075 e020  jmp  y,$20       4436  jmp(Y,'v6502_next')             #12
              1076 00f9  ld   $f9         4437  ld(-14/2)                       #13
                                          4438
                                          4439  label('v6502_DEX')
v6502_DEX:    1077 012a  ld   [$2a]       4440  ld([v6502_X])                   #9
              1078 a001  suba $01         4441  suba(1)                         #10
              1079 fc70  bra  .inx13      4442  bra('.inx13')                   #11
              107a c22a  st   [$2a]       4443  st([v6502_X])                   #12
                                          4444
                                          4445  label('v6502_INY')
v6502_INY:    107b 012b  ld   [$2b]       4446  ld([v6502_Y])                   #9
              107c 8001  adda $01         4447  adda(1)                         #10
              107d fc70  bra  .inx13      4448  bra('.inx13')                   #11
              107e c22b  st   [$2b]       4449  st([v6502_Y])                   #12
                                          4450
                                          4451  label('v6502_DEY')
v6502_DEY:    107f 012b  ld   [$2b]       4452  ld([v6502_Y])                   #9
              1080 a001  suba $01         4453  suba(1)                         #10
              1081 fc70  bra  .inx13      4454  bra('.inx13')                   #11
              1082 c22b  st   [$2b]       4455  st([v6502_Y])                   #12
                                          4456
                                          4457  label('v6502_NOP')
v6502_NOP:    1083 00fa  ld   $fa         4458  ld(-12/2)                       #9
              1084 e020  jmp  y,$20       4459  jmp(Y,'v6502_next')             #10
                                          4460  #nop()                          #11 Overlap
                                          4461  #
                                          4462  label('v6502_AND')
v6502_AND:    1085 1525  ld   [$25],y     4463  ld([v6502_ADH],Y)               #9,11
              1086 0118  ld   [$18]       4464  ld([v6502_A])                   #10
              1087 fc90  bra  .eor13      4465  bra('.eor13')                   #11
              1088 2d00  anda [y,x]       4466  anda([Y,X])                     #12
                                          4467
                                          4468  label('v6502_ORA')
v6502_ORA:    1089 1525  ld   [$25],y     4469  ld([v6502_ADH],Y)               #9
              108a 0118  ld   [$18]       4470  ld([v6502_A])                   #10
              108b fc90  bra  .eor13      4471  bra('.eor13')                   #11
                                          4472  label('v6502_EOR')
v6502_EOR:    108c 4d00  ora  [y,x]       4473  ora([Y,X])                      #12,9
                                          4474  #
                                          4475  #label('v6502_EOR')
                                          4476  #nop()                          #9 Overlap
              108d 1525  ld   [$25],y     4477  ld([v6502_ADH],Y)               #10
              108e 0118  ld   [$18]       4478  ld([v6502_A])                   #11
              108f 6d00  xora [y,x]       4479  xora([Y,X])                     #12
                                          4480  label('.eor13')
.eor13:       1090 c218  st   [$18]       4481  st([v6502_A])                   #13
              1091 c228  st   [$28]       4482  st([v6502_Qz])                  #14 Z flag
              1092 c229  st   [$29]       4483  st([v6502_Qn])                  #15 N flag
              1093 140e  ld   $0e,y       4484  ld(hi('v6502_next'),Y)          #16
              1094 00f6  ld   $f6         4485  ld(-20/2)                       #17
              1095 e020  jmp  y,$20       4486  jmp(Y,'v6502_next')             #18
                                          4487  #nop()                          #19 Overlap
                                          4488  #
                                          4489  label('v6502_JMP1')
v6502_JMP1:   1096 140d  ld   $0d,y       4490  ld(hi('v6502_jmp1'),Y)          #9,19 JMP $DDDD
              1097 e0c5  jmp  y,$c5       4491  jmp(Y,'v6502_jmp1')             #10
                                          4492  #nop()                          #11 Overlap
                                          4493  label('v6502_JMP2')
v6502_JMP2:   1098 140d  ld   $0d,y       4494  ld(hi('v6502_jmp2'),Y)          #9 JMP ($DDDD)
              1099 e0cd  jmp  y,$cd       4495  jmp(Y,'v6502_jmp2')             #10
                                          4496  #nop()                          #11 Overlap
                                          4497  label('v6502_JSR')
v6502_JSR:    109a 011c  ld   [$1c]       4498  ld([v6502_S])                   #9,11
              109b a002  suba $02         4499  suba(2)                         #10
              109c d21c  st   [$1c],x     4500  st([v6502_S],X)                 #11
              109d 1400  ld   $00,y       4501  ld(v6502_Stack>>8,Y)            #12
              109e 011b  ld   [$1b]       4502  ld([v6502_PCH])                 #13 Let ADL,ADH point to L operand
              109f c225  st   [$25]       4503  st([v6502_ADH])                 #14
              10a0 011a  ld   [$1a]       4504  ld([v6502_PCL])                 #15
              10a1 c224  st   [$24]       4505  st([v6502_ADL])                 #16
              10a2 8001  adda $01         4506  adda(1)                         #17 Push ++PC
              10a3 c21a  st   [$1a]       4507  st([v6502_PCL])                 #18 Let PCL,PCH point to H operand
              10a4 de00  st   [y,x++]     4508  st([Y,Xpp])                     #19
              10a5 f0a8  beq  $10a8       4509  beq(pc()+3)                     #20
              10a6 fca9  bra  $10a9       4510  bra(pc()+3)                     #21
              10a7 0000  ld   $00         4511  ld(0)                           #22
              10a8 0001  ld   $01         4512  ld(1)                           #22(!)
              10a9 811b  adda [$1b]       4513  adda([v6502_PCH])               #23
              10aa c21b  st   [$1b]       4514  st([v6502_PCH])                 #24
              10ab ce00  st   [y,x]       4515  st([Y,X])                       #25
              10ac 1124  ld   [$24],x     4516  ld([v6502_ADL],X)               #26 Fetch L
              10ad 1525  ld   [$25],y     4517  ld([v6502_ADH],Y)               #27
              10ae 0d00  ld   [y,x]       4518  ld([Y,X])                       #28
              10af 111a  ld   [$1a],x     4519  ld([v6502_PCL],X)               #29 Fetch H
              10b0 c21a  st   [$1a]       4520  st([v6502_PCL])                 #30
              10b1 151b  ld   [$1b],y     4521  ld([v6502_PCH],Y)               #31
              10b2 0d00  ld   [y,x]       4522  ld([Y,X])                       #32
              10b3 c21b  st   [$1b]       4523  st([v6502_PCH])                 #33
              10b4 140e  ld   $0e,y       4524  ld(hi('v6502_next'),Y)          #34
              10b5 00ed  ld   $ed         4525  ld(-38/2)                       #35
              10b6 e020  jmp  y,$20       4526  jmp(Y,'v6502_next')             #36
                                          4527  #nop()                          #37 Overlap
                                          4528  #
                                          4529  label('v6502_INC')
v6502_INC:    10b7 1411  ld   $11,y       4530  ld(hi('v6502_inc'),Y)           #9,37
              10b8 e00e  jmp  y,$0e       4531  jmp(Y,'v6502_inc')              #10
                                          4532  #nop()                          #11 Overlap
                                          4533  label('v6502_LDA')
v6502_LDA:    10b9 1411  ld   $11,y       4534  ld(hi('v6502_lda'),Y)           #9,11
              10ba e018  jmp  y,$18       4535  jmp(Y,'v6502_lda')              #10
                                          4536  #nop()                          #11 Overlap
                                          4537  label('v6502_LDX')
v6502_LDX:    10bb 1411  ld   $11,y       4538  ld(hi('v6502_ldx'),Y)           #9,11
              10bc e022  jmp  y,$22       4539  jmp(Y,'v6502_ldx')              #10
                                          4540  #nop()                          #11 Overlap
                                          4541  label('v6502_LDX2')
v6502_LDX2:   10bd 1411  ld   $11,y       4542  ld(hi('v6502_ldx2'),Y)          #9,11
              10be e02a  jmp  y,$2a       4543  jmp(Y,'v6502_ldx2')             #10
                                          4544  #nop()                          #11 Overlap
                                          4545  label('v6502_LDY')
v6502_LDY:    10bf 1411  ld   $11,y       4546  ld(hi('v6502_ldy'),Y)           #9,11
              10c0 e026  jmp  y,$26       4547  jmp(Y,'v6502_ldy')              #10
                                          4548  #nop()                          #11 Overlap
                                          4549  label('v6502_STA')
v6502_STA:    10c1 1411  ld   $11,y       4550  ld(hi('v6502_sta'),Y)           #9,11
              10c2 e034  jmp  y,$34       4551  jmp(Y,'v6502_sta')              #10
                                          4552  #nop()                          #11 Overlap
                                          4553  label('v6502_STX')
v6502_STX:    10c3 1411  ld   $11,y       4554  ld(hi('v6502_stx'),Y)           #9,11
              10c4 e03a  jmp  y,$3a       4555  jmp(Y,'v6502_stx')              #10
                                          4556  #nop()                          #11 Overlap
                                          4557  label('v6502_STX2')
v6502_STX2:   10c5 1411  ld   $11,y       4558  ld(hi('v6502_stx2'),Y)          #9,11
              10c6 e040  jmp  y,$40       4559  jmp(Y,'v6502_stx2')             #10
                                          4560  #nop()                          #11 Overlap
                                          4561  label('v6502_STY')
v6502_STY:    10c7 1411  ld   $11,y       4562  ld(hi('v6502_sty'),Y)           #9,11
              10c8 e048  jmp  y,$48       4563  jmp(Y,'v6502_sty')              #10
                                          4564  #nop()                          #11 Overlap
                                          4565  label('v6502_TAX')
v6502_TAX:    10c9 1411  ld   $11,y       4566  ld(hi('v6502_tax'),Y)           #9,11
              10ca e04d  jmp  y,$4d       4567  jmp(Y,'v6502_tax')              #10
                                          4568  #nop()                          #11 Overlap
                                          4569  label('v6502_TAY')
v6502_TAY:    10cb 1411  ld   $11,y       4570  ld(hi('v6502_tay'),Y)           #9,11
              10cc e062  jmp  y,$62       4571  jmp(Y,'v6502_tay')              #10
                                          4572  #nop()                          #11 Overlap
                                          4573  label('v6502_TXA')
v6502_TXA:    10cd 1411  ld   $11,y       4574  ld(hi('v6502_txa'),Y)           #9,11
              10ce e065  jmp  y,$65       4575  jmp(Y,'v6502_txa')              #10
                                          4576  #nop()                          #11 Overlap
                                          4577  label('v6502_TYA')
v6502_TYA:    10cf 1411  ld   $11,y       4578  ld(hi('v6502_tya'),Y)           #9,11
              10d0 e068  jmp  y,$68       4579  jmp(Y,'v6502_tya')              #10
                                          4580  #nop()                          #11 Overlap
                                          4581  label('v6502_CLV')
v6502_CLV:    10d1 1411  ld   $11,y       4582  ld(hi('v6502_clv'),Y)           #9,11
              10d2 e076  jmp  y,$76       4583  jmp(Y,'v6502_clv')              #10
                                          4584  #nop()                          #11 Overlap
                                          4585  label('v6502_RTI')
v6502_RTI:    10d3 1411  ld   $11,y       4586  ld(hi('v6502_rti'),Y)           #9,11
              10d4 e0e4  jmp  y,$e4       4587  jmp(Y,'v6502_rti')              #10
                                          4588  #nop()                          #11 Overlap
                                          4589  label('v6502_ROR')
v6502_ROR:    10d5 140d  ld   $0d,y       4590  ld(hi('v6502_ror'),Y)           #9,11
              10d6 e083  jmp  y,$83       4591  jmp(Y,'v6502_ror')              #10
                                          4592  #nop()                          #11 Overlap
                                          4593  label('v6502_LSR')
v6502_LSR:    10d7 140d  ld   $0d,y       4594  ld(hi('v6502_lsr'),Y)           #9,11
              10d8 e09d  jmp  y,$9d       4595  jmp(Y,'v6502_lsr')              #10
                                          4596  #nop()                          #11 Overlap
                                          4597  label('v6502_PHA')
v6502_PHA:    10d9 140d  ld   $0d,y       4598  ld(hi('v6502_pha'),Y)           #9,11
              10da e0e2  jmp  y,$e2       4599  jmp(Y,'v6502_pha')              #10
                                          4600  #nop()                          #11 Overlap
                                          4601  label('v6502_CLI')
v6502_CLI:    10db 1411  ld   $11,y       4602  ld(hi('v6502_cli'),Y)           #9,11
              10dc e06b  jmp  y,$6b       4603  jmp(Y,'v6502_cli')              #10
                                          4604  #nop()                          #11 Overlap
                                          4605  label('v6502_RTS')
v6502_RTS:    10dd 1411  ld   $11,y       4606  ld(hi('v6502_rts'),Y)           #9,11
              10de e08f  jmp  y,$8f       4607  jmp(Y,'v6502_rts')              #10
                                          4608  #nop()                          #11 Overlap
                                          4609  label('v6502_PLA')
v6502_PLA:    10df 140d  ld   $0d,y       4610  ld(hi('v6502_pla'),Y)           #9,11
              10e0 e0d7  jmp  y,$d7       4611  jmp(Y,'v6502_pla')              #10
                                          4612  #nop()                          #11 Overlap
                                          4613  label('v6502_SEI')
v6502_SEI:    10e1 1411  ld   $11,y       4614  ld(hi('v6502_sei'),Y)           #9,11
              10e2 e06e  jmp  y,$6e       4615  jmp(Y,'v6502_sei')              #10
                                          4616  #nop()                          #11 Overlap
                                          4617  label('v6502_TXS')
v6502_TXS:    10e3 1411  ld   $11,y       4618  ld(hi('v6502_txs'),Y)           #9,11
              10e4 e05e  jmp  y,$5e       4619  jmp(Y,'v6502_txs')              #10
                                          4620  #nop()                          #11 Overlap
                                          4621  label('v6502_TSX')
v6502_TSX:    10e5 1411  ld   $11,y       4622  ld(hi('v6502_tsx'),Y)           #9,11
              10e6 e054  jmp  y,$54       4623  jmp(Y,'v6502_tsx')              #10
                                          4624  #nop()                          #11 Overlap
                                          4625  label('v6502_CPY')
v6502_CPY:    10e7 1411  ld   $11,y       4626  ld(hi('v6502_cpy'),Y)           #9,11
              10e8 e0bd  jmp  y,$bd       4627  jmp(Y,'v6502_cpy')              #10
                                          4628  #nop()                          #11 Overlap
                                          4629  label('v6502_CMP')
v6502_CMP:    10e9 1411  ld   $11,y       4630  ld(hi('v6502_cmp'),Y)           #9,11
              10ea e0be  jmp  y,$be       4631  jmp(Y,'v6502_cmp')              #10
                                          4632  #nop()                          #11 Overlap
                                          4633  label('v6502_DEC')
v6502_DEC:    10eb 1411  ld   $11,y       4634  ld(hi('v6502_dec'),Y)           #9,11
              10ec e005  jmp  y,$05       4635  jmp(Y,'v6502_dec')              #10
                                          4636  #nop()                          #11 Overlap
                                          4637  label('v6502_CLD')
v6502_CLD:    10ed 1411  ld   $11,y       4638  ld(hi('v6502_cld'),Y)           #9,11
              10ee e071  jmp  y,$71       4639  jmp(Y,'v6502_cld')              #10
                                          4640  #nop()                          #11 Overlap
                                          4641  label('v6502_CPX')
v6502_CPX:    10ef 1411  ld   $11,y       4642  ld(hi('v6502_cpx'),Y)           #9,11
              10f0 e0bb  jmp  y,$bb       4643  jmp(Y,'v6502_cpx')              #10
                                          4644  #nop()                          #11 Overlap
                                          4645  label('v6502_ASL')
v6502_ASL:    10f1 140d  ld   $0d,y       4646  ld(hi('v6502_asl'),Y)           #9,11
              10f2 e0bf  jmp  y,$bf       4647  jmp(Y,'v6502_asl')              #10
                                          4648  #nop()                          #11 Overlap
                                          4649  label('v6502_PHP')
v6502_PHP:    10f3 1411  ld   $11,y       4650  ld(hi('v6502_php'),Y)           #9,11
              10f4 e0a2  jmp  y,$a2       4651  jmp(Y,'v6502_php')              #10
                                          4652  #nop()                          #11 Overlap
                                          4653  label('v6502_BIT')
v6502_BIT:    10f5 1411  ld   $11,y       4654  ld(hi('v6502_bit'),Y)           #9
              10f6 e07d  jmp  y,$7d       4655  jmp(Y,'v6502_bit')              #10
                                          4656  #nop()                          #11 Overlap
                                          4657  label('v6502_ROL')
v6502_ROL:    10f7 140d  ld   $0d,y       4658  ld(hi('v6502_rol'),Y)           #9
              10f8 e0ac  jmp  y,$ac       4659  jmp(Y,'v6502_rol')              #10
                                          4660  #nop()                          #11 Overlap
                                          4661  label('v6502_PLP')
v6502_PLP:    10f9 1411  ld   $11,y       4662  ld(hi('v6502_plp'),Y)           #9
              10fa e0d4  jmp  y,$d4       4663  jmp(Y,'v6502_plp')              #10
                                          4664  #nop()                          #11 Overlap
                                          4665  label('v6502_SED')              # Decimal mode not implemented
v6502_SED:    10fb 1411  ld   $11,y       4666  ld(hi('v6502_sed'),Y)           #9,11
              10fc e074  jmp  y,$74       4667  jmp(Y,'v6502_sed')              #10
                                          4668  #nop()                          #11 Overlap
                                          4669  label('v6502_ILL') # All illegal opcodes map to BRK, except $FF which will crash
                                          4670  label('v6502_BRK')
v6502_ILL:
v6502_BRK:    10fd 140d  ld   $0d,y       4671  ld(hi('v6502_brk'),Y)           #9
              10fe e0ea  jmp  y,$ea       4672  jmp(Y,'v6502_brk')              #10
                                          4673  #nop()                          #11 Overlap
                                          4674
                                          4675  while pc()&255 < 255:
                                          4676    nop()
                                          4677
                                          4678  # `v6502_RESUME' is the interpreter's secondary entry point for when
                                          4679  # the opcode and operands were already fetched, just before the last hPulse.
                                          4680  # It must be at $xxff, prefably somewhere in v6502's own code pages.
                                          4681  label('v6502_RESUME')
                                          4682  assert (pc()&255) == 255
v6502_RESUME: 10ff a006  suba $06         4683  suba(v6502_adjust)              #0,11 v6502 secondary entry point
                                          4684  # --- Page boundary ---
                                          4685  align(0x100,size=0x200)
              1100 c215  st   [$15]       4686  st([vTicks])                    #1
              1101 1124  ld   [$24],x     4687  ld([v6502_ADL],X)               #2
              1102 140f  ld   $0f,y       4688  ld(hi('v6502_execute'),Y)       #3
              1103 e126  jmp  y,[$26]     4689  jmp(Y,[v6502_IR])               #4
              1104 fcff  bra  $ff         4690  bra(255)                        #5
                                          4691
                                          4692  label('v6502_dec')
v6502_dec:    1105 1525  ld   [$25],y     4693  ld([v6502_ADH],Y)               #12
              1106 0d00  ld   [y,x]       4694  ld([Y,X])                       #13
              1107 a001  suba $01         4695  suba(1)                         #14
              1108 ce00  st   [y,x]       4696  st([Y,X])                       #15
              1109 c228  st   [$28]       4697  st([v6502_Qz])                  #16 Z flag
              110a c229  st   [$29]       4698  st([v6502_Qn])                  #17 N flag
              110b 140e  ld   $0e,y       4699  ld(hi('v6502_next'),Y)          #18
              110c 00f5  ld   $f5         4700  ld(-22/2)                       #19
              110d e020  jmp  y,$20       4701  jmp(Y,'v6502_next')             #20
                                          4702  #nop()                          #21 Overlap
                                          4703  #
                                          4704  label('v6502_inc')
v6502_inc:    110e 1525  ld   [$25],y     4705  ld([v6502_ADH],Y)               #12,22
              110f 0d00  ld   [y,x]       4706  ld([Y,X])                       #13
              1110 8001  adda $01         4707  adda(1)                         #14
              1111 ce00  st   [y,x]       4708  st([Y,X])                       #15
              1112 c228  st   [$28]       4709  st([v6502_Qz])                  #16 Z flag
              1113 c229  st   [$29]       4710  st([v6502_Qn])                  #17 N flag
              1114 140e  ld   $0e,y       4711  ld(hi('v6502_next'),Y)          #18
              1115 00f5  ld   $f5         4712  ld(-22/2)                       #19
              1116 e020  jmp  y,$20       4713  jmp(Y,'v6502_next')             #20
              1117 0200  nop              4714  nop()                           #21
                                          4715
                                          4716  label('v6502_lda')
v6502_lda:    1118 0200  nop              4717  nop()                           #12
              1119 1525  ld   [$25],y     4718  ld([v6502_ADH],Y)               #13
              111a 0d00  ld   [y,x]       4719  ld([Y,X])                       #14
              111b c218  st   [$18]       4720  st([v6502_A])                   #15
                                          4721  label('.lda16')
.lda16:       111c c228  st   [$28]       4722  st([v6502_Qz])                  #16 Z flag
              111d c229  st   [$29]       4723  st([v6502_Qn])                  #17 N flag
              111e 0200  nop              4724  nop()                           #18
              111f 140e  ld   $0e,y       4725  ld(hi('v6502_next'),Y)          #19
              1120 e020  jmp  y,$20       4726  jmp(Y,'v6502_next')             #20
              1121 00f5  ld   $f5         4727  ld(-22/2)                       #21
                                          4728
                                          4729  label('v6502_ldx')
v6502_ldx:    1122 1525  ld   [$25],y     4730  ld([v6502_ADH],Y)               #12
              1123 0d00  ld   [y,x]       4731  ld([Y,X])                       #13
              1124 fc1c  bra  .lda16      4732  bra('.lda16')                   #14
              1125 c22a  st   [$2a]       4733  st([v6502_X])                   #15
                                          4734
                                          4735  label('v6502_ldy')
v6502_ldy:    1126 1525  ld   [$25],y     4736  ld([v6502_ADH],Y)               #12
              1127 0d00  ld   [y,x]       4737  ld([Y,X])                       #13
              1128 fc1c  bra  .lda16      4738  bra('.lda16')                   #14
              1129 c22b  st   [$2b]       4739  st([v6502_Y])                   #15
                                          4740
                                          4741  label('v6502_ldx2')
v6502_ldx2:   112a 0124  ld   [$24]       4742  ld([v6502_ADL])                 #12 Special case $B6: LDX $DD,Y
              112b a12a  suba [$2a]       4743  suba([v6502_X])                 #13 Undo X offset
              112c 912b  adda [$2b],x     4744  adda([v6502_Y],X)               #14 Apply Y instead
              112d 0500  ld   [x]         4745  ld([X])                         #15
              112e c22a  st   [$2a]       4746  st([v6502_X])                   #16
              112f c228  st   [$28]       4747  st([v6502_Qz])                  #17 Z flag
              1130 c229  st   [$29]       4748  st([v6502_Qn])                  #18 N flag
              1131 140e  ld   $0e,y       4749  ld(hi('v6502_next'),Y)          #19
              1132 e020  jmp  y,$20       4750  jmp(Y,'v6502_next')             #20
              1133 00f5  ld   $f5         4751  ld(-22/2)                       #21
                                          4752
                                          4753  label('v6502_sta')
v6502_sta:    1134 1525  ld   [$25],y     4754  ld([v6502_ADH],Y)               #12
              1135 0118  ld   [$18]       4755  ld([v6502_A])                   #13
              1136 ce00  st   [y,x]       4756  st([Y,X])                       #14
              1137 140e  ld   $0e,y       4757  ld(hi('v6502_next'),Y)          #15
              1138 e020  jmp  y,$20       4758  jmp(Y,'v6502_next')             #16
              1139 00f7  ld   $f7         4759  ld(-18/2)                       #17
                                          4760
                                          4761  label('v6502_stx')
v6502_stx:    113a 1525  ld   [$25],y     4762  ld([v6502_ADH],Y)               #12
              113b 012a  ld   [$2a]       4763  ld([v6502_X])                   #13
              113c ce00  st   [y,x]       4764  st([Y,X])                       #14
              113d 140e  ld   $0e,y       4765  ld(hi('v6502_next'),Y)          #15
              113e e020  jmp  y,$20       4766  jmp(Y,'v6502_next')             #16
              113f 00f7  ld   $f7         4767  ld(-18/2)                       #17
                                          4768
                                          4769  label('v6502_stx2')
v6502_stx2:   1140 0124  ld   [$24]       4770  ld([v6502_ADL])                 #12 Special case $96: STX $DD,Y
              1141 a12a  suba [$2a]       4771  suba([v6502_X])                 #13 Undo X offset
              1142 912b  adda [$2b],x     4772  adda([v6502_Y],X)               #14 Apply Y instead
              1143 012a  ld   [$2a]       4773  ld([v6502_X])                   #15
              1144 c600  st   [x]         4774  st([X])                         #16
              1145 140e  ld   $0e,y       4775  ld(hi('v6502_next'),Y)          #17
              1146 e020  jmp  y,$20       4776  jmp(Y,'v6502_next')             #18
              1147 00f6  ld   $f6         4777  ld(-20/2)                       #19
                                          4778
                                          4779  label('v6502_sty')
v6502_sty:    1148 1525  ld   [$25],y     4780  ld([v6502_ADH],Y)               #12
              1149 012b  ld   [$2b]       4781  ld([v6502_Y])                   #13
              114a ce00  st   [y,x]       4782  st([Y,X])                       #14
              114b 140e  ld   $0e,y       4783  ld(hi('v6502_next'),Y)          #15
              114c e020  jmp  y,$20       4784  jmp(Y,'v6502_next')             #16
                                          4785  label('v6502_tax')
v6502_tax:    114d 00f7  ld   $f7         4786  ld(-18/2)                       #17,12
                                          4787  #
                                          4788  #label('v6502_tax')
                                          4789  #nop()                          #12 Overlap
              114e 0118  ld   [$18]       4790  ld([v6502_A])                   #13
              114f c22a  st   [$2a]       4791  st([v6502_X])                   #14
                                          4792  label('.tax15')
.tax15:       1150 c228  st   [$28]       4793  st([v6502_Qz])                  #15 Z flag
              1151 c229  st   [$29]       4794  st([v6502_Qn])                  #16 N flag
              1152 140e  ld   $0e,y       4795  ld(hi('v6502_next'),Y)          #17
              1153 e020  jmp  y,$20       4796  jmp(Y,'v6502_next')             #18
                                          4797  label('v6502_tsx')
v6502_tsx:    1154 00f6  ld   $f6         4798  ld(-20/2)                       #19
                                          4799  #
                                          4800  #label('v6502_tsx')
                                          4801  #nop()                          #12 Overlap
              1155 011c  ld   [$1c]       4802  ld([v6502_S])                   #13
              1156 a001  suba $01         4803  suba(1)                         #14 Shift down on export
              1157 c22a  st   [$2a]       4804  st([v6502_X])                   #15
                                          4805  label('.tsx16')
.tsx16:       1158 c228  st   [$28]       4806  st([v6502_Qz])                  #16 Z flag
              1159 c229  st   [$29]       4807  st([v6502_Qn])                  #17 N flag
              115a 0200  nop              4808  nop()                           #18
              115b 140e  ld   $0e,y       4809  ld(hi('v6502_next'),Y)          #19
              115c e020  jmp  y,$20       4810  jmp(Y,'v6502_next')             #20
              115d 00f5  ld   $f5         4811  ld(-22/2)                       #21
                                          4812
                                          4813  label('v6502_txs')
v6502_txs:    115e 012a  ld   [$2a]       4814  ld([v6502_X])                   #12
              115f 8001  adda $01         4815  adda(1)                         #13 Shift up on import
              1160 fc58  bra  .tsx16      4816  bra('.tsx16')                   #14
              1161 c21c  st   [$1c]       4817  st([v6502_S])                   #15
                                          4818
                                          4819  label('v6502_tay')
v6502_tay:    1162 0118  ld   [$18]       4820  ld([v6502_A])                   #12
              1163 fc50  bra  .tax15      4821  bra('.tax15')                   #13
              1164 c22b  st   [$2b]       4822  st([v6502_Y])                   #14
                                          4823
                                          4824  label('v6502_txa')
v6502_txa:    1165 012a  ld   [$2a]       4825  ld([v6502_X])                   #12
              1166 fc50  bra  .tax15      4826  bra('.tax15')                   #13
              1167 c218  st   [$18]       4827  st([v6502_A])                   #14
                                          4828
                                          4829  label('v6502_tya')
v6502_tya:    1168 012b  ld   [$2b]       4830  ld([v6502_Y])                   #12
              1169 fc50  bra  .tax15      4831  bra('.tax15')                   #13
              116a c218  st   [$18]       4832  st([v6502_A])                   #14
                                          4833
                                          4834  label('v6502_cli')
v6502_cli:    116b 0127  ld   [$27]       4835  ld([v6502_P])                   #12
              116c fc79  bra  .clv15      4836  bra('.clv15')                   #13
              116d 20fb  anda $fb         4837  anda(~v6502_Iflag)              #14
                                          4838
                                          4839  label('v6502_sei')
v6502_sei:    116e 0127  ld   [$27]       4840  ld([v6502_P])                   #12
              116f fc79  bra  .clv15      4841  bra('.clv15')                   #13
              1170 4004  ora  $04         4842  ora(v6502_Iflag)                #14
                                          4843
                                          4844  label('v6502_cld')
v6502_cld:    1171 0127  ld   [$27]       4845  ld([v6502_P])                   #12
              1172 fc79  bra  .clv15      4846  bra('.clv15')                   #13
              1173 20f7  anda $f7         4847  anda(~v6502_Dflag)              #14
                                          4848
                                          4849  label('v6502_sed')
v6502_sed:    1174 0127  ld   [$27]       4850  ld([v6502_P])                   #12
              1175 fc79  bra  .clv15      4851  bra('.clv15')                   #13
                                          4852  label('v6502_clv')
v6502_clv:    1176 4008  ora  $08         4853  ora(v6502_Dflag)                #14,12 Overlap
                                          4854  #
                                          4855  #label('v6502_clv')
                                          4856  #nop()                          #12
              1177 0127  ld   [$27]       4857  ld([v6502_P])                   #13
              1178 207f  anda $7f         4858  anda(~v6502_Vemu)               #14
                                          4859  label('.clv15')
.clv15:       1179 c227  st   [$27]       4860  st([v6502_P])                   #15
              117a 140e  ld   $0e,y       4861  ld(hi('v6502_next'),Y)          #16
              117b 00f6  ld   $f6         4862  ld(-20/2)                       #17
              117c e020  jmp  y,$20       4863  jmp(Y,'v6502_next')             #18
                                          4864  label('v6502_bit')
v6502_bit:    117d 0200  nop              4865  nop()                           #19,12
                                          4866  #
                                          4867  #label('v6502_bit')
                                          4868  #nop()                          #12 Overlap
              117e 1124  ld   [$24],x     4869  ld([v6502_ADL],X)               #13
              117f 1525  ld   [$25],y     4870  ld([v6502_ADH],Y)               #14
              1180 0d00  ld   [y,x]       4871  ld([Y,X])                       #15
              1181 c229  st   [$29]       4872  st([v6502_Qn])                  #16 N flag
              1182 2118  anda [$18]       4873  anda([v6502_A])                 #17 This is a reason we keep N and Z in separate bytes
              1183 c228  st   [$28]       4874  st([v6502_Qz])                  #18 Z flag
              1184 0127  ld   [$27]       4875  ld([v6502_P])                   #19
              1185 207f  anda $7f         4876  anda(~v6502_Vemu)               #20
              1186 c227  st   [$27]       4877  st([v6502_P])                   #21
              1187 0d00  ld   [y,x]       4878  ld([Y,X])                       #22
              1188 8200  adda ac          4879  adda(AC)                        #23
              1189 2080  anda $80         4880  anda(v6502_Vemu)                #24
              118a 4127  ora  [$27]       4881  ora([v6502_P])                  #25
              118b c227  st   [$27]       4882  st([v6502_P])                   #26 Update V
              118c 140e  ld   $0e,y       4883  ld(hi('v6502_next'),Y)          #27
              118d e020  jmp  y,$20       4884  jmp(Y,'v6502_next')             #28
              118e 00f1  ld   $f1         4885  ld(-30/2)                       #29
                                          4886
                                          4887  label('v6502_rts')
v6502_rts:    118f 011c  ld   [$1c]       4888  ld([v6502_S])                   #12
              1190 1200  ld   ac,x        4889  ld(AC,X)                        #13
              1191 8002  adda $02         4890  adda(2)                         #14
              1192 c21c  st   [$1c]       4891  st([v6502_S])                   #15
              1193 1400  ld   $00,y       4892  ld(0,Y)                         #16
              1194 0d00  ld   [y,x]       4893  ld([Y,X])                       #17
              1195 de00  st   [y,x++]     4894  st([Y,Xpp])                     #18 Just X++
              1196 8001  adda $01         4895  adda(1)                         #19
              1197 c21a  st   [$1a]       4896  st([v6502_PCL])                 #20
              1198 f09b  beq  $119b       4897  beq(pc()+3)                     #21
              1199 fc9c  bra  $119c       4898  bra(pc()+3)                     #22
              119a 0000  ld   $00         4899  ld(0)                           #23
              119b 0001  ld   $01         4900  ld(1)                           #23(!)
              119c 8d00  adda [y,x]       4901  adda([Y,X])                     #24
              119d c21b  st   [$1b]       4902  st([v6502_PCH])                 #25
              119e 0200  nop              4903  nop()                           #26
              119f 140e  ld   $0e,y       4904  ld(hi('v6502_next'),Y)          #27
              11a0 e020  jmp  y,$20       4905  jmp(Y,'v6502_next')             #28
              11a1 00f1  ld   $f1         4906  ld(-30/2)                       #29
                                          4907
                                          4908  label('v6502_php')
v6502_php:    11a2 011c  ld   [$1c]       4909  ld([v6502_S])                   #12
              11a3 a001  suba $01         4910  suba(1)                         #13
              11a4 d21c  st   [$1c],x     4911  st([v6502_S],X)                 #14
              11a5 0127  ld   [$27]       4912  ld([v6502_P])                   #15
              11a6 20bd  anda $bd         4913  anda(~v6502_Vflag&~v6502_Zflag) #16 Keep Vemu,B,D,I,C
              11a7 f4aa  bge  $11aa       4914  bpl(pc()+3)                     #17 V to bit 6 and clear N
              11a8 fcaa  bra  $11aa       4915  bra(pc()+2)                     #18
              11a9 60c0  xora $c0         4916  xora(v6502_Vflag^v6502_Vemu)    #19
              11aa c600  st   [x]         4917  st([X])                         #19,20
              11ab 0128  ld   [$28]       4918  ld([v6502_Qz])                  #21 Z flag
              11ac f0af  beq  $11af       4919  beq(pc()+3)                     #22
              11ad fcb0  bra  $11b0       4920  bra(pc()+3)                     #23
              11ae 0000  ld   $00         4921  ld(0)                           #24
              11af 0002  ld   $02         4922  ld(v6502_Zflag)                 #24(!)
              11b0 4500  ora  [x]         4923  ora([X])                        #25
              11b1 c600  st   [x]         4924  st([X])                         #26
              11b2 0129  ld   [$29]       4925  ld([v6502_Qn])                  #27 N flag
              11b3 2080  anda $80         4926  anda(0x80)                      #28
              11b4 4500  ora  [x]         4927  ora([X])                        #29
              11b5 4020  ora  $20         4928  ora(v6502_Uflag)                #30 Unused bit
              11b6 c600  st   [x]         4929  st([X])                         #31
              11b7 0200  nop              4930  nop()                           #32
              11b8 140e  ld   $0e,y       4931  ld(hi('v6502_next'),Y)          #33
              11b9 e020  jmp  y,$20       4932  jmp(Y,'v6502_next')             #34
              11ba 00ee  ld   $ee         4933  ld(-36/2)                       #35
                                          4934
                                          4935  label('v6502_cpx')
v6502_cpx:    11bb fcc0  bra  .cmp14      4936  bra('.cmp14')                   #12
              11bc 012a  ld   [$2a]       4937  ld([v6502_X])                   #13
                                          4938
                                          4939  label('v6502_cpy')
v6502_cpy:    11bd fcc0  bra  .cmp14      4940  bra('.cmp14')                   #12
                                          4941  label('v6502_cmp')
v6502_cmp:    11be 012b  ld   [$2b]       4942  ld([v6502_Y])                   #13,12
                                          4943  #
                                          4944  #label('v6502_cmp')             #12 Overlap
                                          4945  assert v6502_Cflag == 1
              11bf 0118  ld   [$18]       4946  ld([v6502_A])                   #13
                                          4947  label('.cmp14')
.cmp14:       11c0 1525  ld   [$25],y     4948  ld([v6502_ADH],Y)               #14
              11c1 e8c7  blt  .cmp17      4949  bmi('.cmp17')                   #15 Carry?
              11c2 ad00  suba [y,x]       4950  suba([Y,X])                     #16
              11c3 c228  st   [$28]       4951  st([v6502_Qz])                  #17 Z flag
              11c4 c229  st   [$29]       4952  st([v6502_Qn])                  #18 N flag
              11c5 fccb  bra  .cmp21      4953  bra('.cmp21')                   #19
              11c6 4d00  ora  [y,x]       4954  ora([Y,X])                      #20
                                          4955  label('.cmp17')
.cmp17:       11c7 c228  st   [$28]       4956  st([v6502_Qz])                  #17 Z flag
              11c8 c229  st   [$29]       4957  st([v6502_Qn])                  #18 N flag
              11c9 2d00  anda [y,x]       4958  anda([Y,X])                     #19
              11ca 0200  nop              4959  nop()                           #20
                                          4960  label('.cmp21')
.cmp21:       11cb 6080  xora $80         4961  xora(0x80)                      #21
              11cc 3080  anda $80,x       4962  anda(0x80,X)                    #22 Move carry to bit 0
              11cd 0127  ld   [$27]       4963  ld([v6502_P])                   #23 C flag
              11ce 20fe  anda $fe         4964  anda(~1)                        #24
              11cf 4500  ora  [x]         4965  ora([X])                        #25
              11d0 c227  st   [$27]       4966  st([v6502_P])                   #26
              11d1 140e  ld   $0e,y       4967  ld(hi('v6502_next'),Y)          #27
              11d2 e020  jmp  y,$20       4968  jmp(Y,'v6502_next')             #28
              11d3 00f1  ld   $f1         4969  ld(-30/2)                       #29
                                          4970
                                          4971  label('v6502_plp')
                                          4972  assert v6502_Nflag == 128
                                          4973  assert 2*v6502_Vflag == v6502_Vemu
v6502_plp:    11d4 011c  ld   [$1c]       4974  ld([v6502_S])                   #12
              11d5 1200  ld   ac,x        4975  ld(AC,X)                        #13
              11d6 8001  adda $01         4976  adda(1)                         #14
              11d7 c21c  st   [$1c]       4977  st([v6502_S])                   #15
              11d8 0500  ld   [x]         4978  ld([X])                         #16
              11d9 c229  st   [$29]       4979  st([v6502_Qn])                  #17 N flag
              11da 2002  anda $02         4980  anda(v6502_Zflag)               #18
              11db 6002  xora $02         4981  xora(v6502_Zflag)               #19
              11dc c228  st   [$28]       4982  st([v6502_Qz])                  #20 Z flag
              11dd 0500  ld   [x]         4983  ld([X])                         #21
              11de 207f  anda $7f         4984  anda(~v6502_Vemu)               #22 V to bit 7
              11df 8040  adda $40         4985  adda(v6502_Vflag)               #23
              11e0 c227  st   [$27]       4986  st([v6502_P])                   #24 All other flags
              11e1 140e  ld   $0e,y       4987  ld(hi('v6502_next'),Y)          #25
              11e2 e020  jmp  y,$20       4988  jmp(Y,'v6502_next')             #26
              11e3 00f2  ld   $f2         4989  ld(-28/2)                       #27
                                          4990
                                          4991  label('v6502_rti')
v6502_rti:    11e4 011c  ld   [$1c]       4992  ld([v6502_S])                   #12
              11e5 1200  ld   ac,x        4993  ld(AC,X)                        #13
              11e6 8003  adda $03         4994  adda(3)                         #14
              11e7 c21c  st   [$1c]       4995  st([v6502_S])                   #15
              11e8 0500  ld   [x]         4996  ld([X])                         #16
              11e9 c229  st   [$29]       4997  st([v6502_Qn])                  #17 N flag
              11ea 2002  anda $02         4998  anda(v6502_Zflag)               #18
              11eb 6002  xora $02         4999  xora(v6502_Zflag)               #19
              11ec c228  st   [$28]       5000  st([v6502_Qz])                  #20 Z flag
              11ed 1400  ld   $00,y       5001  ld(0,Y)                         #21
              11ee 0d00  ld   [y,x]       5002  ld([Y,X])                       #22
              11ef de00  st   [y,x++]     5003  st([Y,Xpp])                     #23 Just X++
              11f0 207f  anda $7f         5004  anda(~v6502_Vemu)               #24 V to bit 7
              11f1 8040  adda $40         5005  adda(v6502_Vflag)               #25
              11f2 c227  st   [$27]       5006  st([v6502_P])                   #26 All other flags
              11f3 0d00  ld   [y,x]       5007  ld([Y,X])                       #27
              11f4 de00  st   [y,x++]     5008  st([Y,Xpp])                     #28 Just X++
              11f5 c21a  st   [$1a]       5009  st([v6502_PCL])                 #29
              11f6 0d00  ld   [y,x]       5010  ld([Y,X])                       #30
              11f7 c21b  st   [$1b]       5011  st([v6502_PCH])                 #31
              11f8 0200  nop              5012  nop()                           #32
              11f9 140e  ld   $0e,y       5013  ld(hi('v6502_next'),Y)          #33
              11fa e020  jmp  y,$20       5014  jmp(Y,'v6502_next')             #34
              11fb 00ee  ld   $ee         5015  ld(-36/2)                       #35
                                          5016
                                          5017  #-----------------------------------------------------------------------
                                          5018  #       Extended vertical blank logic: interrupts
                                          5019  #-----------------------------------------------------------------------
              11fc 0200  nop              5020  align(0x100)
              11fd 0200  nop
              11fe 0200  nop
              11ff 0200  nop
                                          5021
                                          5022  # Check if an IRQ handler is defined
                                          5023  label('vBlankFirst#78')
vBlankFirst#78:
              1200 09f6  ld   [y,$f6]     5024  ld([Y,vIRQ_DEVROM])             #78
              1201 49f7  ora  [y,$f7]     5025  ora([Y,vIRQ_DEVROM+1])          #79
                                          5026  bne('vBlankFirst#82')           #80
              1202 ec09  bne  vBlankFirst#82
              1203 0116  ld   [$16]       5027  ld([vPC])                       #81
                                          5028  runVcpu(186-82-extra,           #82 Application cycles (scan line 0)
                                          5029      '---D line 0 timeout but no irq',
              1204 0055  ld   $55         5030      returnTo='vBlankFirst#186')
              1205 c21e  st   [$1e]
              1206 1505  ld   [$05],y
              1207 e0ff  jmp  y,$ff
              1208 001f  ld   $1f
                                          5031
                                          5032  label('vBlankFirst#82')
vBlankFirst#82:
              1209 c2fc  st   [$fc]       5033  st([0xfc])                      #82 Save vPC
              120a 0117  ld   [$17]       5034  ld([vPC+1])                     #83
              120b c2fd  st   [$fd]       5035  st([0xfd])                      #84
              120c 0118  ld   [$18]       5036  ld([vAC])                       #85 Save vAC
              120d c2fe  st   [$fe]       5037  st([0xfe])                      #86
              120e 0119  ld   [$19]       5038  ld([vAC+1])                     #87
              120f c2ff  st   [$ff]       5039  st([0xff])                      #88
              1210 09f6  ld   [y,$f6]     5040  ld([Y,vIRQ_DEVROM])             #89 Set vPC to vIRQ
              1211 a002  suba $02         5041  suba(2)                         #90
              1212 c216  st   [$16]       5042  st([vPC])                       #91
              1213 09f7  ld   [y,$f7]     5043  ld([Y,vIRQ_DEVROM+1])           #92
              1214 c217  st   [$17]       5044  st([vPC+1])                     #93
              1215 0105  ld   [$05]       5045  ld([vCpuSelect])                #94 Handler must save this if needed
              1216 c219  st   [$19]       5046  st([vAC+1])                     #95
              1217 0000  ld   $00         5047  ld(0)                           #96
              1218 c218  st   [$18]       5048  st([vAC])                       #97
              1219 0002  ld   $02         5049  ld(hi('ENTER'))                 #98 Set vCpuSelect to ENTER (=regular vCPU)
              121a c205  st   [$05]       5050  st([vCpuSelect])                #99
                                          5051  runVcpu(186-100-extra,          #100 Application cycles (scan line 0)
                                          5052      '---D line 0 timeout with irq',
              121b 0055  ld   $55         5053      returnTo='vBlankFirst#186')
              121c c21e  st   [$1e]
              121d 1505  ld   [$05],y
              121e e0ff  jmp  y,$ff
              121f 0016  ld   $16
                                          5054
                                          5055  # vIRQ sequence WITH interpreter switch
                                          5056  label('vRTI#18')
vRTI#18:      1220 0500  ld   [x]         5057  ld([X])                         #18
              1221 c205  st   [$05]       5058  st([vCpuSelect])                #19
              1222 01fc  ld   [$fc]       5059  ld([0xfc])                      #20
              1223 c216  st   [$16]       5060  st([vPC])                       #21
              1224 01fd  ld   [$fd]       5061  ld([0xfd])                      #22
              1225 c217  st   [$17]       5062  st([vPC+1])                     #23
              1226 01fe  ld   [$fe]       5063  ld([0xfe])                      #24
              1227 c218  st   [$18]       5064  st([vAC])                       #25
              1228 01ff  ld   [$ff]       5065  ld([0xff])                      #26
              1229 c219  st   [$19]       5066  st([vAC+1])                     #27
              122a 0200  nop              5067  nop()                           #0
              122b 1403  ld   $03,y       5068  ld(hi('RESYNC'),Y)              #1
              122c e00c  jmp  y,$0c       5069  jmp(Y,'RESYNC')                 #2
              122d 0115  ld   [$15]       5070  ld([vTicks])                    #3
                                          5071
                                          5072  # Entered last line of vertical blank (line 40)
                                          5073  label('vBlankLast#34')
                                          5074
                                          5075  #-----------------------------------------------------------------------
                                          5076  #       Extended vertical blank logic: game controller decoding
                                          5077  #-----------------------------------------------------------------------
                                          5078
                                          5079  # Game controller types
                                          5080  # TypeA: Based on 74LS165 shift register (not supported)
                                          5081  # TypeB: Based on CD4021B shift register (standard)
                                          5082  # TypeC: Based on priority encoder
                                          5083  #
                                          5084  # Notes:
                                          5085  # - TypeA was only used during development and first beta test, before ROM v1
                                          5086  # - TypeB appears as type A with negative logic levels
                                          5087  # - TypeB is the game controller type that comes with the original kit and ROM v1
                                          5088  # - TypeB is mimicked by BabelFish / Pluggy McPlugface
                                          5089  # - TypeB requires a prolonged /SER_LATCH, therefore vPulse is 8 scanlines, not 2
                                          5090  # - TypeB and TypeC can be sampled in the same scanline
                                          5091  # - TypeA is 1 scanline shifted as it looks at a different edge (XXX up or down?)
                                          5092  # - TypeC gives incomplete information: lower buttons overshadow higher ones
                                          5093  #
                                          5094  #       TypeC    Alias    Button TypeB
                                          5095  #       00000000  ^@   -> Right  11111110
                                          5096  #       00000001  ^A   -> Left   11111101
                                          5097  #       00000011  ^C   -> Down   11111011
                                          5098  #       00000111  ^G   -> Up     11110111
                                          5099  #       00001111  ^O   -> Start  11101111
                                          5100  #       00011111  ^_   -> Select 11011111
                                          5101  #       00111111  ?    -> B      10111111
                                          5102  #       01111111  DEL  -> A      01111111
                                          5103  #       11111111       -> (None) 11111111
                                          5104  #
                                          5105  #       Conversion formula:
                                          5106  #               f(x) := 254 - x
                                          5107
                                          5108  # Detect controller TypeC codes
vBlankLast#34:
              122e 010f  ld   [$0f]       5109  ld([serialRaw])                 #34 if serialRaw in [0,1,3,7,15,31,63,127,255]
              122f 8001  adda $01         5110  adda(1)                         #35
              1230 210f  anda [$0f]       5111  anda([serialRaw])               #36
              1231 ec42  bne  .buttons#39 5112  bne('.buttons#39')              #37
                                          5113
                                          5114  # TypeC
              1232 010f  ld   [$0f]       5115  ld([serialRaw])                 #38 [TypeC] if serialRaw < serialLast
              1233 8001  adda $01         5116  adda(1)                         #39
              1234 2110  anda [$10]       5117  anda([serialLast])              #40
              1235 ec39  bne  .buttons#43 5118  bne('.buttons#43')              #41
              1236 00fe  ld   $fe         5119  ld(254)                         #42 then clear the selected bit
              1237 0200  nop              5120  nop()                           #43
              1238 fc3c  bra  .buttons#46 5121  bra('.buttons#46')              #44
                                          5122  label('.buttons#43')
.buttons#43:  1239 a10f  suba [$0f]       5123  suba([serialRaw])               #43,45
              123a 2111  anda [$11]       5124  anda([buttonState])             #44
              123b c211  st   [$11]       5125  st([buttonState])               #45
                                          5126  label('.buttons#46')
.buttons#46:  123c 010f  ld   [$0f]       5127  ld([serialRaw])                 #46 Set the lower bits
              123d 4111  ora  [$11]       5128  ora([buttonState])              #47
                                          5129  label('.buttons#48')
.buttons#48:  123e c211  st   [$11]       5130  st([buttonState])               #48
              123f 010f  ld   [$0f]       5131  ld([serialRaw])                 #49 Update serialLast for next pass
              1240 e0b3  jmp  y,$b3       5132  jmp(Y,'vBlankLast#52')          #50
              1241 c210  st   [$10]       5133  st([serialLast])                #51
                                          5134
                                          5135  # TypeB
                                          5136  # pChange = pNew & ~pOld
                                          5137  # nChange = nNew | ~nOld {DeMorgan}
                                          5138  label('.buttons#39')
.buttons#39:  1242 00ff  ld   $ff         5139  ld(255)                         #39 [TypeB] Bitwise edge-filter to detect button presses
              1243 6110  xora [$10]       5140  xora([serialLast])              #40
              1244 410f  ora  [$0f]       5141  ora([serialRaw])                #41 Catch button-press events
              1245 2111  anda [$11]       5142  anda([buttonState])             #42 Keep active button presses
              1246 410f  ora  [$0f]       5143  ora([serialRaw])                #43
              1247 0200  nop              5144  nop()                           #44
              1248 0200  nop              5145  nop()                           #45
              1249 fc3e  bra  .buttons#48 5146  bra('.buttons#48')              #46
              124a 0200  nop              5147  nop()                           #47
                                          5148
                                          5149
                                          5150  #-----------------------------------------------------------------------
                                          5151  #       More SYS functions
                                          5152  #-----------------------------------------------------------------------
                                          5153
                                          5154  # SYS_Exec_88 implementation
                                          5155  label('sys_Exec')
sys_Exec:     124b d617  st   [$17],y     5156  st([vPC+1],Y)                   #18 Clear vPCH and Y
              124c 011c  ld   [$1c]       5157  ld([vSP])                       #19 Place ROM loader below current stack pointer
              124d a037  suba $37         5158  suba(53+2)                      #20 (AC -> *+0) One extra word for PUSH
              124e d21d  st   [$1d],x     5159  st([vTmp],X)                    #21
              124f 80fe  adda $fe         5160  adda(-2)                        #22 (AC -> *-2)
              1250 c216  st   [$16]       5161  st([vPC])                       #23
                                          5162  # Start of manually compiled vCPU section
              1251 dc75  st   $75,[y,x++] 5163  st('PUSH',    [Y,Xpp])          #24 *+0
              1252 dccf  st   $cf,[y,x++] 5164  st('CALL',    [Y,Xpp])          #25 *+26 Fetch first byte
              1253 8023  adda $23         5165  adda(33-(-2))                   #26 (AC -> *+33)
              1254 de00  st   [y,x++]     5166  st(           [Y,Xpp])          #27 *+27
              1255 dc5e  st   $5e,[y,x++] 5167  st('ST',      [Y,Xpp])          #28 *+3 Chunk copy loop
              1256 dc27  st   $27,[y,x++] 5168  st(sysArgs+3, [Y,Xpp])          #29 *+4 High-address comes first
              1257 dccf  st   $cf,[y,x++] 5169  st('CALL',    [Y,Xpp])          #30 *+5
              1258 de00  st   [y,x++]     5170  st(           [Y,Xpp])          #31 *+6
              1259 dc5e  st   $5e,[y,x++] 5171  st('ST',      [Y,Xpp])          #32 *+7
              125a dc26  st   $26,[y,x++] 5172  st(sysArgs+2, [Y,Xpp])          #33 *+8 Then the low address
              125b dccf  st   $cf,[y,x++] 5173  st('CALL',    [Y,Xpp])          #34 *+9
              125c de00  st   [y,x++]     5174  st(           [Y,Xpp])          #35 *+10
              125d dc5e  st   $5e,[y,x++] 5175  st('ST',      [Y,Xpp])          #36 *+11 Byte copy loop
              125e dc28  st   $28,[y,x++] 5176  st(sysArgs+4, [Y,Xpp])          #37 *+12 Byte count (0 means 256)
              125f dccf  st   $cf,[y,x++] 5177  st('CALL',    [Y,Xpp])          #38 *+13
              1260 de00  st   [y,x++]     5178  st(           [Y,Xpp])          #39 *+14
              1261 dcf0  st   $f0,[y,x++] 5179  st('POKE',    [Y,Xpp])          #40 *+15
              1262 dc26  st   $26,[y,x++] 5180  st(sysArgs+2, [Y,Xpp])          #41 *+16
              1263 dc93  st   $93,[y,x++] 5181  st('INC',     [Y,Xpp])          #42 *+17
              1264 dc26  st   $26,[y,x++] 5182  st(sysArgs+2, [Y,Xpp])          #43 *+18
              1265 dc1a  st   $1a,[y,x++] 5183  st('LD',      [Y,Xpp])          #44 *+19
              1266 dc28  st   $28,[y,x++] 5184  st(sysArgs+4, [Y,Xpp])          #45 *+20
              1267 dce6  st   $e6,[y,x++] 5185  st('SUBI',    [Y,Xpp])          #46 *+21
              1268 dc01  st   $01,[y,x++] 5186  st(1,         [Y,Xpp])          #47 *+22
              1269 dc35  st   $35,[y,x++] 5187  st('BCC',     [Y,Xpp])          #48 *+23
              126a dc72  st   $72,[y,x++] 5188  st('NE',      [Y,Xpp])          #49 *+24
              126b 80e8  adda $e8         5189  adda(11-2-33)                   #50 (AC -> *+9)
              126c de00  st   [y,x++]     5190  st(           [Y,Xpp])          #51 *+25
              126d dccf  st   $cf,[y,x++] 5191  st('CALL',    [Y,Xpp])          #52 *+26 Go to next block
              126e 8018  adda $18         5192  adda(33-9)                      #53 (AC -> *+33)
              126f de00  st   [y,x++]     5193  st(           [Y,Xpp])          #54 *+27
              1270 dc35  st   $35,[y,x++] 5194  st('BCC',     [Y,Xpp])          #55 *+28
              1271 dc72  st   $72,[y,x++] 5195  st('NE',      [Y,Xpp])          #56 *+29
              1272 80e0  adda $e0         5196  adda(3-2-33)                    #57 (AC -> *+1)
              1273 de00  st   [y,x++]     5197  st(           [Y,Xpp])          #58 *+30
              1274 dc63  st   $63,[y,x++] 5198  st('POP',     [Y,Xpp])          #59 *+31 End
              1275 dcff  st   $ff,[y,x++] 5199  st('RET',     [Y,Xpp])          #60 *+32
                                          5200  # Pointer constant pointing to the routine below (for use by CALL)
              1276 8022  adda $22         5201  adda(35-1)                      #61 (AC -> *+35)
              1277 de00  st   [y,x++]     5202  st(           [Y,Xpp])          #62 *+33
              1278 dc00  st   $00,[y,x++] 5203  st(0,         [Y,Xpp])          #63 *+34
                                          5204  # Routine to read next byte from ROM and advance read pointer
              1279 dc1a  st   $1a,[y,x++] 5205  st('LD',      [Y,Xpp])          #64 *+35 Test for end of ROM table
              127a dc24  st   $24,[y,x++] 5206  st(sysArgs+0, [Y,Xpp])          #65 *+36
              127b dc8c  st   $8c,[y,x++] 5207  st('XORI',    [Y,Xpp])          #66 *+37
              127c dcfb  st   $fb,[y,x++] 5208  st(251,       [Y,Xpp])          #67 *+38
              127d dc35  st   $35,[y,x++] 5209  st('BCC',     [Y,Xpp])          #68 *+39
              127e dc72  st   $72,[y,x++] 5210  st('NE',      [Y,Xpp])          #69 *+40
              127f 8009  adda $09         5211  adda(46-2-35)                   #70 (AC -> *+44)
              1280 de00  st   [y,x++]     5212  st(           [Y,Xpp])          #71 *+41
              1281 dc5e  st   $5e,[y,x++] 5213  st('ST',      [Y,Xpp])          #72 *+42 Wrap to next ROM page
              1282 dc24  st   $24,[y,x++] 5214  st(sysArgs+0, [Y,Xpp])          #73 *+43
              1283 dc93  st   $93,[y,x++] 5215  st('INC',     [Y,Xpp])          #74 *+44
              1284 dc25  st   $25,[y,x++] 5216  st(sysArgs+1, [Y,Xpp])          #75 *+45
              1285 dc21  st   $21,[y,x++] 5217  st('LDW',     [Y,Xpp])          #76 *+46 Read next byte from ROM table
              1286 dc24  st   $24,[y,x++] 5218  st(sysArgs+0, [Y,Xpp])          #77 *+47
              1287 dc7f  st   $7f,[y,x++] 5219  st('LUP',     [Y,Xpp])          #78 *+48
              1288 dc00  st   $00,[y,x++] 5220  st(0,         [Y,Xpp])          #79 *+49
              1289 dc93  st   $93,[y,x++] 5221  st('INC',     [Y,Xpp])          #80 *+50 Increment read pointer
              128a dc24  st   $24,[y,x++] 5222  st(sysArgs+0, [Y,Xpp])          #81 *+51
              128b dcff  st   $ff,[y,x++] 5223  st('RET',     [Y,Xpp])          #82 *+52 Return
                                          5224  # Return to interpreter
              128c 1403  ld   $03,y       5225  ld(hi('REENTER'),Y)             #83
              128d e0cb  jmp  y,$cb       5226  jmp(Y,'REENTER')                #84
              128e 00d4  ld   $d4         5227  ld(-88/2)                       #85
                                          5228
                                          5229  # SYS_VDrawBits_134 implementation
                                          5230  label('sys_VDrawBits')
sys_VDrawBits:
              128f 0000  ld   $00         5231  ld(0)                           #18
                                          5232  label('.sysVdb0')
.sysVdb0:     1290 c21d  st   [$1d]       5233  st([vTmp])                      #19+i*25
              1291 9529  adda [$29],y     5234  adda([sysArgs+5],Y)             #20+i*25 Y=[sysPos+1]+[vTmp]
              1292 0126  ld   [$26]       5235  ld([sysArgs+2])                 #21+i*25 Select color
              1293 e896  blt  $1296       5236  bmi(pc()+3)                     #22+i*25
              1294 fc97  bra  $1297       5237  bra(pc()+3)                     #23+i*25
              1295 0124  ld   [$24]       5238  ld([sysArgs+0])                 #24+i*25
              1296 0125  ld   [$25]       5239  ld([sysArgs+1])                 #24+i*25(!)
              1297 ce00  st   [y,x]       5240  st([Y,X])                       #25+i*25 Draw pixel
              1298 0126  ld   [$26]       5241  ld([sysArgs+2])                 #26+i*25 Shift byte left
              1299 8200  adda ac          5242  adda(AC)                        #27+i*25
              129a c226  st   [$26]       5243  st([sysArgs+2])                 #28+i*25
              129b 011d  ld   [$1d]       5244  ld([vTmp])                      #29+i*25 Unrolled loop (once)
              129c 8129  adda [$29]       5245  adda([sysArgs+5])               #31+i*25
              129d 9401  adda $01,y       5246  adda(1,Y)                       #30+i*25 Y=[sysPos+1]+[vTmp]+1
              129e 0126  ld   [$26]       5247  ld([sysArgs+2])                 #32+i*25 Select color
              129f e8a2  blt  $12a2       5248  bmi(pc()+3)                     #33+i*25
              12a0 fca3  bra  $12a3       5249  bra(pc()+3)                     #34+i*25
              12a1 0124  ld   [$24]       5250  ld([sysArgs+0])                 #35+i*25
              12a2 0125  ld   [$25]       5251  ld([sysArgs+1])                 #35+i*25(!)
              12a3 ce00  st   [y,x]       5252  st([Y,X])                       #36+i*25 Draw pixel
              12a4 0126  ld   [$26]       5253  ld([sysArgs+2])                 #37+i*25 Shift byte left
              12a5 8200  adda ac          5254  adda(AC)                        #38+i*25
              12a6 c226  st   [$26]       5255  st([sysArgs+2])                 #39+i*25
              12a7 011d  ld   [$1d]       5256  ld([vTmp])                      #40+i*25 Loop counter
              12a8 a006  suba $06         5257  suba(6)                         #41+i*25
              12a9 ec90  bne  .sysVdb0    5258  bne('.sysVdb0')                 #42+i*25
              12aa 8008  adda $08         5259  adda(8)                         #43+i*25 Steps of 2
              12ab 1403  ld   $03,y       5260  ld(hi('REENTER'),Y)             #119
              12ac e0cb  jmp  y,$cb       5261  jmp(Y,'REENTER')                #120
              12ad 00c2  ld   $c2         5262  ld(-124/2)                      #121
                                          5263
                                          5264  # SYS_ResetWaveforms_v4_50 implementation
                                          5265  label('sys_ResetWaveforms')
sys_ResetWaveforms:
              12ae 0118  ld   [$18]       5266  ld([vAC+0])                     #18 X=4i
              12af 8200  adda ac          5267  adda(AC)                        #19
              12b0 9200  adda ac,x        5268  adda(AC,X)                      #20
              12b1 0118  ld   [$18]       5269  ld([vAC+0])                     #21
              12b2 de00  st   [y,x++]     5270  st([Y,Xpp])                     #22 Sawtooth: T[4i+0] = i
              12b3 2020  anda $20         5271  anda(0x20)                      #23 Triangle: T[4i+1] = 2i if i<32 else 127-2i
              12b4 ecb7  bne  $12b7       5272  bne(pc()+3)                     #24
              12b5 0118  ld   [$18]       5273  ld([vAC+0])                     #25
              12b6 fcb9  bra  $12b9       5274  bra(pc()+3)                     #26
              12b7 8118  adda [$18]       5275  adda([vAC+0])                   #26,27
              12b8 607f  xora $7f         5276  xora(127)                       #27
              12b9 de00  st   [y,x++]     5277  st([Y,Xpp])                     #28
              12ba 0118  ld   [$18]       5278  ld([vAC+0])                     #29 Pulse: T[4i+2] = 0 if i<32 else 63
              12bb 2020  anda $20         5279  anda(0x20)                      #30
              12bc ecbf  bne  $12bf       5280  bne(pc()+3)                     #31
              12bd fcc0  bra  $12c0       5281  bra(pc()+3)                     #32
              12be 0000  ld   $00         5282  ld(0)                           #33
              12bf 003f  ld   $3f         5283  ld(63)                          #33(!)
              12c0 de00  st   [y,x++]     5284  st([Y,Xpp])                     #34
              12c1 0118  ld   [$18]       5285  ld([vAC+0])                     #35 Sawtooth: T[4i+3] = i
              12c2 ce00  st   [y,x]       5286  st([Y,X])                       #36
              12c3 8001  adda $01         5287  adda(1)                         #37 i += 1
              12c4 c218  st   [$18]       5288  st([vAC+0])                     #38
              12c5 6040  xora $40         5289  xora(64)                        #39 For 64 iterations
              12c6 f0c9  beq  $12c9       5290  beq(pc()+3)                     #40
              12c7 fcca  bra  $12ca       5291  bra(pc()+3)                     #41
              12c8 00fe  ld   $fe         5292  ld(-2)                          #42
              12c9 0000  ld   $00         5293  ld(0)                           #42(!)
              12ca 8116  adda [$16]       5294  adda([vPC])                     #43
              12cb c216  st   [$16]       5295  st([vPC])                       #44
              12cc 1403  ld   $03,y       5296  ld(hi('REENTER'),Y)             #45
              12cd e0cb  jmp  y,$cb       5297  jmp(Y,'REENTER')                #46
              12ce 00e7  ld   $e7         5298  ld(-50/2)                       #47
                                          5299
                                          5300  # SYS_ShuffleNoise_v4_46 implementation
                                          5301  label('sys_ShuffleNoise')
sys_ShuffleNoise:
              12cf 1118  ld   [$18],x     5302  ld([vAC+0],X)                   #18 tmp = T[4j]
              12d0 0d00  ld   [y,x]       5303  ld([Y,X])                       #19
              12d1 c21d  st   [$1d]       5304  st([vTmp])                      #20
              12d2 1119  ld   [$19],x     5305  ld([vAC+1],X)                   #21 T[4j] = T[4i]
              12d3 0d00  ld   [y,x]       5306  ld([Y,X])                       #22
              12d4 1118  ld   [$18],x     5307  ld([vAC+0],X)                   #23
              12d5 ce00  st   [y,x]       5308  st([Y,X])                       #24
              12d6 8200  adda ac          5309  adda(AC)                        #25 j += T[4i]
              12d7 8200  adda ac          5310  adda(AC,)                       #26
              12d8 8118  adda [$18]       5311  adda([vAC+0])                   #27
              12d9 c218  st   [$18]       5312  st([vAC+0])                     #28
              12da 1119  ld   [$19],x     5313  ld([vAC+1],X)                   #29 T[4i] = tmp
              12db 011d  ld   [$1d]       5314  ld([vTmp])                      #30
              12dc ce00  st   [y,x]       5315  st([Y,X])                       #31
              12dd 0119  ld   [$19]       5316  ld([vAC+1])                     #32 i += 1
              12de 8004  adda $04         5317  adda(4)                         #33
              12df c219  st   [$19]       5318  st([vAC+1])                     #34
              12e0 f0e3  beq  $12e3       5319  beq(pc()+3)                     #35 For 64 iterations
              12e1 fce4  bra  $12e4       5320  bra(pc()+3)                     #36
              12e2 00fe  ld   $fe         5321  ld(-2)                          #37
              12e3 0000  ld   $00         5322  ld(0)                           #37(!)
              12e4 8116  adda [$16]       5323  adda([vPC])                     #38
              12e5 c216  st   [$16]       5324  st([vPC])                       #39
              12e6 1403  ld   $03,y       5325  ld(hi('NEXTY'),Y)               #40
              12e7 e000  jmp  y,$00       5326  jmp(Y,'NEXTY')                  #41
              12e8 00ea  ld   $ea         5327  ld(-44/2)                       #42
                                          5328
                                          5329  # SYS_LoadBytes_DEVROM_XXX implementation
                                          5330  label('sys_LoadBytes')
sys_LoadBytes:
              12e9 0030  ld   $30         5331  ld(0x30)                        # Target address
              12ea c225  st   [$25]       5332  st([sysArgs+1])                 #
              12eb 011a  ld   [$1a]       5333  ld([vLR+0])                     # Source address
              12ec d224  st   [$24],x     5334  st([sysArgs+0],X)               #
              12ed 0d00  ld   [y,x]       5335  ld([Y,X])                       # Byte count
                                          5336  label('.slb1')                  #
.slb1:        12ee c226  st   [$26]       5337  st([sysArgs+2])                 #
                                          5338
              12ef 0124  ld   [$24]       5339  ld([sysArgs+0])                 # Advance source address
              12f0 8001  adda $01         5340  adda(1)                         #
              12f1 d224  st   [$24],x     5341  st([sysArgs+0],X)               #
                                          5342
              12f2 0d00  ld   [y,x]       5343  ld([Y,X])                       # Copy byte
              12f3 1125  ld   [$25],x     5344  ld([sysArgs+1],X)               #
              12f4 c600  st   [x]         5345  st([X])                         #
                                          5346
              12f5 0125  ld   [$25]       5347  ld([sysArgs+1])                 # Advance target address
              12f6 8001  adda $01         5348  adda(1)                         #
              12f7 c225  st   [$25]       5349  st([sysArgs+1])                 #
                                          5350
              12f8 0126  ld   [$26]       5351  ld([sysArgs+2])                 # Decrement byte count and loop
              12f9 ecee  bne  .slb1       5352  bne('.slb1')                    #
              12fa a001  suba $01         5353  suba(1)                         #
                                          5354
                                          5355  # XXX Unfinished
                                          5356
                                          5357  #-----------------------------------------------------------------------
                                          5358
              12fb 0200  nop              5359  forth.emit_entry_page(vTicks, vReturn)
              12fc 0200  nop
              12fd 0200  nop
              12fe 0200  nop              ;You are now entering... Forth
FORTH_ENTER:  12ff 801c  adda $1c
              1300 c215  st   [$15]       ;Timing point: [vTicks] == AC == accurate number of ticks until we need to be back
forth.next1:  1301 a00c  suba $0c
              1302 1531  ld   [$31],y
              1303 e130  jmp  y,[$30]
              1304 fc00  bra  $00
forth.next1.reenter:
forth.next1.reenter.even:
              1305 0200  nop
forth.next1.reenter.odd:
              1306 a008  suba $08
              1307 8115  adda [$15]
              1308 c215  st   [$15]
              1309 a009  suba $09
              130a e81d  blt  forth.exit.from-next2
              130b 0001  ld   $01
              130c fc01  bra  forth.next1
              130d 0115  ld   [$15]
forth.next2:
forth.next2.odd:
              130e 0200  nop
forth.next2.even:
              130f a00a  suba $0a
              1310 8115  adda [$15]
              1311 c215  st   [$15]
              1312 0132  ld   [$32]
              1313 c230  st   [$30]
              1314 0014  ld   $14
              1315 c231  st   [$31]
              1316 0115  ld   [$15]
              1317 a009  suba $09
              1318 e81d  blt  forth.exit.from-next2
              1319 0001  ld   $01
              131a fc01  bra  forth.next1
              131b 0115  ld   [$15]
forth.exit:
forth.exit.from-failed-test:
              131c 00fa  ld   $fa
forth.exit.from-next1-reenter:
forth.exit.from-next2:
              131d 8115  adda [$15]
              131e 1401  ld   $01,y
              131f e41f  bgt  $131f
              1320 a001  suba $01
              1321 e11e  jmp  y,[$1e]
              1322 0200  nop
forth.DO-DOCOL-ROM:
              1323 0135  ld   [$35]       ;Y holds the page of the return stack
                                          ;Push [IP] to Return stack
              1324 a002  suba $02
              1325 d235  st   [$35],x
              1326 0133  ld   [$33]
              1327 de00  st   [y,x++]
              1328 0134  ld   [$34]
              1329 ce00  st   [y,x]
              132a 0131  ld   [$31]       ;Copy [W] to [IP], incrementing it by 4
              132b c234  st   [$34]
              132c 0130  ld   [$30]
              132d 8004  adda $04
              132e c233  st   [$33]
              132f 1413  ld   $13,y       ;NEXT
              1330 e00e  jmp  y,$0e
              1331 00f6  ld   $f6
forth.DO-DOCOL-RAM:
              1332 0135  ld   [$35]
              1333 a005  suba $05
              1334 d235  st   [$35],x
              1335 dc4f  st   $4f,[y,x++]
              1336 dc14  st   $14,[y,x++]
              1337 0132  ld   [$32]
              1338 de00  st   [y,x++]
              1339 0133  ld   [$33]
              133a de00  st   [y,x++]
              133b 0134  ld   [$34]
              133c ce00  st   [y,x]
              133d 0004  ld   $04
              133e c232  st   [$32]
              133f 0131  ld   [$31]       ;Copy [W] to [IP], incrementing it by 8
              1340 c234  st   [$34]
              1341 0130  ld   [$30]
              1342 8008  adda $08
              1343 c233  st   [$33]
              1344 1413  ld   $13,y       ;NEXT
              1345 e00e  jmp  y,$0e
              1346 00f3  ld   $f3
              1347 0200  nop              5360  forth.emit_kernel_words()
              1348 0200  nop
              1349 0200  nop
              * 185 times
forth.restart-or-quit:
              1400 fd30  bra  [$30]
              1401 f802  ble  .quit
.quit:        1402 1413  ld   $13,y       ;jmp forth.exit.from-failed-test
              1403 e01c  jmp  y,$1c
forth.next3:
forth.next3.rom-mode:
              1404 80f8  adda $f8
              1405 00f8  ld   $f8
              1406 c224  st   [$24]
              1407 1030  ld   $30,x
              1408 0003  ld   $03
              1409 1534  ld   [$34],y
              140a 0200  nop
              140b e133  jmp  y,[$33]
              140c 1400  ld   $00,y
forth.next3.ram-rom-mode:
              140d 80f6  adda $f6
              140e 1534  ld   [$34],y     ;W <- [IP]
              140f 1133  ld   [$33],x
              1410 0d00  ld   [y,x]
              1411 c230  st   [$30]
              1412 0133  ld   [$33]
              1413 8001  adda $01
              1414 1200  ld   ac,x
              1415 0d00  ld   [y,x]
              1416 c231  st   [$31]       ;IP <- IP + 2
              1417 0133  ld   [$33]
              1418 8002  adda $02
              1419 f01e  beq  .page-boundary
              141a c233  st   [$33]
              141b 1413  ld   $13,y       ;REENTER
              141c e006  jmp  y,$06
              141d 00f8  ld   $f8
.page-boundary:
              141e 0134  ld   [$34]
              141f 8001  adda $01
              1420 c234  st   [$34]
              1421 1413  ld   $13,y       ;REENTER
              1422 e005  jmp  y,$05
              1423 00f6  ld   $f6
forth.next3.ram-ram-mode:
              1424 80f4  adda $f4
              1425 1534  ld   [$34],y     ;[tmp] <- [IP]
              1426 1133  ld   [$33],x
              1427 0d00  ld   [y,x]
              1428 de00  st   [y,x++]
              1429 c224  st   [$24]
              142a 0d00  ld   [y,x]
              142b c225  st   [$25]
              142c 1600  ld   ac,y        ;[W] <- [tmp]
              142d 1124  ld   [$24],x
              142e 0d00  ld   [y,x]
              142f c230  st   [$30]
              1430 de00  st   [y,x++]
              1431 0d00  ld   [y,x]
              1432 c231  st   [$31]
              1433 0133  ld   [$33]       ;IP <- IP + 2
              1434 8002  adda $02
              1435 ec3d  bne  .not-page-boundary
              1436 c233  st   [$33]
              1437 0134  ld   [$34]
              1438 8001  adda $01
              1439 c234  st   [$34]
              143a 1413  ld   $13,y       ;REENTER
              143b e006  jmp  y,$06
              143c 00f4  ld   $f4
.not-page-boundary:
              143d 1413  ld   $13,y       ;REENTER
              143e e005  jmp  y,$05
              143f 00f5  ld   $f5
forth.DO-RESTORE-MODE:
              1440 80f9  adda $f9
              1441 147f  ld   $7f,y
              1442 1135  ld   [$35],x
              1443 0135  ld   [$35]
              1444 8001  adda $01
              1445 c235  st   [$35]
              1446 0d00  ld   [y,x]
              1447 c232  st   [$32]
              1448 1400  ld   $00,y
              1449 1030  ld   $30,x
              144a dc52  st   $52,[y,x++]
              144b dc14  st   $14,[y,x++]
              144c 1413  ld   $13,y       ;REENTER
              144d e006  jmp  y,$06
              144e 00f9  ld   $f9
forth.RESTORE-MODE:
              144f dc40  st   $40,[y,x++]
              1450 e07a  jmp  y,$7a
              1451 dc14  st   $14,[y,x++]
forth.core.EXIT:
              1452 80f9  adda $f9
              1453 147f  ld   $7f,y
              1454 1135  ld   [$35],x
              1455 0d00  ld   [y,x]
              1456 c233  st   [$33]
              1457 0135  ld   [$35]
              1458 9001  adda $01,x
              1459 8002  adda $02
              145a c235  st   [$35]
              145b 0d00  ld   [y,x]
              145c c234  st   [$34]
              145d 1413  ld   $13,y       ;NEXT
              145e e00f  jmp  y,$0f
              145f 00f9  ld   $f9
forth.DOCOL:  1460 80f6  adda $f6
              1461 147f  ld   $7f,y
              1462 0135  ld   [$35]       ;Y holds the page of the return stack
                                          ;Push [IP] to Return stack
              1463 a002  suba $02
              1464 d235  st   [$35],x
              1465 0133  ld   [$33]
              1466 de00  st   [y,x++]
              1467 0134  ld   [$34]
              1468 ce00  st   [y,x]
              1469 0124  ld   [$24]
              146a 8002  adda $02
              146b c233  st   [$33]
              146c f072  beq  .page-boundary#docol
              146d 0125  ld   [$25]
              146e c234  st   [$34]
              146f 1413  ld   $13,y       ;NEXT
              1470 e00f  jmp  y,$0f
              1471 00f7  ld   $f7
.page-boundary#docol:
              1472 8001  adda $01
              1473 c234  st   [$34]
              1474 1413  ld   $13,y       ;NEXT
              1475 e00e  jmp  y,$0e
              1476 00f6  ld   $f6
forth.core.C@:
              1477 80f7  adda $f7
              1478 1400  ld   $00,y
              1479 111c  ld   [$1c],x
              147a 0d00  ld   [y,x]
              147b c224  st   [$24]
              147c de00  st   [y,x++]
              147d 0d00  ld   [y,x]
              147e 1600  ld   ac,y
              147f 1124  ld   [$24],x
              1480 0d00  ld   [y,x]
              1481 1400  ld   $00,y
              1482 111c  ld   [$1c],x
              1483 de00  st   [y,x++]
              1484 0000  ld   $00
              1485 ce00  st   [y,x]
              1486 1413  ld   $13,y       ;NEXT
              1487 e00f  jmp  y,$0f
              1488 00f7  ld   $f7
forth.core.C!:
              1489 80f6  adda $f6
              148a 1400  ld   $00,y       ;Pop 2 byte address to temp (SP moves by 4)
              148b 011c  ld   [$1c]
              148c 1200  ld   ac,x
              148d 8004  adda $04
              148e c21c  st   [$1c]
              148f 0d00  ld   [y,x]
              1490 c224  st   [$24]
              1491 de00  st   [y,x++]
              1492 0d00  ld   [y,x]
              1493 c225  st   [$25]
              1494 de00  st   [y,x++]
              1495 0d00  ld   [y,x]       ;Load low-byte of char - top byte ignored
              1496 1124  ld   [$24],x
              1497 1525  ld   [$25],y
              1498 ce00  st   [y,x]       ;Write
              1499 1413  ld   $13,y       ;NEXT
              149a e00e  jmp  y,$0e
              149b 00f6  ld   $f6
forth.core.1+:
              149c 80f9  adda $f9
              149d 1400  ld   $00,y
              149e 111c  ld   [$1c],x
              149f 0d00  ld   [y,x]
              14a0 8001  adda $01
              14a1 eca9  bne  .done
              14a2 de00  st   [y,x++]
              14a3 0d00  ld   [y,x]
              14a4 8001  adda $01
              14a5 ce00  st   [y,x]
              14a6 1413  ld   $13,y       ;NEXT
              14a7 e00e  jmp  y,$0e
              14a8 00f9  ld   $f9
.done:        14a9 1413  ld   $13,y       ;NEXT
              14aa e00f  jmp  y,$0f
              14ab 00fb  ld   $fb
forth.core.1-:
              14ac 80f9  adda $f9
              14ad 1400  ld   $00,y
              14ae 111c  ld   [$1c],x
              14af 0d00  ld   [y,x]
              14b0 f0b6  beq  .low-byte-was-zero
              14b1 a001  suba $01
              14b2 ce00  st   [y,x]
              14b3 1413  ld   $13,y       ;NEXT
              14b4 e00f  jmp  y,$0f
              14b5 00fb  ld   $fb
.low-byte-was-zero:
              14b6 de00  st   [y,x++]
              14b7 0d00  ld   [y,x]
              14b8 a001  suba $01
              14b9 ce00  st   [y,x]
              14ba 1413  ld   $13,y       ;NEXT
              14bb e00e  jmp  y,$0e
              14bc 00f9  ld   $f9
forth.core.0=:
              14bd 80f8  adda $f8
              14be 111c  ld   [$1c],x
              14bf 0500  ld   [x]
              14c0 ecc8  bne  .not-zero1
              14c1 1400  ld   $00,y
              14c2 de00  st   [y,x++]     ;Low byte is zero - advance to high-byte
              14c3 0d00  ld   [y,x]
              14c4 eccc  bne  .not-zero2
              14c5 111c  ld   [$1c],x
              14c6 fcce  bra  .write      ;Both bytes are 0 - replace with true flag
              14c7 00ff  ld   $ff
.not-zero1:   14c8 0200  nop
              14c9 0200  nop
              14ca 0200  nop
              14cb 0200  nop
.not-zero2:   14cc fcce  bra  .write
              14cd 0000  ld   $00         ;One or both bytes are not zero - replace with false flag
.write:       14ce de00  st   [y,x++]     ;Overwrite both bytes
              14cf de00  st   [y,x++]
              14d0 1413  ld   $13,y       ;NEXT
              14d1 e00f  jmp  y,$0f
              14d2 00f8  ld   $f8
forth.internal.LIT:
              14d3 80f5  adda $f5
              14d4 00f5  ld   $f5         ;Store cost
              14d5 c224  st   [$24]
              14d6 011c  ld   [$1c]       ;Decrement Data stack pointer
              14d7 a002  suba $02
              14d8 1200  ld   ac,x
              14d9 c21c  st   [$1c]
              14da 1534  ld   [$34],y     ;Jump to the code in the thread
              14db 0006  ld   $06         ;We're going to shift the IP by 6
              14dc 0200  nop
              14dd e133  jmp  y,[$33]
              14de 1400  ld   $00,y
forth.internal.C-LIT:
              14df 80f3  adda $f3
              14e0 00f3  ld   $f3         ;Store cost
              14e1 c224  st   [$24]
              14e2 011c  ld   [$1c]       ;Decrement Data stack pointer and store high byte of 0
              14e3 a001  suba $01
              14e4 1200  ld   ac,x
              14e5 0000  ld   $00
              14e6 c600  st   [x]
              14e7 011c  ld   [$1c]
              14e8 a002  suba $02
              14e9 1200  ld   ac,x
              14ea c21c  st   [$1c]
              14eb 1534  ld   [$34],y     ;Jump to the code in the thread
              14ec 0005  ld   $05         ;We're going to shift the IP by 5
              14ed 0200  nop
              14ee e133  jmp  y,[$33]
              14ef 1400  ld   $00,y
forth.internal.rom-mode.BRANCH:
              14f0 80f7  adda $f7
              14f1 00f8  ld   $f8         ;Store cost
              14f2 c224  st   [$24]
              14f3 1030  ld   $30,x       ;X <- W
              14f4 1534  ld   [$34],y     ;Jump to the code in the thread
              14f5 e133  jmp  y,[$33]
              14f6 1400  ld   $00,y
              14f7 0200  nop
              14f8 0200  nop
              14f9 0200  nop
              * 9 times
forth.restart-or-quit:
              1500 fd30  bra  [$30]
              1501 f802  ble  .quit
.quit:        1502 1413  ld   $13,y       ;jmp forth.exit.from-failed-test
              1503 e01c  jmp  y,$1c
forth.internal.rom-mode.?BRANCH:
              1504 80f0  adda $f0
              1505 111c  ld   [$1c],x
              1506 011c  ld   [$1c]
              1507 8002  adda $02
              1508 c21c  st   [$1c]
              1509 0500  ld   [x]
              150a ec17  bne  .?BRANCH.not-zero1
              150b 00f3  ld   $f3
              150c 1400  ld   $00,y
              150d de00  st   [y,x++]
              150e 0d00  ld   [y,x]
              150f ec18  bne  .?BRANCH.not-zero2
              1510 00f1  ld   $f1
              1511 00f2  ld   $f2         ;Store cost
              1512 c224  st   [$24]
.enter-thread:
              1513 1030  ld   $30,x       ;X <- W
              1514 1534  ld   [$34],y     ;Jump to the code in the thread
              1515 e133  jmp  y,[$33]
              1516 1400  ld   $00,y
.?BRANCH.not-zero1:
              1517 0200  nop
.?BRANCH.not-zero2:
              1518 c224  st   [$24]       ;Store cost
              1519 0002  ld   $02
              151a 8133  adda [$33]
              151b c233  st   [$33]
              151c fc13  bra  .enter-thread
              151d 0003  ld   $03         ;IP will move a further 3
forth.core.DROP:
              151e 80fc  adda $fc
              151f 011c  ld   [$1c]
              1520 8002  adda $02
              1521 c21c  st   [$1c]
              1522 1413  ld   $13,y       ;NEXT
              1523 e00e  jmp  y,$0e
              1524 00fc  ld   $fc
forth.core.2DROP:
              1525 80fc  adda $fc
              1526 011c  ld   [$1c]
              1527 8004  adda $04
              1528 c21c  st   [$1c]
              1529 1413  ld   $13,y       ;NEXT
              152a e00e  jmp  y,$0e
              152b 00fc  ld   $fc
forth.core.SWAP:
              152c 80f0  adda $f0         ;Copy top 4 bytes of stack to tmp
              152d 111c  ld   [$1c],x
              152e 0500  ld   [x]
              152f c224  st   [$24]
              1530 011c  ld   [$1c]
              1531 8001  adda $01
              1532 1200  ld   ac,x
              1533 0500  ld   [x]
              1534 c225  st   [$25]
              1535 011c  ld   [$1c]
              1536 8002  adda $02
              1537 1200  ld   ac,x
              1538 0500  ld   [x]
              1539 c226  st   [$26]
              153a 011c  ld   [$1c]
              153b 8003  adda $03
              153c 1200  ld   ac,x
              153d 0500  ld   [x]
              153e c227  st   [$27]
              153f 1400  ld   $00,y       ;Copy back to stack in order
              1540 111c  ld   [$1c],x
              1541 0126  ld   [$26]
              1542 de00  st   [y,x++]
              1543 0127  ld   [$27]
              1544 de00  st   [y,x++]
              1545 0124  ld   [$24]
              1546 de00  st   [y,x++]
              1547 0125  ld   [$25]
              1548 de00  st   [y,x++]
              1549 1413  ld   $13,y       ;NEXT
              154a e00f  jmp  y,$0f
              154b 00f0  ld   $f0
forth.core.DUP:
              154c 80f6  adda $f6
              154d 111c  ld   [$1c],x
              154e 0500  ld   [x]
              154f c224  st   [$24]
              1550 011c  ld   [$1c]
              1551 9001  adda $01,x
              1552 0500  ld   [x]
              1553 c225  st   [$25]
              1554 1400  ld   $00,y
              1555 011c  ld   [$1c]
              1556 a002  suba $02
              1557 d21c  st   [$1c],x
              1558 0124  ld   [$24]
              1559 de00  st   [y,x++]
              155a 0125  ld   [$25]
              155b ce00  st   [y,x]
              155c 1413  ld   $13,y       ;NEXT
              155d e00e  jmp  y,$0e
              155e 00f6  ld   $f6
forth.core.OVER:
              155f 80f6  adda $f6
              1560 011c  ld   [$1c]
              1561 9002  adda $02,x
              1562 0500  ld   [x]
              1563 c224  st   [$24]
              1564 011c  ld   [$1c]
              1565 9003  adda $03,x
              1566 0500  ld   [x]
              1567 c225  st   [$25]
              1568 1400  ld   $00,y
              1569 011c  ld   [$1c]
              156a a002  suba $02
              156b d21c  st   [$1c],x
              156c 0124  ld   [$24]
              156d de00  st   [y,x++]
              156e 0125  ld   [$25]
              156f ce00  st   [y,x]
              1570 1413  ld   $13,y       ;NEXT
              1571 e00f  jmp  y,$0f
              1572 00f6  ld   $f6
forth.core.ROT:
              1573 80ef  adda $ef
              1574 1400  ld   $00,y
              1575 011c  ld   [$1c]
              1576 9004  adda $04,x
              1577 0500  ld   [x]
              1578 c224  st   [$24]
              1579 011c  ld   [$1c]
              157a 9005  adda $05,x
              157b 0500  ld   [x]
              157c c225  st   [$25]
              157d 111c  ld   [$1c],x
              157e 0500  ld   [x]
              157f c226  st   [$26]
              1580 0124  ld   [$24]
              1581 de00  st   [y,x++]
              1582 0500  ld   [x]
              1583 c224  st   [$24]
              1584 0125  ld   [$25]
              1585 de00  st   [y,x++]
              1586 0500  ld   [x]
              1587 c225  st   [$25]
              1588 0126  ld   [$26]
              1589 de00  st   [y,x++]
              158a 0500  ld   [x]
              158b c226  st   [$26]
              158c 0124  ld   [$24]
              158d de00  st   [y,x++]
              158e 0125  ld   [$25]
              158f de00  st   [y,x++]
              1590 0126  ld   [$26]
              1591 de00  st   [y,x++]
              1592 1413  ld   $13,y       ;NEXT
              1593 e00f  jmp  y,$0f
              1594 00ef  ld   $ef
forth.core.2SWAP:
              1595 80ea  adda $ea
              1596 1400  ld   $00,y
              1597 011c  ld   [$1c]
              1598 9004  adda $04,x
              1599 0500  ld   [x]
              159a de00  st   [y,x++]
              159b c224  st   [$24]
              159c 0500  ld   [x]
              159d de00  st   [y,x++]
              159e c225  st   [$25]
              159f 0500  ld   [x]
              15a0 de00  st   [y,x++]
              15a1 c226  st   [$26]
              15a2 0500  ld   [x]
              15a3 c227  st   [$27]
              15a4 111c  ld   [$1c],x
              15a5 0500  ld   [x]
              15a6 c228  st   [$28]
              15a7 0124  ld   [$24]
              15a8 de00  st   [y,x++]
              15a9 0500  ld   [x]
              15aa c224  st   [$24]
              15ab 0125  ld   [$25]
              15ac de00  st   [y,x++]
              15ad 0500  ld   [x]
              15ae c225  st   [$25]
              15af 0126  ld   [$26]
              15b0 de00  st   [y,x++]
              15b1 0500  ld   [x]
              15b2 c226  st   [$26]
              15b3 0127  ld   [$27]
              15b4 de00  st   [y,x++]
              15b5 0128  ld   [$28]
              15b6 de00  st   [y,x++]
              15b7 0124  ld   [$24]
              15b8 de00  st   [y,x++]
              15b9 0125  ld   [$25]
              15ba de00  st   [y,x++]
              15bb 0126  ld   [$26]
              15bc de00  st   [y,x++]
              15bd 1413  ld   $13,y       ;NEXT
              15be e00e  jmp  y,$0e
              15bf 00ea  ld   $ea
forth.core.AND:
              15c0 80f1  adda $f1
              15c1 fcc9  bra  .copy-first-value
              15c2 00de  ld   $de
forth.core.OR:
              15c3 80f1  adda $f1
              15c4 fcc9  bra  .copy-first-value
              15c5 00e0  ld   $e0
forth.core.XOR:
              15c6 80f1  adda $f1
              15c7 fcc9  bra  .copy-first-value
              15c8 00e2  ld   $e2
.copy-first-value:
              15c9 c224  st   [$24]
              15ca 8001  adda $01
              15cb c225  st   [$25]
              15cc 1400  ld   $00,y
              15cd 111c  ld   [$1c],x
              15ce 0002  ld   $02
              15cf 811c  adda [$1c]
              15d0 c21c  st   [$1c]
              15d1 0d00  ld   [y,x]
              15d2 c226  st   [$26]
              15d3 de00  st   [y,x++]
              15d4 0d00  ld   [y,x]
              15d5 c227  st   [$27]
              15d6 de00  st   [y,x++]
              15d7 0d00  ld   [y,x]
              15d8 fd24  bra  [$24]
              15d9 fcda  bra  $15da
              15da de00  st   [y,x++]
              15db 0d00  ld   [y,x]
              15dc fd25  bra  [$25]
              15dd fce4  bra  .bitwise-done
.and:         15de 2126  anda [$26]
              15df 2127  anda [$27]
.or:          15e0 4126  ora  [$26]
              15e1 4127  ora  [$27]
.xor:         15e2 6126  xora [$26]
              15e3 6127  xora [$27]
.bitwise-done:
              15e4 ce00  st   [y,x]
              15e5 1413  ld   $13,y       ;NEXT
              15e6 e00f  jmp  y,$0f
              15e7 00f1  ld   $f1
forth.core.INVERT:
              15e8 80fa  adda $fa
              15e9 1400  ld   $00,y
              15ea 111c  ld   [$1c],x
              15eb 0d00  ld   [y,x]
              15ec 60ff  xora $ff
              15ed de00  st   [y,x++]
              15ee 0d00  ld   [y,x]
              15ef 60ff  xora $ff
              15f0 ce00  st   [y,x]
              15f1 1413  ld   $13,y       ;NEXT
              15f2 e00f  jmp  y,$0f
              15f3 00fa  ld   $fa
forth.NOP:    15f4 80f3  adda $f3
              15f5 1413  ld   $13,y
              15f6 e032  jmp  y,$32
              15f7 147f  ld   $7f,y
              15f8 80f6  adda $f6
              15f9 1413  ld   $13,y
              15fa e023  jmp  y,$23
              15fb 147f  ld   $7f,y
              15fc dc52  st   $52,[y,x++]
              15fd e07a  jmp  y,$7a
              15fe dc14  st   $14,[y,x++]
              15ff 0200  nop
forth.restart-or-quit:
              1600 fd30  bra  [$30]
              1601 f802  ble  .quit
.quit:        1602 1413  ld   $13,y       ;jmp forth.exit.from-failed-test
              1603 e01c  jmp  y,$1c
forth.core.2DUP:
              1604 80f1  adda $f1
              1605 1400  ld   $00,y
              1606 111c  ld   [$1c],x
              1607 0d00  ld   [y,x]
              1608 c224  st   [$24]
              1609 de00  st   [y,x++]
              160a 0d00  ld   [y,x]
              160b c225  st   [$25]
              160c de00  st   [y,x++]
              160d 0d00  ld   [y,x]
              160e c226  st   [$26]
              160f de00  st   [y,x++]
              1610 0d00  ld   [y,x]
              1611 c227  st   [$27]
              1612 de00  st   [y,x++]
              1613 011c  ld   [$1c]
              1614 a004  suba $04
              1615 d21c  st   [$1c],x
              1616 0124  ld   [$24]
              1617 de00  st   [y,x++]
              1618 0125  ld   [$25]
              1619 de00  st   [y,x++]
              161a 0126  ld   [$26]
              161b de00  st   [y,x++]
              161c 0127  ld   [$27]
              161d de00  st   [y,x++]
              161e 1413  ld   $13,y       ;NEXT
              161f e00e  jmp  y,$0e
              1620 00f1  ld   $f1
forth.core.+:
forth.core.CHAR+:
              1621 80f2  adda $f2
              1622 1400  ld   $00,y       ;Load and move data stack pointer
              1623 111c  ld   [$1c],x
              1624 011c  ld   [$1c]
              1625 8002  adda $02
              1626 c21c  st   [$1c]
              1627 0d00  ld   [y,x]       ;Copy TOS to zero-page
              1628 c224  st   [$24]
              1629 de00  st   [y,x++]
              162a 0d00  ld   [y,x]
              162b c225  st   [$25]
              162c de00  st   [y,x++]
              162d 0d00  ld   [y,x]       ;Add low bytes
              162e 8124  adda [$24]
              162f de00  st   [y,x++]
              1630 e834  blt  .add.result-has-1-in-bit-7
              1631 a124  suba [$24]
              1632 fc36  bra  .add.carry-bit-in-msb
              1633 4124  ora  [$24]
.add.result-has-1-in-bit-7:
              1634 fc36  bra  .add.carry-bit-in-msb
              1635 2124  anda [$24]
.add.carry-bit-in-msb:
              1636 e83a  blt  .add.carry
              1637 0d00  ld   [y,x]
              1638 fc3c  bra  .add.finish
              1639 8125  adda [$25]
.add.carry:   163a 8001  adda $01
              163b 8125  adda [$25]
.add.finish:  163c ce00  st   [y,x]
              163d 1413  ld   $13,y       ;NEXT
              163e e00e  jmp  y,$0e
              163f 00f2  ld   $f2
forth.core.2*:
forth.core.CELLS:
              1640 80f7  adda $f7
              1641 1400  ld   $00,y
              1642 111c  ld   [$1c],x     ;Load low-byte
              1643 0500  ld   [x]
              1644 3080  anda $80,x       ;Calculate bit to shift in to the high-byte
              1645 0500  ld   [x]
              1646 c224  st   [$24]
              1647 111c  ld   [$1c],x     ;Reload and left-shift
              1648 0500  ld   [x]
              1649 8200  adda ac
              164a de00  st   [y,x++]
              164b 0d00  ld   [y,x]       ;Load high byte and left-shift
              164c 8200  adda ac
              164d 8124  adda [$24]
              164e ce00  st   [y,x]
              164f 1413  ld   $13,y       ;NEXT
              1650 e00f  jmp  y,$0f
              1651 00f7  ld   $f7
forth.core.@: 1652 80f4  adda $f4
              1653 1400  ld   $00,y
              1654 111c  ld   [$1c],x
              1655 0d00  ld   [y,x]
              1656 c224  st   [$24]
              1657 de00  st   [y,x++]
              1658 0d00  ld   [y,x]
              1659 1600  ld   ac,y
              165a 1124  ld   [$24],x
              165b 0d00  ld   [y,x]
              165c c224  st   [$24]
              165d de00  st   [y,x++]
              165e 0d00  ld   [y,x]
              165f c225  st   [$25]
              1660 1400  ld   $00,y
              1661 111c  ld   [$1c],x
              1662 0124  ld   [$24]
              1663 de00  st   [y,x++]
              1664 0125  ld   [$25]
              1665 ce00  st   [y,x]
              1666 1413  ld   $13,y       ;NEXT
              1667 e00e  jmp  y,$0e
              1668 00f4  ld   $f4
forth.core.!: 1669 80f3  adda $f3
              166a 1400  ld   $00,y       ;Remove 4 bytes from stack (SP moves by 4)
              166b 011c  ld   [$1c]
              166c 1200  ld   ac,x
              166d 8004  adda $04
              166e c21c  st   [$1c]       ;Copy stack data and low part of address to temporary
              166f 0d00  ld   [y,x]
              1670 c224  st   [$24]
              1671 de00  st   [y,x++]
              1672 0d00  ld   [y,x]
              1673 c225  st   [$25]
              1674 de00  st   [y,x++]
              1675 0d00  ld   [y,x]
              1676 c226  st   [$26]
              1677 de00  st   [y,x++]
              1678 0d00  ld   [y,x]
              1679 c227  st   [$27]       ;Load address
              167a 1124  ld   [$24],x
              167b 1525  ld   [$25],y     ;Write data
              167c 0126  ld   [$26]
              167d de00  st   [y,x++]
              167e 0127  ld   [$27]
              167f ce00  st   [y,x]
              1680 1413  ld   $13,y       ;NEXT
              1681 e00f  jmp  y,$0f
              1682 00f3  ld   $f3
forth.core.ext.NIP:
              1683 80f6  adda $f6
              1684 1413  ld   $13,y
              1685 e023  jmp  y,$23
              1686 147f  ld   $7f,y
              1687 dc2c  st   $2c,[y,x++] ;-> forth.core.SWAP
              1688 e07a  jmp  y,$7a
              1689 dc15  st   $15,[y,x++]
              168a dc1e  st   $1e,[y,x++] ;-> forth.core.DROP
              168b e07a  jmp  y,$7a
              168c dc15  st   $15,[y,x++]
              168d dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              168e e07a  jmp  y,$7a
              168f dc14  st   $14,[y,x++]
forth.core.ext.0<>:
              1690 80f6  adda $f6
              1691 1413  ld   $13,y
              1692 e023  jmp  y,$23
              1693 147f  ld   $7f,y
              1694 dcbd  st   $bd,[y,x++] ;-> forth.core.0=
              1695 e07a  jmp  y,$7a
              1696 dc14  st   $14,[y,x++]
              1697 dcbd  st   $bd,[y,x++] ;-> forth.core.0=
              1698 e07a  jmp  y,$7a
              1699 dc14  st   $14,[y,x++]
              169a dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              169b e07a  jmp  y,$7a
              169c dc14  st   $14,[y,x++]
forth.core.?DUP:
              169d 80f6  adda $f6
              169e 1413  ld   $13,y
              169f e023  jmp  y,$23
              16a0 147f  ld   $7f,y
              16a1 dc4c  st   $4c,[y,x++] ;-> forth.core.DUP
              16a2 e07a  jmp  y,$7a
              16a3 dc15  st   $15,[y,x++]
              16a4 dc04  st   $04,[y,x++] ;-> forth.internal.rom-mode.?BRANCH
              16a5 e07a  jmp  y,$7a
              16a6 dc15  st   $15,[y,x++]
              16a7 fcac  bra  .thread_label#0
              16a8 0008  ld   $08
              16a9 dc4c  st   $4c,[y,x++] ;-> forth.core.DUP
              16aa e07a  jmp  y,$7a
              16ab dc15  st   $15,[y,x++]
.thread_label#0:
              16ac dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              16ad e07a  jmp  y,$7a
              16ae dc14  st   $14,[y,x++]
forth.core.CELL+:
              16af 80f6  adda $f6
              16b0 1413  ld   $13,y
              16b1 e023  jmp  y,$23
              16b2 147f  ld   $7f,y
              16b3 dcdf  st   $df,[y,x++] ;-> forth.internal.C-LIT
              16b4 e07a  jmp  y,$7a
              16b5 dc14  st   $14,[y,x++]
              16b6 dc02  st   $02,[y,x++] ;2
              16b7 1030  ld   $30,x       ;X <- W
              16b8 dc21  st   $21,[y,x++] ;-> forth.core.+
              16b9 e07a  jmp  y,$7a
              16ba dc16  st   $16,[y,x++]
              16bb dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              16bc e07a  jmp  y,$7a
              16bd dc14  st   $14,[y,x++]
forth.core.NEGATE:
              16be 80f6  adda $f6
              16bf 1413  ld   $13,y
              16c0 e023  jmp  y,$23
              16c1 147f  ld   $7f,y
              16c2 dce8  st   $e8,[y,x++] ;-> forth.core.INVERT
              16c3 e07a  jmp  y,$7a
              16c4 dc15  st   $15,[y,x++]
              16c5 dc9c  st   $9c,[y,x++] ;-> forth.core.1+
              16c6 e07a  jmp  y,$7a
              16c7 dc14  st   $14,[y,x++]
              16c8 dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              16c9 e07a  jmp  y,$7a
              16ca dc14  st   $14,[y,x++]
forth.core.-: 16cb 80f6  adda $f6
              16cc 1413  ld   $13,y
              16cd e023  jmp  y,$23
              16ce 147f  ld   $7f,y
              16cf dcbe  st   $be,[y,x++] ;-> forth.core.NEGATE
              16d0 e07a  jmp  y,$7a
              16d1 dc16  st   $16,[y,x++]
              16d2 dc21  st   $21,[y,x++] ;-> forth.core.+
              16d3 e07a  jmp  y,$7a
              16d4 dc16  st   $16,[y,x++]
              16d5 dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              16d6 e07a  jmp  y,$7a
              16d7 dc14  st   $14,[y,x++]
forth.core.=: 16d8 80f6  adda $f6
              16d9 1413  ld   $13,y
              16da e023  jmp  y,$23
              16db 147f  ld   $7f,y
              16dc dcc6  st   $c6,[y,x++] ;-> forth.core.XOR
              16dd e07a  jmp  y,$7a
              16de dc15  st   $15,[y,x++]
              16df dcbd  st   $bd,[y,x++] ;-> forth.core.0=
              16e0 e07a  jmp  y,$7a
              16e1 dc14  st   $14,[y,x++]
              16e2 dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              16e3 e07a  jmp  y,$7a
              16e4 dc14  st   $14,[y,x++]
forth.core.0<:
              16e5 80f6  adda $f6
              16e6 1413  ld   $13,y
              16e7 e023  jmp  y,$23
              16e8 147f  ld   $7f,y
              16e9 dcd3  st   $d3,[y,x++] ;-> forth.internal.LIT
              16ea e07a  jmp  y,$7a
              16eb dc14  st   $14,[y,x++]
              16ec dc00  st   $00,[y,x++] ;32768
              16ed dc80  st   $80,[y,x++]
              16ee 1030  ld   $30,x       ;X <- W
              16ef dcc0  st   $c0,[y,x++] ;-> forth.core.AND
              16f0 e07a  jmp  y,$7a
              16f1 dc15  st   $15,[y,x++]
              16f2 dc90  st   $90,[y,x++] ;-> forth.core.ext.0<>
              16f3 e07a  jmp  y,$7a
              16f4 dc16  st   $16,[y,x++]
              16f5 dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              16f6 e07a  jmp  y,$7a
              16f7 dc14  st   $14,[y,x++]
              16f8 0200  nop
              16f9 0200  nop
              16fa 0200  nop
              * 8 times
forth.restart-or-quit:
              1700 fd30  bra  [$30]
              1701 f802  ble  .quit
.quit:        1702 1413  ld   $13,y       ;jmp forth.exit.from-failed-test
              1703 e01c  jmp  y,$1c
forth.core.ext.0>:
              1704 80f6  adda $f6
              1705 1413  ld   $13,y
              1706 e023  jmp  y,$23
              1707 147f  ld   $7f,y
              1708 dcdf  st   $df,[y,x++] ;-> forth.internal.C-LIT
              1709 e07a  jmp  y,$7a
              170a dc14  st   $14,[y,x++]
              170b dc00  st   $00,[y,x++] ;0
              170c 1030  ld   $30,x       ;X <- W
              170d dc2c  st   $2c,[y,x++] ;-> forth.core.SWAP
              170e e07a  jmp  y,$7a
              170f dc15  st   $15,[y,x++]
              1710 dccb  st   $cb,[y,x++] ;-> forth.core.-
              1711 e07a  jmp  y,$7a
              1712 dc16  st   $16,[y,x++]
              1713 dce5  st   $e5,[y,x++] ;-> forth.core.0<
              1714 e07a  jmp  y,$7a
              1715 dc16  st   $16,[y,x++]
              1716 dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              1717 e07a  jmp  y,$7a
              1718 dc14  st   $14,[y,x++]
forth.core.U<:
              1719 80f6  adda $f6
              171a 1413  ld   $13,y
              171b e023  jmp  y,$23
              171c 147f  ld   $7f,y
              171d dc04  st   $04,[y,x++] ;-> forth.core.2DUP
              171e e07a  jmp  y,$7a
              171f dc16  st   $16,[y,x++]
              1720 dcc6  st   $c6,[y,x++] ;-> forth.core.XOR
              1721 e07a  jmp  y,$7a
              1722 dc15  st   $15,[y,x++]
              1723 dce5  st   $e5,[y,x++] ;-> forth.core.0<
              1724 e07a  jmp  y,$7a
              1725 dc16  st   $16,[y,x++]
              1726 dc04  st   $04,[y,x++] ;-> forth.internal.rom-mode.?BRANCH
              1727 e07a  jmp  y,$7a
              1728 dc15  st   $15,[y,x++]
              1729 fc37  bra  .thread_label#1
              172a 0011  ld   $11
              172b dc2c  st   $2c,[y,x++] ;-> forth.core.SWAP
              172c e07a  jmp  y,$7a
              172d dc15  st   $15,[y,x++]
              172e dc1e  st   $1e,[y,x++] ;-> forth.core.DROP
              172f e07a  jmp  y,$7a
              1730 dc15  st   $15,[y,x++]
              1731 dce5  st   $e5,[y,x++] ;-> forth.core.0<
              1732 e07a  jmp  y,$7a
              1733 dc16  st   $16,[y,x++]
              1734 dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              1735 e07a  jmp  y,$7a
              1736 dc14  st   $14,[y,x++]
.thread_label#1:
              1737 dccb  st   $cb,[y,x++] ;-> forth.core.-
              1738 e07a  jmp  y,$7a
              1739 dc16  st   $16,[y,x++]
              173a dce5  st   $e5,[y,x++] ;-> forth.core.0<
              173b e07a  jmp  y,$7a
              173c dc16  st   $16,[y,x++]
              173d dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              173e e07a  jmp  y,$7a
              173f dc14  st   $14,[y,x++]
forth.core.<: 1740 80f6  adda $f6
              1741 1413  ld   $13,y
              1742 e023  jmp  y,$23
              1743 147f  ld   $7f,y
              1744 dc04  st   $04,[y,x++] ;-> forth.core.2DUP
              1745 e07a  jmp  y,$7a
              1746 dc16  st   $16,[y,x++]
              1747 dcc6  st   $c6,[y,x++] ;-> forth.core.XOR
              1748 e07a  jmp  y,$7a
              1749 dc15  st   $15,[y,x++]
              174a dce5  st   $e5,[y,x++] ;-> forth.core.0<
              174b e07a  jmp  y,$7a
              174c dc16  st   $16,[y,x++]
              174d dc04  st   $04,[y,x++] ;-> forth.internal.rom-mode.?BRANCH
              174e e07a  jmp  y,$7a
              174f dc15  st   $15,[y,x++]
              1750 fc5b  bra  .thread_label#2
              1751 000e  ld   $0e
              1752 dc1e  st   $1e,[y,x++] ;-> forth.core.DROP
              1753 e07a  jmp  y,$7a
              1754 dc15  st   $15,[y,x++]
              1755 dce5  st   $e5,[y,x++] ;-> forth.core.0<
              1756 e07a  jmp  y,$7a
              1757 dc16  st   $16,[y,x++]
              1758 dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              1759 e07a  jmp  y,$7a
              175a dc14  st   $14,[y,x++]
.thread_label#2:
              175b dccb  st   $cb,[y,x++] ;-> forth.core.-
              175c e07a  jmp  y,$7a
              175d dc16  st   $16,[y,x++]
              175e dce5  st   $e5,[y,x++] ;-> forth.core.0<
              175f e07a  jmp  y,$7a
              1760 dc16  st   $16,[y,x++]
              1761 dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              1762 e07a  jmp  y,$7a
              1763 dc14  st   $14,[y,x++]
forth.core.>: 1764 80f6  adda $f6
              1765 1413  ld   $13,y
              1766 e023  jmp  y,$23
              1767 147f  ld   $7f,y
              1768 dc2c  st   $2c,[y,x++] ;-> forth.core.SWAP
              1769 e07a  jmp  y,$7a
              176a dc15  st   $15,[y,x++]
              176b dc40  st   $40,[y,x++] ;-> forth.core.<
              176c e07a  jmp  y,$7a
              176d dc17  st   $17,[y,x++]
              176e dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              176f e07a  jmp  y,$7a
              1770 dc14  st   $14,[y,x++]
forth.core.ext.U>:
              1771 80f6  adda $f6
              1772 1413  ld   $13,y
              1773 e023  jmp  y,$23
              1774 147f  ld   $7f,y
              1775 dc2c  st   $2c,[y,x++] ;-> forth.core.SWAP
              1776 e07a  jmp  y,$7a
              1777 dc15  st   $15,[y,x++]
              1778 dc19  st   $19,[y,x++] ;-> forth.core.U<
              1779 e07a  jmp  y,$7a
              177a dc17  st   $17,[y,x++]
              177b dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              177c e07a  jmp  y,$7a
              177d dc14  st   $14,[y,x++]
forth.core.ABS:
              177e 80f6  adda $f6
              177f 1413  ld   $13,y
              1780 e023  jmp  y,$23
              1781 147f  ld   $7f,y
              1782 dc4c  st   $4c,[y,x++] ;-> forth.core.DUP
              1783 e07a  jmp  y,$7a
              1784 dc15  st   $15,[y,x++]
              1785 dce5  st   $e5,[y,x++] ;-> forth.core.0<
              1786 e07a  jmp  y,$7a
              1787 dc16  st   $16,[y,x++]
              1788 dc04  st   $04,[y,x++] ;-> forth.internal.rom-mode.?BRANCH
              1789 e07a  jmp  y,$7a
              178a dc15  st   $15,[y,x++]
              178b fc90  bra  .thread_label#3
              178c 0008  ld   $08
              178d dcbe  st   $be,[y,x++] ;-> forth.core.NEGATE
              178e e07a  jmp  y,$7a
              178f dc16  st   $16,[y,x++]
.thread_label#3:
              1790 dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              1791 e07a  jmp  y,$7a
              1792 dc14  st   $14,[y,x++]
forth.core.ALIGNED:
              1793 80f6  adda $f6
              1794 1413  ld   $13,y
              1795 e023  jmp  y,$23
              1796 147f  ld   $7f,y
              1797 dc4c  st   $4c,[y,x++] ;-> forth.core.DUP
              1798 e07a  jmp  y,$7a
              1799 dc15  st   $15,[y,x++]
              179a dcdf  st   $df,[y,x++] ;-> forth.internal.C-LIT
              179b e07a  jmp  y,$7a
              179c dc14  st   $14,[y,x++]
              179d dc01  st   $01,[y,x++] ;1
              179e 1030  ld   $30,x       ;X <- W
              179f dcc0  st   $c0,[y,x++] ;-> forth.core.AND
              17a0 e07a  jmp  y,$7a
              17a1 dc15  st   $15,[y,x++]
              17a2 dc04  st   $04,[y,x++] ;-> forth.internal.rom-mode.?BRANCH
              17a3 e07a  jmp  y,$7a
              17a4 dc15  st   $15,[y,x++]
              17a5 fcaa  bra  .thread_label#4
              17a6 0008  ld   $08
              17a7 dc9c  st   $9c,[y,x++] ;-> forth.core.1+
              17a8 e07a  jmp  y,$7a
              17a9 dc14  st   $14,[y,x++]
.thread_label#4:
              17aa dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              17ab e07a  jmp  y,$7a
              17ac dc14  st   $14,[y,x++]
forth.core.BL:
              17ad 80f6  adda $f6
              17ae 1413  ld   $13,y
              17af e023  jmp  y,$23
              17b0 147f  ld   $7f,y
              17b1 dcdf  st   $df,[y,x++] ;-> forth.internal.C-LIT
              17b2 e07a  jmp  y,$7a
              17b3 dc14  st   $14,[y,x++]
              17b4 dc20  st   $20,[y,x++] ;32
              17b5 1030  ld   $30,x       ;X <- W
              17b6 dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              17b7 e07a  jmp  y,$7a
              17b8 dc14  st   $14,[y,x++]
forth.core.ABS:
              17b9 80f6  adda $f6
              17ba 1413  ld   $13,y
              17bb e023  jmp  y,$23
              17bc 147f  ld   $7f,y
              17bd dc4c  st   $4c,[y,x++] ;-> forth.core.DUP
              17be e07a  jmp  y,$7a
              17bf dc15  st   $15,[y,x++]
              17c0 dce5  st   $e5,[y,x++] ;-> forth.core.0<
              17c1 e07a  jmp  y,$7a
              17c2 dc16  st   $16,[y,x++]
              17c3 dc04  st   $04,[y,x++] ;-> forth.internal.rom-mode.?BRANCH
              17c4 e07a  jmp  y,$7a
              17c5 dc15  st   $15,[y,x++]
              17c6 fccb  bra  .thread_label#5
              17c7 0008  ld   $08
              17c8 dcbe  st   $be,[y,x++] ;-> forth.core.NEGATE
              17c9 e07a  jmp  y,$7a
              17ca dc16  st   $16,[y,x++]
.thread_label#5:
              17cb dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              17cc e07a  jmp  y,$7a
              17cd dc14  st   $14,[y,x++]
              17ce dc52  st   $52,[y,x++] ;-> forth.core.EXIT
              17cf e07a  jmp  y,$7a
              17d0 dc14  st   $14,[y,x++]
                                          5361  # --- Page boundary ---
                                          5362  start_of_forth_word_space = pc()  # Variable used in unit tests to locate test data
              17d1 0200  nop              5363  align(0x100,0x100)
              17d2 0200  nop
              17d3 0200  nop
              * 46 times
              17ff 0200  nop              5363  align(0x100,0x100)
                                          5364
                                          5365  #-----------------------------------------------------------------------
                                          5366  #
                                          5367  #  End of core
                                          5368  #
                                          5369  #-----------------------------------------------------------------------
                                          5370  disableListing()
                                          ;+-----------------------------------+
                                          ;| MainMenu\MainMenu.gcl             |
                                          ;+-----------------------------------+
              1800 dc00  st   $00,[y,x++] ;'\x00'
              1801 dc00  st   $00,[y,x++] ;'\x00'
              1802 dc00  st   $00,[y,x++] ;'\x00'
              1803 dc00  st   $00,[y,x++] ;'\x00'
              1804 dc00  st   $00,[y,x++] ;'\x00'
              1805 dc00  st   $00,[y,x++] ;'\x00'
              1806 dc00  st   $00,[y,x++] ;'\x00'
              1807 dc00  st   $00,[y,x++] ;'\x00'
              1808 0000  ld   $00
              1809 c218  st   [$18]
              180a 0000  ld   $00
              180b 1428  ld   $28,y
              180c e0f2  jmp  y,$f2
              180d c219  st   [$19]
Main:         180e 0002  ld   $02         ;| RAM segment address (high byte first)
              180f 0000  ld   $00         ;|
              1810 00cc  ld   $cc         ;| Length (1..256)
              1811 00cd  ld   $cd         ;0200 DEF
              1812 004e  ld   $4e
              1813 0021  ld   $21         ;0202 LDW
              1814 0030  ld   $30         ;0202 'Char'
              1815 00e6  ld   $e6         ;0204 SUBI
              1816 0052  ld   $52
              1817 0035  ld   $35         ;0206 BCC
              1818 0053  ld   $53         ;0207 GE
              1819 0010  ld   $10
              181a 00e3  ld   $e3         ;0209 ADDI
              181b 0032  ld   $32
              181c 002b  ld   $2b         ;020b STW
              181d 0032  ld   $32         ;020b 'i'
              181e 0011  ld   $11         ;020d LDWI
              181f 0000  ld   $00
              1820 0007  ld   $07
              1821 0090  ld   $90         ;0210 BRA
              1822 0015  ld   $15
              1823 002b  ld   $2b         ;0212 STW
              1824 0032  ld   $32         ;0212 'i'
              1825 0011  ld   $11         ;0214 LDWI
              1826 0000  ld   $00
              1827 0008  ld   $08
              1828 002b  ld   $2b         ;0217 STW
              1829 0034  ld   $34         ;0217 'fontData'
              182a 0021  ld   $21         ;0219 LDW
              182b 0032  ld   $32         ;0219 'i'
              182c 00e9  ld   $e9         ;021b LSLW
              182d 00e9  ld   $e9         ;021c LSLW
              182e 0099  ld   $99         ;021d ADDW
              182f 0032  ld   $32         ;021d 'i'
              1830 0099  ld   $99         ;021f ADDW
              1831 0034  ld   $34         ;021f 'fontData'
              1832 002b  ld   $2b         ;0221 STW
              1833 0034  ld   $34         ;0221 'fontData'
              1834 0059  ld   $59         ;0223 LDI
              1835 0020  ld   $20
              1836 005e  ld   $5e         ;0225 ST
              1837 0024  ld   $24
              1838 0021  ld   $21         ;0227 LDW
              1839 0036  ld   $36         ;0227 'Color'
              183a 005e  ld   $5e         ;0229 ST
              183b 0025  ld   $25
              183c 0021  ld   $21         ;022b LDW
              183d 0038  ld   $38         ;022b 'Pos'
              183e 002b  ld   $2b         ;022d STW
              183f 0028  ld   $28
              1840 00e3  ld   $e3         ;022f ADDI
              1841 0006  ld   $06
              1842 002b  ld   $2b         ;0231 STW
              1843 0038  ld   $38         ;0231 'Pos'
              1844 0011  ld   $11         ;0233 LDWI
              1845 00e1  ld   $e1
              1846 0004  ld   $04
              1847 002b  ld   $2b         ;0236 STW
              1848 0022  ld   $22
              1849 0059  ld   $59         ;0238 LDI
              184a 00fb  ld   $fb
              184b 002b  ld   $2b         ;023a STW
              184c 0032  ld   $32         ;023a 'i'
              184d 0021  ld   $21         ;023c LDW
              184e 0034  ld   $34         ;023c 'fontData'
              184f 007f  ld   $7f         ;023e LUP
              1850 0000  ld   $00
              1851 0093  ld   $93         ;0240 INC
              1852 0034  ld   $34         ;0240 'fontData'
              1853 005e  ld   $5e         ;0242 ST
              1854 0026  ld   $26
              1855 00b4  ld   $b4         ;0244 SYS
              1856 00cb  ld   $cb
              1857 0093  ld   $93         ;0246 INC
              1858 0028  ld   $28
              1859 0093  ld   $93         ;0248 INC
              185a 0032  ld   $32         ;0248 'i'
              185b 0021  ld   $21         ;024a LDW
              185c 0032  ld   $32         ;024a 'i'
              185d 0035  ld   $35         ;024c BCC
              185e 0072  ld   $72         ;024d NE
              185f 003a  ld   $3a
              1860 00ff  ld   $ff         ;024f RET
              1861 002b  ld   $2b         ;0250 STW
              1862 003a  ld   $3a         ;0250 'PrintChar'
              1863 00cd  ld   $cd         ;0252 DEF
              1864 007b  ld   $7b
              1865 0075  ld   $75         ;0254 PUSH
              1866 002b  ld   $2b         ;0255 STW
              1867 003c  ld   $3c         ;0255 'Text'
              1868 0021  ld   $21         ;0257 LDW
              1869 003c  ld   $3c         ;0257 'Text'
              186a 00ad  ld   $ad         ;0259 PEEK
              186b 0035  ld   $35         ;025a BCC
              186c 003f  ld   $3f         ;025b EQ
              186d 0079  ld   $79
              186e 002b  ld   $2b         ;025d STW
              186f 0030  ld   $30         ;025d 'Char'
              1870 0093  ld   $93         ;025f INC
              1871 003c  ld   $3c         ;025f 'Text'
              1872 008c  ld   $8c         ;0261 XORI
              1873 0009  ld   $09
              1874 0035  ld   $35         ;0263 BCC
              1875 0072  ld   $72         ;0264 NE
              1876 006c  ld   $6c
              1877 0021  ld   $21         ;0266 LDW
              1878 0038  ld   $38         ;0266 'Pos'
              1879 00e3  ld   $e3         ;0268 ADDI
              187a 0012  ld   $12
              187b 002b  ld   $2b         ;026a STW
              187c 0038  ld   $38         ;026a 'Pos'
              187d 0090  ld   $90         ;026c BRA
              187e 0055  ld   $55
              187f 008c  ld   $8c         ;026e XORI
              1880 0003  ld   $03
              1881 0035  ld   $35         ;0270 BCC
              1882 0072  ld   $72         ;0271 NE
              1883 0075  ld   $75
              1884 00cf  ld   $cf         ;0273 CALL
              1885 003e  ld   $3e         ;0273 'Newline'
              1886 0090  ld   $90         ;0275 BRA
              1887 0055  ld   $55
              1888 00cf  ld   $cf         ;0277 CALL
              1889 003a  ld   $3a         ;0277 'PrintChar'
              188a 0090  ld   $90         ;0279 BRA
              188b 0055  ld   $55
              188c 0063  ld   $63         ;027b POP
              188d 00ff  ld   $ff         ;027c RET
              188e 002b  ld   $2b         ;027d STW
              188f 0040  ld   $40         ;027d 'PrintText'
              1890 00cd  ld   $cd         ;027f DEF
              1891 0095  ld   $95
              1892 0075  ld   $75         ;0281 PUSH
              1893 0059  ld   $59         ;0282 LDI
              1894 002d  ld   $2d
              1895 002b  ld   $2b         ;0284 STW
              1896 0030  ld   $30         ;0284 'Char'
              1897 0059  ld   $59         ;0286 LDI
              1898 001a  ld   $1a
              1899 002b  ld   $2b         ;0288 STW
              189a 0042  ld   $42         ;0288 'j'
              189b 00cf  ld   $cf         ;028a CALL
              189c 003a  ld   $3a         ;028a 'PrintChar'
              189d 0021  ld   $21         ;028c LDW
              189e 0042  ld   $42         ;028c 'j'
              189f 00e6  ld   $e6         ;028e SUBI
              18a0 0001  ld   $01
              18a1 0035  ld   $35         ;0290 BCC
              18a2 004d  ld   $4d         ;0291 GT
              18a3 0086  ld   $86
              18a4 00cf  ld   $cf         ;0293 CALL
              18a5 003e  ld   $3e         ;0293 'Newline'
              18a6 0063  ld   $63         ;0295 POP
              18a7 00ff  ld   $ff         ;0296 RET
              18a8 002b  ld   $2b         ;0297 STW
              18a9 0044  ld   $44         ;0297 'PrintDivider'
              18aa 00cd  ld   $cd         ;0299 DEF
              18ab 00c5  ld   $c5
              18ac 0075  ld   $75         ;029b PUSH
              18ad 0021  ld   $21         ;029c LDW
              18ae 0046  ld   $46         ;029c 'MenuItem'
              18af 00e6  ld   $e6         ;029e SUBI
              18b0 0006  ld   $06
              18b1 0035  ld   $35         ;02a0 BCC
              18b2 0053  ld   $53         ;02a1 GE
              18b3 00a6  ld   $a6
              18b4 0011  ld   $11         ;02a3 LDWI
              18b5 000b  ld   $0b
              18b6 0020  ld   $20
              18b7 0090  ld   $90         ;02a6 BRA
              18b8 00a9  ld   $a9
              18b9 0011  ld   $11         ;02a8 LDWI
              18ba 0059  ld   $59
              18bb 00f0  ld   $f0
              18bc 002b  ld   $2b         ;02ab STW
              18bd 0038  ld   $38         ;02ab 'Pos'
              18be 0021  ld   $21         ;02ad LDW
              18bf 0046  ld   $46         ;02ad 'MenuItem'
              18c0 002b  ld   $2b         ;02af STW
              18c1 0042  ld   $42         ;02af 'j'
              18c2 0011  ld   $11         ;02b1 LDWI
              18c3 0000  ld   $00
              18c4 0008  ld   $08
              18c5 0099  ld   $99         ;02b4 ADDW
              18c6 0038  ld   $38         ;02b4 'Pos'
              18c7 002b  ld   $2b         ;02b6 STW
              18c8 0038  ld   $38         ;02b6 'Pos'
              18c9 0021  ld   $21         ;02b8 LDW
              18ca 0042  ld   $42         ;02b8 'j'
              18cb 00e6  ld   $e6         ;02ba SUBI
              18cc 0001  ld   $01
              18cd 0035  ld   $35         ;02bc BCC
              18ce 0053  ld   $53         ;02bd GE
              18cf 00ad  ld   $ad
              18d0 0059  ld   $59         ;02bf LDI
              18d1 0082  ld   $82
              18d2 002b  ld   $2b         ;02c1 STW
              18d3 0030  ld   $30         ;02c1 'Char'
              18d4 00cf  ld   $cf         ;02c3 CALL
              18d5 003a  ld   $3a         ;02c3 'PrintChar'
              18d6 0063  ld   $63         ;02c5 POP
              18d7 00ff  ld   $ff         ;02c6 RET
              18d8 002b  ld   $2b         ;02c7 STW
              18d9 0048  ld   $48         ;02c7 'PrintArrow'
              18da 0093  ld   $93         ;02c9 INC
              18db 001b  ld   $1b         ;02c9 '_vLR'+1
              18dc 00ff  ld   $ff         ;02cb RET
              18dd 0003  ld   $03         ;| RAM segment address (high byte first)
              18de 0000  ld   $00         ;|
              18df 00f5  ld   $f5         ;| Length (1..256)
              18e0 00cd  ld   $cd         ;0300 DEF
              18e1 00ee  ld   $ee
              18e2 0075  ld   $75         ;0302 PUSH
              18e3 001a  ld   $1a         ;0303 LD
              18e4 000e  ld   $0e
              18e5 002b  ld   $2b         ;0305 STW
              18e6 0036  ld   $36         ;0305 'Color'
              18e7 00cf  ld   $cf         ;0307 CALL
              18e8 0048  ld   $48         ;0307 'PrintArrow'
              18e9 001a  ld   $1a         ;0309 LD
              18ea 0011  ld   $11
              18eb 008c  ld   $8c         ;030b XORI
              18ec 00fe  ld   $fe
              18ed 0035  ld   $35         ;030d BCC
              18ee 0072  ld   $72         ;030e NE
              18ef 001f  ld   $1f
              18f0 00cf  ld   $cf         ;0310 CALL
              18f1 004a  ld   $4a         ;0310 'WipeOutArrow'
              18f2 0021  ld   $21         ;0312 LDW
              18f3 0046  ld   $46         ;0312 'MenuItem'
              18f4 00e6  ld   $e6         ;0314 SUBI
              18f5 0005  ld   $05
              18f6 0035  ld   $35         ;0316 BCC
              18f7 004d  ld   $4d         ;0317 GT
              18f8 001b  ld   $1b
              18f9 00e3  ld   $e3         ;0319 ADDI
              18fa 000b  ld   $0b
              18fb fe00  bra  ac          ;+-----------------------------------+
              18fc fcfd  bra  $18fd       ;|                                   |
              18fd 1404  ld   $04,y       ;| Trampoline for page $1800 lookups |
              18fe e068  jmp  y,$68       ;|                                   |
              18ff c218  st   [$18]       ;+-----------------------------------+
              1900 002b  ld   $2b         ;031b STW
              1901 0046  ld   $46         ;031b 'MenuItem'
              1902 0059  ld   $59         ;031d LDI
              1903 00ef  ld   $ef
              1904 005e  ld   $5e         ;031f ST
              1905 0011  ld   $11
              1906 001a  ld   $1a         ;0321 LD
              1907 0011  ld   $11
              1908 008c  ld   $8c         ;0323 XORI
              1909 00fd  ld   $fd
              190a 0035  ld   $35         ;0325 BCC
              190b 0072  ld   $72         ;0326 NE
              190c 0035  ld   $35
              190d 00cf  ld   $cf         ;0328 CALL
              190e 004a  ld   $4a         ;0328 'WipeOutArrow'
              190f 0021  ld   $21         ;032a LDW
              1910 0046  ld   $46         ;032a 'MenuItem'
              1911 00e6  ld   $e6         ;032c SUBI
              1912 0006  ld   $06
              1913 0035  ld   $35         ;032e BCC
              1914 0050  ld   $50         ;032f LT
              1915 0031  ld   $31
              1916 002b  ld   $2b         ;0331 STW
              1917 0046  ld   $46         ;0331 'MenuItem'
              1918 0059  ld   $59         ;0333 LDI
              1919 00ef  ld   $ef
              191a 005e  ld   $5e         ;0335 ST
              191b 0011  ld   $11
              191c 001a  ld   $1a         ;0337 LD
              191d 0011  ld   $11
              191e 008c  ld   $8c         ;0339 XORI
              191f 00fb  ld   $fb
              1920 0035  ld   $35         ;033b BCC
              1921 0072  ld   $72         ;033c NE
              1922 0050  ld   $50
              1923 00cf  ld   $cf         ;033e CALL
              1924 004a  ld   $4a         ;033e 'WipeOutArrow'
              1925 0021  ld   $21         ;0340 LDW
              1926 0046  ld   $46         ;0340 'MenuItem'
              1927 00e6  ld   $e6         ;0342 SUBI
              1928 0005  ld   $05
              1929 0035  ld   $35         ;0344 BCC
              192a 003f  ld   $3f         ;0345 EQ
              192b 004c  ld   $4c
              192c 00e6  ld   $e6         ;0347 SUBI
              192d 0006  ld   $06
              192e 0035  ld   $35         ;0349 BCC
              192f 003f  ld   $3f         ;034a EQ
              1930 004c  ld   $4c
              1931 0093  ld   $93         ;034c INC
              1932 0046  ld   $46         ;034c 'MenuItem'
              1933 0059  ld   $59         ;034e LDI
              1934 00ef  ld   $ef
              1935 005e  ld   $5e         ;0350 ST
              1936 0011  ld   $11
              1937 001a  ld   $1a         ;0352 LD
              1938 0011  ld   $11
              1939 008c  ld   $8c         ;0354 XORI
              193a 00f7  ld   $f7
              193b 0035  ld   $35         ;0356 BCC
              193c 0072  ld   $72         ;0357 NE
              193d 006d  ld   $6d
              193e 00cf  ld   $cf         ;0359 CALL
              193f 004a  ld   $4a         ;0359 'WipeOutArrow'
              1940 0021  ld   $21         ;035b LDW
              1941 0046  ld   $46         ;035b 'MenuItem'
              1942 0035  ld   $35         ;035d BCC
              1943 003f  ld   $3f         ;035e EQ
              1944 0069  ld   $69
              1945 00e6  ld   $e6         ;0360 SUBI
              1946 0006  ld   $06
              1947 0035  ld   $35         ;0362 BCC
              1948 003f  ld   $3f         ;0363 EQ
              1949 0069  ld   $69
              194a 0021  ld   $21         ;0365 LDW
              194b 0046  ld   $46         ;0365 'MenuItem'
              194c 00e6  ld   $e6         ;0367 SUBI
              194d 0001  ld   $01
              194e 002b  ld   $2b         ;0369 STW
              194f 0046  ld   $46         ;0369 'MenuItem'
              1950 0059  ld   $59         ;036b LDI
              1951 00ef  ld   $ef
              1952 005e  ld   $5e         ;036d ST
              1953 0011  ld   $11
              1954 001a  ld   $1a         ;036f LD
              1955 0011  ld   $11
              1956 0082  ld   $82         ;0371 ANDI
              1957 0080  ld   $80
              1958 0035  ld   $35         ;0373 BCC
              1959 0072  ld   $72         ;0374 NE
              195a 0001  ld   $01
              195b 0059  ld   $59         ;0376 LDI
              195c 002a  ld   $2a
              195d 002b  ld   $2b         ;0378 STW
              195e 0036  ld   $36         ;0378 'Color'
              195f 00cf  ld   $cf         ;037a CALL
              1960 0048  ld   $48         ;037a 'PrintArrow'
              1961 0021  ld   $21         ;037c LDW
              1962 0046  ld   $46         ;037c 'MenuItem'
              1963 0035  ld   $35         ;037e BCC
              1964 0072  ld   $72         ;037f NE
              1965 0084  ld   $84
              1966 0011  ld   $11         ;0381 LDWI
              1967 0015  ld   $15
              1968 0026  ld   $26
              1969 0090  ld   $90         ;0384 BRA
              196a 00ea  ld   $ea
              196b 00e6  ld   $e6         ;0386 SUBI
              196c 0001  ld   $01
              196d 0035  ld   $35         ;0388 BCC
              196e 0072  ld   $72         ;0389 NE
              196f 008e  ld   $8e
              1970 0011  ld   $11         ;038b LDWI
              1971 0015  ld   $15
              1972 0026  ld   $26
              1973 0090  ld   $90         ;038e BRA
              1974 00ea  ld   $ea
              1975 00e6  ld   $e6         ;0390 SUBI
              1976 0001  ld   $01
              1977 0035  ld   $35         ;0392 BCC
              1978 0072  ld   $72         ;0393 NE
              1979 0098  ld   $98
              197a 0011  ld   $11         ;0395 LDWI
              197b 0015  ld   $15
              197c 0026  ld   $26
              197d 0090  ld   $90         ;0398 BRA
              197e 00ea  ld   $ea
              197f 00e6  ld   $e6         ;039a SUBI
              1980 0001  ld   $01
              1981 0035  ld   $35         ;039c BCC
              1982 0072  ld   $72         ;039d NE
              1983 00a2  ld   $a2
              1984 0011  ld   $11         ;039f LDWI
              1985 0015  ld   $15
              1986 0026  ld   $26
              1987 0090  ld   $90         ;03a2 BRA
              1988 00ea  ld   $ea
              1989 00e6  ld   $e6         ;03a4 SUBI
              198a 0001  ld   $01
              198b 0035  ld   $35         ;03a6 BCC
              198c 0072  ld   $72         ;03a7 NE
              198d 00ac  ld   $ac
              198e 0011  ld   $11         ;03a9 LDWI
              198f 0015  ld   $15
              1990 0026  ld   $26
              1991 0090  ld   $90         ;03ac BRA
              1992 00ea  ld   $ea
              1993 00e6  ld   $e6         ;03ae SUBI
              1994 0001  ld   $01
              1995 0035  ld   $35         ;03b0 BCC
              1996 0072  ld   $72         ;03b1 NE
              1997 00b6  ld   $b6
              1998 0011  ld   $11         ;03b3 LDWI
              1999 0015  ld   $15
              199a 0026  ld   $26
              199b 0090  ld   $90         ;03b6 BRA
              199c 00ea  ld   $ea
              199d 00e6  ld   $e6         ;03b8 SUBI
              199e 0001  ld   $01
              199f 0035  ld   $35         ;03ba BCC
              19a0 0072  ld   $72         ;03bb NE
              19a1 00c0  ld   $c0
              19a2 0011  ld   $11         ;03bd LDWI
              19a3 0015  ld   $15
              19a4 0026  ld   $26
              19a5 0090  ld   $90         ;03c0 BRA
              19a6 00ea  ld   $ea
              19a7 00e6  ld   $e6         ;03c2 SUBI
              19a8 0001  ld   $01
              19a9 0035  ld   $35         ;03c4 BCC
              19aa 0072  ld   $72         ;03c5 NE
              19ab 00ca  ld   $ca
              19ac 0011  ld   $11         ;03c7 LDWI
              19ad 0015  ld   $15
              19ae 0026  ld   $26
              19af 0090  ld   $90         ;03ca BRA
              19b0 00ea  ld   $ea
              19b1 00e6  ld   $e6         ;03cc SUBI
              19b2 0002  ld   $02
              19b3 0035  ld   $35         ;03ce BCC
              19b4 004d  ld   $4d         ;03cf GT
              19b5 00d4  ld   $d4
              19b6 0011  ld   $11         ;03d1 LDWI
              19b7 0015  ld   $15
              19b8 0026  ld   $26
              19b9 0090  ld   $90         ;03d4 BRA
              19ba 00ea  ld   $ea
              19bb 00e6  ld   $e6         ;03d6 SUBI
              19bc 0001  ld   $01
              19bd 0035  ld   $35         ;03d8 BCC
              19be 0072  ld   $72         ;03d9 NE
              19bf 00de  ld   $de
              19c0 0011  ld   $11         ;03db LDWI
              19c1 0015  ld   $15
              19c2 0026  ld   $26
              19c3 0090  ld   $90         ;03de BRA
              19c4 00ea  ld   $ea
              19c5 00e6  ld   $e6         ;03e0 SUBI
              19c6 0001  ld   $01
              19c7 0035  ld   $35         ;03e2 BCC
              19c8 0072  ld   $72         ;03e3 NE
              19c9 00e8  ld   $e8
              19ca 0011  ld   $11         ;03e5 LDWI
              19cb 0015  ld   $15
              19cc 0026  ld   $26
              19cd 0090  ld   $90         ;03e8 BRA
              19ce 00ea  ld   $ea
              19cf 0090  ld   $90         ;03ea BRA
              19d0 0001  ld   $01
              19d1 002b  ld   $2b         ;03ec STW
              19d2 004c  ld   $4c         ;03ec 'Program'
              19d3 0063  ld   $63         ;03ee POP
              19d4 00ff  ld   $ff         ;03ef RET
              19d5 002b  ld   $2b         ;03f0 STW
              19d6 004e  ld   $4e         ;03f0 'SelectMenu'
              19d7 0093  ld   $93         ;03f2 INC
              19d8 001b  ld   $1b         ;03f2 '_vLR'+1
              19d9 00ff  ld   $ff         ;03f4 RET
              19da 0004  ld   $04         ;| RAM segment address (high byte first)
              19db 0000  ld   $00         ;|
              19dc 00d6  ld   $d6         ;| Length (1..256)
              19dd 00cd  ld   $cd         ;0400 DEF
              19de 000b  ld   $0b
              19df 001a  ld   $1a         ;0402 LD
              19e0 0039  ld   $39         ;0402 'Pos'+1
              19e1 00e3  ld   $e3         ;0404 ADDI
              19e2 0008  ld   $08
              19e3 005e  ld   $5e         ;0406 ST
              19e4 0039  ld   $39         ;0406 'Pos'+1
              19e5 0059  ld   $59         ;0408 LDI
              19e6 0002  ld   $02
              19e7 005e  ld   $5e         ;040a ST
              19e8 0038  ld   $38         ;040a 'Pos'
              19e9 00ff  ld   $ff         ;040c RET
              19ea 002b  ld   $2b         ;040d STW
              19eb 003e  ld   $3e         ;040d 'Newline'
              19ec 00cd  ld   $cd         ;040f DEF
              19ed 0081  ld   $81
              19ee 0009  ld   $09         ;0411 9
              19ef 0053  ld   $53         ;0412 'S'
              19f0 006e  ld   $6e         ;0413 'n'
              19f1 0061  ld   $61         ;0414 'a'
              19f2 006b  ld   $6b         ;0415 'k'
              19f3 0065  ld   $65         ;0416 'e'
              19f4 0009  ld   $09         ;0417 9
              19f5 0020  ld   $20         ;0418 ' '
              19f6 0020  ld   $20         ;0419 ' '
              19f7 0009  ld   $09         ;041a 9
              19f8 0054  ld   $54         ;041b 'T'
              19f9 0065  ld   $65         ;041c 'e'
              19fa 0074  ld   $74         ;041d 't'
              19fb fe00  bra  ac          ;+-----------------------------------+
              19fc fcfd  bra  $19fd       ;|                                   |
              19fd 1404  ld   $04,y       ;| Trampoline for page $1900 lookups |
              19fe e068  jmp  y,$68       ;|                                   |
              19ff c218  st   [$18]       ;+-----------------------------------+
              1a00 0072  ld   $72         ;041e 'r'
              1a01 006f  ld   $6f         ;041f 'o'
              1a02 006e  ld   $6e         ;0420 'n'
              1a03 0069  ld   $69         ;0421 'i'
              1a04 0073  ld   $73         ;0422 's'
              1a05 000a  ld   $0a         ;0423 10
              1a06 0009  ld   $09         ;0424 9
              1a07 0052  ld   $52         ;0425 'R'
              1a08 0061  ld   $61         ;0426 'a'
              1a09 0063  ld   $63         ;0427 'c'
              1a0a 0065  ld   $65         ;0428 'e'
              1a0b 0072  ld   $72         ;0429 'r'
              1a0c 0009  ld   $09         ;042a 9
              1a0d 0020  ld   $20         ;042b ' '
              1a0e 0020  ld   $20         ;042c ' '
              1a0f 0009  ld   $09         ;042d 9
              1a10 0042  ld   $42         ;042e 'B'
              1a11 0072  ld   $72         ;042f 'r'
              1a12 0069  ld   $69         ;0430 'i'
              1a13 0063  ld   $63         ;0431 'c'
              1a14 006b  ld   $6b         ;0432 'k'
              1a15 0073  ld   $73         ;0433 's'
              1a16 000a  ld   $0a         ;0434 10
              1a17 0009  ld   $09         ;0435 9
              1a18 004d  ld   $4d         ;0436 'M'
              1a19 0061  ld   $61         ;0437 'a'
              1a1a 006e  ld   $6e         ;0438 'n'
              1a1b 0064  ld   $64         ;0439 'd'
              1a1c 0065  ld   $65         ;043a 'e'
              1a1d 006c  ld   $6c         ;043b 'l'
              1a1e 0062  ld   $62         ;043c 'b'
              1a1f 0072  ld   $72         ;043d 'r'
              1a20 006f  ld   $6f         ;043e 'o'
              1a21 0074  ld   $74         ;043f 't'
              1a22 0009  ld   $09         ;0440 9
              1a23 0054  ld   $54         ;0441 'T'
              1a24 0069  ld   $69         ;0442 'i'
              1a25 0063  ld   $63         ;0443 'c'
              1a26 0054  ld   $54         ;0444 'T'
              1a27 0061  ld   $61         ;0445 'a'
              1a28 0063  ld   $63         ;0446 'c'
              1a29 0054  ld   $54         ;0447 'T'
              1a2a 006f  ld   $6f         ;0448 'o'
              1a2b 0065  ld   $65         ;0449 'e'
              1a2c 000a  ld   $0a         ;044a 10
              1a2d 0009  ld   $09         ;044b 9
              1a2e 0050  ld   $50         ;044c 'P'
              1a2f 0069  ld   $69         ;044d 'i'
              1a30 0063  ld   $63         ;044e 'c'
              1a31 0074  ld   $74         ;044f 't'
              1a32 0075  ld   $75         ;0450 'u'
              1a33 0072  ld   $72         ;0451 'r'
              1a34 0065  ld   $65         ;0452 'e'
              1a35 0073  ld   $73         ;0453 's'
              1a36 0020  ld   $20         ;0454 ' '
              1a37 0020  ld   $20         ;0455 ' '
              1a38 0009  ld   $09         ;0456 9
              1a39 0042  ld   $42         ;0457 'B'
              1a3a 0041  ld   $41         ;0458 'A'
              1a3b 0053  ld   $53         ;0459 'S'
              1a3c 0049  ld   $49         ;045a 'I'
              1a3d 0043  ld   $43         ;045b 'C'
              1a3e 000a  ld   $0a         ;045c 10
              1a3f 0009  ld   $09         ;045d 9
              1a40 0043  ld   $43         ;045e 'C'
              1a41 0072  ld   $72         ;045f 'r'
              1a42 0065  ld   $65         ;0460 'e'
              1a43 0064  ld   $64         ;0461 'd'
              1a44 0069  ld   $69         ;0462 'i'
              1a45 0074  ld   $74         ;0463 't'
              1a46 0073  ld   $73         ;0464 's'
              1a47 0009  ld   $09         ;0465 9
              1a48 0009  ld   $09         ;0466 9
              1a49 004d  ld   $4d         ;0467 'M'
              1a4a 0053  ld   $53         ;0468 'S'
              1a4b 0020  ld   $20         ;0469 ' '
              1a4c 0042  ld   $42         ;046a 'B'
              1a4d 0041  ld   $41         ;046b 'A'
              1a4e 0053  ld   $53         ;046c 'S'
              1a4f 0049  ld   $49         ;046d 'I'
              1a50 0043  ld   $43         ;046e 'C'
              1a51 000a  ld   $0a         ;046f 10
              1a52 0009  ld   $09         ;0470 9
              1a53 004c  ld   $4c         ;0471 'L'
              1a54 006f  ld   $6f         ;0472 'o'
              1a55 0061  ld   $61         ;0473 'a'
              1a56 0064  ld   $64         ;0474 'd'
              1a57 0065  ld   $65         ;0475 'e'
              1a58 0072  ld   $72         ;0476 'r'
              1a59 0009  ld   $09         ;0477 9
              1a5a 0020  ld   $20         ;0478 ' '
              1a5b 0009  ld   $09         ;0479 9
              1a5c 0041  ld   $41         ;047a 'A'
              1a5d 0070  ld   $70         ;047b 'p'
              1a5e 0070  ld   $70         ;047c 'p'
              1a5f 006c  ld   $6c         ;047d 'l'
              1a60 0065  ld   $65         ;047e 'e'
              1a61 002d  ld   $2d         ;047f '-'
              1a62 0031  ld   $31         ;0480 '1'
              1a63 000a  ld   $0a         ;0481 10
              1a64 0000  ld   $00         ;0482 0
              1a65 002b  ld   $2b         ;0483 STW
              1a66 0050  ld   $50         ;0483 'MainMenu'
              1a67 00cd  ld   $cd         ;0485 DEF
              1a68 00cf  ld   $cf
              1a69 0055  ld   $55         ;0487 'U'
              1a6a 0073  ld   $73         ;0488 's'
              1a6b 0065  ld   $65         ;0489 'e'
              1a6c 0020  ld   $20         ;048a ' '
              1a6d 005b  ld   $5b         ;048b 91
              1a6e 0041  ld   $41         ;048c 'A'
              1a6f 0072  ld   $72         ;048d 'r'
              1a70 0072  ld   $72         ;048e 'r'
              1a71 006f  ld   $6f         ;048f 'o'
              1a72 0077  ld   $77         ;0490 'w'
              1a73 0073  ld   $73         ;0491 's'
              1a74 005d  ld   $5d         ;0492 93
              1a75 0020  ld   $20         ;0493 ' '
              1a76 0074  ld   $74         ;0494 't'
              1a77 006f  ld   $6f         ;0495 'o'
              1a78 0020  ld   $20         ;0496 ' '
              1a79 0073  ld   $73         ;0497 's'
              1a7a 0065  ld   $65         ;0498 'e'
              1a7b 006c  ld   $6c         ;0499 'l'
              1a7c 0065  ld   $65         ;049a 'e'
              1a7d 0063  ld   $63         ;049b 'c'
              1a7e 0074  ld   $74         ;049c 't'
              1a7f 000a  ld   $0a         ;049d 10
              1a80 0050  ld   $50         ;049e 'P'
              1a81 0072  ld   $72         ;049f 'r'
              1a82 0065  ld   $65         ;04a0 'e'
              1a83 0073  ld   $73         ;04a1 's'
              1a84 0073  ld   $73         ;04a2 's'
              1a85 0020  ld   $20         ;04a3 ' '
              1a86 005b  ld   $5b         ;04a4 91
              1a87 0041  ld   $41         ;04a5 'A'
              1a88 005d  ld   $5d         ;04a6 93
              1a89 0020  ld   $20         ;04a7 ' '
              1a8a 0074  ld   $74         ;04a8 't'
              1a8b 006f  ld   $6f         ;04a9 'o'
              1a8c 0020  ld   $20         ;04aa ' '
              1a8d 0073  ld   $73         ;04ab 's'
              1a8e 0074  ld   $74         ;04ac 't'
              1a8f 0061  ld   $61         ;04ad 'a'
              1a90 0072  ld   $72         ;04ae 'r'
              1a91 0074  ld   $74         ;04af 't'
              1a92 0020  ld   $20         ;04b0 ' '
              1a93 0070  ld   $70         ;04b1 'p'
              1a94 0072  ld   $72         ;04b2 'r'
              1a95 006f  ld   $6f         ;04b3 'o'
              1a96 0067  ld   $67         ;04b4 'g'
              1a97 0072  ld   $72         ;04b5 'r'
              1a98 0061  ld   $61         ;04b6 'a'
              1a99 006d  ld   $6d         ;04b7 'm'
              1a9a 000a  ld   $0a         ;04b8 10
              1a9b 000a  ld   $0a         ;04b9 10
              1a9c 0048  ld   $48         ;04ba 'H'
              1a9d 006f  ld   $6f         ;04bb 'o'
              1a9e 006c  ld   $6c         ;04bc 'l'
              1a9f 0064  ld   $64         ;04bd 'd'
              1aa0 0020  ld   $20         ;04be ' '
              1aa1 005b  ld   $5b         ;04bf 91
              1aa2 0053  ld   $53         ;04c0 'S'
              1aa3 0074  ld   $74         ;04c1 't'
              1aa4 0061  ld   $61         ;04c2 'a'
              1aa5 0072  ld   $72         ;04c3 'r'
              1aa6 0074  ld   $74         ;04c4 't'
              1aa7 005d  ld   $5d         ;04c5 93
              1aa8 0020  ld   $20         ;04c6 ' '
              1aa9 0066  ld   $66         ;04c7 'f'
              1aaa 006f  ld   $6f         ;04c8 'o'
              1aab 0072  ld   $72         ;04c9 'r'
              1aac 0020  ld   $20         ;04ca ' '
              1aad 0072  ld   $72         ;04cb 'r'
              1aae 0065  ld   $65         ;04cc 'e'
              1aaf 0073  ld   $73         ;04cd 's'
              1ab0 0065  ld   $65         ;04ce 'e'
              1ab1 0074  ld   $74         ;04cf 't'
              1ab2 0000  ld   $00         ;04d0 0
              1ab3 002b  ld   $2b         ;04d1 STW
              1ab4 0052  ld   $52         ;04d1 'HelpText'
              1ab5 0093  ld   $93         ;04d3 INC
              1ab6 001b  ld   $1b         ;04d3 '_vLR'+1
              1ab7 00ff  ld   $ff         ;04d5 RET
              1ab8 0005  ld   $05         ;| RAM segment address (high byte first)
              1ab9 0000  ld   $00         ;|
              1aba 00a5  ld   $a5         ;| Length (1..256)
              1abb 00cd  ld   $cd         ;0500 DEF
              1abc 0011  ld   $11
              1abd 0075  ld   $75         ;0502 PUSH
              1abe 0021  ld   $21         ;0503 LDW
              1abf 0038  ld   $38         ;0503 'Pos'
              1ac0 00e6  ld   $e6         ;0505 SUBI
              1ac1 000c  ld   $0c
              1ac2 002b  ld   $2b         ;0507 STW
              1ac3 0038  ld   $38         ;0507 'Pos'
              1ac4 0059  ld   $59         ;0509 LDI
              1ac5 0020  ld   $20
              1ac6 002b  ld   $2b         ;050b STW
              1ac7 0030  ld   $30         ;050b 'Char'
              1ac8 00cf  ld   $cf         ;050d CALL
              1ac9 003a  ld   $3a         ;050d 'PrintChar'
              1aca 00cf  ld   $cf         ;050f CALL
              1acb 003a  ld   $3a         ;050f 'PrintChar'
              1acc 0063  ld   $63         ;0511 POP
              1acd 00ff  ld   $ff         ;0512 RET
              1ace 002b  ld   $2b         ;0513 STW
              1acf 004a  ld   $4a         ;0513 'WipeOutArrow'
              1ad0 00cd  ld   $cd         ;0515 DEF
              1ad1 0030  ld   $30
              1ad2 0075  ld   $75         ;0517 PUSH
              1ad3 0059  ld   $59         ;0518 LDI
              1ad4 002a  ld   $2a
              1ad5 002b  ld   $2b         ;051a STW
              1ad6 0036  ld   $36         ;051a 'Color'
              1ad7 00cf  ld   $cf         ;051c CALL
              1ad8 0044  ld   $44         ;051c 'PrintDivider'
              1ad9 0059  ld   $59         ;051e LDI
              1ada 000f  ld   $0f
              1adb 002b  ld   $2b         ;0520 STW
              1adc 0036  ld   $36         ;0520 'Color'
              1add 0021  ld   $21         ;0522 LDW
              1ade 0050  ld   $50         ;0522 'MainMenu'
              1adf 00cf  ld   $cf         ;0524 CALL
              1ae0 0040  ld   $40         ;0524 'PrintText'
              1ae1 0059  ld   $59         ;0526 LDI
              1ae2 002a  ld   $2a
              1ae3 002b  ld   $2b         ;0528 STW
              1ae4 0036  ld   $36         ;0528 'Color'
              1ae5 00cf  ld   $cf         ;052a CALL
              1ae6 0044  ld   $44         ;052a 'PrintDivider'
              1ae7 0021  ld   $21         ;052c LDW
              1ae8 0052  ld   $52         ;052c 'HelpText'
              1ae9 00cf  ld   $cf         ;052e CALL
              1aea 0040  ld   $40         ;052e 'PrintText'
              1aeb 0063  ld   $63         ;0530 POP
              1aec 00ff  ld   $ff         ;0531 RET
              1aed 002b  ld   $2b         ;0532 STW
              1aee 0054  ld   $54         ;0532 'PrintMenu'
              1aef 001a  ld   $1a         ;0534 LD
              1af0 0021  ld   $21
              1af1 0088  ld   $88         ;0536 ORI
              1af2 0003  ld   $03
              1af3 005e  ld   $5e         ;0538 ST
              1af4 0021  ld   $21
              1af5 0059  ld   $59         ;053a LDI
              1af6 005a  ld   $5a
              1af7 005e  ld   $5e         ;053c ST
              1af8 002c  ld   $2c
              1af9 0011  ld   $11         ;053e LDWI
              1afa 0002  ld   $02
              1afb fe00  bra  ac          ;+-----------------------------------+
              1afc fcfd  bra  $1afd       ;|                                   |
              1afd 1404  ld   $04,y       ;| Trampoline for page $1a00 lookups |
              1afe e068  jmp  y,$68       ;|                                   |
              1aff c218  st   [$18]       ;+-----------------------------------+
              1b00 0020  ld   $20
              1b01 002b  ld   $2b         ;0541 STW
              1b02 0038  ld   $38         ;0541 'Pos'
              1b03 00cf  ld   $cf         ;0543 CALL
              1b04 0054  ld   $54         ;0543 'PrintMenu'
              1b05 0059  ld   $59         ;0545 LDI
              1b06 0000  ld   $00
              1b07 002b  ld   $2b         ;0547 STW
              1b08 0046  ld   $46         ;0547 'MenuItem'
              1b09 00cf  ld   $cf         ;0549 CALL
              1b0a 004e  ld   $4e         ;0549 'SelectMenu'
              1b0b 0011  ld   $11         ;054b LDWI
              1b0c 0000  ld   $00
              1b0d 0008  ld   $08
              1b0e 002b  ld   $2b         ;054e STW
              1b0f 0028  ld   $28         ;054e '_sysArgs4'
              1b10 0011  ld   $11         ;0550 LDWI
              1b11 0001  ld   $01
              1b12 0088  ld   $88
              1b13 002b  ld   $2b         ;0553 STW
              1b14 0032  ld   $32         ;0553 'i'
              1b15 0011  ld   $11         ;0555 LDWI
              1b16 0080  ld   $80
              1b17 00ff  ld   $ff
              1b18 002b  ld   $2b         ;0558 STW
              1b19 0042  ld   $42         ;0558 'j'
              1b1a 0021  ld   $21         ;055a LDW
              1b1b 0038  ld   $38         ;055a 'Pos'
              1b1c 00e3  ld   $e3         ;055c ADDI
              1b1d 0030  ld   $30
              1b1e 00f8  ld   $f8         ;055e ANDW
              1b1f 0042  ld   $42         ;055e 'j'
              1b20 002b  ld   $2b         ;0560 STW
              1b21 0056  ld   $56         ;0560 'q'
              1b22 0011  ld   $11         ;0562 LDWI
              1b23 00e1  ld   $e1
              1b24 0004  ld   $04
              1b25 002b  ld   $2b         ;0565 STW
              1b26 0022  ld   $22         ;0565 '_sysFn'
              1b27 0059  ld   $59         ;0567 LDI
              1b28 0020  ld   $20
              1b29 005e  ld   $5e         ;0569 ST
              1b2a 0024  ld   $24
              1b2b 005e  ld   $5e         ;056b ST
              1b2c 0025  ld   $25
              1b2d 0021  ld   $21         ;056d LDW
              1b2e 0028  ld   $28         ;056d '_sysArgs4'
              1b2f 00e3  ld   $e3         ;056f ADDI
              1b30 0030  ld   $30
              1b31 00f8  ld   $f8         ;0571 ANDW
              1b32 0042  ld   $42         ;0571 'j'
              1b33 00fc  ld   $fc         ;0573 XORW
              1b34 0056  ld   $56         ;0573 'q'
              1b35 0035  ld   $35         ;0575 BCC
              1b36 003f  ld   $3f         ;0576 EQ
              1b37 007f  ld   $7f
              1b38 001a  ld   $1a         ;0578 LD
              1b39 0059  ld   $59         ;0578 'p'+1
              1b3a 008c  ld   $8c         ;057a XORI
              1b3b 0078  ld   $78
              1b3c 0035  ld   $35         ;057c BCC
              1b3d 003f  ld   $3f         ;057d EQ
              1b3e 007f  ld   $7f
              1b3f 00b4  ld   $b4         ;057f SYS
              1b40 00cb  ld   $cb
              1b41 0011  ld   $11         ;0581 LDWI
              1b42 0000  ld   $00
              1b43 0008  ld   $08
              1b44 0099  ld   $99         ;0584 921
              1b45 0028  ld   $28         ;0585 40
              1b46 002b  ld   $2b         ;0586 STW
              1b47 0028  ld   $28
              1b48 0035  ld   $35         ;0588 BCC
              1b49 004d  ld   $4d         ;0589 GT
              1b4a 006d  ld   $6d
              1b4b 0099  ld   $99         ;058b ADDW
              1b4c 0032  ld   $32         ;058b 'i'
              1b4d 002b  ld   $2b         ;058d STW
              1b4e 0028  ld   $28
              1b4f 0082  ld   $82         ;058f ANDI
              1b50 00ff  ld   $ff
              1b51 008c  ld   $8c         ;0591 XORI
              1b52 00a0  ld   $a0
              1b53 0035  ld   $35         ;0593 BCC
              1b54 0072  ld   $72         ;0594 NE
              1b55 006b  ld   $6b
              1b56 0059  ld   $59         ;0596 LDI
              1b57 00ad  ld   $ad
              1b58 002b  ld   $2b         ;0598 STW
              1b59 0022  ld   $22         ;0598 '_sysFn'
              1b5a 0021  ld   $21         ;059a LDW
              1b5b 004c  ld   $4c         ;059a 'Program'
              1b5c 002b  ld   $2b         ;059c STW
              1b5d 0024  ld   $24         ;059c '_sysArgs0'
              1b5e 0011  ld   $11         ;059e LDWI
              1b5f 0000  ld   $00
              1b60 0002  ld   $02
              1b61 002b  ld   $2b         ;05a1 STW
              1b62 001a  ld   $1a         ;05a1 '_vLR'
              1b63 00b4  ld   $b4         ;05a3 SYS
              1b64 00e2  ld   $e2
              1b65 0000  ld   $00         ;End of MainMenu\MainMenu.gcl, size 856
                                          ;+-----------------------------------+
                                          ;| CardBoot.gcl                      |
                                          ;+-----------------------------------+
              1b66 dc4d  st   $4d,[y,x++] ;'M'
              1b67 dc61  st   $61,[y,x++] ;'a'
              1b68 dc69  st   $69,[y,x++] ;'i'
              1b69 dc6e  st   $6e,[y,x++] ;'n'
              1b6a dc00  st   $00,[y,x++] ;'\x00'
              1b6b dc00  st   $00,[y,x++] ;'\x00'
              1b6c dc00  st   $00,[y,x++] ;'\x00'
              1b6d dc00  st   $00,[y,x++] ;'\x00'
              1b6e 000e  ld   $0e
              1b6f c218  st   [$18]
              1b70 0018  ld   $18
              1b71 1428  ld   $28,y
              1b72 e0f2  jmp  y,$f2
              1b73 c219  st   [$19]
Boot:         1b74 0002  ld   $02         ;| RAM segment address (high byte first)
              1b75 0000  ld   $00         ;|
              1b76 0018  ld   $18         ;| Length (1..256)
              1b77 001a  ld   $1a         ;0200 LD
              1b78 0021  ld   $21
              1b79 00e6  ld   $e6         ;0202 SUBI
              1b7a 00f8  ld   $f8
              1b7b 0035  ld   $35         ;0204 BCC
              1b7c 0053  ld   $53         ;0205 GE
              1b7d 000b  ld   $0b
              1b7e 0021  ld   $21         ;0207 LDW
              1b7f 000e  ld   $0e         ;0207 '_frameCount'
              1b80 00f3  ld   $f3         ;0209 DOKE
              1b81 0017  ld   $17         ;0209 '_vPCH'
              1b82 0090  ld   $90         ;020b BRA
              1b83 0005  ld   $05
              1b84 0011  ld   $11         ;020d LDWI
              1b85 0000  ld   $00
              1b86 0005  ld   $05
              1b87 002b  ld   $2b         ;0210 STW
              1b88 0030  ld   $30         ;0210 'Address'
              1b89 0011  ld   $11         ;0212 LDWI
              1b8a 00a0  ld   $a0
              1b8b 0058  ld   $58
              1b8c 002b  ld   $2b         ;0215 STW
              1b8d 001a  ld   $1a         ;0215 '_vLR'
              1b8e 00ff  ld   $ff         ;0217 RET
              1b8f 0058  ld   $58         ;| RAM segment address (high byte first)
              1b90 00a0  ld   $a0         ;|
              1b91 0038  ld   $38         ;| Length (1..256)
              1b92 00cd  ld   $cd         ;58a0 DEF
              1b93 00d1  ld   $d1
              1b94 0075  ld   $75         ;58a2 PUSH
              1b95 00cd  ld   $cd         ;58a3 DEF
              1b96 00aa  ld   $aa
              1b97 0043  ld   $43         ;58a5 'C'
              1b98 004d  ld   $4d         ;58a6 'M'
              1b99 0044  ld   $44         ;58a7 'D'
              1b9a 0030  ld   $30         ;58a8 '0'
              1b9b 0020  ld   $20         ;58a9 ' '
              1b9c 0020  ld   $20         ;58aa ' '
              1b9d 0000  ld   $00         ;58ab 0
              1b9e 00cf  ld   $cf         ;58ac CALL
              1b9f 0032  ld   $32         ;58ac 'PrintText'
              1ba0 0059  ld   $59         ;58ae LDI
              1ba1 0000  ld   $00
              1ba2 002b  ld   $2b         ;58b0 STW
              1ba3 0034  ld   $34         ;58b0 'CardType'
              1ba4 0059  ld   $59         ;58b2 LDI
              1ba5 000a  ld   $0a
              1ba6 002b  ld   $2b         ;58b4 STW
              1ba7 0036  ld   $36         ;58b4 'i'
              1ba8 00cf  ld   $cf         ;58b6 CALL
              1ba9 0038  ld   $38         ;58b6 'SendOnesToCard'
              1baa 0021  ld   $21         ;58b8 LDW
              1bab 0036  ld   $36         ;58b8 'i'
              1bac 00e6  ld   $e6         ;58ba SUBI
              1bad 0001  ld   $01
              1bae 0035  ld   $35         ;58bc BCC
              1baf 004d  ld   $4d         ;58bd GT
              1bb0 00b2  ld   $b2
              1bb1 00cf  ld   $cf         ;58bf CALL
              1bb2 003a  ld   $3a         ;58bf 'EnableCard'
              1bb3 00cd  ld   $cd         ;58c1 DEF
              1bb4 00c7  ld   $c7
              1bb5 0040  ld   $40         ;58c3 64
              1bb6 0000  ld   $00         ;58c4 0
              1bb7 0000  ld   $00         ;58c5 0
              1bb8 0000  ld   $00         ;58c6 0
              1bb9 0000  ld   $00         ;58c7 0
              1bba 0095  ld   $95         ;58c8 149
              1bbb 00cf  ld   $cf         ;58c9 CALL
              1bbc 003c  ld   $3c         ;58c9 'SendCommandToCard'
              1bbd 00cf  ld   $cf         ;58cb CALL
              1bbe 003e  ld   $3e         ;58cb 'WaitForCardReply'
              1bbf 008c  ld   $8c         ;58cd XORI
              1bc0 0001  ld   $01
              1bc1 00cf  ld   $cf         ;58cf CALL
              1bc2 0040  ld   $40         ;58cf 'PrintResult'
              1bc3 0063  ld   $63         ;58d1 POP
              1bc4 00ff  ld   $ff         ;58d2 RET
              1bc5 002b  ld   $2b         ;58d3 STW
              1bc6 0042  ld   $42         ;58d3 'CMD0'
              1bc7 0093  ld   $93         ;58d5 INC
              1bc8 001b  ld   $1b         ;58d5 '_vLR'+1
              1bc9 00ff  ld   $ff         ;58d7 RET
              1bca 0059  ld   $59         ;| RAM segment address (high byte first)
              1bcb 00a0  ld   $a0         ;|
              1bcc 004c  ld   $4c         ;| Length (1..256)
              1bcd 00cd  ld   $cd         ;59a0 DEF
              1bce 00e5  ld   $e5
              1bcf 0075  ld   $75         ;59a2 PUSH
              1bd0 00cd  ld   $cd         ;59a3 DEF
              1bd1 00aa  ld   $aa
              1bd2 0043  ld   $43         ;59a5 'C'
              1bd3 004d  ld   $4d         ;59a6 'M'
              1bd4 0044  ld   $44         ;59a7 'D'
              1bd5 0038  ld   $38         ;59a8 '8'
              1bd6 0020  ld   $20         ;59a9 ' '
              1bd7 0020  ld   $20         ;59aa ' '
              1bd8 0000  ld   $00         ;59ab 0
              1bd9 00cf  ld   $cf         ;59ac CALL
              1bda 0032  ld   $32         ;59ac 'PrintText'
              1bdb 00cf  ld   $cf         ;59ae CALL
              1bdc 003a  ld   $3a         ;59ae 'EnableCard'
              1bdd 00cd  ld   $cd         ;59b0 DEF
              1bde 00b6  ld   $b6
              1bdf 0048  ld   $48         ;59b2 72
              1be0 0000  ld   $00         ;59b3 0
              1be1 0000  ld   $00         ;59b4 0
              1be2 0001  ld   $01         ;59b5 1
              1be3 00aa  ld   $aa         ;59b6 170
              1be4 0087  ld   $87         ;59b7 135
              1be5 00cf  ld   $cf         ;59b8 CALL
              1be6 003c  ld   $3c         ;59b8 'SendCommandToCard'
              1be7 00cf  ld   $cf         ;59ba CALL
              1be8 003e  ld   $3e         ;59ba 'WaitForCardReply'
              1be9 008c  ld   $8c         ;59bc XORI
              1bea 00ff  ld   $ff
              1beb 0035  ld   $35         ;59be BCC
              1bec 003f  ld   $3f         ;59bf EQ
              1bed 00dd  ld   $dd
              1bee 0021  ld   $21         ;59c1 LDW
              1bef 0044  ld   $44         ;59c1 'CardReply'
              1bf0 0082  ld   $82         ;59c3 ANDI
              1bf1 0004  ld   $04
              1bf2 0035  ld   $35         ;59c5 BCC
              1bf3 003f  ld   $3f         ;59c6 EQ
              1bf4 00cc  ld   $cc
              1bf5 0059  ld   $59         ;59c8 LDI
              1bf6 0001  ld   $01
              1bf7 002b  ld   $2b         ;59ca STW
              1bf8 0034  ld   $34         ;59ca 'CardType'
              1bf9 0090  ld   $90         ;59cc BRA
              1bfa 00dd  ld   $dd
              1bfb fe00  bra  ac          ;+-----------------------------------+
              1bfc fcfd  bra  $1bfd       ;|                                   |
              1bfd 1404  ld   $04,y       ;| Trampoline for page $1b00 lookups |
              1bfe e068  jmp  y,$68       ;|                                   |
              1bff c218  st   [$18]       ;+-----------------------------------+
              1c00 00cf  ld   $cf         ;59ce CALL
              1c01 0038  ld   $38         ;59ce 'SendOnesToCard'
              1c02 00cf  ld   $cf         ;59d0 CALL
              1c03 0038  ld   $38         ;59d0 'SendOnesToCard'
              1c04 00cf  ld   $cf         ;59d2 CALL
              1c05 0038  ld   $38         ;59d2 'SendOnesToCard'
              1c06 00cf  ld   $cf         ;59d4 CALL
              1c07 0038  ld   $38         ;59d4 'SendOnesToCard'
              1c08 008c  ld   $8c         ;59d6 XORI
              1c09 00aa  ld   $aa
              1c0a 0035  ld   $35         ;59d8 BCC
              1c0b 0072  ld   $72         ;59d9 NE
              1c0c 00dd  ld   $dd
              1c0d 0059  ld   $59         ;59db LDI
              1c0e 0002  ld   $02
              1c0f 002b  ld   $2b         ;59dd STW
              1c10 0034  ld   $34         ;59dd 'CardType'
              1c11 0021  ld   $21         ;59df LDW
              1c12 0044  ld   $44         ;59df 'CardReply'
              1c13 0082  ld   $82         ;59e1 ANDI
              1c14 00fa  ld   $fa
              1c15 00cf  ld   $cf         ;59e3 CALL
              1c16 0040  ld   $40         ;59e3 'PrintResult'
              1c17 0063  ld   $63         ;59e5 POP
              1c18 00ff  ld   $ff         ;59e6 RET
              1c19 002b  ld   $2b         ;59e7 STW
              1c1a 0046  ld   $46         ;59e7 'CMD8'
              1c1b 0093  ld   $93         ;59e9 INC
              1c1c 001b  ld   $1b         ;59e9 '_vLR'+1
              1c1d 00ff  ld   $ff         ;59eb RET
              1c1e 005a  ld   $5a         ;| RAM segment address (high byte first)
              1c1f 00a0  ld   $a0         ;|
              1c20 005c  ld   $5c         ;| Length (1..256)
              1c21 00cd  ld   $cd         ;5aa0 DEF
              1c22 00d3  ld   $d3
              1c23 0075  ld   $75         ;5aa2 PUSH
              1c24 00cd  ld   $cd         ;5aa3 DEF
              1c25 00aa  ld   $aa
              1c26 0043  ld   $43         ;5aa5 'C'
              1c27 004d  ld   $4d         ;5aa6 'M'
              1c28 0044  ld   $44         ;5aa7 'D'
              1c29 0035  ld   $35         ;5aa8 '5'
              1c2a 0038  ld   $38         ;5aa9 '8'
              1c2b 0020  ld   $20         ;5aaa ' '
              1c2c 0000  ld   $00         ;5aab 0
              1c2d 00cf  ld   $cf         ;5aac CALL
              1c2e 0032  ld   $32         ;5aac 'PrintText'
              1c2f 00cf  ld   $cf         ;5aae CALL
              1c30 003a  ld   $3a         ;5aae 'EnableCard'
              1c31 00cd  ld   $cd         ;5ab0 DEF
              1c32 00b6  ld   $b6
              1c33 007a  ld   $7a         ;5ab2 122
              1c34 0000  ld   $00         ;5ab3 0
              1c35 0000  ld   $00         ;5ab4 0
              1c36 0000  ld   $00         ;5ab5 0
              1c37 0000  ld   $00         ;5ab6 0
              1c38 0000  ld   $00         ;5ab7 0
              1c39 00cf  ld   $cf         ;5ab8 CALL
              1c3a 003c  ld   $3c         ;5ab8 'SendCommandToCard'
              1c3b 00cf  ld   $cf         ;5aba CALL
              1c3c 003e  ld   $3e         ;5aba 'WaitForCardReply'
              1c3d 00cf  ld   $cf         ;5abc CALL
              1c3e 0038  ld   $38         ;5abc 'SendOnesToCard'
              1c3f 00cf  ld   $cf         ;5abe CALL
              1c40 0038  ld   $38         ;5abe 'SendOnesToCard'
              1c41 00cf  ld   $cf         ;5ac0 CALL
              1c42 0038  ld   $38         ;5ac0 'SendOnesToCard'
              1c43 0082  ld   $82         ;5ac2 ANDI
              1c44 00c0  ld   $c0
              1c45 008c  ld   $8c         ;5ac4 XORI
              1c46 00c0  ld   $c0
              1c47 0035  ld   $35         ;5ac6 BCC
              1c48 0072  ld   $72         ;5ac7 NE
              1c49 00cb  ld   $cb
              1c4a 0059  ld   $59         ;5ac9 LDI
              1c4b 0004  ld   $04
              1c4c 002b  ld   $2b         ;5acb STW
              1c4d 0034  ld   $34         ;5acb 'CardType'
              1c4e 0021  ld   $21         ;5acd LDW
              1c4f 0044  ld   $44         ;5acd 'CardReply'
              1c50 0082  ld   $82         ;5acf ANDI
              1c51 00fe  ld   $fe
              1c52 00cf  ld   $cf         ;5ad1 CALL
              1c53 0040  ld   $40         ;5ad1 'PrintResult'
              1c54 0063  ld   $63         ;5ad3 POP
              1c55 00ff  ld   $ff         ;5ad4 RET
              1c56 002b  ld   $2b         ;5ad5 STW
              1c57 0048  ld   $48         ;5ad5 'CMD58'
              1c58 00cd  ld   $cd         ;5ad7 DEF
              1c59 00f5  ld   $f5
              1c5a 0075  ld   $75         ;5ad9 PUSH
              1c5b 00cd  ld   $cd         ;5ada DEF
              1c5c 00e1  ld   $e1
              1c5d 0043  ld   $43         ;5adc 'C'
              1c5e 004d  ld   $4d         ;5add 'M'
              1c5f 0044  ld   $44         ;5ade 'D'
              1c60 0035  ld   $35         ;5adf '5'
              1c61 0035  ld   $35         ;5ae0 '5'
              1c62 0020  ld   $20         ;5ae1 ' '
              1c63 0000  ld   $00         ;5ae2 0
              1c64 00cf  ld   $cf         ;5ae3 CALL
              1c65 0032  ld   $32         ;5ae3 'PrintText'
              1c66 00cd  ld   $cd         ;5ae5 DEF
              1c67 00eb  ld   $eb
              1c68 0077  ld   $77         ;5ae7 119
              1c69 0000  ld   $00         ;5ae8 0
              1c6a 0000  ld   $00         ;5ae9 0
              1c6b 0000  ld   $00         ;5aea 0
              1c6c 0000  ld   $00         ;5aeb 0
              1c6d 0000  ld   $00         ;5aec 0
              1c6e 00cf  ld   $cf         ;5aed CALL
              1c6f 003c  ld   $3c         ;5aed 'SendCommandToCard'
              1c70 00cf  ld   $cf         ;5aef CALL
              1c71 003e  ld   $3e         ;5aef 'WaitForCardReply'
              1c72 0082  ld   $82         ;5af1 ANDI
              1c73 00fe  ld   $fe
              1c74 00cf  ld   $cf         ;5af3 CALL
              1c75 0040  ld   $40         ;5af3 'PrintResult'
              1c76 0063  ld   $63         ;5af5 POP
              1c77 00ff  ld   $ff         ;5af6 RET
              1c78 002b  ld   $2b         ;5af7 STW
              1c79 004a  ld   $4a         ;5af7 'CMD55'
              1c7a 0093  ld   $93         ;5af9 INC
              1c7b 001b  ld   $1b         ;5af9 '_vLR'+1
              1c7c 00ff  ld   $ff         ;5afb RET
              1c7d 005b  ld   $5b         ;| RAM segment address (high byte first)
              1c7e 00a0  ld   $a0         ;|
              1c7f 0058  ld   $58         ;| Length (1..256)
              1c80 00cd  ld   $cd         ;5ba0 DEF
              1c81 00cf  ld   $cf
              1c82 0075  ld   $75         ;5ba2 PUSH
              1c83 00cd  ld   $cd         ;5ba3 DEF
              1c84 00aa  ld   $aa
              1c85 0041  ld   $41         ;5ba5 'A'
              1c86 0043  ld   $43         ;5ba6 'C'
              1c87 004d  ld   $4d         ;5ba7 'M'
              1c88 0044  ld   $44         ;5ba8 'D'
              1c89 0034  ld   $34         ;5ba9 '4'
              1c8a 0031  ld   $31         ;5baa '1'
              1c8b 0000  ld   $00         ;5bab 0
              1c8c 00cf  ld   $cf         ;5bac CALL
              1c8d 0032  ld   $32         ;5bac 'PrintText'
              1c8e 0021  ld   $21         ;5bae LDW
              1c8f 0034  ld   $34         ;5bae 'CardType'
              1c90 008c  ld   $8c         ;5bb0 XORI
              1c91 0001  ld   $01
              1c92 0035  ld   $35         ;5bb2 BCC
              1c93 0072  ld   $72         ;5bb3 NE
              1c94 00bd  ld   $bd
              1c95 00cd  ld   $cd         ;5bb5 DEF
              1c96 00bb  ld   $bb
              1c97 0069  ld   $69         ;5bb7 105
              1c98 0000  ld   $00         ;5bb8 0
              1c99 0000  ld   $00         ;5bb9 0
              1c9a 0000  ld   $00         ;5bba 0
              1c9b 0000  ld   $00         ;5bbb 0
              1c9c 0000  ld   $00         ;5bbc 0
              1c9d 0090  ld   $90         ;5bbd BRA
              1c9e 00c5  ld   $c5
              1c9f 00cd  ld   $cd         ;5bbf DEF
              1ca0 00c5  ld   $c5
              1ca1 0069  ld   $69         ;5bc1 105
              1ca2 0040  ld   $40         ;5bc2 64
              1ca3 0000  ld   $00         ;5bc3 0
              1ca4 0000  ld   $00         ;5bc4 0
              1ca5 0000  ld   $00         ;5bc5 0
              1ca6 0000  ld   $00         ;5bc6 0
              1ca7 00cf  ld   $cf         ;5bc7 CALL
              1ca8 003c  ld   $3c         ;5bc7 'SendCommandToCard'
              1ca9 00cf  ld   $cf         ;5bc9 CALL
              1caa 003e  ld   $3e         ;5bc9 'WaitForCardReply'
              1cab 0082  ld   $82         ;5bcb ANDI
              1cac 00fe  ld   $fe
              1cad 00cf  ld   $cf         ;5bcd CALL
              1cae 0040  ld   $40         ;5bcd 'PrintResult'
              1caf 0063  ld   $63         ;5bcf POP
              1cb0 00ff  ld   $ff         ;5bd0 RET
              1cb1 002b  ld   $2b         ;5bd1 STW
              1cb2 004c  ld   $4c         ;5bd1 'ACMD41'
              1cb3 00cd  ld   $cd         ;5bd3 DEF
              1cb4 00f1  ld   $f1
              1cb5 0075  ld   $75         ;5bd5 PUSH
              1cb6 00cd  ld   $cd         ;5bd6 DEF
              1cb7 00dd  ld   $dd
              1cb8 0043  ld   $43         ;5bd8 'C'
              1cb9 004d  ld   $4d         ;5bd9 'M'
              1cba 0044  ld   $44         ;5bda 'D'
              1cbb 0031  ld   $31         ;5bdb '1'
              1cbc 0036  ld   $36         ;5bdc '6'
              1cbd 0020  ld   $20         ;5bdd ' '
              1cbe 0000  ld   $00         ;5bde 0
              1cbf 00cf  ld   $cf         ;5bdf CALL
              1cc0 0032  ld   $32         ;5bdf 'PrintText'
              1cc1 00cd  ld   $cd         ;5be1 DEF
              1cc2 00e7  ld   $e7
              1cc3 0050  ld   $50         ;5be3 80
              1cc4 0000  ld   $00         ;5be4 0
              1cc5 0000  ld   $00         ;5be5 0
              1cc6 0002  ld   $02         ;5be6 2
              1cc7 0000  ld   $00         ;5be7 0
              1cc8 0000  ld   $00         ;5be8 0
              1cc9 00cf  ld   $cf         ;5be9 CALL
              1cca 003c  ld   $3c         ;5be9 'SendCommandToCard'
              1ccb 00cf  ld   $cf         ;5beb CALL
              1ccc 003e  ld   $3e         ;5beb 'WaitForCardReply'
              1ccd 0082  ld   $82         ;5bed ANDI
              1cce 00fe  ld   $fe
              1ccf 00cf  ld   $cf         ;5bef CALL
              1cd0 0040  ld   $40         ;5bef 'PrintResult'
              1cd1 0063  ld   $63         ;5bf1 POP
              1cd2 00ff  ld   $ff         ;5bf2 RET
              1cd3 002b  ld   $2b         ;5bf3 STW
              1cd4 004e  ld   $4e         ;5bf3 'CMD16'
              1cd5 0093  ld   $93         ;5bf5 INC
              1cd6 001b  ld   $1b         ;5bf5 '_vLR'+1
              1cd7 00ff  ld   $ff         ;5bf7 RET
              1cd8 005c  ld   $5c         ;| RAM segment address (high byte first)
              1cd9 00a0  ld   $a0         ;|
              1cda 0040  ld   $40         ;| Length (1..256)
              1cdb 00cd  ld   $cd         ;5ca0 DEF
              1cdc 00d9  ld   $d9
              1cdd 0075  ld   $75         ;5ca2 PUSH
              1cde 00cd  ld   $cd         ;5ca3 DEF
              1cdf 00a9  ld   $a9
              1ce0 0051  ld   $51         ;5ca5 81
              1ce1 0000  ld   $00         ;5ca6 0
              1ce2 0000  ld   $00         ;5ca7 0
              1ce3 0000  ld   $00         ;5ca8 0
              1ce4 0000  ld   $00         ;5ca9 0
              1ce5 0000  ld   $00         ;5caa 0
              1ce6 002b  ld   $2b         ;5cab STW
              1ce7 0050  ld   $50         ;5cab 'p'
              1ce8 002b  ld   $2b         ;5cad STW
              1ce9 0052  ld   $52         ;5cad 'q'
              1cea 001a  ld   $1a         ;5caf LD
              1ceb 0055  ld   $55         ;5caf 'SectorH'+1
              1cec 0093  ld   $93         ;5cb1 INC
              1ced 0052  ld   $52         ;5cb1 'q'
              1cee 00f0  ld   $f0         ;5cb3 POKE
              1cef 0052  ld   $52         ;5cb3 'q'
              1cf0 001a  ld   $1a         ;5cb5 LD
              1cf1 0054  ld   $54         ;5cb5 'SectorH'
              1cf2 0093  ld   $93         ;5cb7 INC
              1cf3 0052  ld   $52         ;5cb7 'q'
              1cf4 00f0  ld   $f0         ;5cb9 POKE
              1cf5 0052  ld   $52         ;5cb9 'q'
              1cf6 001a  ld   $1a         ;5cbb LD
              1cf7 0057  ld   $57         ;5cbb 'SectorL'+1
              1cf8 0093  ld   $93         ;5cbd INC
              1cf9 0052  ld   $52         ;5cbd 'q'
              1cfa 00f0  ld   $f0         ;5cbf POKE
              1cfb fe00  bra  ac          ;+-----------------------------------+
              1cfc fcfd  bra  $1cfd       ;|                                   |
              1cfd 1404  ld   $04,y       ;| Trampoline for page $1c00 lookups |
              1cfe e068  jmp  y,$68       ;|                                   |
              1cff c218  st   [$18]       ;+-----------------------------------+
              1d00 0052  ld   $52         ;5cbf 'q'
              1d01 001a  ld   $1a         ;5cc1 LD
              1d02 0056  ld   $56         ;5cc1 'SectorL'
              1d03 0093  ld   $93         ;5cc3 INC
              1d04 0052  ld   $52         ;5cc3 'q'
              1d05 00f0  ld   $f0         ;5cc5 POKE
              1d06 0052  ld   $52         ;5cc5 'q'
              1d07 0021  ld   $21         ;5cc7 LDW
              1d08 0050  ld   $50         ;5cc7 'p'
              1d09 00cf  ld   $cf         ;5cc9 CALL
              1d0a 003c  ld   $3c         ;5cc9 'SendCommandToCard'
              1d0b 00cf  ld   $cf         ;5ccb CALL
              1d0c 003e  ld   $3e         ;5ccb 'WaitForCardReply'
              1d0d 0082  ld   $82         ;5ccd ANDI
              1d0e 00fe  ld   $fe
              1d0f 0035  ld   $35         ;5ccf BCC
              1d10 0072  ld   $72         ;5cd0 NE
              1d11 00d7  ld   $d7
              1d12 00cf  ld   $cf         ;5cd2 CALL
              1d13 0038  ld   $38         ;5cd2 'SendOnesToCard'
              1d14 008c  ld   $8c         ;5cd4 XORI
              1d15 00ff  ld   $ff
              1d16 0035  ld   $35         ;5cd6 BCC
              1d17 003f  ld   $3f         ;5cd7 EQ
              1d18 00d0  ld   $d0
              1d19 0063  ld   $63         ;5cd9 POP
              1d1a 00ff  ld   $ff         ;5cda RET
              1d1b 002b  ld   $2b         ;5cdb STW
              1d1c 0058  ld   $58         ;5cdb 'CMD17'
              1d1d 0093  ld   $93         ;5cdd INC
              1d1e 001b  ld   $1b         ;5cdd '_vLR'+1
              1d1f 00ff  ld   $ff         ;5cdf RET
              1d20 005d  ld   $5d         ;| RAM segment address (high byte first)
              1d21 00a0  ld   $a0         ;|
              1d22 003b  ld   $3b         ;| Length (1..256)
              1d23 00cd  ld   $cd         ;5da0 DEF
              1d24 00ab  ld   $ab
              1d25 0011  ld   $11         ;5da2 LDWI
              1d26 0009  ld   $09
              1d27 000b  ld   $0b
              1d28 002b  ld   $2b         ;5da5 STW
              1d29 0022  ld   $22         ;5da5 '_sysFn'
              1d2a 0011  ld   $11         ;5da7 LDWI
              1d2b 0078  ld   $78
              1d2c 0080  ld   $80
              1d2d 00b4  ld   $b4         ;5daa SYS
              1d2e 00fa  ld   $fa
              1d2f 00ff  ld   $ff         ;5dac RET
              1d30 002b  ld   $2b         ;5dad STW
              1d31 003a  ld   $3a         ;5dad 'EnableCard'
              1d32 00cd  ld   $cd         ;5daf DEF
              1d33 00ba  ld   $ba
              1d34 0011  ld   $11         ;5db1 LDWI
              1d35 0009  ld   $09
              1d36 000b  ld   $0b
              1d37 002b  ld   $2b         ;5db4 STW
              1d38 0022  ld   $22         ;5db4 '_sysFn'
              1d39 0011  ld   $11         ;5db6 LDWI
              1d3a 007c  ld   $7c
              1d3b 0080  ld   $80
              1d3c 00b4  ld   $b4         ;5db9 SYS
              1d3d 00fa  ld   $fa
              1d3e 00ff  ld   $ff         ;5dbb RET
              1d3f 002b  ld   $2b         ;5dbc STW
              1d40 005a  ld   $5a         ;5dbc 'DisableCard'
              1d41 00cd  ld   $cd         ;5dbe DEF
              1d42 00d4  ld   $d4
              1d43 0059  ld   $59         ;5dc0 LDI
              1d44 00ff  ld   $ff
              1d45 005e  ld   $5e         ;5dc2 ST
              1d46 002a  ld   $2a
              1d47 0059  ld   $59         ;5dc4 LDI
              1d48 002a  ld   $2a
              1d49 002b  ld   $2b         ;5dc6 STW
              1d4a 0024  ld   $24         ;5dc6 '_sysArgs0'
              1d4b 00e3  ld   $e3         ;5dc8 ADDI
              1d4c 0001  ld   $01
              1d4d 002b  ld   $2b         ;5dca STW
              1d4e 0026  ld   $26         ;5dca '_sysArgs2'
              1d4f 0011  ld   $11         ;5dcc LDWI
              1d50 0015  ld   $15
              1d51 000b  ld   $0b
              1d52 002b  ld   $2b         ;5dcf STW
              1d53 0022  ld   $22         ;5dcf '_sysFn'
              1d54 00b4  ld   $b4         ;5dd1 SYS
              1d55 00cb  ld   $cb
              1d56 001a  ld   $1a         ;5dd3 LD
              1d57 002a  ld   $2a
              1d58 00ff  ld   $ff         ;5dd5 RET
              1d59 002b  ld   $2b         ;5dd6 STW
              1d5a 0038  ld   $38         ;5dd6 'SendOnesToCard'
              1d5b 0093  ld   $93         ;5dd8 INC
              1d5c 001b  ld   $1b         ;5dd8 '_vLR'+1
              1d5d 00ff  ld   $ff         ;5dda RET
              1d5e 005e  ld   $5e         ;| RAM segment address (high byte first)
              1d5f 00a0  ld   $a0         ;|
              1d60 002b  ld   $2b         ;| Length (1..256)
              1d61 00cd  ld   $cd         ;5ea0 DEF
              1d62 00c4  ld   $c4
              1d63 00fc  ld   $fc         ;5ea2 1020
              1d64 005d  ld   $5d         ;5ea3 >Checksum
              1d65 005e  ld   $5e         ;5ea4 ST
              1d66 005d  ld   $5d         ;5ea4 'Checksum'+1
              1d67 0059  ld   $59         ;5ea6 LDI
              1d68 0008  ld   $08
              1d69 002b  ld   $2b         ;5ea8 STW
              1d6a 0036  ld   $36         ;5ea8 'i'
              1d6b 0021  ld   $21         ;5eaa LDW
              1d6c 005c  ld   $5c         ;5eaa 'Checksum'
              1d6d 0035  ld   $35         ;5eac BCC
              1d6e 0053  ld   $53         ;5ead GE
              1d6f 00b8  ld   $b8
              1d70 0099  ld   $99         ;5eaf ADDW
              1d71 005c  ld   $5c         ;5eaf 'Checksum'
              1d72 002b  ld   $2b         ;5eb1 STW
              1d73 005c  ld   $5c         ;5eb1 'Checksum'
              1d74 0011  ld   $11         ;5eb3 LDWI
              1d75 0021  ld   $21
              1d76 0010  ld   $10
              1d77 00fc  ld   $fc         ;5eb6 XORW
              1d78 005c  ld   $5c         ;5eb6 'Checksum'
              1d79 0090  ld   $90         ;5eb8 BRA
              1d7a 00ba  ld   $ba
              1d7b 0099  ld   $99         ;5eba ADDW
              1d7c 005c  ld   $5c         ;5eba 'Checksum'
              1d7d 002b  ld   $2b         ;5ebc STW
              1d7e 005c  ld   $5c         ;5ebc 'Checksum'
              1d7f 0021  ld   $21         ;5ebe LDW
              1d80 0036  ld   $36         ;5ebe 'i'
              1d81 00e6  ld   $e6         ;5ec0 SUBI
              1d82 0001  ld   $01
              1d83 0035  ld   $35         ;5ec2 BCC
              1d84 004d  ld   $4d         ;5ec3 GT
              1d85 00a6  ld   $a6
              1d86 00ff  ld   $ff         ;5ec5 RET
              1d87 002b  ld   $2b         ;5ec6 STW
              1d88 005e  ld   $5e         ;5ec6 'UpdateCrc16'
              1d89 0093  ld   $93         ;5ec8 INC
              1d8a 001b  ld   $1b         ;5ec8 '_vLR'+1
              1d8b 00ff  ld   $ff         ;5eca RET
              1d8c 005f  ld   $5f         ;| RAM segment address (high byte first)
              1d8d 00a0  ld   $a0         ;|
              1d8e 005e  ld   $5e         ;| Length (1..256)
              1d8f 00cd  ld   $cd         ;5fa0 DEF
              1d90 00d6  ld   $d6
              1d91 0075  ld   $75         ;5fa2 PUSH
              1d92 002b  ld   $2b         ;5fa3 STW
              1d93 0050  ld   $50         ;5fa3 'p'
              1d94 0021  ld   $21         ;5fa5 LDW
              1d95 0060  ld   $60         ;5fa5 'Buffer'
              1d96 002b  ld   $2b         ;5fa7 STW
              1d97 0052  ld   $52         ;5fa7 'q'
              1d98 0059  ld   $59         ;5fa9 LDI
              1d99 00ff  ld   $ff
              1d9a 00f0  ld   $f0         ;5fab POKE
              1d9b 0052  ld   $52         ;5fab 'q'
              1d9c 0093  ld   $93         ;5fad INC
              1d9d 0052  ld   $52         ;5fad 'q'
              1d9e 00f0  ld   $f0         ;5faf POKE
              1d9f 0052  ld   $52         ;5faf 'q'
              1da0 0093  ld   $93         ;5fb1 INC
              1da1 0052  ld   $52         ;5fb1 'q'
              1da2 0059  ld   $59         ;5fb3 LDI
              1da3 0006  ld   $06
              1da4 002b  ld   $2b         ;5fb5 STW
              1da5 0036  ld   $36         ;5fb5 'i'
              1da6 0021  ld   $21         ;5fb7 LDW
              1da7 0050  ld   $50         ;5fb7 'p'
              1da8 00ad  ld   $ad         ;5fb9 PEEK
              1da9 0093  ld   $93         ;5fba INC
              1daa 0050  ld   $50         ;5fba 'p'
              1dab 00f0  ld   $f0         ;5fbc POKE
              1dac 0052  ld   $52         ;5fbc 'q'
              1dad 0093  ld   $93         ;5fbe INC
              1dae 0052  ld   $52         ;5fbe 'q'
              1daf 0021  ld   $21         ;5fc0 LDW
              1db0 0036  ld   $36         ;5fc0 'i'
              1db1 00e6  ld   $e6         ;5fc2 SUBI
              1db2 0001  ld   $01
              1db3 0035  ld   $35         ;5fc4 BCC
              1db4 004d  ld   $4d         ;5fc5 GT
              1db5 00b3  ld   $b3
              1db6 0021  ld   $21         ;5fc7 LDW
              1db7 0060  ld   $60         ;5fc7 'Buffer'
              1db8 002b  ld   $2b         ;5fc9 STW
              1db9 0024  ld   $24         ;5fc9 '_sysArgs0'
              1dba 00e3  ld   $e3         ;5fcb ADDI
              1dbb 0008  ld   $08
              1dbc 002b  ld   $2b         ;5fcd STW
              1dbd 0026  ld   $26         ;5fcd '_sysArgs2'
              1dbe 0011  ld   $11         ;5fcf LDWI
              1dbf 0015  ld   $15
              1dc0 000b  ld   $0b
              1dc1 002b  ld   $2b         ;5fd2 STW
              1dc2 0022  ld   $22         ;5fd2 '_sysFn'
              1dc3 00b4  ld   $b4         ;5fd4 SYS
              1dc4 00cb  ld   $cb
              1dc5 0063  ld   $63         ;5fd6 POP
              1dc6 00ff  ld   $ff         ;5fd7 RET
              1dc7 002b  ld   $2b         ;5fd8 STW
              1dc8 003c  ld   $3c         ;5fd8 'SendCommandToCard'
              1dc9 00cd  ld   $cd         ;5fda DEF
              1dca 00f7  ld   $f7
              1dcb 0075  ld   $75         ;5fdc PUSH
              1dcc 0059  ld   $59         ;5fdd LDI
              1dcd 0008  ld   $08
              1dce 002b  ld   $2b         ;5fdf STW
              1dcf 0036  ld   $36         ;5fdf 'i'
              1dd0 00cf  ld   $cf         ;5fe1 CALL
              1dd1 0038  ld   $38         ;5fe1 'SendOnesToCard'
              1dd2 0082  ld   $82         ;5fe3 ANDI
              1dd3 0080  ld   $80
              1dd4 0035  ld   $35         ;5fe5 BCC
              1dd5 003f  ld   $3f         ;5fe6 EQ
              1dd6 00ed  ld   $ed
              1dd7 0021  ld   $21         ;5fe8 LDW
              1dd8 0036  ld   $36         ;5fe8 'i'
              1dd9 00e6  ld   $e6         ;5fea SUBI
              1dda 0001  ld   $01
              1ddb 0035  ld   $35         ;5fec BCC
              1ddc 004d  ld   $4d         ;5fed GT
              1ddd 00dd  ld   $dd
              1dde 001a  ld   $1a         ;5fef LD
              1ddf 002a  ld   $2a
              1de0 002b  ld   $2b         ;5ff1 STW
              1de1 0044  ld   $44         ;5ff1 'CardReply'
              1de2 00cf  ld   $cf         ;5ff3 CALL
              1de3 0062  ld   $62         ;5ff3 'PrintByte'
              1de4 0021  ld   $21         ;5ff5 LDW
              1de5 0044  ld   $44         ;5ff5 'CardReply'
              1de6 0063  ld   $63         ;5ff7 POP
              1de7 00ff  ld   $ff         ;5ff8 RET
              1de8 002b  ld   $2b         ;5ff9 STW
              1de9 003e  ld   $3e         ;5ff9 'WaitForCardReply'
              1dea 0093  ld   $93         ;5ffb INC
              1deb 001b  ld   $1b         ;5ffb '_vLR'+1
              1dec 00ff  ld   $ff         ;5ffd RET
              1ded 0060  ld   $60         ;| RAM segment address (high byte first)
              1dee 00a0  ld   $a0         ;|
              1def 005c  ld   $5c         ;| Length (1..256)
              1df0 00cd  ld   $cd         ;60a0 DEF
              1df1 00d0  ld   $d0
              1df2 0075  ld   $75         ;60a2 PUSH
              1df3 00cf  ld   $cf         ;60a3 CALL
              1df4 0042  ld   $42         ;60a3 'CMD0'
              1df5 0035  ld   $35         ;60a5 BCC
              1df6 003f  ld   $3f         ;60a6 EQ
              1df7 00af  ld   $af
              1df8 00cf  ld   $cf         ;60a8 CALL
              1df9 005a  ld   $5a         ;60a8 'DisableCard'
              1dfa 001a  ld   $1a         ;60aa LD
              1dfb fe00  bra  ac          ;+-----------------------------------+
              1dfc fcfd  bra  $1dfd       ;|                                   |
              1dfd 1404  ld   $04,y       ;| Trampoline for page $1d00 lookups |
              1dfe e068  jmp  y,$68       ;|                                   |
              1dff c218  st   [$18]       ;+-----------------------------------+
              1e00 000e  ld   $0e
              1e01 00e6  ld   $e6         ;60ac SUBI
              1e02 003c  ld   $3c
              1e03 0035  ld   $35         ;60ae BCC
              1e04 0050  ld   $50         ;60af LT
              1e05 00a1  ld   $a1
              1e06 00cf  ld   $cf         ;60b1 CALL
              1e07 0046  ld   $46         ;60b1 'CMD8'
              1e08 00cf  ld   $cf         ;60b3 CALL
              1e09 004a  ld   $4a         ;60b3 'CMD55'
              1e0a 00cf  ld   $cf         ;60b5 CALL
              1e0b 004c  ld   $4c         ;60b5 'ACMD41'
              1e0c 0021  ld   $21         ;60b7 LDW
              1e0d 0044  ld   $44         ;60b7 'CardReply'
              1e0e 0035  ld   $35         ;60b9 BCC
              1e0f 003f  ld   $3f         ;60ba EQ
              1e10 00c1  ld   $c1
              1e11 001a  ld   $1a         ;60bc LD
              1e12 000e  ld   $0e
              1e13 00e6  ld   $e6         ;60be SUBI
              1e14 0078  ld   $78
              1e15 0035  ld   $35         ;60c0 BCC
              1e16 0050  ld   $50         ;60c1 LT
              1e17 00b1  ld   $b1
              1e18 0021  ld   $21         ;60c3 LDW
              1e19 0034  ld   $34         ;60c3 'CardType'
              1e1a 008c  ld   $8c         ;60c5 XORI
              1e1b 0002  ld   $02
              1e1c 0035  ld   $35         ;60c7 BCC
              1e1d 0072  ld   $72         ;60c8 NE
              1e1e 00ca  ld   $ca
              1e1f 00cf  ld   $cf         ;60ca CALL
              1e20 0048  ld   $48         ;60ca 'CMD58'
              1e21 00cf  ld   $cf         ;60cc CALL
              1e22 004e  ld   $4e         ;60cc 'CMD16'
              1e23 00cf  ld   $cf         ;60ce CALL
              1e24 005a  ld   $5a         ;60ce 'DisableCard'
              1e25 0063  ld   $63         ;60d0 POP
              1e26 00ff  ld   $ff         ;60d1 RET
              1e27 002b  ld   $2b         ;60d2 STW
              1e28 0064  ld   $64         ;60d2 'InitCard'
              1e29 00cd  ld   $cd         ;60d4 DEF
              1e2a 00f5  ld   $f5
              1e2b 0075  ld   $75         ;60d6 PUSH
              1e2c 00cf  ld   $cf         ;60d7 CALL
              1e2d 0066  ld   $66         ;60d7 'ReadSector'
              1e2e 00cd  ld   $cd         ;60d9 DEF
              1e2f 00e1  ld   $e1
              1e30 0056  ld   $56         ;60db 'V'
              1e31 006f  ld   $6f         ;60dc 'o'
              1e32 006c  ld   $6c         ;60dd 'l'
              1e33 002e  ld   $2e         ;60de '.'
              1e34 0049  ld   $49         ;60df 'I'
              1e35 0044  ld   $44         ;60e0 'D'
              1e36 0020  ld   $20         ;60e1 ' '
              1e37 0000  ld   $00         ;60e2 0
              1e38 00cf  ld   $cf         ;60e3 CALL
              1e39 0032  ld   $32         ;60e3 'PrintText'
              1e3a 0059  ld   $59         ;60e5 LDI
              1e3b 000b  ld   $0b
              1e3c 0099  ld   $99         ;60e7 ADDW
              1e3d 0030  ld   $30         ;60e7 'Address'
              1e3e 00f6  ld   $f6         ;60e9 DEEK
              1e3f 002b  ld   $2b         ;60ea STW
              1e40 0068  ld   $68         ;60ea 'k'
              1e41 00cf  ld   $cf         ;60ec CALL
              1e42 006a  ld   $6a         ;60ec 'PrintWord'
              1e43 0011  ld   $11         ;60ee LDWI
              1e44 0000  ld   $00
              1e45 0002  ld   $02
              1e46 00fc  ld   $fc         ;60f1 XORW
              1e47 0068  ld   $68         ;60f1 'k'
              1e48 00cf  ld   $cf         ;60f3 CALL
              1e49 0040  ld   $40         ;60f3 'PrintResult'
              1e4a 0063  ld   $63         ;60f5 POP
              1e4b 00ff  ld   $ff         ;60f6 RET
              1e4c 002b  ld   $2b         ;60f7 STW
              1e4d 006c  ld   $6c         ;60f7 'ReadVolumeId'
              1e4e 0093  ld   $93         ;60f9 INC
              1e4f 001b  ld   $1b         ;60f9 '_vLR'+1
              1e50 00ff  ld   $ff         ;60fb RET
              1e51 0061  ld   $61         ;| RAM segment address (high byte first)
              1e52 00a0  ld   $a0         ;|
              1e53 004e  ld   $4e         ;| Length (1..256)
              1e54 00cd  ld   $cd         ;61a0 DEF
              1e55 00e7  ld   $e7
              1e56 0075  ld   $75         ;61a2 PUSH
              1e57 0059  ld   $59         ;61a3 LDI
              1e58 0000  ld   $00
              1e59 002b  ld   $2b         ;61a5 STW
              1e5a 0056  ld   $56         ;61a5 'SectorL'
              1e5b 002b  ld   $2b         ;61a7 STW
              1e5c 0054  ld   $54         ;61a7 'SectorH'
              1e5d 00cf  ld   $cf         ;61a9 CALL
              1e5e 0066  ld   $66         ;61a9 'ReadSector'
              1e5f 00cd  ld   $cd         ;61ab DEF
              1e60 00b0  ld   $b0
              1e61 004d  ld   $4d         ;61ad 'M'
              1e62 0042  ld   $42         ;61ae 'B'
              1e63 0052  ld   $52         ;61af 'R'
              1e64 0020  ld   $20         ;61b0 ' '
              1e65 0000  ld   $00         ;61b1 0
              1e66 00cf  ld   $cf         ;61b2 CALL
              1e67 0032  ld   $32         ;61b2 'PrintText'
              1e68 0011  ld   $11         ;61b4 LDWI
              1e69 00fe  ld   $fe
              1e6a 0001  ld   $01
              1e6b 0099  ld   $99         ;61b7 ADDW
              1e6c 0030  ld   $30         ;61b7 'Address'
              1e6d 00f6  ld   $f6         ;61b9 DEEK
              1e6e 002b  ld   $2b         ;61ba STW
              1e6f 0068  ld   $68         ;61ba 'k'
              1e70 0011  ld   $11         ;61bc LDWI
              1e71 0055  ld   $55
              1e72 00aa  ld   $aa
              1e73 00fc  ld   $fc         ;61bf XORW
              1e74 0068  ld   $68         ;61bf 'k'
              1e75 0035  ld   $35         ;61c1 BCC
              1e76 0072  ld   $72         ;61c2 NE
              1e77 00e5  ld   $e5
              1e78 0011  ld   $11         ;61c4 LDWI
              1e79 00c6  ld   $c6
              1e7a 0001  ld   $01
              1e7b 0099  ld   $99         ;61c7 ADDW
              1e7c 0030  ld   $30         ;61c7 'Address'
              1e7d 00f6  ld   $f6         ;61c9 DEEK
              1e7e 002b  ld   $2b         ;61ca STW
              1e7f 0056  ld   $56         ;61ca 'SectorL'
              1e80 0011  ld   $11         ;61cc LDWI
              1e81 00c8  ld   $c8
              1e82 0001  ld   $01
              1e83 0099  ld   $99         ;61cf ADDW
              1e84 0030  ld   $30         ;61cf 'Address'
              1e85 00f6  ld   $f6         ;61d1 DEEK
              1e86 002b  ld   $2b         ;61d2 STW
              1e87 0054  ld   $54         ;61d2 'SectorH'
              1e88 0011  ld   $11         ;61d4 LDWI
              1e89 00c2  ld   $c2
              1e8a 0001  ld   $01
              1e8b 0099  ld   $99         ;61d7 ADDW
              1e8c 0030  ld   $30         ;61d7 'Address'
              1e8d 00ad  ld   $ad         ;61d9 PEEK
              1e8e 002b  ld   $2b         ;61da STW
              1e8f 0068  ld   $68         ;61da 'k'
              1e90 00cf  ld   $cf         ;61dc CALL
              1e91 0062  ld   $62         ;61dc 'PrintByte'
              1e92 0059  ld   $59         ;61de LDI
              1e93 000b  ld   $0b
              1e94 00fc  ld   $fc         ;61e0 XORW
              1e95 0068  ld   $68         ;61e0 'k'
              1e96 0035  ld   $35         ;61e2 BCC
              1e97 003f  ld   $3f         ;61e3 EQ
              1e98 00e5  ld   $e5
              1e99 008c  ld   $8c         ;61e5 XORI
              1e9a 0007  ld   $07
              1e9b 0063  ld   $63         ;61e7 POP
              1e9c 00ff  ld   $ff         ;61e8 RET
              1e9d 002b  ld   $2b         ;61e9 STW
              1e9e 006e  ld   $6e         ;61e9 'ReadMBR'
              1e9f 0093  ld   $93         ;61eb INC
              1ea0 001b  ld   $1b         ;61eb '_vLR'+1
              1ea1 00ff  ld   $ff         ;61ed RET
              1ea2 0062  ld   $62         ;| RAM segment address (high byte first)
              1ea3 00a0  ld   $a0         ;|
              1ea4 005f  ld   $5f         ;| Length (1..256)
              1ea5 00cd  ld   $cd         ;62a0 DEF
              1ea6 00fa  ld   $fa
              1ea7 0075  ld   $75         ;62a2 PUSH
              1ea8 0059  ld   $59         ;62a3 LDI
              1ea9 000d  ld   $0d
              1eaa 0099  ld   $99         ;62a5 ADDW
              1eab 0030  ld   $30         ;62a5 'Address'
              1eac 00ad  ld   $ad         ;62a7 PEEK
              1ead 002b  ld   $2b         ;62a8 STW
              1eae 0070  ld   $70         ;62a8 'ClusterSize'
              1eaf 0021  ld   $21         ;62aa LDW
              1eb0 0056  ld   $56         ;62aa 'SectorL'
              1eb1 002b  ld   $2b         ;62ac STW
              1eb2 0072  ld   $72         ;62ac 'ValueL'
              1eb3 0021  ld   $21         ;62ae LDW
              1eb4 0054  ld   $54         ;62ae 'SectorH'
              1eb5 002b  ld   $2b         ;62b0 STW
              1eb6 0074  ld   $74         ;62b0 'ValueH'
              1eb7 0059  ld   $59         ;62b2 LDI
              1eb8 000e  ld   $0e
              1eb9 0099  ld   $99         ;62b4 ADDW
              1eba 0030  ld   $30         ;62b4 'Address'
              1ebb 00f6  ld   $f6         ;62b6 DEEK
              1ebc 002b  ld   $2b         ;62b7 STW
              1ebd 0076  ld   $76         ;62b7 'OffsetL'
              1ebe 0059  ld   $59         ;62b9 LDI
              1ebf 0000  ld   $00
              1ec0 002b  ld   $2b         ;62bb STW
              1ec1 0078  ld   $78         ;62bb 'OffsetH'
              1ec2 00cf  ld   $cf         ;62bd CALL
              1ec3 007a  ld   $7a         ;62bd 'AddOffset'
              1ec4 002b  ld   $2b         ;62bf STW
              1ec5 007c  ld   $7c         ;62bf 'FatBaseL'
              1ec6 0021  ld   $21         ;62c1 LDW
              1ec7 0074  ld   $74         ;62c1 'ValueH'
              1ec8 002b  ld   $2b         ;62c3 STW
              1ec9 007e  ld   $7e         ;62c3 'FatBaseH'
              1eca 0059  ld   $59         ;62c5 LDI
              1ecb 0024  ld   $24
              1ecc 0099  ld   $99         ;62c7 ADDW
              1ecd 0030  ld   $30         ;62c7 'Address'
              1ece 00f6  ld   $f6         ;62c9 DEEK
              1ecf 002b  ld   $2b         ;62ca STW
              1ed0 0076  ld   $76         ;62ca 'OffsetL'
              1ed1 0059  ld   $59         ;62cc LDI
              1ed2 0026  ld   $26
              1ed3 0099  ld   $99         ;62ce ADDW
              1ed4 0030  ld   $30         ;62ce 'Address'
              1ed5 00f6  ld   $f6         ;62d0 DEEK
              1ed6 002b  ld   $2b         ;62d1 STW
              1ed7 0078  ld   $78         ;62d1 'OffsetH'
              1ed8 00cf  ld   $cf         ;62d3 CALL
              1ed9 007a  ld   $7a         ;62d3 'AddOffset'
              1eda 00cf  ld   $cf         ;62d5 CALL
              1edb 007a  ld   $7a         ;62d5 'AddOffset'
              1edc 0059  ld   $59         ;62d7 LDI
              1edd 0000  ld   $00
              1ede 00b8  ld   $b8         ;62d9 SUBW
              1edf 0070  ld   $70         ;62d9 'ClusterSize'
              1ee0 00b8  ld   $b8         ;62db SUBW
              1ee1 0070  ld   $70         ;62db 'ClusterSize'
              1ee2 002b  ld   $2b         ;62dd STW
              1ee3 0076  ld   $76         ;62dd 'OffsetL'
              1ee4 0011  ld   $11         ;62df LDWI
              1ee5 00ff  ld   $ff
              1ee6 00ff  ld   $ff
              1ee7 002b  ld   $2b         ;62e2 STW
              1ee8 0078  ld   $78         ;62e2 'OffsetH'
              1ee9 00cf  ld   $cf         ;62e4 CALL
              1eea 007a  ld   $7a         ;62e4 'AddOffset'
              1eeb 002b  ld   $2b         ;62e6 STW
              1eec 0081  ld   $81         ;62e6 'ClusterBaseL'
              1eed 0021  ld   $21         ;62e8 LDW
              1eee 0074  ld   $74         ;62e8 'ValueH'
              1eef 002b  ld   $2b         ;62ea STW
              1ef0 0083  ld   $83         ;62ea 'ClusterBaseH'
              1ef1 0059  ld   $59         ;62ec LDI
              1ef2 002c  ld   $2c
              1ef3 0099  ld   $99         ;62ee ADDW
              1ef4 0030  ld   $30         ;62ee 'Address'
              1ef5 00f6  ld   $f6         ;62f0 DEEK
              1ef6 002b  ld   $2b         ;62f1 STW
              1ef7 0085  ld   $85         ;62f1 'CurrentDirL'
              1ef8 0059  ld   $59         ;62f3 LDI
              1ef9 002e  ld   $2e
              1efa 0099  ld   $99         ;62f5 ADDW
              1efb fe00  bra  ac          ;+-----------------------------------+
              1efc fcfd  bra  $1efd       ;|                                   |
              1efd 1404  ld   $04,y       ;| Trampoline for page $1e00 lookups |
              1efe e068  jmp  y,$68       ;|                                   |
              1eff c218  st   [$18]       ;+-----------------------------------+
              1f00 0030  ld   $30         ;62f5 'Address'
              1f01 00f6  ld   $f6         ;62f7 DEEK
              1f02 002b  ld   $2b         ;62f8 STW
              1f03 0087  ld   $87         ;62f8 'CurrentDirH'
              1f04 0063  ld   $63         ;62fa POP
              1f05 00ff  ld   $ff         ;62fb RET
              1f06 0093  ld   $93         ;62fc INC
              1f07 001b  ld   $1b         ;62fc '_vLR'+1
              1f08 00ff  ld   $ff         ;62fe RET
              1f09 0063  ld   $63         ;| RAM segment address (high byte first)
              1f0a 00a0  ld   $a0         ;|
              1f0b 0052  ld   $52         ;| Length (1..256)
              1f0c 002b  ld   $2b         ;63a0 STW
              1f0d 0089  ld   $89         ;63a0 'InitFat32'
              1f0e 00cd  ld   $cd         ;63a2 DEF
              1f0f 00b6  ld   $b6
              1f10 0075  ld   $75         ;63a4 PUSH
              1f11 00cf  ld   $cf         ;63a5 CALL
              1f12 003a  ld   $3a         ;63a5 'EnableCard'
              1f13 0021  ld   $21         ;63a7 LDW
              1f14 0034  ld   $34         ;63a7 'CardType'
              1f15 00e6  ld   $e6         ;63a9 SUBI
              1f16 0002  ld   $02
              1f17 0035  ld   $35         ;63ab BCC
              1f18 0053  ld   $53         ;63ac GE
              1f19 00ae  ld   $ae
              1f1a 00cf  ld   $cf         ;63ae CALL
              1f1b 008b  ld   $8b         ;63ae 'SectorToByte'
              1f1c 00cf  ld   $cf         ;63b0 CALL
              1f1d 0058  ld   $58         ;63b0 'CMD17'
              1f1e 0059  ld   $59         ;63b2 LDI
              1f1f 0000  ld   $00
              1f20 002b  ld   $2b         ;63b4 STW
              1f21 005c  ld   $5c         ;63b4 'Checksum'
              1f22 0063  ld   $63         ;63b6 POP
              1f23 00ff  ld   $ff         ;63b7 RET
              1f24 002b  ld   $2b         ;63b8 STW
              1f25 008d  ld   $8d         ;63b8 'OpenSector'
              1f26 00cd  ld   $cd         ;63ba DEF
              1f27 00eb  ld   $eb
              1f28 0075  ld   $75         ;63bc PUSH
              1f29 00cf  ld   $cf         ;63bd CALL
              1f2a 008d  ld   $8d         ;63bd 'OpenSector'
              1f2b 0021  ld   $21         ;63bf LDW
              1f2c 0030  ld   $30         ;63bf 'Address'
              1f2d 002b  ld   $2b         ;63c1 STW
              1f2e 0052  ld   $52         ;63c1 'q'
              1f2f 0059  ld   $59         ;63c3 LDI
              1f30 0000  ld   $00
              1f31 002b  ld   $2b         ;63c5 STW
              1f32 005c  ld   $5c         ;63c5 'Checksum'
              1f33 0011  ld   $11         ;63c7 LDWI
              1f34 0000  ld   $00
              1f35 0002  ld   $02
              1f36 002b  ld   $2b         ;63ca STW
              1f37 0068  ld   $68         ;63ca 'k'
              1f38 00cf  ld   $cf         ;63cc CALL
              1f39 0038  ld   $38         ;63cc 'SendOnesToCard'
              1f3a 00f0  ld   $f0         ;63ce POKE
              1f3b 0052  ld   $52         ;63ce 'q'
              1f3c 00cf  ld   $cf         ;63d0 CALL
              1f3d 005e  ld   $5e         ;63d0 'UpdateCrc16'
              1f3e 0021  ld   $21         ;63d2 LDW
              1f3f 0052  ld   $52         ;63d2 'q'
              1f40 00e3  ld   $e3         ;63d4 ADDI
              1f41 0001  ld   $01
              1f42 002b  ld   $2b         ;63d6 STW
              1f43 0052  ld   $52         ;63d6 'q'
              1f44 0021  ld   $21         ;63d8 LDW
              1f45 0068  ld   $68         ;63d8 'k'
              1f46 00e6  ld   $e6         ;63da SUBI
              1f47 0001  ld   $01
              1f48 0035  ld   $35         ;63dc BCC
              1f49 004d  ld   $4d         ;63dd GT
              1f4a 00c8  ld   $c8
              1f4b 00cf  ld   $cf         ;63df CALL
              1f4c 0038  ld   $38         ;63df 'SendOnesToCard'
              1f4d 00cf  ld   $cf         ;63e1 CALL
              1f4e 005e  ld   $5e         ;63e1 'UpdateCrc16'
              1f4f 00cf  ld   $cf         ;63e3 CALL
              1f50 0038  ld   $38         ;63e3 'SendOnesToCard'
              1f51 00cf  ld   $cf         ;63e5 CALL
              1f52 005e  ld   $5e         ;63e5 'UpdateCrc16'
              1f53 00cf  ld   $cf         ;63e7 CALL
              1f54 005a  ld   $5a         ;63e7 'DisableCard'
              1f55 0021  ld   $21         ;63e9 LDW
              1f56 005c  ld   $5c         ;63e9 'Checksum'
              1f57 0063  ld   $63         ;63eb POP
              1f58 00ff  ld   $ff         ;63ec RET
              1f59 002b  ld   $2b         ;63ed STW
              1f5a 0066  ld   $66         ;63ed 'ReadSector'
              1f5b 0093  ld   $93         ;63ef INC
              1f5c 001b  ld   $1b         ;63ef '_vLR'+1
              1f5d 00ff  ld   $ff         ;63f1 RET
              1f5e 0064  ld   $64         ;| RAM segment address (high byte first)
              1f5f 00a0  ld   $a0         ;|
              1f60 0052  ld   $52         ;| Length (1..256)
              1f61 00cd  ld   $cd         ;64a0 DEF
              1f62 00d6  ld   $d6
              1f63 0075  ld   $75         ;64a2 PUSH
              1f64 0021  ld   $21         ;64a3 LDW
              1f65 008f  ld   $8f         ;64a3 'FilePosL'
              1f66 00fc  ld   $fc         ;64a5 XORW
              1f67 0091  ld   $91         ;64a5 'FileSizeL'
              1f68 0035  ld   $35         ;64a7 BCC
              1f69 0072  ld   $72         ;64a8 NE
              1f6a 00ac  ld   $ac
              1f6b 0021  ld   $21         ;64aa LDW
              1f6c 0093  ld   $93         ;64aa 'FilePosH'
              1f6d 00fc  ld   $fc         ;64ac XORW
              1f6e 0095  ld   $95         ;64ac 'FileSizeH'
              1f6f 0035  ld   $35         ;64ae BCC
              1f70 003f  ld   $3f         ;64af EQ
              1f71 00d2  ld   $d2
              1f72 0011  ld   $11         ;64b1 LDWI
              1f73 00ff  ld   $ff
              1f74 0001  ld   $01
              1f75 00f8  ld   $f8         ;64b4 ANDW
              1f76 008f  ld   $8f         ;64b4 'FilePosL'
              1f77 0035  ld   $35         ;64b6 BCC
              1f78 0072  ld   $72         ;64b7 NE
              1f79 00bf  ld   $bf
              1f7a 00cf  ld   $cf         ;64b9 CALL
              1f7b 0038  ld   $38         ;64b9 'SendOnesToCard'
              1f7c 00cf  ld   $cf         ;64bb CALL
              1f7d 0038  ld   $38         ;64bb 'SendOnesToCard'
              1f7e 00cf  ld   $cf         ;64bd CALL
              1f7f 008d  ld   $8d         ;64bd 'OpenSector'
              1f80 00cf  ld   $cf         ;64bf CALL
              1f81 0097  ld   $97         ;64bf 'NextSector'
              1f82 0021  ld   $21         ;64c1 LDW
              1f83 008f  ld   $8f         ;64c1 'FilePosL'
              1f84 00e3  ld   $e3         ;64c3 ADDI
              1f85 0001  ld   $01
              1f86 002b  ld   $2b         ;64c5 STW
              1f87 008f  ld   $8f         ;64c5 'FilePosL'
              1f88 0035  ld   $35         ;64c7 BCC
              1f89 0072  ld   $72         ;64c8 NE
              1f8a 00ce  ld   $ce
              1f8b 0021  ld   $21         ;64ca LDW
              1f8c 0093  ld   $93         ;64ca 'FilePosH'
              1f8d 00e3  ld   $e3         ;64cc ADDI
              1f8e 0001  ld   $01
              1f8f 002b  ld   $2b         ;64ce STW
              1f90 0093  ld   $93         ;64ce 'FilePosH'
              1f91 00cf  ld   $cf         ;64d0 CALL
              1f92 0038  ld   $38         ;64d0 'SendOnesToCard'
              1f93 0090  ld   $90         ;64d2 BRA
              1f94 00d4  ld   $d4
              1f95 00e6  ld   $e6         ;64d4 SUBI
              1f96 0001  ld   $01
              1f97 0063  ld   $63         ;64d6 POP
              1f98 00ff  ld   $ff         ;64d7 RET
              1f99 002b  ld   $2b         ;64d8 STW
              1f9a 0099  ld   $99         ;64d8 'LoadByte'
              1f9b 00cd  ld   $cd         ;64da DEF
              1f9c 00eb  ld   $eb
              1f9d 0075  ld   $75         ;64dc PUSH
              1f9e 0021  ld   $21         ;64dd LDW
              1f9f 0085  ld   $85         ;64dd 'CurrentDirL'
              1fa0 002b  ld   $2b         ;64df STW
              1fa1 0072  ld   $72         ;64df 'ValueL'
              1fa2 0021  ld   $21         ;64e1 LDW
              1fa3 0087  ld   $87         ;64e1 'CurrentDirH'
              1fa4 002b  ld   $2b         ;64e3 STW
              1fa5 0074  ld   $74         ;64e3 'ValueH'
              1fa6 00cf  ld   $cf         ;64e5 CALL
              1fa7 009b  ld   $9b         ;64e5 'ClusterToSector'
              1fa8 00cf  ld   $cf         ;64e7 CALL
              1fa9 0066  ld   $66         ;64e7 'ReadSector'
              1faa 0093  ld   $93         ;64e9 INC
              1fab 0056  ld   $56         ;64e9 'SectorL'
              1fac 0063  ld   $63         ;64eb POP
              1fad 00ff  ld   $ff         ;64ec RET
              1fae 002b  ld   $2b         ;64ed STW
              1faf 009d  ld   $9d         ;64ed 'ReadDirectory'
              1fb0 0093  ld   $93         ;64ef INC
              1fb1 001b  ld   $1b         ;64ef '_vLR'+1
              1fb2 00ff  ld   $ff         ;64f1 RET
              1fb3 0065  ld   $65         ;| RAM segment address (high byte first)
              1fb4 00a0  ld   $a0         ;|
              1fb5 0060  ld   $60         ;| Length (1..256)
              1fb6 00cd  ld   $cd         ;65a0 DEF
              1fb7 00c9  ld   $c9
              1fb8 0075  ld   $75         ;65a2 PUSH
              1fb9 0059  ld   $59         ;65a3 LDI
              1fba 0000  ld   $00
              1fbb 002b  ld   $2b         ;65a5 STW
              1fbc 008f  ld   $8f         ;65a5 'FilePosL'
              1fbd 002b  ld   $2b         ;65a7 STW
              1fbe 0093  ld   $93         ;65a7 'FilePosH'
              1fbf 0021  ld   $21         ;65a9 LDW
              1fc0 0050  ld   $50         ;65a9 'p'
              1fc1 00e3  ld   $e3         ;65ab ADDI
              1fc2 001c  ld   $1c
              1fc3 00f6  ld   $f6         ;65ad DEEK
              1fc4 002b  ld   $2b         ;65ae STW
              1fc5 0091  ld   $91         ;65ae 'FileSizeL'
              1fc6 0021  ld   $21         ;65b0 LDW
              1fc7 0050  ld   $50         ;65b0 'p'
              1fc8 00e3  ld   $e3         ;65b2 ADDI
              1fc9 001e  ld   $1e
              1fca 00f6  ld   $f6         ;65b4 DEEK
              1fcb 002b  ld   $2b         ;65b5 STW
              1fcc 0095  ld   $95         ;65b5 'FileSizeH'
              1fcd 0021  ld   $21         ;65b7 LDW
              1fce 0050  ld   $50         ;65b7 'p'
              1fcf 00e3  ld   $e3         ;65b9 ADDI
              1fd0 001a  ld   $1a
              1fd1 00f6  ld   $f6         ;65bb DEEK
              1fd2 002b  ld   $2b         ;65bc STW
              1fd3 0072  ld   $72         ;65bc 'ValueL'
              1fd4 0021  ld   $21         ;65be LDW
              1fd5 0050  ld   $50         ;65be 'p'
              1fd6 00e3  ld   $e3         ;65c0 ADDI
              1fd7 0014  ld   $14
              1fd8 00f6  ld   $f6         ;65c2 DEEK
              1fd9 002b  ld   $2b         ;65c3 STW
              1fda 0074  ld   $74         ;65c3 'ValueH'
              1fdb 00cf  ld   $cf         ;65c5 CALL
              1fdc 009f  ld   $9f         ;65c5 'ReadClusterChain'
              1fdd 00cf  ld   $cf         ;65c7 CALL
              1fde 009b  ld   $9b         ;65c7 'ClusterToSector'
              1fdf 0063  ld   $63         ;65c9 POP
              1fe0 00ff  ld   $ff         ;65ca RET
              1fe1 002b  ld   $2b         ;65cb STW
              1fe2 00a1  ld   $a1         ;65cb 'OpenFile'
              1fe3 00cd  ld   $cd         ;65cd DEF
              1fe4 00f9  ld   $f9
              1fe5 0075  ld   $75         ;65cf PUSH
              1fe6 001a  ld   $1a         ;65d0 LD
              1fe7 0075  ld   $75         ;65d0 'ValueH'+1
              1fe8 0082  ld   $82         ;65d2 ANDI
              1fe9 000f  ld   $0f
              1fea 005e  ld   $5e         ;65d4 ST
              1feb 0075  ld   $75         ;65d4 'ValueH'+1
              1fec 0059  ld   $59         ;65d6 LDI
              1fed 0001  ld   $01
              1fee 002b  ld   $2b         ;65d8 STW
              1fef 0068  ld   $68         ;65d8 'k'
              1ff0 00b8  ld   $b8         ;65da SUBW
              1ff1 0070  ld   $70         ;65da 'ClusterSize'
              1ff2 0035  ld   $35         ;65dc BCC
              1ff3 0053  ld   $53         ;65dd GE
              1ff4 00e5  ld   $e5
              1ff5 00cf  ld   $cf         ;65df CALL
              1ff6 00a3  ld   $a3         ;65df 'ShiftLeft'
              1ff7 0021  ld   $21         ;65e1 LDW
              1ff8 0068  ld   $68         ;65e1 'k'
              1ff9 0099  ld   $99         ;65e3 ADDW
              1ffa 0068  ld   $68         ;65e3 'k'
              1ffb fe00  bra  ac          ;+-----------------------------------+
              1ffc fcfd  bra  $1ffd       ;|                                   |
              1ffd 1404  ld   $04,y       ;| Trampoline for page $1f00 lookups |
              1ffe e068  jmp  y,$68       ;|                                   |
              1fff c218  st   [$18]       ;+-----------------------------------+
              2000 0090  ld   $90         ;65e5 BRA
              2001 00d6  ld   $d6
              2002 0021  ld   $21         ;65e7 LDW
              2003 0081  ld   $81         ;65e7 'ClusterBaseL'
              2004 002b  ld   $2b         ;65e9 STW
              2005 0076  ld   $76         ;65e9 'OffsetL'
              2006 0021  ld   $21         ;65eb LDW
              2007 0083  ld   $83         ;65eb 'ClusterBaseH'
              2008 002b  ld   $2b         ;65ed STW
              2009 0078  ld   $78         ;65ed 'OffsetH'
              200a 00cf  ld   $cf         ;65ef CALL
              200b 007a  ld   $7a         ;65ef 'AddOffset'
              200c 0021  ld   $21         ;65f1 LDW
              200d 0072  ld   $72         ;65f1 'ValueL'
              200e 002b  ld   $2b         ;65f3 STW
              200f 0056  ld   $56         ;65f3 'SectorL'
              2010 0021  ld   $21         ;65f5 LDW
              2011 0074  ld   $74         ;65f5 'ValueH'
              2012 002b  ld   $2b         ;65f7 STW
              2013 0054  ld   $54         ;65f7 'SectorH'
              2014 0063  ld   $63         ;65f9 POP
              2015 00ff  ld   $ff         ;65fa RET
              2016 002b  ld   $2b         ;65fb STW
              2017 009b  ld   $9b         ;65fb 'ClusterToSector'
              2018 0093  ld   $93         ;65fd INC
              2019 001b  ld   $1b         ;65fd '_vLR'+1
              201a 00ff  ld   $ff         ;65ff RET
              201b 0066  ld   $66         ;| RAM segment address (high byte first)
              201c 00a0  ld   $a0         ;|
              201d 005f  ld   $5f         ;| Length (1..256)
              201e 00cd  ld   $cd         ;66a0 DEF
              201f 00bd  ld   $bd
              2020 0075  ld   $75         ;66a2 PUSH
              2021 0059  ld   $59         ;66a3 LDI
              2022 0000  ld   $00
              2023 005e  ld   $5e         ;66a5 ST
              2024 0076  ld   $76         ;66a5 'OffsetL'
              2025 001a  ld   $1a         ;66a7 LD
              2026 0072  ld   $72         ;66a7 'ValueL'
              2027 005e  ld   $5e         ;66a9 ST
              2028 0077  ld   $77         ;66a9 'OffsetL'+1
              2029 001a  ld   $1a         ;66ab LD
              202a 0073  ld   $73         ;66ab 'ValueL'+1
              202b 005e  ld   $5e         ;66ad ST
              202c 0078  ld   $78         ;66ad 'OffsetH'
              202d 001a  ld   $1a         ;66af LD
              202e 0074  ld   $74         ;66af 'ValueH'
              202f 005e  ld   $5e         ;66b1 ST
              2030 0079  ld   $79         ;66b1 'OffsetH'+1
              2031 0021  ld   $21         ;66b3 LDW
              2032 0076  ld   $76         ;66b3 'OffsetL'
              2033 002b  ld   $2b         ;66b5 STW
              2034 0072  ld   $72         ;66b5 'ValueL'
              2035 0021  ld   $21         ;66b7 LDW
              2036 0078  ld   $78         ;66b7 'OffsetH'
              2037 002b  ld   $2b         ;66b9 STW
              2038 0074  ld   $74         ;66b9 'ValueH'
              2039 00cf  ld   $cf         ;66bb CALL
              203a 007a  ld   $7a         ;66bb 'AddOffset'
              203b 0063  ld   $63         ;66bd POP
              203c 00ff  ld   $ff         ;66be RET
              203d 002b  ld   $2b         ;66bf STW
              203e 008b  ld   $8b         ;66bf 'SectorToByte'
              203f 00cd  ld   $cd         ;66c1 DEF
              2040 00d0  ld   $d0
              2041 0075  ld   $75         ;66c3 PUSH
              2042 0021  ld   $21         ;66c4 LDW
              2043 0072  ld   $72         ;66c4 'ValueL'
              2044 002b  ld   $2b         ;66c6 STW
              2045 0076  ld   $76         ;66c6 'OffsetL'
              2046 0021  ld   $21         ;66c8 LDW
              2047 0074  ld   $74         ;66c8 'ValueH'
              2048 002b  ld   $2b         ;66ca STW
              2049 0078  ld   $78         ;66ca 'OffsetH'
              204a 00cf  ld   $cf         ;66cc CALL
              204b 007a  ld   $7a         ;66cc 'AddOffset'
              204c 0021  ld   $21         ;66ce LDW
              204d 0078  ld   $78         ;66ce 'OffsetH'
              204e 0063  ld   $63         ;66d0 POP
              204f 00ff  ld   $ff         ;66d1 RET
              2050 002b  ld   $2b         ;66d2 STW
              2051 00a3  ld   $a3         ;66d2 'ShiftLeft'
              2052 00cd  ld   $cd         ;66d4 DEF
              2053 00fa  ld   $fa
              2054 0021  ld   $21         ;66d6 LDW
              2055 0072  ld   $72         ;66d6 'ValueL'
              2056 00fc  ld   $fc         ;66d8 XORW
              2057 0076  ld   $76         ;66d8 'OffsetL'
              2058 0035  ld   $35         ;66da BCC
              2059 0053  ld   $53         ;66db GE
              205a 00df  ld   $df
              205b 0021  ld   $21         ;66dd LDW
              205c 0072  ld   $72         ;66dd 'ValueL'
              205d 0090  ld   $90         ;66df BRA
              205e 00e2  ld   $e2
              205f 0011  ld   $11         ;66e1 LDWI
              2060 0000  ld   $00
              2061 0080  ld   $80
              2062 0099  ld   $99         ;66e4 ADDW
              2063 0076  ld   $76         ;66e4 'OffsetL'
              2064 0035  ld   $35         ;66e6 BCC
              2065 0050  ld   $50         ;66e7 LT
              2066 00ed  ld   $ed
              2067 0021  ld   $21         ;66e9 LDW
              2068 0074  ld   $74         ;66e9 'ValueH'
              2069 00e3  ld   $e3         ;66eb ADDI
              206a 0001  ld   $01
              206b 002b  ld   $2b         ;66ed STW
              206c 0074  ld   $74         ;66ed 'ValueH'
              206d 0021  ld   $21         ;66ef LDW
              206e 0074  ld   $74         ;66ef 'ValueH'
              206f 0099  ld   $99         ;66f1 ADDW
              2070 0078  ld   $78         ;66f1 'OffsetH'
              2071 002b  ld   $2b         ;66f3 STW
              2072 0074  ld   $74         ;66f3 'ValueH'
              2073 0021  ld   $21         ;66f5 LDW
              2074 0072  ld   $72         ;66f5 'ValueL'
              2075 0099  ld   $99         ;66f7 ADDW
              2076 0076  ld   $76         ;66f7 'OffsetL'
              2077 002b  ld   $2b         ;66f9 STW
              2078 0072  ld   $72         ;66f9 'ValueL'
              2079 00ff  ld   $ff         ;66fb RET
              207a 0093  ld   $93         ;66fc INC
              207b 001b  ld   $1b         ;66fc '_vLR'+1
              207c 00ff  ld   $ff         ;66fe RET
              207d 0067  ld   $67         ;| RAM segment address (high byte first)
              207e 00a0  ld   $a0         ;|
              207f 0042  ld   $42         ;| Length (1..256)
              2080 002b  ld   $2b         ;67a0 STW
              2081 007a  ld   $7a         ;67a0 'AddOffset'
              2082 00cd  ld   $cd         ;67a2 DEF
              2083 00b9  ld   $b9
              2084 0075  ld   $75         ;67a4 PUSH
              2085 00e6  ld   $e6         ;67a5 SUBI
              2086 0020  ld   $20
              2087 0035  ld   $35         ;67a7 BCC
              2088 0053  ld   $53         ;67a8 GE
              2089 00ac  ld   $ac
              208a 0059  ld   $59         ;67aa LDI
              208b 007f  ld   $7f
              208c 0090  ld   $90         ;67ac BRA
              208d 00b3  ld   $b3
              208e 00e6  ld   $e6         ;67ae SUBI
              208f 0060  ld   $60
              2090 0035  ld   $35         ;67b0 BCC
              2091 0050  ld   $50         ;67b1 LT
              2092 00b3  ld   $b3
              2093 0059  ld   $59         ;67b3 LDI
              2094 007f  ld   $7f
              2095 0082  ld   $82         ;67b5 ANDI
              2096 007f  ld   $7f
              2097 00cf  ld   $cf         ;67b7 CALL
              2098 00a5  ld   $a5         ;67b7 'PrintChar'
              2099 0063  ld   $63         ;67b9 POP
              209a 00ff  ld   $ff         ;67ba RET
              209b 002b  ld   $2b         ;67bb STW
              209c 00a7  ld   $a7         ;67bb 'SafePrintChar'
              209d 00cd  ld   $cd         ;67bd DEF
              209e 00ca  ld   $ca
              209f 0075  ld   $75         ;67bf PUSH
              20a0 0021  ld   $21         ;67c0 LDW
              20a1 0074  ld   $74         ;67c0 'ValueH'
              20a2 00cf  ld   $cf         ;67c2 CALL
              20a3 006a  ld   $6a         ;67c2 'PrintWord'
              20a4 0021  ld   $21         ;67c4 LDW
              20a5 0072  ld   $72         ;67c4 'ValueL'
              20a6 00cf  ld   $cf         ;67c6 CALL
              20a7 006a  ld   $6a         ;67c6 'PrintWord'
              20a8 00cf  ld   $cf         ;67c8 CALL
              20a9 00a9  ld   $a9         ;67c8 'Newline'
              20aa 0063  ld   $63         ;67ca POP
              20ab 00ff  ld   $ff         ;67cb RET
              20ac 002b  ld   $2b         ;67cc STW
              20ad 00ab  ld   $ab         ;67cc 'PrintValue'
              20ae 00cd  ld   $cd         ;67ce DEF
              20af 00db  ld   $db
              20b0 0075  ld   $75         ;67d0 PUSH
              20b1 002b  ld   $2b         ;67d1 STW
              20b2 0068  ld   $68         ;67d1 'k'
              20b3 001a  ld   $1a         ;67d3 LD
              20b4 0069  ld   $69         ;67d3 'k'+1
              20b5 00cf  ld   $cf         ;67d5 CALL
              20b6 0062  ld   $62         ;67d5 'PrintByte'
              20b7 001a  ld   $1a         ;67d7 LD
              20b8 0068  ld   $68         ;67d7 'k'
              20b9 00cf  ld   $cf         ;67d9 CALL
              20ba 0062  ld   $62         ;67d9 'PrintByte'
              20bb 0063  ld   $63         ;67db POP
              20bc 00ff  ld   $ff         ;67dc RET
              20bd 002b  ld   $2b         ;67dd STW
              20be 006a  ld   $6a         ;67dd 'PrintWord'
              20bf 0093  ld   $93         ;67df INC
              20c0 001b  ld   $1b         ;67df '_vLR'+1
              20c1 00ff  ld   $ff         ;67e1 RET
              20c2 0068  ld   $68         ;| RAM segment address (high byte first)
              20c3 00a0  ld   $a0         ;|
              20c4 0056  ld   $56         ;| Length (1..256)
              20c5 00cd  ld   $cd         ;68a0 DEF
              20c6 00b5  ld   $b5
              20c7 0075  ld   $75         ;68a2 PUSH
              20c8 00df  ld   $df         ;68a3 ALLOC
              20c9 00fe  ld   $fe
              20ca 00ec  ld   $ec         ;68a5 STLW
              20cb 0000  ld   $00
              20cc 00e9  ld   $e9         ;68a7 LSLW
              20cd 00e9  ld   $e9         ;68a8 LSLW
              20ce 00e9  ld   $e9         ;68a9 LSLW
              20cf 00e9  ld   $e9         ;68aa LSLW
              20d0 001a  ld   $1a         ;68ab LD
              20d1 0019  ld   $19
              20d2 00cf  ld   $cf         ;68ad CALL
              20d3 00ad  ld   $ad         ;68ad 'PrintHexDigit'
              20d4 00ee  ld   $ee         ;68af LDLW
              20d5 0000  ld   $00
              20d6 00df  ld   $df         ;68b1 ALLOC
              20d7 0002  ld   $02
              20d8 00cf  ld   $cf         ;68b3 CALL
              20d9 00ad  ld   $ad         ;68b3 'PrintHexDigit'
              20da 0063  ld   $63         ;68b5 POP
              20db 00ff  ld   $ff         ;68b6 RET
              20dc 002b  ld   $2b         ;68b7 STW
              20dd 0062  ld   $62         ;68b7 'PrintByte'
              20de 00cd  ld   $cd         ;68b9 DEF
              20df 00d9  ld   $d9
              20e0 0075  ld   $75         ;68bb PUSH
              20e1 002b  ld   $2b         ;68bc STW
              20e2 0068  ld   $68         ;68bc 'k'
              20e3 0035  ld   $35         ;68be BCC
              20e4 0072  ld   $72         ;68bf NE
              20e5 00c8  ld   $c8
              20e6 00cd  ld   $cd         ;68c1 DEF
              20e7 00c6  ld   $c6
              20e8 0020  ld   $20         ;68c3 ' '
              20e9 004f  ld   $4f         ;68c4 'O'
              20ea 004b  ld   $4b         ;68c5 'K'
              20eb 000a  ld   $0a         ;68c6 10
              20ec 0000  ld   $00         ;68c7 0
              20ed 0090  ld   $90         ;68c8 BRA
              20ee 00d3  ld   $d3
              20ef 00cd  ld   $cd         ;68ca DEF
              20f0 00d3  ld   $d3
              20f1 0020  ld   $20         ;68cc ' '
              20f2 0046  ld   $46         ;68cd 'F'
              20f3 0041  ld   $41         ;68ce 'A'
              20f4 0049  ld   $49         ;68cf 'I'
              20f5 004c  ld   $4c         ;68d0 'L'
              20f6 0045  ld   $45         ;68d1 'E'
              20f7 0044  ld   $44         ;68d2 'D'
              20f8 000a  ld   $0a         ;68d3 10
              20f9 0000  ld   $00         ;68d4 0
              20fa 00cf  ld   $cf         ;68d5 CALL
              20fb fe00  bra  ac          ;+-----------------------------------+
              20fc fcfd  bra  $20fd       ;|                                   |
              20fd 1404  ld   $04,y       ;| Trampoline for page $2000 lookups |
              20fe e068  jmp  y,$68       ;|                                   |
              20ff c218  st   [$18]       ;+-----------------------------------+
              2100 0032  ld   $32         ;68d5 'PrintText'
              2101 0021  ld   $21         ;68d7 LDW
              2102 0068  ld   $68         ;68d7 'k'
              2103 0063  ld   $63         ;68d9 POP
              2104 00ff  ld   $ff         ;68da RET
              2105 002b  ld   $2b         ;68db STW
              2106 0040  ld   $40         ;68db 'PrintResult'
              2107 00cd  ld   $cd         ;68dd DEF
              2108 00ef  ld   $ef
              2109 0075  ld   $75         ;68df PUSH
              210a 0082  ld   $82         ;68e0 ANDI
              210b 000f  ld   $0f
              210c 00e6  ld   $e6         ;68e2 SUBI
              210d 000a  ld   $0a
              210e 0035  ld   $35         ;68e4 BCC
              210f 0053  ld   $53         ;68e5 GE
              2110 00e9  ld   $e9
              2111 00e3  ld   $e3         ;68e7 ADDI
              2112 003a  ld   $3a
              2113 0090  ld   $90         ;68e9 BRA
              2114 00eb  ld   $eb
              2115 00e3  ld   $e3         ;68eb ADDI
              2116 0041  ld   $41
              2117 00cf  ld   $cf         ;68ed CALL
              2118 00a5  ld   $a5         ;68ed 'PrintChar'
              2119 0063  ld   $63         ;68ef POP
              211a 00ff  ld   $ff         ;68f0 RET
              211b 002b  ld   $2b         ;68f1 STW
              211c 00ad  ld   $ad         ;68f1 'PrintHexDigit'
              211d 0093  ld   $93         ;68f3 INC
              211e 001b  ld   $1b         ;68f3 '_vLR'+1
              211f 00ff  ld   $ff         ;68f5 RET
              2120 0069  ld   $69         ;| RAM segment address (high byte first)
              2121 00a0  ld   $a0         ;|
              2122 004e  ld   $4e         ;| Length (1..256)
              2123 00cd  ld   $cd         ;69a0 DEF
              2124 00bc  ld   $bc
              2125 0075  ld   $75         ;69a2 PUSH
              2126 002b  ld   $2b         ;69a3 STW
              2127 0052  ld   $52         ;69a3 'q'
              2128 0021  ld   $21         ;69a5 LDW
              2129 0052  ld   $52         ;69a5 'q'
              212a 00ad  ld   $ad         ;69a7 PEEK
              212b 0035  ld   $35         ;69a8 BCC
              212c 003f  ld   $3f         ;69a9 EQ
              212d 00ba  ld   $ba
              212e 008c  ld   $8c         ;69ab XORI
              212f 000a  ld   $0a
              2130 0035  ld   $35         ;69ad BCC
              2131 003f  ld   $3f         ;69ae EQ
              2132 00b4  ld   $b4
              2133 008c  ld   $8c         ;69b0 XORI
              2134 000a  ld   $0a
              2135 00cf  ld   $cf         ;69b2 CALL
              2136 00a5  ld   $a5         ;69b2 'PrintChar'
              2137 0090  ld   $90         ;69b4 BRA
              2138 00b6  ld   $b6
              2139 00cf  ld   $cf         ;69b6 CALL
              213a 00a9  ld   $a9         ;69b6 'Newline'
              213b 0093  ld   $93         ;69b8 INC
              213c 0052  ld   $52         ;69b8 'q'
              213d 0090  ld   $90         ;69ba BRA
              213e 00a3  ld   $a3
              213f 0063  ld   $63         ;69bc POP
              2140 00ff  ld   $ff         ;69bd RET
              2141 002b  ld   $2b         ;69be STW
              2142 0032  ld   $32         ;69be 'PrintText'
              2143 00cd  ld   $cd         ;69c0 DEF
              2144 00e7  ld   $e7
              2145 0075  ld   $75         ;69c2 PUSH
              2146 00cd  ld   $cd         ;69c3 DEF
              2147 00cb  ld   $cb
              2148 0056  ld   $56         ;69c5 'V'
              2149 006f  ld   $6f         ;69c6 'o'
              214a 006c  ld   $6c         ;69c7 'l'
              214b 0075  ld   $75         ;69c8 'u'
              214c 006d  ld   $6d         ;69c9 'm'
              214d 0065  ld   $65         ;69ca 'e'
              214e 0020  ld   $20         ;69cb ' '
              214f 0000  ld   $00         ;69cc 0
              2150 00cf  ld   $cf         ;69cd CALL
              2151 0032  ld   $32         ;69cd 'PrintText'
              2152 0021  ld   $21         ;69cf LDW
              2153 0050  ld   $50         ;69cf 'p'
              2154 002b  ld   $2b         ;69d1 STW
              2155 0052  ld   $52         ;69d1 'q'
              2156 0059  ld   $59         ;69d3 LDI
              2157 000b  ld   $0b
              2158 002b  ld   $2b         ;69d5 STW
              2159 0068  ld   $68         ;69d5 'k'
              215a 0021  ld   $21         ;69d7 LDW
              215b 0052  ld   $52         ;69d7 'q'
              215c 00ad  ld   $ad         ;69d9 PEEK
              215d 0093  ld   $93         ;69da INC
              215e 0052  ld   $52         ;69da 'q'
              215f 00cf  ld   $cf         ;69dc CALL
              2160 00a7  ld   $a7         ;69dc 'SafePrintChar'
              2161 0021  ld   $21         ;69de LDW
              2162 0068  ld   $68         ;69de 'k'
              2163 00e6  ld   $e6         ;69e0 SUBI
              2164 0001  ld   $01
              2165 0035  ld   $35         ;69e2 BCC
              2166 004d  ld   $4d         ;69e3 GT
              2167 00d3  ld   $d3
              2168 00cf  ld   $cf         ;69e5 CALL
              2169 00a9  ld   $a9         ;69e5 'Newline'
              216a 0063  ld   $63         ;69e7 POP
              216b 00ff  ld   $ff         ;69e8 RET
              216c 002b  ld   $2b         ;69e9 STW
              216d 00af  ld   $af         ;69e9 'PrintVolumeLabel'
              216e 0093  ld   $93         ;69eb INC
              216f 001b  ld   $1b         ;69eb '_vLR'+1
              2170 00ff  ld   $ff         ;69ed RET
              2171 006a  ld   $6a         ;| RAM segment address (high byte first)
              2172 00a0  ld   $a0         ;|
              2173 004f  ld   $4f         ;| Length (1..256)
              2174 00cd  ld   $cd         ;6aa0 DEF
              2175 00b3  ld   $b3
              2176 0075  ld   $75         ;6aa2 PUSH
              2177 002b  ld   $2b         ;6aa3 STW
              2178 00b1  ld   $b1         ;6aa3 'Number'
              2179 0059  ld   $59         ;6aa5 LDI
              217a 0030  ld   $30
              217b 002b  ld   $2b         ;6aa7 STW
              217c 0068  ld   $68         ;6aa7 'k'
              217d 0059  ld   $59         ;6aa9 LDI
              217e 000a  ld   $0a
              217f 00cf  ld   $cf         ;6aab CALL
              2180 00b3  ld   $b3         ;6aab 'PrintDigit'
              2181 0021  ld   $21         ;6aad LDW
              2182 00b1  ld   $b1         ;6aad 'Number'
              2183 00e3  ld   $e3         ;6aaf ADDI
              2184 0030  ld   $30
              2185 00cf  ld   $cf         ;6ab1 CALL
              2186 00a5  ld   $a5         ;6ab1 'PrintChar'
              2187 0063  ld   $63         ;6ab3 POP
              2188 00ff  ld   $ff         ;6ab4 RET
              2189 002b  ld   $2b         ;6ab5 STW
              218a 00b5  ld   $b5         ;6ab5 'PrintTwoDecimals'
              218b 00cd  ld   $cd         ;6ab7 DEF
              218c 00e8  ld   $e8
              218d 0075  ld   $75         ;6ab9 PUSH
              218e 0011  ld   $11         ;6aba LDWI
              218f 0000  ld   $00
              2190 0006  ld   $06
              2191 002b  ld   $2b         ;6abd STW
              2192 0022  ld   $22         ;6abd '_sysFn'
              2193 0021  ld   $21         ;6abf LDW
              2194 0050  ld   $50         ;6abf 'p'
              2195 00e3  ld   $e3         ;6ac1 ADDI
              2196 0011  ld   $11
              2197 00ad  ld   $ad         ;6ac3 PEEK
              2198 00b4  ld   $b4         ;6ac4 SYS
              2199 00f6  ld   $f6
              219a 00e6  ld   $e6         ;6ac6 SUBI
              219b 0014  ld   $14
              219c 0035  ld   $35         ;6ac8 BCC
              219d 0053  ld   $53         ;6ac9 GE
              219e 00cb  ld   $cb
              219f 00e3  ld   $e3         ;6acb ADDI
              21a0 0064  ld   $64
              21a1 00cf  ld   $cf         ;6acd CALL
              21a2 00b5  ld   $b5         ;6acd 'PrintTwoDecimals'
              21a3 0011  ld   $11         ;6acf LDWI
              21a4 006d  ld   $6d
              21a5 0006  ld   $06
              21a6 002b  ld   $2b         ;6ad2 STW
              21a7 0022  ld   $22         ;6ad2 '_sysFn'
              21a8 0021  ld   $21         ;6ad4 LDW
              21a9 0050  ld   $50         ;6ad4 'p'
              21aa 00e3  ld   $e3         ;6ad6 ADDI
              21ab 0010  ld   $10
              21ac 00f6  ld   $f6         ;6ad8 DEEK
              21ad 00b4  ld   $b4         ;6ad9 SYS
              21ae 00f5  ld   $f5
              21af 0082  ld   $82         ;6adb ANDI
              21b0 000f  ld   $0f
              21b1 00cf  ld   $cf         ;6add CALL
              21b2 00b5  ld   $b5         ;6add 'PrintTwoDecimals'
              21b3 0021  ld   $21         ;6adf LDW
              21b4 0050  ld   $50         ;6adf 'p'
              21b5 00e3  ld   $e3         ;6ae1 ADDI
              21b6 0010  ld   $10
              21b7 00ad  ld   $ad         ;6ae3 PEEK
              21b8 0082  ld   $82         ;6ae4 ANDI
              21b9 001f  ld   $1f
              21ba 00cf  ld   $cf         ;6ae6 CALL
              21bb 00b5  ld   $b5         ;6ae6 'PrintTwoDecimals'
              21bc 0063  ld   $63         ;6ae8 POP
              21bd 00ff  ld   $ff         ;6ae9 RET
              21be 002b  ld   $2b         ;6aea STW
              21bf 00b7  ld   $b7         ;6aea 'PrintDate'
              21c0 0093  ld   $93         ;6aec INC
              21c1 001b  ld   $1b         ;6aec '_vLR'+1
              21c2 00ff  ld   $ff         ;6aee RET
              21c3 006b  ld   $6b         ;| RAM segment address (high byte first)
              21c4 00a0  ld   $a0         ;|
              21c5 0053  ld   $53         ;| Length (1..256)
              21c6 00cd  ld   $cd         ;6ba0 DEF
              21c7 00b7  ld   $b7
              21c8 0075  ld   $75         ;6ba2 PUSH
              21c9 00cf  ld   $cf         ;6ba3 CALL
              21ca 00b7  ld   $b7         ;6ba3 'PrintDate'
              21cb 0059  ld   $59         ;6ba5 LDI
              21cc 0004  ld   $04
              21cd 0099  ld   $99         ;6ba7 ADDW
              21ce 00b9  ld   $b9         ;6ba7 'Pos'
              21cf 002b  ld   $2b         ;6ba9 STW
              21d0 00b9  ld   $b9         ;6ba9 'Pos'
              21d1 00cf  ld   $cf         ;6bab CALL
              21d2 00bb  ld   $bb         ;6bab 'PrintSize'
              21d3 0059  ld   $59         ;6bad LDI
              21d4 0004  ld   $04
              21d5 0099  ld   $99         ;6baf ADDW
              21d6 00b9  ld   $b9         ;6baf 'Pos'
              21d7 002b  ld   $2b         ;6bb1 STW
              21d8 00b9  ld   $b9         ;6bb1 'Pos'
              21d9 00cf  ld   $cf         ;6bb3 CALL
              21da 00bd  ld   $bd         ;6bb3 'PrintName'
              21db 00cf  ld   $cf         ;6bb5 CALL
              21dc 00a9  ld   $a9         ;6bb5 'Newline'
              21dd 0063  ld   $63         ;6bb7 POP
              21de 00ff  ld   $ff         ;6bb8 RET
              21df 002b  ld   $2b         ;6bb9 STW
              21e0 00bf  ld   $bf         ;6bb9 'PrintDirEntry'
              21e1 00cd  ld   $cd         ;6bbb DEF
              21e2 00ec  ld   $ec
              21e3 0075  ld   $75         ;6bbd PUSH
              21e4 0021  ld   $21         ;6bbe LDW
              21e5 0050  ld   $50         ;6bbe 'p'
              21e6 002b  ld   $2b         ;6bc0 STW
              21e7 0052  ld   $52         ;6bc0 'q'
              21e8 0059  ld   $59         ;6bc2 LDI
              21e9 000b  ld   $0b
              21ea 002b  ld   $2b         ;6bc4 STW
              21eb 0068  ld   $68         ;6bc4 'k'
              21ec 008c  ld   $8c         ;6bc6 XORI
              21ed 0003  ld   $03
              21ee 0035  ld   $35         ;6bc8 BCC
              21ef 0072  ld   $72         ;6bc9 NE
              21f0 00d5  ld   $d5
              21f1 0021  ld   $21         ;6bcb LDW
              21f2 0052  ld   $52         ;6bcb 'q'
              21f3 00ad  ld   $ad         ;6bcd PEEK
              21f4 008c  ld   $8c         ;6bce XORI
              21f5 0020  ld   $20
              21f6 0035  ld   $35         ;6bd0 BCC
              21f7 003f  ld   $3f         ;6bd1 EQ
              21f8 00d5  ld   $d5
              21f9 0059  ld   $59         ;6bd3 LDI
              21fa 002e  ld   $2e
              21fb fe00  bra  ac          ;+-----------------------------------+
              21fc fcfd  bra  $21fd       ;|                                   |
              21fd 1404  ld   $04,y       ;| Trampoline for page $2100 lookups |
              21fe e068  jmp  y,$68       ;|                                   |
              21ff c218  st   [$18]       ;+-----------------------------------+
              2200 00cf  ld   $cf         ;6bd5 CALL
              2201 00a5  ld   $a5         ;6bd5 'PrintChar'
              2202 0021  ld   $21         ;6bd7 LDW
              2203 0052  ld   $52         ;6bd7 'q'
              2204 00ad  ld   $ad         ;6bd9 PEEK
              2205 0093  ld   $93         ;6bda INC
              2206 0052  ld   $52         ;6bda 'q'
              2207 008c  ld   $8c         ;6bdc XORI
              2208 0020  ld   $20
              2209 0035  ld   $35         ;6bde BCC
              220a 003f  ld   $3f         ;6bdf EQ
              220b 00e3  ld   $e3
              220c 008c  ld   $8c         ;6be1 XORI
              220d 0020  ld   $20
              220e 00cf  ld   $cf         ;6be3 CALL
              220f 00a7  ld   $a7         ;6be3 'SafePrintChar'
              2210 0021  ld   $21         ;6be5 LDW
              2211 0068  ld   $68         ;6be5 'k'
              2212 00e6  ld   $e6         ;6be7 SUBI
              2213 0001  ld   $01
              2214 0035  ld   $35         ;6be9 BCC
              2215 004d  ld   $4d         ;6bea GT
              2216 00c2  ld   $c2
              2217 0063  ld   $63         ;6bec POP
              2218 00ff  ld   $ff         ;6bed RET
              2219 002b  ld   $2b         ;6bee STW
              221a 00bd  ld   $bd         ;6bee 'PrintName'
              221b 0093  ld   $93         ;6bf0 INC
              221c 001b  ld   $1b         ;6bf0 '_vLR'+1
              221d 00ff  ld   $ff         ;6bf2 RET
              221e 006c  ld   $6c         ;| RAM segment address (high byte first)
              221f 00a0  ld   $a0         ;|
              2220 002c  ld   $2c         ;| Length (1..256)
              2221 00cd  ld   $cd         ;6ca0 DEF
              2222 00c5  ld   $c5
              2223 0075  ld   $75         ;6ca2 PUSH
              2224 002b  ld   $2b         ;6ca3 STW
              2225 0036  ld   $36         ;6ca3 'i'
              2226 0021  ld   $21         ;6ca5 LDW
              2227 00b1  ld   $b1         ;6ca5 'Number'
              2228 00b8  ld   $b8         ;6ca7 SUBW
              2229 0036  ld   $36         ;6ca7 'i'
              222a 0035  ld   $35         ;6ca9 BCC
              222b 0050  ld   $50         ;6caa LT
              222c 00b0  ld   $b0
              222d 002b  ld   $2b         ;6cac STW
              222e 00b1  ld   $b1         ;6cac 'Number'
              222f 0093  ld   $93         ;6cae INC
              2230 0068  ld   $68         ;6cae 'k'
              2231 0090  ld   $90         ;6cb0 BRA
              2232 00a5  ld   $a5
              2233 0021  ld   $21         ;6cb2 LDW
              2234 0068  ld   $68         ;6cb2 'k'
              2235 0035  ld   $35         ;6cb4 BCC
              2236 0072  ld   $72         ;6cb5 NE
              2237 00bb  ld   $bb
              2238 0059  ld   $59         ;6cb7 LDI
              2239 0020  ld   $20
              223a 00cf  ld   $cf         ;6cb9 CALL
              223b 00a5  ld   $a5         ;6cb9 'PrintChar'
              223c 0090  ld   $90         ;6cbb BRA
              223d 00c3  ld   $c3
              223e 0088  ld   $88         ;6cbd ORI
              223f 0030  ld   $30
              2240 00cf  ld   $cf         ;6cbf CALL
              2241 00a5  ld   $a5         ;6cbf 'PrintChar'
              2242 0059  ld   $59         ;6cc1 LDI
              2243 0030  ld   $30
              2244 002b  ld   $2b         ;6cc3 STW
              2245 0068  ld   $68         ;6cc3 'k'
              2246 0063  ld   $63         ;6cc5 POP
              2247 00ff  ld   $ff         ;6cc6 RET
              2248 002b  ld   $2b         ;6cc7 STW
              2249 00b3  ld   $b3         ;6cc7 'PrintDigit'
              224a 0093  ld   $93         ;6cc9 INC
              224b 001b  ld   $1b         ;6cc9 '_vLR'+1
              224c 00ff  ld   $ff         ;6ccb RET
              224d 006d  ld   $6d         ;| RAM segment address (high byte first)
              224e 00a0  ld   $a0         ;|
              224f 004e  ld   $4e         ;| Length (1..256)
              2250 00cd  ld   $cd         ;6da0 DEF
              2251 00e7  ld   $e7
              2252 0011  ld   $11         ;6da2 LDWI
              2253 0020  ld   $20
              2254 003f  ld   $3f
              2255 002b  ld   $2b         ;6da5 STW
              2256 0024  ld   $24         ;6da5 '_sysArgs0'
              2257 0059  ld   $59         ;6da7 LDI
              2258 0000  ld   $00
              2259 005e  ld   $5e         ;6da9 ST
              225a 00b9  ld   $b9         ;6da9 'Pos'
              225b 0011  ld   $11         ;6dab LDWI
              225c 0020  ld   $20
              225d 0001  ld   $01
              225e 00ad  ld   $ad         ;6dae PEEK
              225f 005e  ld   $5e         ;6daf ST
              2260 00ba  ld   $ba         ;6daf 'Pos'+1
              2261 0021  ld   $21         ;6db1 LDW
              2262 00b9  ld   $b9         ;6db1 'Pos'
              2263 002b  ld   $2b         ;6db3 STW
              2264 0028  ld   $28         ;6db3 '_sysArgs4'
              2265 005e  ld   $5e         ;6db5 ST
              2266 0026  ld   $26
              2267 0011  ld   $11         ;6db7 LDWI
              2268 00e1  ld   $e1
              2269 0004  ld   $04
              226a 002b  ld   $2b         ;6dba STW
              226b 0022  ld   $22         ;6dba '_sysFn'
              226c 00b4  ld   $b4         ;6dbc SYS
              226d 00cb  ld   $cb
              226e 0093  ld   $93         ;6dbe INC
              226f 0028  ld   $28         ;6dbe '_sysArgs4'
              2270 001a  ld   $1a         ;6dc0 LD
              2271 0028  ld   $28
              2272 008c  ld   $8c         ;6dc2 XORI
              2273 00a0  ld   $a0
              2274 0035  ld   $35         ;6dc4 BCC
              2275 0072  ld   $72         ;6dc5 NE
              2276 00b5  ld   $b5
              2277 0059  ld   $59         ;6dc7 LDI
              2278 0001  ld   $01
              2279 005e  ld   $5e         ;6dc9 ST
              227a 0037  ld   $37         ;6dc9 'i'+1
              227b 0059  ld   $59         ;6dcb LDI
              227c 00d0  ld   $d0
              227d 00e3  ld   $e3         ;6dcd ADDI
              227e 001e  ld   $1e
              227f 005e  ld   $5e         ;6dcf ST
              2280 0036  ld   $36         ;6dcf 'i'
              2281 0021  ld   $21         ;6dd1 LDW
              2282 0036  ld   $36         ;6dd1 'i'
              2283 00ad  ld   $ad         ;6dd3 PEEK
              2284 00e6  ld   $e6         ;6dd4 SUBI
              2285 0078  ld   $78
              2286 0035  ld   $35         ;6dd6 BCC
              2287 0053  ld   $53         ;6dd7 GE
              2288 00db  ld   $db
              2289 00e3  ld   $e3         ;6dd9 ADDI
              228a 0080  ld   $80
              228b 0090  ld   $90         ;6ddb BRA
              228c 00dd  ld   $dd
              228d 00e3  ld   $e3         ;6ddd ADDI
              228e 0018  ld   $18
              228f 00f0  ld   $f0         ;6ddf POKE
              2290 0036  ld   $36         ;6ddf 'i'
              2291 001a  ld   $1a         ;6de1 LD
              2292 0036  ld   $36         ;6de1 'i'
              2293 00e6  ld   $e6         ;6de3 SUBI
              2294 0020  ld   $20
              2295 0035  ld   $35         ;6de5 BCC
              2296 004d  ld   $4d         ;6de6 GT
              2297 00cb  ld   $cb
              2298 00ff  ld   $ff         ;6de8 RET
              2299 002b  ld   $2b         ;6de9 STW
              229a 00a9  ld   $a9         ;6de9 'Newline'
              229b 0093  ld   $93         ;6deb INC
              229c 001b  ld   $1b         ;6deb '_vLR'+1
              229d 00ff  ld   $ff         ;6ded RET
              229e 006e  ld   $6e         ;| RAM segment address (high byte first)
              229f 00a0  ld   $a0         ;|
              22a0 0050  ld   $50         ;| Length (1..256)
              22a1 00cd  ld   $cd         ;6ea0 DEF
              22a2 00e9  ld   $e9
              22a3 00e6  ld   $e6         ;6ea2 SUBI
              22a4 0052  ld   $52
              22a5 0035  ld   $35         ;6ea4 BCC
              22a6 0053  ld   $53         ;6ea5 GE
              22a7 00ae  ld   $ae
              22a8 00e3  ld   $e3         ;6ea7 ADDI
              22a9 0032  ld   $32
              22aa 002b  ld   $2b         ;6ea9 STW
              22ab 0036  ld   $36         ;6ea9 'i'
              22ac 0011  ld   $11         ;6eab LDWI
              22ad 0000  ld   $00
              22ae 0007  ld   $07
              22af 0090  ld   $90         ;6eae BRA
              22b0 00b3  ld   $b3
              22b1 002b  ld   $2b         ;6eb0 STW
              22b2 0036  ld   $36         ;6eb0 'i'
              22b3 0011  ld   $11         ;6eb2 LDWI
              22b4 0000  ld   $00
              22b5 0008  ld   $08
              22b6 002b  ld   $2b         ;6eb5 STW
              22b7 00c1  ld   $c1         ;6eb5 'j'
              22b8 0021  ld   $21         ;6eb7 LDW
              22b9 0036  ld   $36         ;6eb7 'i'
              22ba 00e9  ld   $e9         ;6eb9 LSLW
              22bb 00e9  ld   $e9         ;6eba LSLW
              22bc 0099  ld   $99         ;6ebb ADDW
              22bd 0036  ld   $36         ;6ebb 'i'
              22be 0099  ld   $99         ;6ebd ADDW
              22bf 00c1  ld   $c1         ;6ebd 'j'
              22c0 002b  ld   $2b         ;6ebf STW
              22c1 00c1  ld   $c1         ;6ebf 'j'
              22c2 0011  ld   $11         ;6ec1 LDWI
              22c3 0020  ld   $20
              22c4 003f  ld   $3f
              22c5 002b  ld   $2b         ;6ec4 STW
              22c6 0024  ld   $24         ;6ec4 '_sysArgs0'
              22c7 0021  ld   $21         ;6ec6 LDW
              22c8 00b9  ld   $b9         ;6ec6 'Pos'
              22c9 002b  ld   $2b         ;6ec8 STW
              22ca 0028  ld   $28         ;6ec8 '_sysArgs4'
              22cb 00e3  ld   $e3         ;6eca ADDI
              22cc 0006  ld   $06
              22cd 002b  ld   $2b         ;6ecc STW
              22ce 00b9  ld   $b9         ;6ecc 'Pos'
              22cf 0011  ld   $11         ;6ece LDWI
              22d0 00e1  ld   $e1
              22d1 0004  ld   $04
              22d2 002b  ld   $2b         ;6ed1 STW
              22d3 0022  ld   $22         ;6ed1 '_sysFn'
              22d4 0059  ld   $59         ;6ed3 LDI
              22d5 0005  ld   $05
              22d6 002b  ld   $2b         ;6ed5 STW
              22d7 0036  ld   $36         ;6ed5 'i'
              22d8 0021  ld   $21         ;6ed7 LDW
              22d9 00c1  ld   $c1         ;6ed7 'j'
              22da 007f  ld   $7f         ;6ed9 LUP
              22db 0000  ld   $00
              22dc 005e  ld   $5e         ;6edb ST
              22dd 0026  ld   $26
              22de 00b4  ld   $b4         ;6edd SYS
              22df 00cb  ld   $cb
              22e0 0093  ld   $93         ;6edf INC
              22e1 00c1  ld   $c1         ;6edf 'j'
              22e2 0093  ld   $93         ;6ee1 INC
              22e3 0028  ld   $28         ;6ee1 '_sysArgs4'
              22e4 0021  ld   $21         ;6ee3 LDW
              22e5 0036  ld   $36         ;6ee3 'i'
              22e6 00e6  ld   $e6         ;6ee5 SUBI
              22e7 0001  ld   $01
              22e8 0035  ld   $35         ;6ee7 BCC
              22e9 004d  ld   $4d         ;6ee8 GT
              22ea 00d3  ld   $d3
              22eb 00ff  ld   $ff         ;6eea RET
              22ec 002b  ld   $2b         ;6eeb STW
              22ed 00a5  ld   $a5         ;6eeb 'PrintChar'
              22ee 0093  ld   $93         ;6eed INC
              22ef 001b  ld   $1b         ;6eed '_vLR'+1
              22f0 00ff  ld   $ff         ;6eef RET
              22f1 006f  ld   $6f         ;| RAM segment address (high byte first)
              22f2 00a0  ld   $a0         ;|
              22f3 0058  ld   $58         ;| Length (1..256)
              22f4 00cd  ld   $cd         ;6fa0 DEF
              22f5 00f1  ld   $f1
              22f6 0075  ld   $75         ;6fa2 PUSH
              22f7 0021  ld   $21         ;6fa3 LDW
              22f8 0030  ld   $30         ;6fa3 'Address'
              22f9 002b  ld   $2b         ;6fa5 STW
              22fa 0050  ld   $50         ;6fa5 'p'
              22fb fe00  bra  ac          ;+-----------------------------------+
              22fc fcfd  bra  $22fd       ;|                                   |
              22fd 1404  ld   $04,y       ;| Trampoline for page $2200 lookups |
              22fe e068  jmp  y,$68       ;|                                   |
              22ff c218  st   [$18]       ;+-----------------------------------+
              2300 0011  ld   $11         ;6fa7 LDWI
              2301 0000  ld   $00
              2302 0002  ld   $02
              2303 0099  ld   $99         ;6faa ADDW
              2304 0030  ld   $30         ;6faa 'Address'
              2305 00b8  ld   $b8         ;6fac SUBW
              2306 0050  ld   $50         ;6fac 'p'
              2307 0035  ld   $35         ;6fae BCC
              2308 004d  ld   $4d         ;6faf GT
              2309 00b7  ld   $b7
              230a 00cf  ld   $cf         ;6fb1 CALL
              230b 0066  ld   $66         ;6fb1 'ReadSector'
              230c 0093  ld   $93         ;6fb3 INC
              230d 0056  ld   $56         ;6fb3 'SectorL'
              230e 0021  ld   $21         ;6fb5 LDW
              230f 0030  ld   $30         ;6fb5 'Address'
              2310 0090  ld   $90         ;6fb7 BRA
              2311 00a3  ld   $a3
              2312 0021  ld   $21         ;6fb9 LDW
              2313 0050  ld   $50         ;6fb9 'p'
              2314 00ad  ld   $ad         ;6fbb PEEK
              2315 0035  ld   $35         ;6fbc BCC
              2316 003f  ld   $3f         ;6fbd EQ
              2317 00ef  ld   $ef
              2318 008c  ld   $8c         ;6fbf XORI
              2319 00e5  ld   $e5
              231a 0035  ld   $35         ;6fc1 BCC
              231b 003f  ld   $3f         ;6fc2 EQ
              231c 00e9  ld   $e9
              231d 0021  ld   $21         ;6fc4 LDW
              231e 0050  ld   $50         ;6fc4 'p'
              231f 00e3  ld   $e3         ;6fc6 ADDI
              2320 000b  ld   $0b
              2321 00ad  ld   $ad         ;6fc8 PEEK
              2322 002b  ld   $2b         ;6fc9 STW
              2323 0068  ld   $68         ;6fc9 'k'
              2324 008c  ld   $8c         ;6fcb XORI
              2325 000f  ld   $0f
              2326 0035  ld   $35         ;6fcd BCC
              2327 003f  ld   $3f         ;6fce EQ
              2328 00e9  ld   $e9
              2329 0082  ld   $82         ;6fd0 ANDI
              232a 0002  ld   $02
              232b 0035  ld   $35         ;6fd2 BCC
              232c 003f  ld   $3f         ;6fd3 EQ
              232d 00e9  ld   $e9
              232e 0021  ld   $21         ;6fd5 LDW
              232f 0068  ld   $68         ;6fd5 'k'
              2330 0082  ld   $82         ;6fd7 ANDI
              2331 0008  ld   $08
              2332 0035  ld   $35         ;6fd9 BCC
              2333 003f  ld   $3f         ;6fda EQ
              2334 00de  ld   $de
              2335 00cf  ld   $cf         ;6fdc CALL
              2336 00af  ld   $af         ;6fdc 'PrintVolumeLabel'
              2337 0090  ld   $90         ;6fde BRA
              2338 00e9  ld   $e9
              2339 00cf  ld   $cf         ;6fe0 CALL
              233a 00bf  ld   $bf         ;6fe0 'PrintDirEntry'
              233b 00cf  ld   $cf         ;6fe2 CALL
              233c 00c3  ld   $c3         ;6fe2 'IsBootGt1'
              233d 0035  ld   $35         ;6fe4 BCC
              233e 0072  ld   $72         ;6fe5 NE
              233f 00e9  ld   $e9
              2340 00cf  ld   $cf         ;6fe7 CALL
              2341 00c5  ld   $c5         ;6fe7 'LoadGt1'
              2342 00cf  ld   $cf         ;6fe9 CALL
              2343 00c7  ld   $c7         ;6fe9 'Execute'
              2344 0021  ld   $21         ;6feb LDW
              2345 0050  ld   $50         ;6feb 'p'
              2346 00e3  ld   $e3         ;6fed ADDI
              2347 0020  ld   $20
              2348 0090  ld   $90         ;6fef BRA
              2349 00a3  ld   $a3
              234a 0063  ld   $63         ;6ff1 POP
              234b 00ff  ld   $ff         ;6ff2 RET
              234c 002b  ld   $2b         ;6ff3 STW
              234d 00c9  ld   $c9         ;6ff3 'PrintDirectory'
              234e 0093  ld   $93         ;6ff5 INC
              234f 001b  ld   $1b         ;6ff5 '_vLR'+1
              2350 00ff  ld   $ff         ;6ff7 RET
              2351 0070  ld   $70         ;| RAM segment address (high byte first)
              2352 00a0  ld   $a0         ;|
              2353 005e  ld   $5e         ;| Length (1..256)
              2354 00cd  ld   $cd         ;70a0 DEF
              2355 00f7  ld   $f7
              2356 0075  ld   $75         ;70a2 PUSH
              2357 0021  ld   $21         ;70a3 LDW
              2358 0050  ld   $50         ;70a3 'p'
              2359 00e3  ld   $e3         ;70a5 ADDI
              235a 000b  ld   $0b
              235b 00ad  ld   $ad         ;70a7 PEEK
              235c 0082  ld   $82         ;70a8 ANDI
              235d 0010  ld   $10
              235e 0035  ld   $35         ;70aa BCC
              235f 003f  ld   $3f         ;70ab EQ
              2360 00b7  ld   $b7
              2361 00cd  ld   $cd         ;70ad DEF
              2362 00b5  ld   $b5
              2363 0020  ld   $20         ;70af ' '
              2364 0020  ld   $20         ;70b0 ' '
              2365 003c  ld   $3c         ;70b1 '<'
              2366 0044  ld   $44         ;70b2 'D'
              2367 0049  ld   $49         ;70b3 'I'
              2368 0052  ld   $52         ;70b4 'R'
              2369 003e  ld   $3e         ;70b5 '>'
              236a 0000  ld   $00         ;70b6 0
              236b 0090  ld   $90         ;70b7 BRA
              236c 00f3  ld   $f3
              236d 0021  ld   $21         ;70b9 LDW
              236e 0050  ld   $50         ;70b9 'p'
              236f 00e3  ld   $e3         ;70bb ADDI
              2370 001c  ld   $1c
              2371 00f6  ld   $f6         ;70bd DEEK
              2372 002b  ld   $2b         ;70be STW
              2373 0072  ld   $72         ;70be 'ValueL'
              2374 0021  ld   $21         ;70c0 LDW
              2375 0050  ld   $50         ;70c0 'p'
              2376 00e3  ld   $e3         ;70c2 ADDI
              2377 001e  ld   $1e
              2378 00f6  ld   $f6         ;70c4 DEEK
              2379 002b  ld   $2b         ;70c5 STW
              237a 0074  ld   $74         ;70c5 'ValueH'
              237b 00cf  ld   $cf         ;70c7 CALL
              237c 00cb  ld   $cb         ;70c7 'ValueToDecimal'
              237d 0059  ld   $59         ;70c9 LDI
              237e 0000  ld   $00
              237f 002b  ld   $2b         ;70cb STW
              2380 00c1  ld   $c1         ;70cb 'j'
              2381 0059  ld   $59         ;70cd LDI
              2382 0008  ld   $08
              2383 002b  ld   $2b         ;70cf STW
              2384 0036  ld   $36         ;70cf 'i'
              2385 0021  ld   $21         ;70d1 LDW
              2386 0052  ld   $52         ;70d1 'q'
              2387 00ad  ld   $ad         ;70d3 PEEK
              2388 008c  ld   $8c         ;70d4 XORI
              2389 0030  ld   $30
              238a 0035  ld   $35         ;70d6 BCC
              238b 0072  ld   $72         ;70d7 NE
              238c 00ef  ld   $ef
              238d 0021  ld   $21         ;70d9 LDW
              238e 0036  ld   $36         ;70d9 'i'
              238f 00e6  ld   $e6         ;70db SUBI
              2390 0006  ld   $06
              2391 0035  ld   $35         ;70dd BCC
              2392 0053  ld   $53         ;70de GE
              2393 00e4  ld   $e4
              2394 0059  ld   $59         ;70e0 LDI
              2395 0020  ld   $20
              2396 00f0  ld   $f0         ;70e2 POKE
              2397 0052  ld   $52         ;70e2 'q'
              2398 0090  ld   $90         ;70e4 BRA
              2399 00e6  ld   $e6
              239a 0093  ld   $93         ;70e6 INC
              239b 00c1  ld   $c1         ;70e6 'j'
              239c 0093  ld   $93         ;70e8 INC
              239d 0052  ld   $52         ;70e8 'q'
              239e 0021  ld   $21         ;70ea LDW
              239f 0036  ld   $36         ;70ea 'i'
              23a0 00e6  ld   $e6         ;70ec SUBI
              23a1 0001  ld   $01
              23a2 0035  ld   $35         ;70ee BCC
              23a3 0053  ld   $53         ;70ef GE
              23a4 00cd  ld   $cd
              23a5 0021  ld   $21         ;70f1 LDW
              23a6 0060  ld   $60         ;70f1 'Buffer'
              23a7 0099  ld   $99         ;70f3 ADDW
              23a8 00c1  ld   $c1         ;70f3 'j'
              23a9 00cf  ld   $cf         ;70f5 CALL
              23aa 0032  ld   $32         ;70f5 'PrintText'
              23ab 0063  ld   $63         ;70f7 POP
              23ac 00ff  ld   $ff         ;70f8 RET
              23ad 002b  ld   $2b         ;70f9 STW
              23ae 00bb  ld   $bb         ;70f9 'PrintSize'
              23af 0093  ld   $93         ;70fb INC
              23b0 001b  ld   $1b         ;70fb '_vLR'+1
              23b1 00ff  ld   $ff         ;70fd RET
              23b2 0071  ld   $71         ;| RAM segment address (high byte first)
              23b3 00a0  ld   $a0         ;|
              23b4 005f  ld   $5f         ;| Length (1..256)
              23b5 00cd  ld   $cd         ;71a0 DEF
              23b6 00fa  ld   $fa
              23b7 0075  ld   $75         ;71a2 PUSH
              23b8 0059  ld   $59         ;71a3 LDI
              23b9 0009  ld   $09
              23ba 002b  ld   $2b         ;71a5 STW
              23bb 0036  ld   $36         ;71a5 'i'
              23bc 0021  ld   $21         ;71a7 LDW
              23bd 0060  ld   $60         ;71a7 'Buffer'
              23be 0099  ld   $99         ;71a9 ADDW
              23bf 0036  ld   $36         ;71a9 'i'
              23c0 002b  ld   $2b         ;71ab STW
              23c1 0052  ld   $52         ;71ab 'q'
              23c2 0059  ld   $59         ;71ad LDI
              23c3 0030  ld   $30
              23c4 00f0  ld   $f0         ;71af POKE
              23c5 0052  ld   $52         ;71af 'q'
              23c6 0021  ld   $21         ;71b1 LDW
              23c7 0036  ld   $36         ;71b1 'i'
              23c8 00e6  ld   $e6         ;71b3 SUBI
              23c9 0001  ld   $01
              23ca 0035  ld   $35         ;71b5 BCC
              23cb 0053  ld   $53         ;71b6 GE
              23cc 00a3  ld   $a3
              23cd 0059  ld   $59         ;71b8 LDI
              23ce 001f  ld   $1f
              23cf 002b  ld   $2b         ;71ba STW
              23d0 00c1  ld   $c1         ;71ba 'j'
              23d1 00cf  ld   $cf         ;71bc CALL
              23d2 00a3  ld   $a3         ;71bc 'ShiftLeft'
              23d3 0035  ld   $35         ;71be BCC
              23d4 0050  ld   $50         ;71bf LT
              23d5 00c3  ld   $c3
              23d6 0059  ld   $59         ;71c1 LDI
              23d7 006a  ld   $6a
              23d8 0090  ld   $90         ;71c3 BRA
              23d9 00c5  ld   $c5
              23da 0059  ld   $59         ;71c5 LDI
              23db 0069  ld   $69
              23dc 002b  ld   $2b         ;71c7 STW
              23dd 0068  ld   $68         ;71c7 'k'
              23de 0059  ld   $59         ;71c9 LDI
              23df 0009  ld   $09
              23e0 002b  ld   $2b         ;71cb STW
              23e1 0036  ld   $36         ;71cb 'i'
              23e2 0021  ld   $21         ;71cd LDW
              23e3 0060  ld   $60         ;71cd 'Buffer'
              23e4 0099  ld   $99         ;71cf ADDW
              23e5 0036  ld   $36         ;71cf 'i'
              23e6 002b  ld   $2b         ;71d1 STW
              23e7 0052  ld   $52         ;71d1 'q'
              23e8 0021  ld   $21         ;71d3 LDW
              23e9 0052  ld   $52         ;71d3 'q'
              23ea 00ad  ld   $ad         ;71d5 PEEK
              23eb 00e9  ld   $e9         ;71d6 LSLW
              23ec 00b8  ld   $b8         ;71d7 SUBW
              23ed 0068  ld   $68         ;71d7 'k'
              23ee 0035  ld   $35         ;71d9 BCC
              23ef 0053  ld   $53         ;71da GE
              23f0 00e2  ld   $e2
              23f1 00e3  ld   $e3         ;71dc ADDI
              23f2 003a  ld   $3a
              23f3 00f0  ld   $f0         ;71de POKE
              23f4 0052  ld   $52         ;71de 'q'
              23f5 0059  ld   $59         ;71e0 LDI
              23f6 006a  ld   $6a
              23f7 0090  ld   $90         ;71e2 BRA
              23f8 00e8  ld   $e8
              23f9 00e3  ld   $e3         ;71e4 ADDI
              23fa 0030  ld   $30
              23fb fe00  bra  ac          ;+-----------------------------------+
              23fc fcfd  bra  $23fd       ;|                                   |
              23fd 1404  ld   $04,y       ;| Trampoline for page $2300 lookups |
              23fe e068  jmp  y,$68       ;|                                   |
              23ff c218  st   [$18]       ;+-----------------------------------+
              2400 00f0  ld   $f0         ;71e6 POKE
              2401 0052  ld   $52         ;71e6 'q'
              2402 0059  ld   $59         ;71e8 LDI
              2403 0069  ld   $69
              2404 002b  ld   $2b         ;71ea STW
              2405 0068  ld   $68         ;71ea 'k'
              2406 0021  ld   $21         ;71ec LDW
              2407 0036  ld   $36         ;71ec 'i'
              2408 00e6  ld   $e6         ;71ee SUBI
              2409 0001  ld   $01
              240a 0035  ld   $35         ;71f0 BCC
              240b 0053  ld   $53         ;71f1 GE
              240c 00c9  ld   $c9
              240d 0021  ld   $21         ;71f3 LDW
              240e 00c1  ld   $c1         ;71f3 'j'
              240f 00e6  ld   $e6         ;71f5 SUBI
              2410 0001  ld   $01
              2411 0035  ld   $35         ;71f7 BCC
              2412 0053  ld   $53         ;71f8 GE
              2413 00b8  ld   $b8
              2414 0063  ld   $63         ;71fa POP
              2415 00ff  ld   $ff         ;71fb RET
              2416 0093  ld   $93         ;71fc INC
              2417 001b  ld   $1b         ;71fc '_vLR'+1
              2418 00ff  ld   $ff         ;71fe RET
              2419 0072  ld   $72         ;| RAM segment address (high byte first)
              241a 00a0  ld   $a0         ;|
              241b 0014  ld   $14         ;| Length (1..256)
              241c 002b  ld   $2b         ;72a0 STW
              241d 00cb  ld   $cb         ;72a0 'ValueToDecimal'
              241e 00cd  ld   $cd         ;72a2 DEF
              241f 00ad  ld   $ad
              2420 002d  ld   $2d         ;72a4 '-'
              2421 002d  ld   $2d         ;72a5 '-'
              2422 002d  ld   $2d         ;72a6 '-'
              2423 002d  ld   $2d         ;72a7 '-'
              2424 002d  ld   $2d         ;72a8 '-'
              2425 002d  ld   $2d         ;72a9 '-'
              2426 002d  ld   $2d         ;72aa '-'
              2427 002d  ld   $2d         ;72ab '-'
              2428 002d  ld   $2d         ;72ac '-'
              2429 002d  ld   $2d         ;72ad '-'
              242a 0000  ld   $00         ;72ae 0
              242b 002b  ld   $2b         ;72af STW
              242c 0060  ld   $60         ;72af 'Buffer'
              242d 0093  ld   $93         ;72b1 INC
              242e 001b  ld   $1b         ;72b1 '_vLR'+1
              242f 00ff  ld   $ff         ;72b3 RET
              2430 0073  ld   $73         ;| RAM segment address (high byte first)
              2431 00a0  ld   $a0         ;|
              2432 005a  ld   $5a         ;| Length (1..256)
              2433 00cd  ld   $cd         ;73a0 DEF
              2434 00f3  ld   $f3
              2435 0075  ld   $75         ;73a2 PUSH
              2436 00cd  ld   $cd         ;73a3 DEF
              2437 00ac  ld   $ac
              2438 004c  ld   $4c         ;73a5 'L'
              2439 006f  ld   $6f         ;73a6 'o'
              243a 0061  ld   $61         ;73a7 'a'
              243b 0064  ld   $64         ;73a8 'd'
              243c 0069  ld   $69         ;73a9 'i'
              243d 006e  ld   $6e         ;73aa 'n'
              243e 0067  ld   $67         ;73ab 'g'
              243f 0020  ld   $20         ;73ac ' '
              2440 0000  ld   $00         ;73ad 0
              2441 00cf  ld   $cf         ;73ae CALL
              2442 0032  ld   $32         ;73ae 'PrintText'
              2443 00cf  ld   $cf         ;73b0 CALL
              2444 00bd  ld   $bd         ;73b0 'PrintName'
              2445 00cf  ld   $cf         ;73b2 CALL
              2446 00a1  ld   $a1         ;73b2 'OpenFile'
              2447 00cf  ld   $cf         ;73b4 CALL
              2448 0099  ld   $99         ;73b4 'LoadByte'
              2449 005e  ld   $5e         ;73b6 ST
              244a 0031  ld   $31         ;73b6 'Address'+1
              244b 00cf  ld   $cf         ;73b8 CALL
              244c 0099  ld   $99         ;73b8 'LoadByte'
              244d 005e  ld   $5e         ;73ba ST
              244e 0030  ld   $30         ;73ba 'Address'
              244f 00cf  ld   $cf         ;73bc CALL
              2450 0099  ld   $99         ;73bc 'LoadByte'
              2451 005e  ld   $5e         ;73be ST
              2452 0029  ld   $29
              2453 00cf  ld   $cf         ;73c0 CALL
              2454 0099  ld   $99         ;73c0 'LoadByte'
              2455 00f0  ld   $f0         ;73c2 POKE
              2456 0030  ld   $30         ;73c2 'Address'
              2457 0093  ld   $93         ;73c4 INC
              2458 0030  ld   $30         ;73c4 'Address'
              2459 001a  ld   $1a         ;73c6 LD
              245a 0029  ld   $29
              245b 00e6  ld   $e6         ;73c8 SUBI
              245c 0001  ld   $01
              245d 0035  ld   $35         ;73ca BCC
              245e 0072  ld   $72         ;73cb NE
              245f 00bc  ld   $bc
              2460 00cf  ld   $cf         ;73cd CALL
              2461 0099  ld   $99         ;73cd 'LoadByte'
              2462 0035  ld   $35         ;73cf BCC
              2463 0072  ld   $72         ;73d0 NE
              2464 00b4  ld   $b4
              2465 00cf  ld   $cf         ;73d2 CALL
              2466 0099  ld   $99         ;73d2 'LoadByte'
              2467 005e  ld   $5e         ;73d4 ST
              2468 0031  ld   $31         ;73d4 'Address'+1
              2469 00cf  ld   $cf         ;73d6 CALL
              246a 0099  ld   $99         ;73d6 'LoadByte'
              246b 005e  ld   $5e         ;73d8 ST
              246c 0030  ld   $30         ;73d8 'Address'
              246d 00cf  ld   $cf         ;73da CALL
              246e 0099  ld   $99         ;73da 'LoadByte'
              246f 0035  ld   $35         ;73dc BCC
              2470 0050  ld   $50         ;73dd LT
              2471 00e1  ld   $e1
              2472 0059  ld   $59         ;73df LDI
              2473 0000  ld   $00
              2474 002b  ld   $2b         ;73e1 STW
              2475 0030  ld   $30         ;73e1 'Address'
              2476 0011  ld   $11         ;73e3 LDWI
              2477 0000  ld   $00
              2478 0002  ld   $02
              2479 002b  ld   $2b         ;73e6 STW
              247a 0036  ld   $36         ;73e6 'i'
              247b 00cf  ld   $cf         ;73e8 CALL
              247c 0038  ld   $38         ;73e8 'SendOnesToCard'
              247d 0021  ld   $21         ;73ea LDW
              247e 0036  ld   $36         ;73ea 'i'
              247f 00e6  ld   $e6         ;73ec SUBI
              2480 0001  ld   $01
              2481 0035  ld   $35         ;73ee BCC
              2482 004d  ld   $4d         ;73ef GT
              2483 00e4  ld   $e4
              2484 00cf  ld   $cf         ;73f1 CALL
              2485 005a  ld   $5a         ;73f1 'DisableCard'
              2486 0063  ld   $63         ;73f3 POP
              2487 00ff  ld   $ff         ;73f4 RET
              2488 002b  ld   $2b         ;73f5 STW
              2489 00c5  ld   $c5         ;73f5 'LoadGt1'
              248a 0093  ld   $93         ;73f7 INC
              248b 001b  ld   $1b         ;73f7 '_vLR'+1
              248c 00ff  ld   $ff         ;73f9 RET
              248d 0074  ld   $74         ;| RAM segment address (high byte first)
              248e 00a0  ld   $a0         ;|
              248f 0050  ld   $50         ;| Length (1..256)
              2490 00cd  ld   $cd         ;74a0 DEF
              2491 00c9  ld   $c9
              2492 00cd  ld   $cd         ;74a2 DEF
              2493 00ae  ld   $ae
              2494 0053  ld   $53         ;74a4 'S'
              2495 0059  ld   $59         ;74a5 'Y'
              2496 0053  ld   $53         ;74a6 'S'
              2497 0054  ld   $54         ;74a7 'T'
              2498 0045  ld   $45         ;74a8 'E'
              2499 004d  ld   $4d         ;74a9 'M'
              249a 0020  ld   $20         ;74aa ' '
              249b 0020  ld   $20         ;74ab ' '
              249c 0047  ld   $47         ;74ac 'G'
              249d 0054  ld   $54         ;74ad 'T'
              249e 0031  ld   $31         ;74ae '1'
              249f 0000  ld   $00         ;74af 0
              24a0 002b  ld   $2b         ;74b0 STW
              24a1 0052  ld   $52         ;74b0 'q'
              24a2 0021  ld   $21         ;74b2 LDW
              24a3 0050  ld   $50         ;74b2 'p'
              24a4 002b  ld   $2b         ;74b4 STW
              24a5 0036  ld   $36         ;74b4 'i'
              24a6 0021  ld   $21         ;74b6 LDW
              24a7 0052  ld   $52         ;74b6 'q'
              24a8 00ad  ld   $ad         ;74b8 PEEK
              24a9 0093  ld   $93         ;74b9 INC
              24aa 0052  ld   $52         ;74b9 'q'
              24ab 0035  ld   $35         ;74bb BCC
              24ac 003f  ld   $3f         ;74bc EQ
              24ad 00c8  ld   $c8
              24ae 002b  ld   $2b         ;74be STW
              24af 00c1  ld   $c1         ;74be 'j'
              24b0 0021  ld   $21         ;74c0 LDW
              24b1 0036  ld   $36         ;74c0 'i'
              24b2 00ad  ld   $ad         ;74c2 PEEK
              24b3 0093  ld   $93         ;74c3 INC
              24b4 0036  ld   $36         ;74c3 'i'
              24b5 00fc  ld   $fc         ;74c5 XORW
              24b6 00c1  ld   $c1         ;74c5 'j'
              24b7 0035  ld   $35         ;74c7 BCC
              24b8 003f  ld   $3f         ;74c8 EQ
              24b9 00b4  ld   $b4
              24ba 00ff  ld   $ff         ;74ca RET
              24bb 002b  ld   $2b         ;74cb STW
              24bc 00c3  ld   $c3         ;74cb 'IsBootGt1'
              24bd 00cd  ld   $cd         ;74cd DEF
              24be 00e9  ld   $e9
              24bf 0059  ld   $59         ;74cf LDI
              24c0 0078  ld   $78
              24c1 002b  ld   $2b         ;74d1 STW
              24c2 0036  ld   $36         ;74d1 'i'
              24c3 0099  ld   $99         ;74d3 ADDW
              24c4 0036  ld   $36         ;74d3 'i'
              24c5 00e3  ld   $e3         ;74d5 ADDI
              24c6 00fe  ld   $fe
              24c7 002b  ld   $2b         ;74d7 STW
              24c8 0050  ld   $50         ;74d7 'p'
              24c9 0021  ld   $21         ;74d9 LDW
              24ca 0036  ld   $36         ;74d9 'i'
              24cb 00e3  ld   $e3         ;74db ADDI
              24cc 0007  ld   $07
              24cd 00f0  ld   $f0         ;74dd POKE
              24ce 0050  ld   $50         ;74dd 'p'
              24cf 00e6  ld   $e6         ;74df SUBI
              24d0 0008  ld   $08
              24d1 0035  ld   $35         ;74e1 BCC
              24d2 004d  ld   $4d         ;74e2 GT
              24d3 00cf  ld   $cf
              24d4 0021  ld   $21         ;74e4 LDW
              24d5 0030  ld   $30         ;74e4 'Address'
              24d6 0035  ld   $35         ;74e6 BCC
              24d7 003f  ld   $3f         ;74e7 EQ
              24d8 00e4  ld   $e4
              24d9 00cf  ld   $cf         ;74e9 CALL
              24da 0018  ld   $18         ;74e9 vAC
              24db 002b  ld   $2b         ;74eb STW
              24dc 00c7  ld   $c7         ;74eb 'Execute'
              24dd 0093  ld   $93         ;74ed INC
              24de 001b  ld   $1b         ;74ed '_vLR'+1
              24df 00ff  ld   $ff         ;74ef RET
              24e0 0075  ld   $75         ;| RAM segment address (high byte first)
              24e1 00a0  ld   $a0         ;|
              24e2 0026  ld   $26         ;| Length (1..256)
              24e3 00cd  ld   $cd         ;75a0 DEF
              24e4 00bf  ld   $bf
              24e5 0075  ld   $75         ;75a2 PUSH
              24e6 0093  ld   $93         ;75a3 INC
              24e7 0056  ld   $56         ;75a3 'SectorL'
              24e8 0011  ld   $11         ;75a5 LDWI
              24e9 00ff  ld   $ff
              24ea 001f  ld   $1f
              24eb 00f8  ld   $f8         ;75a8 ANDW
              24ec 0091  ld   $91         ;75a8 'FileSizeL'
              24ed 0035  ld   $35         ;75aa BCC
              24ee 0072  ld   $72         ;75ab NE
              24ef 00bd  ld   $bd
              24f0 0021  ld   $21         ;75ad LDW
              24f1 00cd  ld   $cd         ;75ad 'List'
              24f2 00e3  ld   $e3         ;75af ADDI
              24f3 0004  ld   $04
              24f4 002b  ld   $2b         ;75b1 STW
              24f5 00cd  ld   $cd         ;75b1 'List'
              24f6 00f6  ld   $f6         ;75b3 DEEK
              24f7 002b  ld   $2b         ;75b4 STW
              24f8 0072  ld   $72         ;75b4 'ValueL'
              24f9 0021  ld   $21         ;75b6 LDW
              24fa 00cd  ld   $cd         ;75b6 'List'
              24fb fe00  bra  ac          ;+-----------------------------------+
              24fc fcfd  bra  $24fd       ;|                                   |
              24fd 1404  ld   $04,y       ;| Trampoline for page $2400 lookups |
              24fe e068  jmp  y,$68       ;|                                   |
              24ff c218  st   [$18]       ;+-----------------------------------+
              2500 00e3  ld   $e3         ;75b8 ADDI
              2501 0002  ld   $02
              2502 00f6  ld   $f6         ;75ba DEEK
              2503 002b  ld   $2b         ;75bb STW
              2504 0074  ld   $74         ;75bb 'ValueH'
              2505 00cf  ld   $cf         ;75bd CALL
              2506 009b  ld   $9b         ;75bd 'ClusterToSector'
              2507 0063  ld   $63         ;75bf POP
              2508 00ff  ld   $ff         ;75c0 RET
              2509 002b  ld   $2b         ;75c1 STW
              250a 0097  ld   $97         ;75c1 'NextSector'
              250b 0093  ld   $93         ;75c3 INC
              250c 001b  ld   $1b         ;75c3 '_vLR'+1
              250d 00ff  ld   $ff         ;75c5 RET
              250e 0076  ld   $76         ;| RAM segment address (high byte first)
              250f 00a0  ld   $a0         ;|
              2510 004b  ld   $4b         ;| Length (1..256)
              2511 00cd  ld   $cd         ;76a0 DEF
              2512 00e4  ld   $e4
              2513 0075  ld   $75         ;76a2 PUSH
              2514 0011  ld   $11         ;76a3 LDWI
              2515 00a0  ld   $a0
              2516 007f  ld   $7f
              2517 002b  ld   $2b         ;76a6 STW
              2518 00cd  ld   $cd         ;76a6 'List'
              2519 00cf  ld   $cf         ;76a8 CALL
              251a 00a9  ld   $a9         ;76a8 'Newline'
              251b 00cf  ld   $cf         ;76aa CALL
              251c 00ab  ld   $ab         ;76aa 'PrintValue'
              251d 0021  ld   $21         ;76ac LDW
              251e 0072  ld   $72         ;76ac 'ValueL'
              251f 00f3  ld   $f3         ;76ae DOKE
              2520 00cd  ld   $cd         ;76ae 'List'
              2521 0093  ld   $93         ;76b0 INC
              2522 00cd  ld   $cd         ;76b0 'List'
              2523 0093  ld   $93         ;76b2 INC
              2524 00cd  ld   $cd         ;76b2 'List'
              2525 0021  ld   $21         ;76b4 LDW
              2526 0074  ld   $74         ;76b4 'ValueH'
              2527 00f3  ld   $f3         ;76b6 DOKE
              2528 00cd  ld   $cd         ;76b6 'List'
              2529 0093  ld   $93         ;76b8 INC
              252a 00cd  ld   $cd         ;76b8 'List'
              252b 0093  ld   $93         ;76ba INC
              252c 00cd  ld   $cd         ;76ba 'List'
              252d 0011  ld   $11         ;76bc LDWI
              252e 0000  ld   $00
              252f 00f0  ld   $f0
              2530 00fa  ld   $fa         ;76bf ORW
              2531 0074  ld   $74         ;76bf 'ValueH'
              2532 00e3  ld   $e3         ;76c1 ADDI
              2533 0001  ld   $01
              2534 0035  ld   $35         ;76c3 BCC
              2535 0072  ld   $72         ;76c4 NE
              2536 00ca  ld   $ca
              2537 0059  ld   $59         ;76c6 LDI
              2538 0007  ld   $07
              2539 00fa  ld   $fa         ;76c8 ORW
              253a 0072  ld   $72         ;76c8 'ValueL'
              253b 00e3  ld   $e3         ;76ca ADDI
              253c 0001  ld   $01
              253d 0035  ld   $35         ;76cc BCC
              253e 003f  ld   $3f         ;76cd EQ
              253f 00d3  ld   $d3
              2540 00cf  ld   $cf         ;76cf CALL
              2541 00cf  ld   $cf         ;76cf 'NextCluster'
              2542 00cf  ld   $cf         ;76d1 CALL
              2543 00ab  ld   $ab         ;76d1 'PrintValue'
              2544 0090  ld   $90         ;76d3 BRA
              2545 00aa  ld   $aa
              2546 0011  ld   $11         ;76d5 LDWI
              2547 00a0  ld   $a0
              2548 007f  ld   $7f
              2549 002b  ld   $2b         ;76d8 STW
              254a 00cd  ld   $cd         ;76d8 'List'
              254b 00f6  ld   $f6         ;76da DEEK
              254c 002b  ld   $2b         ;76db STW
              254d 0072  ld   $72         ;76db 'ValueL'
              254e 0021  ld   $21         ;76dd LDW
              254f 00cd  ld   $cd         ;76dd 'List'
              2550 00e3  ld   $e3         ;76df ADDI
              2551 0002  ld   $02
              2552 00f6  ld   $f6         ;76e1 DEEK
              2553 002b  ld   $2b         ;76e2 STW
              2554 0074  ld   $74         ;76e2 'ValueH'
              2555 0063  ld   $63         ;76e4 POP
              2556 00ff  ld   $ff         ;76e5 RET
              2557 002b  ld   $2b         ;76e6 STW
              2558 009f  ld   $9f         ;76e6 'ReadClusterChain'
              2559 0093  ld   $93         ;76e8 INC
              255a 001b  ld   $1b         ;76e8 '_vLR'+1
              255b 00ff  ld   $ff         ;76ea RET
              255c 0077  ld   $77         ;| RAM segment address (high byte first)
              255d 00a0  ld   $a0         ;|
              255e 005b  ld   $5b         ;| Length (1..256)
              255f 00cd  ld   $cd         ;77a0 DEF
              2560 00f4  ld   $f4
              2561 0075  ld   $75         ;77a2 PUSH
              2562 001a  ld   $1a         ;77a3 LD
              2563 0073  ld   $73         ;77a3 'ValueL'+1
              2564 005e  ld   $5e         ;77a5 ST
              2565 0076  ld   $76         ;77a5 'OffsetL'
              2566 001a  ld   $1a         ;77a7 LD
              2567 0074  ld   $74         ;77a7 'ValueH'
              2568 005e  ld   $5e         ;77a9 ST
              2569 0077  ld   $77         ;77a9 'OffsetL'+1
              256a 001a  ld   $1a         ;77ab LD
              256b 0075  ld   $75         ;77ab 'ValueH'+1
              256c 002b  ld   $2b         ;77ad STW
              256d 0078  ld   $78         ;77ad 'OffsetH'
              256e 001a  ld   $1a         ;77af LD
              256f 0072  ld   $72         ;77af 'ValueL'
              2570 002b  ld   $2b         ;77b1 STW
              2571 00d1  ld   $d1         ;77b1 'm'
              2572 0082  ld   $82         ;77b3 ANDI
              2573 0080  ld   $80
              2574 00ad  ld   $ad         ;77b5 PEEK
              2575 002b  ld   $2b         ;77b6 STW
              2576 0072  ld   $72         ;77b6 'ValueL'
              2577 0059  ld   $59         ;77b8 LDI
              2578 0000  ld   $00
              2579 002b  ld   $2b         ;77ba STW
              257a 0074  ld   $74         ;77ba 'ValueH'
              257b 00cf  ld   $cf         ;77bc CALL
              257c 007a  ld   $7a         ;77bc 'AddOffset'
              257d 00cf  ld   $cf         ;77be CALL
              257e 007a  ld   $7a         ;77be 'AddOffset'
              257f 0021  ld   $21         ;77c0 LDW
              2580 007c  ld   $7c         ;77c0 'FatBaseL'
              2581 002b  ld   $2b         ;77c2 STW
              2582 0076  ld   $76         ;77c2 'OffsetL'
              2583 0021  ld   $21         ;77c4 LDW
              2584 007e  ld   $7e         ;77c4 'FatBaseH'
              2585 002b  ld   $2b         ;77c6 STW
              2586 0078  ld   $78         ;77c6 'OffsetH'
              2587 00cf  ld   $cf         ;77c8 CALL
              2588 007a  ld   $7a         ;77c8 'AddOffset'
              2589 00fc  ld   $fc         ;77ca XORW
              258a 0056  ld   $56         ;77ca 'SectorL'
              258b 0035  ld   $35         ;77cc BCC
              258c 0072  ld   $72         ;77cd NE
              258d 00d1  ld   $d1
              258e 0021  ld   $21         ;77cf LDW
              258f 0074  ld   $74         ;77cf 'ValueH'
              2590 00fc  ld   $fc         ;77d1 XORW
              2591 0054  ld   $54         ;77d1 'SectorH'
              2592 0035  ld   $35         ;77d3 BCC
              2593 003f  ld   $3f         ;77d4 EQ
              2594 00de  ld   $de
              2595 0021  ld   $21         ;77d6 LDW
              2596 0072  ld   $72         ;77d6 'ValueL'
              2597 002b  ld   $2b         ;77d8 STW
              2598 0056  ld   $56         ;77d8 'SectorL'
              2599 0021  ld   $21         ;77da LDW
              259a 0074  ld   $74         ;77da 'ValueH'
              259b 002b  ld   $2b         ;77dc STW
              259c 0054  ld   $54         ;77dc 'SectorH'
              259d 00cf  ld   $cf         ;77de CALL
              259e 0066  ld   $66         ;77de 'ReadSector'
              259f 0021  ld   $21         ;77e0 LDW
              25a0 00d1  ld   $d1         ;77e0 'm'
              25a1 0082  ld   $82         ;77e2 ANDI
              25a2 007f  ld   $7f
              25a3 00e9  ld   $e9         ;77e4 LSLW
              25a4 00e9  ld   $e9         ;77e5 LSLW
              25a5 0099  ld   $99         ;77e6 ADDW
              25a6 0030  ld   $30         ;77e6 'Address'
              25a7 002b  ld   $2b         ;77e8 STW
              25a8 00d1  ld   $d1         ;77e8 'm'
              25a9 00f6  ld   $f6         ;77ea DEEK
              25aa 002b  ld   $2b         ;77eb STW
              25ab 0072  ld   $72         ;77eb 'ValueL'
              25ac 0021  ld   $21         ;77ed LDW
              25ad 00d1  ld   $d1         ;77ed 'm'
              25ae 00e3  ld   $e3         ;77ef ADDI
              25af 0002  ld   $02
              25b0 00f6  ld   $f6         ;77f1 DEEK
              25b1 002b  ld   $2b         ;77f2 STW
              25b2 0074  ld   $74         ;77f2 'ValueH'
              25b3 0063  ld   $63         ;77f4 POP
              25b4 00ff  ld   $ff         ;77f5 RET
              25b5 002b  ld   $2b         ;77f6 STW
              25b6 00cf  ld   $cf         ;77f6 'NextCluster'
              25b7 0093  ld   $93         ;77f8 INC
              25b8 001b  ld   $1b         ;77f8 '_vLR'+1
              25b9 00ff  ld   $ff         ;77fa RET
              25ba 0078  ld   $78         ;| RAM segment address (high byte first)
              25bb 00a0  ld   $a0         ;|
              25bc 0044  ld   $44         ;| Length (1..256)
              25bd 00cd  ld   $cd         ;78a0 DEF
              25be 00b2  ld   $b2
              25bf 000a  ld   $0a         ;78a2 10
              25c0 002a  ld   $2a         ;78a3 '*'
              25c1 002a  ld   $2a         ;78a4 '*'
              25c2 002a  ld   $2a         ;78a5 '*'
              25c3 0020  ld   $20         ;78a6 ' '
              25c4 004d  ld   $4d         ;78a7 'M'
              25c5 0065  ld   $65         ;78a8 'e'
              25c6 006d  ld   $6d         ;78a9 'm'
              25c7 006f  ld   $6f         ;78aa 'o'
              25c8 0072  ld   $72         ;78ab 'r'
              25c9 0079  ld   $79         ;78ac 'y'
              25ca 0020  ld   $20         ;78ad ' '
              25cb 0063  ld   $63         ;78ae 'c'
              25cc 0061  ld   $61         ;78af 'a'
              25cd 0072  ld   $72         ;78b0 'r'
              25ce 0064  ld   $64         ;78b1 'd'
              25cf 000a  ld   $0a         ;78b2 10
              25d0 0000  ld   $00         ;78b3 0
              25d1 00cf  ld   $cf         ;78b4 CALL
              25d2 0032  ld   $32         ;78b4 'PrintText'
              25d3 0059  ld   $59         ;78b6 LDI
              25d4 0000  ld   $00
              25d5 005e  ld   $5e         ;78b8 ST
              25d6 000e  ld   $0e
              25d7 00cf  ld   $cf         ;78ba CALL
              25d8 0064  ld   $64         ;78ba 'InitCard'
              25d9 00cd  ld   $cd         ;78bc DEF
              25da 00c6  ld   $c6
              25db 0043  ld   $43         ;78be 'C'
              25dc 0061  ld   $61         ;78bf 'a'
              25dd 0072  ld   $72         ;78c0 'r'
              25de 0064  ld   $64         ;78c1 'd'
              25df 0054  ld   $54         ;78c2 'T'
              25e0 0079  ld   $79         ;78c3 'y'
              25e1 0070  ld   $70         ;78c4 'p'
              25e2 0065  ld   $65         ;78c5 'e'
              25e3 0020  ld   $20         ;78c6 ' '
              25e4 0000  ld   $00         ;78c7 0
              25e5 00cf  ld   $cf         ;78c8 CALL
              25e6 0032  ld   $32         ;78c8 'PrintText'
              25e7 0021  ld   $21         ;78ca LDW
              25e8 0034  ld   $34         ;78ca 'CardType'
              25e9 00cf  ld   $cf         ;78cc CALL
              25ea 0062  ld   $62         ;78cc 'PrintByte'
              25eb 00cf  ld   $cf         ;78ce CALL
              25ec 00a9  ld   $a9         ;78ce 'Newline'
              25ed 00cf  ld   $cf         ;78d0 CALL
              25ee 006e  ld   $6e         ;78d0 'ReadMBR'
              25ef 00cf  ld   $cf         ;78d2 CALL
              25f0 0040  ld   $40         ;78d2 'PrintResult'
              25f1 0035  ld   $35         ;78d4 BCC
              25f2 0072  ld   $72         ;78d5 NE
              25f3 00d7  ld   $d7
              25f4 00cf  ld   $cf         ;78d7 CALL
              25f5 006c  ld   $6c         ;78d7 'ReadVolumeId'
              25f6 00cf  ld   $cf         ;78d9 CALL
              25f7 0089  ld   $89         ;78d9 'InitFat32'
              25f8 00cf  ld   $cf         ;78db CALL
              25f9 009d  ld   $9d         ;78db 'ReadDirectory'
              25fa 0035  ld   $35         ;78dd BCC
              25fb fe00  bra  ac          ;+-----------------------------------+
              25fc fcfd  bra  $25fd       ;|                                   |
              25fd 1404  ld   $04,y       ;| Trampoline for page $2500 lookups |
              25fe e068  jmp  y,$68       ;|                                   |
              25ff c218  st   [$18]       ;+-----------------------------------+
              2600 0072  ld   $72         ;78de NE
              2601 00e0  ld   $e0
              2602 00cf  ld   $cf         ;78e0 CALL
              2603 00c9  ld   $c9         ;78e0 'PrintDirectory'
              2604 00b4  ld   $b4
              2605 0080  ld   $80
              2606 0000  ld   $00         ;End of CardBoot.gcl, size 2707
                                          ;+-----------------------------------+
                                          ;| Reset.gcl                         |
                                          ;+-----------------------------------+
              2607 dc42  st   $42,[y,x++] ;'B'
              2608 dc6f  st   $6f,[y,x++] ;'o'
              2609 dc6f  st   $6f,[y,x++] ;'o'
              260a dc74  st   $74,[y,x++] ;'t'
              260b dc00  st   $00,[y,x++] ;'\x00'
              260c dc00  st   $00,[y,x++] ;'\x00'
              260d dc00  st   $00,[y,x++] ;'\x00'
              260e dc00  st   $00,[y,x++] ;'\x00'
              260f 0074  ld   $74
              2610 c218  st   [$18]
              2611 001b  ld   $1b
              2612 1428  ld   $28,y
              2613 e0f2  jmp  y,$f2
              2614 c219  st   [$19]
Reset:        2615 0002  ld   $02         ;| RAM segment address (high byte first)
              2616 0000  ld   $00         ;|
              2617 00f1  ld   $f1         ;| Length (1..256)
              2618 0011  ld   $11         ;0200 LDWI
              2619 00f8  ld   $f8
              261a 0001  ld   $01
              261b 002b  ld   $2b         ;0203 STW
              261c 0030  ld   $30         ;0203 'CtrlBits'
              261d 00cd  ld   $cd         ;0205 DEF
              261e 0073  ld   $73
              261f 0075  ld   $75         ;0207 PUSH
              2620 001a  ld   $1a         ;0208 LD
              2621 0001  ld   $01
              2622 00e6  ld   $e6         ;020a SUBI
              2623 0001  ld   $01
              2624 0082  ld   $82         ;020c ANDI
              2625 00ff  ld   $ff
              2626 00e3  ld   $e3         ;020e ADDI
              2627 0001  ld   $01
              2628 002b  ld   $2b         ;0210 STW
              2629 0032  ld   $32         ;0210 'i'
              262a 0059  ld   $59         ;0212 LDI
              262b 0000  ld   $00
              262c 005e  ld   $5e         ;0214 ST
              262d 007c  ld   $7c
              262e 0011  ld   $11         ;0216 LDWI
              262f 0009  ld   $09
              2630 000b  ld   $0b
              2631 002b  ld   $2b         ;0219 STW
              2632 0022  ld   $22         ;0219 '_sysFn'
              2633 0059  ld   $59         ;021b LDI
              2634 007c  ld   $7c
              2635 00b4  ld   $b4         ;021d SYS
              2636 00fa  ld   $fa
              2637 001a  ld   $1a         ;021f LD
              2638 007c  ld   $7c
              2639 0035  ld   $35         ;0221 BCC
              263a 003f  ld   $3f         ;0222 EQ
              263b 0028  ld   $28
              263c 0059  ld   $59         ;0224 LDI
              263d 0000  ld   $00
              263e 00f0  ld   $f0         ;0226 POKE
              263f 0030  ld   $30         ;0226 'CtrlBits'
              2640 0090  ld   $90         ;0228 BRA
              2641 0052  ld   $52
              2642 0011  ld   $11         ;022a LDWI
              2643 0024  ld   $24
              2644 0080  ld   $80
              2645 002b  ld   $2b         ;022d STW
              2646 0034  ld   $34         ;022d 'q'
              2647 0059  ld   $59         ;022f LDI
              2648 00bc  ld   $bc
              2649 00b4  ld   $b4         ;0231 SYS
              264a 00fa  ld   $fa
              264b 0021  ld   $21         ;0233 LDW
              264c 0034  ld   $34         ;0233 'q'
              264d 00ad  ld   $ad         ;0235 PEEK
              264e 008c  ld   $8c         ;0236 XORI
              264f 00ff  ld   $ff
              2650 00f0  ld   $f0         ;0238 POKE
              2651 0034  ld   $34         ;0238 'q'
              2652 002b  ld   $2b         ;023a STW
              2653 0024  ld   $24         ;023a '_sysArgs0'
              2654 008c  ld   $8c         ;023c XORI
              2655 00ff  ld   $ff
              2656 00f0  ld   $f0         ;023e POKE
              2657 0034  ld   $34         ;023e 'q'
              2658 00fc  ld   $fc         ;0240 XORW
              2659 0024  ld   $24         ;0240 '_sysArgs0'
              265a 0035  ld   $35         ;0242 BCC
              265b 003f  ld   $3f         ;0243 EQ
              265c 004d  ld   $4d
              265d 0059  ld   $59         ;0245 LDI
              265e 0031  ld   $31
              265f 002b  ld   $2b         ;0247 STW
              2660 0036  ld   $36         ;0247 'Char'
              2661 00cf  ld   $cf         ;0249 CALL
              2662 0038  ld   $38         ;0249 'PrintChar'
              2663 0059  ld   $59         ;024b LDI
              2664 0070  ld   $70
              2665 002b  ld   $2b         ;024d STW
              2666 0032  ld   $32         ;024d 'i'
              2667 0011  ld   $11         ;024f LDWI
              2668 007c  ld   $7c
              2669 0080  ld   $80
              266a 00b4  ld   $b4         ;0252 SYS
              266b 00fa  ld   $fa
              266c 0011  ld   $11         ;0254 LDWI
              266d 002f  ld   $2f
              266e 002f  ld   $2f
              266f 002b  ld   $2b         ;0257 STW
              2670 0036  ld   $36         ;0257 'Char'
              2671 0021  ld   $21         ;0259 LDW
              2672 0032  ld   $32         ;0259 'i'
              2673 0093  ld   $93         ;025b INC
              2674 0036  ld   $36         ;025b 'Char'
              2675 00e6  ld   $e6         ;025d SUBI
              2676 0028  ld   $28
              2677 0035  ld   $35         ;025f BCC
              2678 0053  ld   $53         ;0260 GE
              2679 0059  ld   $59
              267a 00e3  ld   $e3         ;0262 ADDI
              267b 0028  ld   $28
              267c 0093  ld   $93         ;0264 INC
              267d 0037  ld   $37         ;0264 'Char'+1
              267e 00e6  ld   $e6         ;0266 SUBI
              267f 0004  ld   $04
              2680 0035  ld   $35         ;0268 BCC
              2681 0053  ld   $53         ;0269 GE
              2682 0062  ld   $62
              2683 00cf  ld   $cf         ;026b CALL
              2684 0038  ld   $38         ;026b 'PrintChar'
              2685 001a  ld   $1a         ;026d LD
              2686 0037  ld   $37         ;026d 'Char'+1
              2687 002b  ld   $2b         ;026f STW
              2688 0036  ld   $36         ;026f 'Char'
              2689 00cf  ld   $cf         ;0271 CALL
              268a 0038  ld   $38         ;0271 'PrintChar'
              268b 0063  ld   $63         ;0273 POP
              268c 00ff  ld   $ff         ;0274 RET
              268d 002b  ld   $2b         ;0275 STW
              268e 003a  ld   $3a         ;0275 'CheckMemory'
              268f 00cd  ld   $cd         ;0277 DEF
              2690 009b  ld   $9b
              2691 0075  ld   $75         ;0279 PUSH
              2692 002b  ld   $2b         ;027a STW
              2693 003c  ld   $3c         ;027a 'Text'
              2694 0021  ld   $21         ;027c LDW
              2695 003c  ld   $3c         ;027c 'Text'
              2696 00ad  ld   $ad         ;027e PEEK
              2697 0035  ld   $35         ;027f BCC
              2698 003f  ld   $3f         ;0280 EQ
              2699 0099  ld   $99
              269a 002b  ld   $2b         ;0282 STW
              269b 0036  ld   $36         ;0282 'Char'
              269c 008c  ld   $8c         ;0284 XORI
              269d 000a  ld   $0a
              269e 0035  ld   $35         ;0286 BCC
              269f 003f  ld   $3f         ;0287 EQ
              26a0 008b  ld   $8b
              26a1 00cf  ld   $cf         ;0289 CALL
              26a2 0038  ld   $38         ;0289 'PrintChar'
              26a3 0090  ld   $90         ;028b BRA
              26a4 0095  ld   $95
              26a5 0059  ld   $59         ;028d LDI
              26a6 0002  ld   $02
              26a7 005e  ld   $5e         ;028f ST
              26a8 003e  ld   $3e         ;028f 'Pos'
              26a9 001a  ld   $1a         ;0291 LD
              26aa 003f  ld   $3f         ;0291 'Pos'+1
              26ab 00e3  ld   $e3         ;0293 ADDI
              26ac 0008  ld   $08
              26ad 005e  ld   $5e         ;0295 ST
              26ae 003f  ld   $3f         ;0295 'Pos'+1
              26af 0093  ld   $93         ;0297 INC
              26b0 003c  ld   $3c         ;0297 'Text'
              26b1 0090  ld   $90         ;0299 BRA
              26b2 007a  ld   $7a
              26b3 0063  ld   $63         ;029b POP
              26b4 00ff  ld   $ff         ;029c RET
              26b5 002b  ld   $2b         ;029d STW
              26b6 0040  ld   $40         ;029d 'PrintS'
              26b7 00cd  ld   $cd         ;029f DEF
              26b8 00ea  ld   $ea
              26b9 001a  ld   $1a         ;02a1 LD
              26ba 0036  ld   $36         ;02a1 'Char'
              26bb 00e6  ld   $e6         ;02a3 SUBI
              26bc 0052  ld   $52
              26bd 0035  ld   $35         ;02a5 BCC
              26be 0053  ld   $53         ;02a6 GE
              26bf 00af  ld   $af
              26c0 00e3  ld   $e3         ;02a8 ADDI
              26c1 0032  ld   $32
              26c2 002b  ld   $2b         ;02aa STW
              26c3 0032  ld   $32         ;02aa 'i'
              26c4 0011  ld   $11         ;02ac LDWI
              26c5 0000  ld   $00
              26c6 0007  ld   $07
              26c7 0090  ld   $90         ;02af BRA
              26c8 00b4  ld   $b4
              26c9 002b  ld   $2b         ;02b1 STW
              26ca 0032  ld   $32         ;02b1 'i'
              26cb 0011  ld   $11         ;02b3 LDWI
              26cc 0000  ld   $00
              26cd 0008  ld   $08
              26ce 002b  ld   $2b         ;02b6 STW
              26cf 0042  ld   $42         ;02b6 'j'
              26d0 0021  ld   $21         ;02b8 LDW
              26d1 0032  ld   $32         ;02b8 'i'
              26d2 00e9  ld   $e9         ;02ba LSLW
              26d3 00e9  ld   $e9         ;02bb LSLW
              26d4 0099  ld   $99         ;02bc ADDW
              26d5 0032  ld   $32         ;02bc 'i'
              26d6 0099  ld   $99         ;02be ADDW
              26d7 0042  ld   $42         ;02be 'j'
              26d8 002b  ld   $2b         ;02c0 STW
              26d9 0042  ld   $42         ;02c0 'j'
              26da 0011  ld   $11         ;02c2 LDWI
              26db 00e1  ld   $e1
              26dc 0004  ld   $04
              26dd 002b  ld   $2b         ;02c5 STW
              26de 0022  ld   $22         ;02c5 '_sysFn'
              26df 0011  ld   $11         ;02c7 LDWI
              26e0 0020  ld   $20
              26e1 003f  ld   $3f
              26e2 002b  ld   $2b         ;02ca STW
              26e3 0024  ld   $24
              26e4 0021  ld   $21         ;02cc LDW
              26e5 003e  ld   $3e         ;02cc 'Pos'
              26e6 002b  ld   $2b         ;02ce STW
              26e7 0028  ld   $28
              26e8 00e3  ld   $e3         ;02d0 ADDI
              26e9 0006  ld   $06
              26ea 002b  ld   $2b         ;02d2 STW
              26eb 003e  ld   $3e         ;02d2 'Pos'
              26ec 0059  ld   $59         ;02d4 LDI
              26ed 0005  ld   $05
              26ee 002b  ld   $2b         ;02d6 STW
              26ef 0032  ld   $32         ;02d6 'i'
              26f0 0021  ld   $21         ;02d8 LDW
              26f1 0042  ld   $42         ;02d8 'j'
              26f2 007f  ld   $7f         ;02da LUP
              26f3 0000  ld   $00
              26f4 005e  ld   $5e         ;02dc ST
              26f5 0026  ld   $26
              26f6 00b4  ld   $b4         ;02de SYS
              26f7 00cb  ld   $cb
              26f8 0093  ld   $93         ;02e0 INC
              26f9 0042  ld   $42         ;02e0 'j'
              26fa 0093  ld   $93         ;02e2 INC
              26fb fe00  bra  ac          ;+-----------------------------------+
              26fc fcfd  bra  $26fd       ;|                                   |
              26fd 1404  ld   $04,y       ;| Trampoline for page $2600 lookups |
              26fe e068  jmp  y,$68       ;|                                   |
              26ff c218  st   [$18]       ;+-----------------------------------+
              2700 0028  ld   $28
              2701 0021  ld   $21         ;02e4 LDW
              2702 0032  ld   $32         ;02e4 'i'
              2703 00e6  ld   $e6         ;02e6 SUBI
              2704 0001  ld   $01
              2705 0035  ld   $35         ;02e8 BCC
              2706 004d  ld   $4d         ;02e9 GT
              2707 00d4  ld   $d4
              2708 00ff  ld   $ff         ;02eb RET
              2709 002b  ld   $2b         ;02ec STW
              270a 0038  ld   $38         ;02ec 'PrintChar'
              270b 0093  ld   $93         ;02ee INC
              270c 001b  ld   $1b
              270d 00ff  ld   $ff         ;02f0 RET
              270e 0003  ld   $03         ;| RAM segment address (high byte first)
              270f 0000  ld   $00         ;|
              2710 00ea  ld   $ea         ;| Length (1..256)
              2711 00cd  ld   $cd         ;0300 DEF
              2712 0037  ld   $37
              2713 002b  ld   $2b         ;0302 STW
              2714 0032  ld   $32         ;0302 'i'
              2715 0088  ld   $88         ;0304 ORI
              2716 00ff  ld   $ff
              2717 008c  ld   $8c         ;0306 XORI
              2718 00ff  ld   $ff
              2719 0088  ld   $88         ;0308 ORI
              271a 00fa  ld   $fa
              271b 002b  ld   $2b         ;030a STW
              271c 0044  ld   $44         ;030a 'p'
              271d 001a  ld   $1a         ;030c LD
              271e 0032  ld   $32         ;030c 'i'
              271f 002b  ld   $2b         ;030e STW
              2720 0032  ld   $32         ;030e 'i'
              2721 0059  ld   $59         ;0310 LDI
              2722 0000  ld   $00
              2723 00f0  ld   $f0         ;0312 POKE
              2724 0044  ld   $44         ;0312 'p'
              2725 0093  ld   $93         ;0314 INC
              2726 0044  ld   $44         ;0314 'p'
              2727 0059  ld   $59         ;0316 LDI
              2728 0003  ld   $03
              2729 00f0  ld   $f0         ;0318 POKE
              272a 0044  ld   $44         ;0318 'p'
              272b 0093  ld   $93         ;031a INC
              272c 0044  ld   $44         ;031a 'p'
              272d 0011  ld   $11         ;031c LDWI
              272e 0000  ld   $00
              272f 0009  ld   $09
              2730 0099  ld   $99         ;031f ADDW
              2731 0032  ld   $32         ;031f 'i'
              2732 007f  ld   $7f         ;0321 LUP
              2733 0000  ld   $00
              2734 00f0  ld   $f0         ;0323 POKE
              2735 0044  ld   $44         ;0323 'p'
              2736 0093  ld   $93         ;0325 INC
              2737 0044  ld   $44         ;0325 'p'
              2738 0011  ld   $11         ;0327 LDWI
              2739 0000  ld   $00
              273a 0009  ld   $09
              273b 0099  ld   $99         ;032a ADDW
              273c 0032  ld   $32         ;032a 'i'
              273d 007f  ld   $7f         ;032c LUP
              273e 0001  ld   $01
              273f 00f0  ld   $f0         ;032e POKE
              2740 0044  ld   $44         ;032e 'p'
              2741 0093  ld   $93         ;0330 INC
              2742 0044  ld   $44         ;0330 'p'
              2743 00f0  ld   $f0         ;0332 POKE
              2744 0044  ld   $44         ;0332 'p'
              2745 0093  ld   $93         ;0334 INC
              2746 0044  ld   $44         ;0334 'p'
              2747 00f0  ld   $f0         ;0336 POKE
              2748 0044  ld   $44         ;0336 'p'
              2749 00ff  ld   $ff         ;0338 RET
              274a 002b  ld   $2b         ;0339 STW
              274b 0046  ld   $46         ;0339 'SetupChannel'
              274c 00cd  ld   $cd         ;033b DEF
              274d 00c9  ld   $c9
              274e 0075  ld   $75         ;033d PUSH
              274f 0059  ld   $59         ;033e LDI
              2750 0010  ld   $10
              2751 002b  ld   $2b         ;0340 STW
              2752 0042  ld   $42         ;0340 'j'
              2753 0059  ld   $59         ;0342 LDI
              2754 000a  ld   $0a
              2755 002b  ld   $2b         ;0344 STW
              2756 0032  ld   $32         ;0344 'i'
              2757 00cf  ld   $cf         ;0346 CALL
              2758 0048  ld   $48         ;0346 'SendOnesToCard'
              2759 0021  ld   $21         ;0348 LDW
              275a 0032  ld   $32         ;0348 'i'
              275b 00e6  ld   $e6         ;034a SUBI
              275c 0001  ld   $01
              275d 0035  ld   $35         ;034c BCC
              275e 004d  ld   $4d         ;034d GT
              275f 0042  ld   $42
              2760 0011  ld   $11         ;034f LDWI
              2761 0009  ld   $09
              2762 000b  ld   $0b
              2763 002b  ld   $2b         ;0352 STW
              2764 0022  ld   $22         ;0352 '_sysFn'
              2765 0011  ld   $11         ;0354 LDWI
              2766 0078  ld   $78
              2767 0080  ld   $80
              2768 00b4  ld   $b4         ;0357 SYS
              2769 00fa  ld   $fa
              276a 00cd  ld   $cd         ;0359 DEF
              276b 0061  ld   $61
              276c 00ff  ld   $ff         ;035b 255
              276d 00ff  ld   $ff         ;035c 255
              276e 0040  ld   $40         ;035d 64
              276f 0000  ld   $00         ;035e 0
              2770 0000  ld   $00         ;035f 0
              2771 0000  ld   $00         ;0360 0
              2772 0000  ld   $00         ;0361 0
              2773 0095  ld   $95         ;0362 149
              2774 002b  ld   $2b         ;0363 STW
              2775 0044  ld   $44         ;0363 'p'
              2776 0059  ld   $59         ;0365 LDI
              2777 0081  ld   $81
              2778 002b  ld   $2b         ;0367 STW
              2779 0034  ld   $34         ;0367 'q'
              277a 0059  ld   $59         ;0369 LDI
              277b 0008  ld   $08
              277c 002b  ld   $2b         ;036b STW
              277d 0032  ld   $32         ;036b 'i'
              277e 0021  ld   $21         ;036d LDW
              277f 0044  ld   $44         ;036d 'p'
              2780 00ad  ld   $ad         ;036f PEEK
              2781 0093  ld   $93         ;0370 INC
              2782 0044  ld   $44         ;0370 'p'
              2783 00f0  ld   $f0         ;0372 POKE
              2784 0034  ld   $34         ;0372 'q'
              2785 0093  ld   $93         ;0374 INC
              2786 0034  ld   $34         ;0374 'q'
              2787 0021  ld   $21         ;0376 LDW
              2788 0032  ld   $32         ;0376 'i'
              2789 00e6  ld   $e6         ;0378 SUBI
              278a 0001  ld   $01
              278b 0035  ld   $35         ;037a BCC
              278c 004d  ld   $4d         ;037b GT
              278d 0069  ld   $69
              278e 0059  ld   $59         ;037d LDI
              278f 0081  ld   $81
              2790 002b  ld   $2b         ;037f STW
              2791 0024  ld   $24         ;037f '_sysArgs0'
              2792 00e3  ld   $e3         ;0381 ADDI
              2793 0008  ld   $08
              2794 002b  ld   $2b         ;0383 STW
              2795 0026  ld   $26         ;0383 '_sysArgs2'
              2796 0011  ld   $11         ;0385 LDWI
              2797 0015  ld   $15
              2798 000b  ld   $0b
              2799 002b  ld   $2b         ;0388 STW
              279a 0022  ld   $22         ;0388 '_sysFn'
              279b 00b4  ld   $b4         ;038a SYS
              279c 00cb  ld   $cb
              279d 0059  ld   $59         ;038c LDI
              279e 0010  ld   $10
              279f 002b  ld   $2b         ;038e STW
              27a0 0032  ld   $32         ;038e 'i'
              27a1 00cf  ld   $cf         ;0390 CALL
              27a2 0048  ld   $48         ;0390 'SendOnesToCard'
              27a3 0082  ld   $82         ;0392 ANDI
              27a4 0080  ld   $80
              27a5 0035  ld   $35         ;0394 BCC
              27a6 003f  ld   $3f         ;0395 EQ
              27a7 009c  ld   $9c
              27a8 0021  ld   $21         ;0397 LDW
              27a9 0032  ld   $32         ;0397 'i'
              27aa 00e6  ld   $e6         ;0399 SUBI
              27ab 0001  ld   $01
              27ac 0035  ld   $35         ;039b BCC
              27ad 004d  ld   $4d         ;039c GT
              27ae 008c  ld   $8c
              27af 0011  ld   $11         ;039e LDWI
              27b0 0009  ld   $09
              27b1 000b  ld   $0b
              27b2 002b  ld   $2b         ;03a1 STW
              27b3 0022  ld   $22         ;03a1 '_sysFn'
              27b4 0011  ld   $11         ;03a3 LDWI
              27b5 007c  ld   $7c
              27b6 0080  ld   $80
              27b7 00b4  ld   $b4         ;03a6 SYS
              27b8 00fa  ld   $fa
              27b9 001a  ld   $1a         ;03a8 LD
              27ba 002a  ld   $2a
              27bb 0035  ld   $35         ;03aa BCC
              27bc 003f  ld   $3f         ;03ab EQ
              27bd 00c7  ld   $c7
              27be 008c  ld   $8c         ;03ad XORI
              27bf 0001  ld   $01
              27c0 0035  ld   $35         ;03af BCC
              27c1 0072  ld   $72         ;03b0 NE
              27c2 00c0  ld   $c0
              27c3 0011  ld   $11         ;03b2 LDWI
              27c4 0074  ld   $74
              27c5 001b  ld   $1b
              27c6 002b  ld   $2b         ;03b5 STW
              27c7 0024  ld   $24         ;03b5 '_sysArgs0'
              27c8 0011  ld   $11         ;03b7 LDWI
              27c9 0000  ld   $00
              27ca 0002  ld   $02
              27cb 002b  ld   $2b         ;03ba STW
              27cc 001a  ld   $1a         ;03ba '_vLR'
              27cd 0059  ld   $59         ;03bc LDI
              27ce 00ad  ld   $ad
              27cf 002b  ld   $2b         ;03be STW
              27d0 0022  ld   $22         ;03be '_sysFn'
              27d1 00b4  ld   $b4         ;03c0 SYS
              27d2 00e2  ld   $e2
              27d3 0021  ld   $21         ;03c2 LDW
              27d4 0042  ld   $42         ;03c2 'j'
              27d5 00e6  ld   $e6         ;03c4 SUBI
              27d6 0001  ld   $01
              27d7 0035  ld   $35         ;03c6 BCC
              27d8 004d  ld   $4d         ;03c7 GT
              27d9 003e  ld   $3e
              27da 0063  ld   $63         ;03c9 POP
              27db 00ff  ld   $ff         ;03ca RET
              27dc 002b  ld   $2b         ;03cb STW
              27dd 004a  ld   $4a         ;03cb 'CheckCard'
              27de 00cd  ld   $cd         ;03cd DEF
              27df 00e3  ld   $e3
              27e0 0059  ld   $59         ;03cf LDI
              27e1 00ff  ld   $ff
              27e2 005e  ld   $5e         ;03d1 ST
              27e3 002a  ld   $2a
              27e4 0059  ld   $59         ;03d3 LDI
              27e5 002a  ld   $2a
              27e6 002b  ld   $2b         ;03d5 STW
              27e7 0024  ld   $24         ;03d5 '_sysArgs0'
              27e8 00e3  ld   $e3         ;03d7 ADDI
              27e9 0001  ld   $01
              27ea 002b  ld   $2b         ;03d9 STW
              27eb 0026  ld   $26         ;03d9 '_sysArgs2'
              27ec 0011  ld   $11         ;03db LDWI
              27ed 0015  ld   $15
              27ee 000b  ld   $0b
              27ef 002b  ld   $2b         ;03de STW
              27f0 0022  ld   $22         ;03de '_sysFn'
              27f1 00b4  ld   $b4         ;03e0 SYS
              27f2 00cb  ld   $cb
              27f3 001a  ld   $1a         ;03e2 LD
              27f4 002a  ld   $2a
              27f5 00ff  ld   $ff         ;03e4 RET
              27f6 002b  ld   $2b         ;03e5 STW
              27f7 0048  ld   $48         ;03e5 'SendOnesToCard'
              27f8 0093  ld   $93         ;03e7 INC
              27f9 001b  ld   $1b
              27fa 00ff  ld   $ff         ;03e9 RET
              27fb fe00  bra  ac          ;+-----------------------------------+
              27fc fcfd  bra  $27fd       ;|                                   |
              27fd 1404  ld   $04,y       ;| Trampoline for page $2700 lookups |
              27fe e068  jmp  y,$68       ;|                                   |
              27ff c218  st   [$18]       ;+-----------------------------------+
              2800 0004  ld   $04         ;| RAM segment address (high byte first)
              2801 0000  ld   $00         ;|
              2802 00d5  ld   $d5         ;| Length (1..256)
              2803 0011  ld   $11         ;0400 LDWI
              2804 000f  ld   $0f
              2805 000b  ld   $0b
              2806 002b  ld   $2b         ;0403 STW
              2807 0022  ld   $22
              2808 0059  ld   $59         ;0405 LDI
              2809 0000  ld   $00
              280a 00b4  ld   $b4         ;0407 SYS
              280b 00f5  ld   $f5
              280c 0011  ld   $11         ;0409 LDWI
              280d 0012  ld   $12
              280e 000b  ld   $0b
              280f 002b  ld   $2b         ;040c STW
              2810 0022  ld   $22
              2811 0059  ld   $59         ;040e LDI
              2812 0000  ld   $00
              2813 00b4  ld   $b4         ;0410 SYS
              2814 00f7  ld   $f7
              2815 00b4  ld   $b4         ;0412 SYS
              2816 00f7  ld   $f7
              2817 00b4  ld   $b4         ;0414 SYS
              2818 00f7  ld   $f7
              2819 00b4  ld   $b4         ;0416 SYS
              281a 00f7  ld   $f7
              281b 0011  ld   $11         ;0418 LDWI
              281c 0058  ld   $58
              281d 0001  ld   $01
              281e 00cf  ld   $cf         ;041b CALL
              281f 0046  ld   $46         ;041b 'SetupChannel'
              2820 0011  ld   $11         ;041d LDWI
              2821 0070  ld   $70
              2822 0002  ld   $02
              2823 00cf  ld   $cf         ;0420 CALL
              2824 0046  ld   $46         ;0420 'SetupChannel'
              2825 0011  ld   $11         ;0422 LDWI
              2826 0078  ld   $78
              2827 0003  ld   $03
              2828 00cf  ld   $cf         ;0425 CALL
              2829 0046  ld   $46         ;0425 'SetupChannel'
              282a 0011  ld   $11         ;0427 LDWI
              282b 007e  ld   $7e
              282c 0004  ld   $04
              282d 00cf  ld   $cf         ;042a CALL
              282e 0046  ld   $46         ;042a 'SetupChannel'
              282f 0011  ld   $11         ;042c LDWI
              2830 0000  ld   $00
              2831 0001  ld   $01
              2832 002b  ld   $2b         ;042f STW
              2833 0044  ld   $44         ;042f 'p'
              2834 0011  ld   $11         ;0431 LDWI
              2835 0000  ld   $00
              2836 0008  ld   $08
              2837 002b  ld   $2b         ;0434 STW
              2838 0034  ld   $34         ;0434 'q'
              2839 001a  ld   $1a         ;0436 LD
              283a 0035  ld   $35         ;0436 'q'+1
              283b 00f0  ld   $f0         ;0438 POKE
              283c 0044  ld   $44         ;0438 'p'
              283d 0093  ld   $93         ;043a INC
              283e 0044  ld   $44         ;043a 'p'
              283f 0059  ld   $59         ;043c LDI
              2840 0000  ld   $00
              2841 00f0  ld   $f0         ;043e POKE
              2842 0044  ld   $44         ;043e 'p'
              2843 0093  ld   $93         ;0440 INC
              2844 0044  ld   $44         ;0440 'p'
              2845 0093  ld   $93         ;0442 INC
              2846 0035  ld   $35         ;0442 'q'+1
              2847 0021  ld   $21         ;0444 LDW
              2848 0034  ld   $34         ;0444 'q'
              2849 0035  ld   $35         ;0446 BCC
              284a 004d  ld   $4d         ;0447 GT
              284b 0034  ld   $34
              284c 0011  ld   $11         ;0449 LDWI
              284d 0003  ld   $03
              284e 000b  ld   $0b
              284f 002b  ld   $2b         ;044c STW
              2850 0022  ld   $22         ;044c '_sysFn'
              2851 0059  ld   $59         ;044e LDI
              2852 0020  ld   $20
              2853 005e  ld   $5e         ;0450 ST
              2854 0025  ld   $25
              2855 0011  ld   $11         ;0452 LDWI
              2856 0000  ld   $00
              2857 0008  ld   $08
              2858 002b  ld   $2b         ;0455 STW
              2859 0044  ld   $44         ;0455 'p'
              285a 002b  ld   $2b         ;0457 STW
              285b 0026  ld   $26         ;0457 '_sysArgs2'
              285c 0059  ld   $59         ;0459 LDI
              285d 00a0  ld   $a0
              285e 005e  ld   $5e         ;045b ST
              285f 0024  ld   $24
              2860 00b4  ld   $b4         ;045d SYS
              2861 00f3  ld   $f3
              2862 0011  ld   $11         ;045f LDWI
              2863 0000  ld   $00
              2864 0001  ld   $01
              2865 0099  ld   $99         ;0462 ADDW
              2866 0044  ld   $44         ;0462 'p'
              2867 0035  ld   $35         ;0464 BCC
              2868 004d  ld   $4d         ;0465 GT
              2869 0053  ld   $53
              286a 001a  ld   $1a         ;0467 LD
              286b 002e  ld   $2e
              286c 0082  ld   $82         ;0469 ANDI
              286d 0080  ld   $80
              286e 0035  ld   $35         ;046b BCC
              286f 0072  ld   $72         ;046c NE
              2870 0070  ld   $70
              2871 005e  ld   $5e         ;046e ST
              2872 002e  ld   $2e
              2873 005e  ld   $5e         ;0470 ST
              2874 002d  ld   $2d
              2875 0059  ld   $59         ;0472 LDI
              2876 0009  ld   $09
              2877 005e  ld   $5e         ;0474 ST
              2878 002f  ld   $2f
              2879 0011  ld   $11         ;0476 LDWI
              287a 0014  ld   $14
              287b 0008  ld   $08
              287c 002b  ld   $2b         ;0479 STW
              287d 003e  ld   $3e         ;0479 'Pos'
              287e 00cd  ld   $cd         ;047b DEF
              287f 0089  ld   $89
              2880 002a  ld   $2a         ;047d '*'
              2881 002a  ld   $2a         ;047e '*'
              2882 002a  ld   $2a         ;047f '*'
              2883 0020  ld   $20         ;0480 ' '
              2884 0047  ld   $47         ;0481 'G'
              2885 0069  ld   $69         ;0482 'i'
              2886 0067  ld   $67         ;0483 'g'
              2887 0061  ld   $61         ;0484 'a'
              2888 0074  ld   $74         ;0485 't'
              2889 0072  ld   $72         ;0486 'r'
              288a 006f  ld   $6f         ;0487 'o'
              288b 006e  ld   $6e         ;0488 'n'
              288c 0020  ld   $20         ;0489 ' '
              288d 0000  ld   $00         ;048a 0
              288e 00cf  ld   $cf         ;048b CALL
              288f 0040  ld   $40         ;048b 'PrintS'
              2890 00cf  ld   $cf         ;048d CALL
              2891 003a  ld   $3a         ;048d 'CheckMemory'
              2892 00cd  ld   $cd         ;048f DEF
              2893 00b0  ld   $b0
              2894 004b  ld   $4b         ;0491 'K'
              2895 0020  ld   $20         ;0492 ' '
              2896 002a  ld   $2a         ;0493 '*'
              2897 002a  ld   $2a         ;0494 '*'
              2898 002a  ld   $2a         ;0495 '*'
              2899 0020  ld   $20         ;0496 ' '
              289a 000a  ld   $0a         ;0497 10
              289b 0020  ld   $20         ;0498 ' '
              289c 0054  ld   $54         ;0499 'T'
              289d 0054  ld   $54         ;049a 'T'
              289e 004c  ld   $4c         ;049b 'L'
              289f 0020  ld   $20         ;049c ' '
              28a0 006d  ld   $6d         ;049d 'm'
              28a1 0069  ld   $69         ;049e 'i'
              28a2 0063  ld   $63         ;049f 'c'
              28a3 0072  ld   $72         ;04a0 'r'
              28a4 006f  ld   $6f         ;04a1 'o'
              28a5 0063  ld   $63         ;04a2 'c'
              28a6 006f  ld   $6f         ;04a3 'o'
              28a7 006d  ld   $6d         ;04a4 'm'
              28a8 0070  ld   $70         ;04a5 'p'
              28a9 0075  ld   $75         ;04a6 'u'
              28aa 0074  ld   $74         ;04a7 't'
              28ab 0065  ld   $65         ;04a8 'e'
              28ac 0072  ld   $72         ;04a9 'r'
              28ad 0020  ld   $20         ;04aa ' '
              28ae 0044  ld   $44         ;04ab 'D'
              28af 0045  ld   $45         ;04ac 'E'
              28b0 0056  ld   $56         ;04ad 'V'
              28b1 0052  ld   $52         ;04ae 'R'
              28b2 004f  ld   $4f         ;04af 'O'
              28b3 004d  ld   $4d         ;04b0 'M'
              28b4 0000  ld   $00         ;04b1 0
              28b5 00cf  ld   $cf         ;04b2 CALL
              28b6 0040  ld   $40         ;04b2 'PrintS'
              28b7 0011  ld   $11         ;04b4 LDWI
              28b8 0000  ld   $00
              28b9 000b  ld   $0b
              28ba 002b  ld   $2b         ;04b7 STW
              28bb 0022  ld   $22         ;04b7 '_sysFn'
              28bc 0059  ld   $59         ;04b9 LDI
              28bd 0001  ld   $01
              28be 00b4  ld   $b4         ;04bb SYS
              28bf 00e6  ld   $e6
              28c0 0021  ld   $21         ;04bd LDW
              28c1 0030  ld   $30         ;04bd 'CtrlBits'
              28c2 00ad  ld   $ad         ;04bf PEEK
              28c3 0035  ld   $35         ;04c0 BCC
              28c4 003f  ld   $3f         ;04c1 EQ
              28c5 00c3  ld   $c3
              28c6 00cf  ld   $cf         ;04c3 CALL
              28c7 004a  ld   $4a         ;04c3 'CheckCard'
              28c8 0011  ld   $11         ;04c5 LDWI
              28c9 000e  ld   $0e
              28ca 0018  ld   $18
              28cb 002b  ld   $2b         ;04c8 STW
              28cc 0024  ld   $24         ;04c8 '_sysArgs0'
              28cd 0011  ld   $11         ;04ca LDWI
              28ce 0000  ld   $00
              28cf 0002  ld   $02
              28d0 002b  ld   $2b         ;04cd STW
              28d1 001a  ld   $1a         ;04cd '_vLR'
              28d2 0059  ld   $59         ;04cf LDI
              28d3 00ad  ld   $ad
              28d4 002b  ld   $2b         ;04d1 STW
              28d5 0022  ld   $22         ;04d1 '_sysFn'
              28d6 00b4  ld   $b4         ;04d3 SYS
              28d7 00e2  ld   $e2
              28d8 0000  ld   $00         ;End of Reset.gcl, size 708
sys_ReadRomDir:
              28d9 f0df  beq  .sysDir#20
              28da 1024  ld   $24,x
              28db 1600  ld   ac,y
              28dc 0118  ld   [$18]
              28dd a00e  suba $0e
              28de e200  jmp  y,ac
.sysDir#20:   28df 1400  ld   $00,y
              28e0 00e4  ld   $e4
              28e1 1428  ld   $28,y
              28e2 e200  jmp  y,ac
              28e3 1400  ld   $00,y
.sysDir#25:   28e4 dc52  st   $52,[y,x++] ;'R'
              28e5 dc65  st   $65,[y,x++] ;'e'
              28e6 dc73  st   $73,[y,x++] ;'s'
              28e7 dc65  st   $65,[y,x++] ;'e'
              28e8 dc74  st   $74,[y,x++] ;'t'
              28e9 dc00  st   $00,[y,x++] ;'\x00'
              28ea dc00  st   $00,[y,x++] ;'\x00'
              28eb dc00  st   $00,[y,x++] ;'\x00'
              28ec 0015  ld   $15
              28ed c218  st   [$18]
              28ee 0026  ld   $26
              28ef 1428  ld   $28,y
              28f0 e0f2  jmp  y,$f2
              28f1 c219  st   [$19]
.sysDir#39:   28f2 1403  ld   $03,y
              28f3 e0cb  jmp  y,$cb
              28f4 00ea  ld   $ea
              28f5 0200  nop              ;6 fillers
              28f6 0200  nop
              28f7 0200  nop
              * 6 times
              28fb fe00  bra  ac          ;+-----------------------------------+
              28fc fcfd  bra  $28fd       ;|                                   |
              28fd 1404  ld   $04,y       ;| Trampoline for page $2800 lookups |
              28fe e068  jmp  y,$68       ;|                                   |
              28ff c218  st   [$18]       ;+-----------------------------------+
              2900
